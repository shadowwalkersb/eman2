{{{

usage: prog [options] <input_stack> <output_stack> <input #2> <output #2>

	This program will sort a stack of images based on some similarity criterion. Note that byptcl, iterative and reverse are mutually exclusive.

	It can handle file sequences rather than a single stack file as well, in a limited form. If you have files named var3d_000.mrc, var3d_001.mrc, ...
	you can specify input (and output) files as (for example) var3d_03d.mrc. The '3' indicates the number of digits in the value, the '0'
	means there should be leading zeroes in the name, and the 'd' means it is a decimal number.

	If specified input#2 and output#2 will be sorted in the same order as input_stack. Input #2 must have the same number of images as input_stack.

	Note that there is no low-memory option for this command, and all images in the sequence are read in, so make sure you have enough RAM.

}}}


||option||type||description||
||-h, --help|| ||show this help message and exit||
||--version|| ||show program's version number and exit||
||--simcmp||str||The name of a 'cmp' to be used in comparing the after optional alignment (default=optvariance:keepzero=1:matchfilt=1)||
||--simalign||str||The name of an 'aligner' to use prior to comparing the images (default=no alignment)||
||--simmask||str||A file containing a mask to apply prior to comparisons, to focus the sort on one particular region||
||--reverse|| ||Sort in order of least mutual similarity||
||--byptcl|| ||Sort in order of number of particles represented in each class-average. No alignment, shrinking, etc. is performed||
||--bykurtosis|| ||Sort by image Kurtosis. No alignment, shrinking, etc. is performed||
||--byheader||str||Uses the named header parameter to sort the images||
||--iterative|| ||Iterative approach for achieving a good 'consensus alignment' among the set of particles||
||--invar|| ||Sorting and alignment using invariants.||
||--useali|| ||Save aligned particles to the output file, note that if used with shrink= this will store the reduced aligned particles||
||--seqali|| ||Align each particle to the previous particle before saving with rotate_translate_tree. No flip in alignment. Aligns stack #2 instead if provided.||
||--seqalicen|| ||Align each particle to the previous particle before saving, with a postalignment recentering. No flip in alignment. Aligns stack #2 instead if provided.||
||--center|| ||After alignment, particles are centered via center of mass before comparison||
||--nsort||int||Number of output particles to generate (mainly for reverse mode)||
||--ninput||int||Number of input particles to read (first n in the file)||
||--shrink||int||Reduce the particles for comparisons||
||--ppid||int||Set the PID of the parent process, used for cross platform PPID||
||--verbose, -v||int||verbose level [0-9], higher number means higher level of verboseness||
