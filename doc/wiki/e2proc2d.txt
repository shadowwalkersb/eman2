||option||type||description||
||-h, --help|| ||show this help message and exit||
||-h, --help|| ||show this help message and exit||
||--version|| ||show program's version number and exit||
||--generate_doc|| ||Extract help strings of each command line argument and generate wiki table.||
||--apix||float||A/pixel for S scaling||
||--average|| ||Averages all input images (without alignment) and writes a single output image||
||--avgseq||int||Averages sets of N sequential frames. eg - if N=4 and the input contains 100 images, the output would be 25 images||
||--averager||str||If --average is specified, this is the averager to use (e2help.py averager). Default=mean||
||--calcsf||str||calculate a radial structure factor for the image and write it to the output file, must specify apix. divide into <n> angular bins||
||--calccont|| ||Compute the low resolution azimuthal contrast of each image and put it in the header as eval_contrast_lowres. Larger values imply more 'interesting' images.||
||--clip||str||Specify the output size in pixels xsize,ysize[,xcenter,ycenter], images can be made larger or smaller.||
||--exclude||str||Excludes image numbers, either a list of comma separated values, or a filename with one number per line, first image == 0||
||--fftavg||str||Incoherent Fourier average of all images and write a single power spectrum image||
||--process||str||apply a processor named 'processorname' with all its parameters/values.||
||--mult||float||Multiply image by a constant. mult=-1 to invert contrast.||
||--add||float||Adds a constant 'f' to the densities||
||--addfile||str||Adds the volume to another volume of identical size||
||--first||int||the first image in the input to process [0 - n-1])||
||--last||int||the last image in the input to process||
||--list||str||Works only on the image numbers in LIST file||
||--select||str||Works only on the images in named selection set from bdb:select||
||--randomn||int||Selects a random subset of N particles from the file to operate on.||
||--inplace|| ||Output overwrites input, USE SAME FILENAME, DO NOT 'clip' images.||
||--interlv||str||Specifies a 2nd input file. Output will be 2 files interleaved.||
||--extractboxes|| ||Extracts box locations from the image header to produce a set of .box files for only the particles in the .lst files||
||--meanshrink||float||Reduce an image size by an integral (1.5 also allowed) scaling factor using average. eg - 2 will reduce image size to 1/2. Clip is not required.||
||--medianshrink||int||Reduce an image size by an integral scaling factor, uses median filter. eg - 2 will reduce image size to 1/2. Clip is not required.||
||--fouriershrink||float||Reduce an image size by an arbitrary scaling factor by clipping in Fourier space. eg - 2 will reduce image size to 1/2.||
||--mraprep|| ||this is an experimental option||
||--compressbits||int||HDF only. Bits to keep for compression. -1 for no compression||
||--outmode||str||All EMAN2 programs write images with 4-byte floating point values when possible by default. This allows specifying an alternate format when supported (float, int8, int16, int32, uint8, uint16, uint32). Values are rescaled to fill MIN-MAX range.||
||--outnorescale|| ||If specified, floating point values will not be rescaled when writing data as integers. Values outside of range are truncated.||
||--mrc16bit|| ||(deprecated, use --outmode instead) output as 16 bit MRC file||
||--mrc8bit|| ||(deprecated, use --outmode instead) output as 8 bit MRC file||
||--fixintscaling||str||When writing to an 8 or 16 bit integer format the data must be scaled. 'noscale' will assume the pixel values are already correct, 'full' will insure the full range of values are included in the output, 'sane' will pick a good range, a number will set the range to mean+=sigma*number||
||--multfile||str||Multiplies the volume by another volume of identical size. This can be used to apply masks, etc.||
||--norefs|| ||Skip any input images which are marked as references (usually used with classes.*)||
||--outtype||str||output image format, 'mrc', 'imagic', 'hdf', etc. if specify spidersingle will output single 2D image rather than 2D stack.||
||--radon|| ||Do Radon transform||
||--randomize||str||Randomly rotate/translate the image. Specify: da,dxy,flip  da is a uniform distribution over +-da degrees, dxy is a uniform distribution on x/y, if flip is 1, random handedness changes will occur||
||--rotavg|| ||Compute the 1-D rotational average of each image as a final step before writing the output||
||--rotate||float||Rotate clockwise (in degrees)||
||--rfp|| ||this is an experimental option||
||--fp||int||This generates rotational/translational 'footprints' for each input particle, the number indicates which algorithm to use (0-6)||
||--scale||float||Scale by specified scaling factor. Clip must also be specified to change the dimensions of the output map.||
||--anisotropic||str||Anisotropic scaling, stretches on one axis and compresses the orthogonal axis. Specify amount,angle. See e2evalrefine||
||--selfcl||int||Output file will be a 180x180 self-common lines map for each image.||
||--setsfpairs|| ||Applies the radial structure factor of the 1st image to the 2nd, the 3rd to the 4th, etc||
||--split||int||Splits the input file into a set of n output files||
||--translate||str||Translate by x,y pixels||
||--headertransform||int||This will take the xform.align2d header value from each particle, and apply it. Pass 0 to perform the transform or 1 to perform the inverse.||
||--verbose, -v||int||verbose level [0-9], higher number means higher level of verboseness||
||--verbose, -v||int||verbose level [0-9], higher number means higher level of verboseness||
||--plane||str||Change the plane of image processing, useful for processing 3D mrcs as 2D images.||
||--writejunk|| ||Writes the image even if its sigma is 0.||
||--swap|| ||Swap the byte order||
||--threed2threed|| ||Process 3D image as a stack of 2D slices, then output as a 3D image||
||--threed2twod|| ||Process 3D image as a stack of 2D slices, then output as a 2D stack||
||--twod2threed|| ||Process a stack of 2D images, then output as a 3D image.||
||--unstacking|| ||Process a stack of 2D images, then output as a series of numbered single image files||
||--ppid||int||Set the PID of the parent process, used for cross platform PPID||
||--step||str||Specify <init>,<step>. Processes only a subset of the input data. For example, 0,2 would process only the even numbered particles||
||--eer2x|| ||Render EER file on 8k grid.||
||--eer4x|| ||Render EER file on 16k grid.||
||--parallel, -P||str||Run in parallel, specify type:n=<proc>:option:option||
||--parallel, -P||str||Run in parallel, specify type:n=<proc>:option:option||
