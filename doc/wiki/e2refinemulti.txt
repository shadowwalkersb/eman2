{{{

usage: prog [options]

	This is the multiple model single particle refinement program in EMAN2.1+. It replaces the earlier e2refinemulti, offering features similar to e2refine_easy.
Major features of this program:

 * While a range of command-line options still exist. You should not normally specify more than the basic requirements. The rest will be auto-selected for you.
 * Unlike e2refine_easy, this program doesn't compute gold_standard resolution curves, since it's already splitting the data into multiple groups. After it completes, the particles are split, easy_refine is run on the fractions.
 * An HTML report file will be generated as this program runs, telling you exactly what it decided to do and why, as well as giving information about runtime, etc while the job is still running.
 * If you specify only one starting model it will be randomly perturbed N times, and results may be different with each run, depending on the nature of the heterogeneity in the data.
 * Many of the 'advanced' options are hidden in the e2projectmanager.py GUI, because most users should not need to specify them.

To run this program, you would normally specify only the following options:
  --model=<starting map to seed refinement>
  --nmodels=<number of starting models to generate from model>
  --mapfragment          Optional. If specified will generate starting maps via segmentation and random exclusion
                         instead of phase randomization. This option may be appropriate for heterogenous assemblies.
  OR
  --models=<starting map 1>,<starting map 2>,...

  Required:
  --input=<lst file referencing phase-flipped particles in HDF format>

  --targetres=<in A>     Resolution to target in Angstroms in this refinement run. Do not be overoptimistic !
                         Generally begin with something conservative like 25, then use --startfrom and reduce
                         to ~12, only after that try for high (3-8 A). Data permitting, of course. Low resolution
                         attempts will run MUCH faster due to more efficient parameters.
  --speed=<1-7>          Default=5. Larger values will run faster, with a coarser angular step. Smaller values will
                         sample the angular step more finely than strictly required and increase sep=. Usually a
                         larger value here combined with a smaller value in the subsequent single-model refinements
                         will produce good results.
  --sym=<symmetry>       Symmetry to enforce during refinement (Cn, Dn, icos, oct, cub).
                         Default=c1 (no symmetry)
  --mass=<in kDa>        Putative mass of object in kDa, but as desired volume varies with resolution
                         actual number may vary by as much a ~2x from the true value. The goal is to
                         have a good isosurface in the final map with a threshold of 1.0.
  --parallel=<par spec>  While not strictly required, without this option the refinement will run on a single CPU
                         and you will likely wait a very long time. To use more than one core on a single computer,
                         just say thread:N (eg - thread:4). For other options, like MPI, see:
                         http://blake.bcm.edu/emanwiki/EMAN2/Parallel for details.
  --threads=<ncpu>       For some algorithms, processing in parallel over the network (MPI) works poorly.
                         Running on multiple processors on a single machine may still be worthwhile. If you specify this
                         option, in specific cases it will replace your specified --parallel option. Specify
                         the number of cores that can be used on a single machine.

  Optional:
  --apix=<A/pix>         The value will normally come from the particle data if present. You can override with this.
  --sep=<classes/ptcl>   each particle will be put into N classes. Improves contrast at cost of rotational blur.
  --classkeep=<frac>     fraction of particles to use in final average. Default 90%. Should be >50%
  --m3dkeep=<frac>       fraction of class-averages to use in 3-D map. Default=auto
  --classautomask        applies an automask when aligning particles for improved alignment
  --m3dpostprocess       <name>:<parm>=<value>:...  An arbitrary processor
                         (e2help.py processors -v2) to apply to the 3-D map after each
                         iteration. Default=none
  --path=<path>          Normally the new directory will be named automatically. If you prefer your own convention
                         you can override, but it may cause minor GUI problems if you break the standard naming
                         convention.

========================================================================
  There are numerous additional options based on the original e2refine.py command. These options are not available from
the graphical interface, as it is generally best to let e2refine_easy pick these values for you. Normally you should
not need to specify any of the following other than the ones already listed above:

}}}


||option||type||description||
||-h, --help|| ||show this help message and exit||
||--version|| ||show program's version number and exit||
||--model||str||The map to use as a starting point for refinement||
||--nmodels||int||The total number of different maps to generate. Specify with --model, but not with --models||
||--mapfragment|| ||Generate initial maps by randomly removing portions of the input map rather than by phase randomizing.||
||--randclassify|| ||Generate initial maps by randomly assigning the particles in each class to each model after the first iteration.||
||--randphase|| ||Generate initial maps by randomizing the phase of the given model.||
||--treeclassify|| ||Classify using a binary tree. This will call e2classifytree.py for particle classification, replacing e2simmx2stage.py and e2classify.py. This function is still experimental.||
||--models||str||The map to use as a starting point for refinement||
||--input||str||The name of the image file containing the particle data||
||--targetres||float||Target resolution in A of the final single-model refinements.||
||--speed||int||(1-7) Balances speed vs precision. Larger values sacrifice a bit of potential resolution for significant speed increases. Set to 1 when pushing resolution. default=5||
||--sym|| ||Specify symmetry - choices are: c<n>, d<n>, tet, oct, icos. You can specify either a single value or one for each model.||
||--breaksym|| ||If selected, reconstruction will be asymmetric with sym= specifying a known pseudosymmetry, not an imposed symmetry.||
||--iter||int||The total number of refinement iterations to perform. Default=auto||
||--mass||str||The ~mass of the particles in kilodaltons. May specify one number or one number for each map. Due to resolution effects, not always the true mass.||
||--sep||int||The number of classes each particle can contribute towards (normally 1). Increasing will improve SNR, but produce rotational blurring.||
||--classkeep||float||The fraction of particles to keep in each class, based on the similarity score. (default=0.9 -> 90%%)||
||--classautomask|| ||This will apply an automask to the class-average during iterative alignment for better accuracy. The final class averages are unmasked.||
||--prethreshold|| ||Applies a threshold to the volume just before generating projections. A sort of aggressive solvent flattening for the reference.||
||--m3dkeep||float||The fraction of slices to keep in e2make3d.py. Default=0.8 -> 80%%||
||--nosingle|| ||Normally the multi-model refinement will be followed by N single model refinements automatically. If this is set the job will finish after making the split data sets.||
||--m3dpostprocess||str||Default=none. An arbitrary post-processor to run after all other automatic processing. Maps are autofiltered, so a low-pass filter is not required here.||
||--parallel, -P||str||Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel||
||--threads||int||Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful||
||--path||str||The name of a directory where results are placed. Default = create new multi_xx||
||--verbose, -v||int||verbose level [0-9], higher number means higher level of verboseness||
||--automask3d||str||Default=auto. Specify as a processor, eg - mask.auto3d:threshold=1.1:radius=30:nshells=5:nshellsgauss=5.||
||--projector|| ||Default=standard. Projector to use with parameters.||
||--orientgen||str||Default=auto. Orientation generator for projections, eg - eman:delta=5.0:inc_mirror=0:perturb=1||
||--simalign||str||Default=auto. The name of an 'aligner' to use prior to comparing the images||
||--simaligncmp||str||Default=auto. Name of the aligner along with its construction arguments||
||--simralign||str||Default=auto. The name and parameters of the second stage aligner which refines the results of the first alignment||
||--simraligncmp||str||Default=auto. The name and parameters of the comparitor used by the second stage aligner.||
||--simcmp||str||Default=auto. The name of a 'cmp' to be used in comparing the aligned images||
||--simmask||str||Default=auto. A file containing a single 0/1 image to apply as a mask before comparison but after alignment||
||--shrink||int||Default=auto. Optionally shrink the input particles by an integer amount prior to computing similarity scores. For speed purposes. 0 -> no shrinking||
||--shrinks1||int||The level of shrinking to apply in the first stage of the two-stage classification process. Default=0 (autoselect)||
||--prefilt|| ||Default=auto. Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison. Applies both to classification and class-averaging.||
||--cmpdiff|| ||Used only in binary tree classification. Use a mask that focus on the difference of two children.||
||--treeincomplete||int||Used only in binary tree classification. Incompleteness of the tree on each level.Default=0||
||--classkeepsig|| ||Change the keep ('--keep') criterion from fraction-based to sigma-based.||
||--classiter||int||Default=auto. The number of iterations to perform.||
||--classalign||str||Default=auto. If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average.||
||--classaligncmp||str||Default=auto. This is the name and parameters of the comparitor used by the fist stage aligner.||
||--classralign||str||Default=auto. The second stage aligner which refines the results of the first alignment in class averaging.||
||--classraligncmp||str||Default=auto. The comparitor used by the second stage aligner in class averageing.||
||--classaverager||str||Default=auto. The averager used to generate the class averages. Default is 'mean'.||
||--classcmp||str||Default=auto. The name and parameters of the comparitor used to generate similarity scores, when class averaging.||
||--classnormproc||str||Default=auto. Normalization applied during class averaging||
||--classrefsf|| ||Default=True. Use the setsfref option in class averaging to produce better filtered averages.||
||--pad||int||Default=auto. To reduce Fourier artifacts, the model is typically padded by ~25 percent - only applies to Fourier reconstruction||
||--recon|| ||Default=auto. Reconstructor to use see e2help.py reconstructors -v||
||--m3dkeepsig|| ||Default=auto. The standard deviation alternative to the --m3dkeep argument||
||--m3dsetsf||str||Default=auto. Name of a file containing a structure factor to apply after refinement||
||--m3dpreprocess||str||Default=auto. Normalization processor applied before 3D reconstruction||
||--lowmem|| ||Default=auto. Make limited use of memory when possible - useful on lower end machines||
||--ppid||int||Set the PID of the parent process, used for cross platform PPID||
