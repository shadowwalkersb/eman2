{{{

usage: prog [options] <raw particle file> <class mx> <projections>

This program can use either a 3-D binary mask, or a pair of liganded/unliganded volumes to classify particle data into 2
(or 4) groups. e2refine.py must be run on the data first. The method using a pair of volumes is much more accurate in
separating particles.

This is part of a multi-step process for separating ligand bound from ligand free particles, but relies on sufficient
ligand/no-ligand contrast in individual images:
 1) refine the entire data set with e2refine.py, such that most classes have at least 10-20 particles in them
 2) construct a volume the same size as your reconstruction containing a binary mask, with 1 in the region where the ligand would be
2a) -or- prepare 2 volume files representing the particle with or without associated ligand
 3) run this program

<raw particle file> should be the same file used in the refinement
<class mx> is one of the classification matrix files from the refinement
<projections> contains the projections used for class mx

Typical usage:
e2classifyligand.py sets/myset_even.lst refine_01/classmx_04_even.hdf refine_01/projections_04_even.hdf --ref1 ref3d1.hdf --ref2 ref3d2.hdf --cmp=ccc --plotout=cmp.txt --pairmask --splitparticles -v 1

}}}


||option||type||description||
||-h, --help|| ||show this help message and exit||
||--version|| ||show program's version number and exit||
||--verbose, -v||int||verbose level [0-9], higher number means higher level of verboseness||
||--ref1||str||Rather than using a mask, ref1/ref2 permit using a pair of volumes for classification.||
||--ref2||str||Rather than using a mask, ref1/ref2 permit using a pair of volumes for classification.||
||--pairmask|| ||Will use the ref1/ref2 pair to generate a mask which is applied after subtracting ref1 from the particle||
||--alistacks||float||If sum of cmp results is less than the spefified value, will save the aligned particle to a per-class stack||
||--cmp||str||The name of a 'cmp' to be used when pairmask is not specified||
||--process||str||A processor to apply to the particle data before classifying||
||--plotout||str||Name of a text file for the classification plot.||
||--badgroup|| ||Split the data into 4 groups rather than 2. The extra two groups contain particles more likely to be bad.||
||--badqualsig||float||When identifying 'bad' particles, particles with similarities >mean+sigma*badqualsig will be considered bad. Default 0.5||
||--badsepsig||float||When identifying 'bad' particles, if s1/s2 are the similarities to reference 1/2, then those where |s1-s2| < sigma*badsepsig will be excluded. Default 0.25 ||
||--postfix||str||This string will be appended to each set name to help differentiate the results from multiple runs||
||--splitparticles|| ||Specify this to write new files containing the classified particles||
||--tstcls||int||Will generate tst.hdf containing test images for a specified class-number||
||--debug|| ||Enable debugging mode with verbose output and image display. Not suitable for real runs.||
||--ppid||int||Set the PID of the parent process, used for cross platform PPID||
