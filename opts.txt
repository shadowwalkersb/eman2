prog @ option @ default @ type @ help @ 
e2RCTboxer.py @ ['--boxsize'] @ -1 @ int @ Box size in pixels @ 
e2RCTboxer.py @ ['--write_boxes'] @ False @ None @ Write coordinate file (eman1 dbbox) files @ 
e2RCTboxer.py @ ['--write_ptcls'] @ False @ None @ Write particles to disk @ 
e2RCTboxer.py @ ['--format'] @ hdf @ None @ Format of the output particles images, should be hdf @ 
e2RCTboxer.py @ ['--shrink'] @ 0 @ int @ Shrink the images by an integer, uses math.meanshrink @ 
e2RCTboxer.py @ ['--norm'] @ normalize.edgemean @ str @ Normalization processor to apply to written particle images. Should be normalize, normalize.edgemean,etc.Specifc "None" to turn this off @ 
e2RCTboxer.py @ ['--invert'] @ False @ None @ If writing outputt inverts pixel intensities @ 
e2RCTboxer.py @ ['--suffix'] @ _ptcls @ str @ suffix which is appended to the names of output particle and coordinate files @ 
e2RCTboxer.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2RCTboxer.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2RCTboxer.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2a2d_align.py @ ['--threads'] @ 4 @ int @ Number of alignment threads to run in parallel on a single computer @ 
e2a2d_align.py @ ['--iter'] @ 0 @ int @ Iteration number within path. Default = start a new iteration @ 
e2a2d_align.py @ ['--saveali'] @ False @ None @ Save a stack file (aliptcls_XX.hdf) containing the aligned particles. @ 
e2a2d_align.py @ ['--path'] @ None @ str @ Path to a folder where results should be stored. Creates a new folder if none specified (default = m2d_XX) @ 
e2a2d_align.py @ ['--align'] @ rotate_translate_tree @ str @ This is the aligner used to align particles to the previous class average. Default is None. @ 
e2a2d_align.py @ ['--aligncmp'] @ ccc @ str @ The comparitor used for the --align aligner. Default is dot. @ 
e2a2d_align.py @ ['--ralign'] @ None @ str @ This is the second stage aligner used to refine the first alignment. This is usually the 'refine' aligner. @ 
e2a2d_align.py @ ['--raligncmp'] @ ccc @ str @ The comparitor used by the second stage aligner. @ 
e2a2d_align.py @ ['--cmp'] @ ccc @ str @ The comparitor used to generate quality scores for the purpose of particle exclusion in classes, strongly linked to the keep argument. @ 
e2a2d_align.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2a2d_align.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2a2d_align.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2a2d_average.py @ ['--saveali'] @ False @ None @ Save a stack file (aliptcls_XX.hdf) containing the aligned particles. @ 
e2a2d_average.py @ ['--path'] @ None @ str @ Path to a folder with existing e2a2d_align results (default = 2da_XX) @ 
e2a2d_average.py @ ['--iter'] @ 0 @ int @ Iteration number within path. Default = highest existing iteration @ 
e2a2d_average.py @ ['--scorebestset'] @ 0 @ int @ Will extract the N particles with the best scores to make a new set @ 
e2a2d_average.py @ ['--scorebands'] @ 0 @ int @ If specified will generate averages over N bands of 'score' values, including only particles in each band. @ 
e2a2d_average.py @ ['--scorebandsali'] @ 0 @ int @ If specified will generate averages over N bands of 'score' values, including only particles in each band, and iteratively realigning in each band. @ 
e2a2d_average.py @ ['--scoreprogressive'] @ 0 @ int @ If specified will generate progressive averages over N bands of 'score' values, including all particles starting with the best through the progressive bands. @ 
e2a2d_average.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2a2d_average.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2a2d_average.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2a2d_masks.py @ ['--path'] @ None @ str @ Path to a folder with existing e2a2d_align results (default = 2da_XX) @ 
e2a2d_masks.py @ ['--iter'] @ 0 @ int @ Iteration number within path. Default = highest existing iteration @ 
e2a2d_masks.py @ ['--extract'] @ False @ None @ If set, will also produce a .txt file for plotting with all of the per-particle statistics @ 
e2a2d_masks.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2a2d_masks.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2a2d_masks.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2a2d_stat.py @ ['--path'] @ None @ str @ Path to a folder containing current results (default = highest spt_XX) @ 
e2a2d_stat.py @ ['--iter'] @ 0 @ int @ Iteration number within path. Default = auto @ 
e2a2d_stat.py @ ['--bins'] @ 100 @ int @ Number of bins to use in the histogram @ 
e2a2d_stat.py @ ['--gui'] @ False @ None @ If set will open an interactive plot with the results @ 
e2a2d_stat.py @ ['--mode'] @ score @ str @ Which variable to histogram, score, coverage, alpha, tx, ty. default=score @ 
e2a2d_stat.py @ ['--cmp'] @ None @ str @ A comparitor used to generate new quality scores. Will add an additional column with --extract, otherwise replaces score for this run. @ 
e2a2d_stat.py @ ['--multicmp'] @ False @ None @ If set will apply a range of different comparators to the aligned particle data and generate a multicolumn text file @ 
e2a2d_stat.py @ ['--ref'] @ None @ str @ A reference image to be used in conjunction with --cmp and --multicmp @ 
e2a2d_stat.py @ ['--extract'] @ False @ None @ If set, will convert the .json file to a .txt file suitable for plotting. No histogramming is involved, this is a per-particle conversion @ 
e2a2d_stat.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2a2d_stat.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2a2d_stat.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2align2d.py @ ['--output'] @ None @ str @ The name of the output class stack @ 
e2align2d.py @ ['--ref'] @ None @ str @ Reference image to use for alignment. Required @ 
e2align2d.py @ ['--refn'] @ 0 @ int @ Number of the reference image in 'ref'. Default=0 @ 
e2align2d.py @ ['--align'] @ rotate_translate_flip @ str @ This is the aligner used to align particles to the previous class average. Default is None. @ 
e2align2d.py @ ['--aligncmp'] @ ccc @ str @ The comparitor used for the --align aligner. Default is dot. @ 
e2align2d.py @ ['--ralign'] @ None @ str @ This is the second stage aligner used to refine the first alignment. This is usually the 'refine' aligner. @ 
e2align2d.py @ ['--raligncmp'] @ ccc @ str @ The comparitor used by the second stage aligner. @ 
e2align2d.py @ ['--cmp'] @ None @ str @ The comparitor used to generate quality scores for the purpose of particle exclusion in classes, strongly linked to the keep argument. @ 
e2align2d.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2align2d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2align2d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2align3d.py @ ['--shrink'] @ 1 @ int @ Fractional amount to shrink the maps by, default=1 @ 
e2align3d.py @ ['--preprocess'] @ None @ str @ preprocess maps before alignment @ 
e2align3d.py @ ['--maskrad'] @ -1 @ int @ Mask the recon using a spherical Gaussian mask (-1 = None), default=-1.0 @ 
e2align3d.py @ ['--maskfoff'] @ 0.1 @ float @ Fall offf of the Gaussian mask, default=0.1 @ 
e2align3d.py @ ['--nsolns'] @ 1 @ int @ number of peaks in the global search to refine, default=1.0 @ 
e2align3d.py @ ['--famps'] @ 1 @ float @ fraction of Fourier amps to exclude from recons. 0 means that this option is not used, default=0.0 @ 
e2align3d.py @ ['--prec'] @ 0.01 @ float @ Precision to determine what solutions are the 'same' used only statistics output, default=0.01 @ 
e2align3d.py @ ['--cuda'] @ False @ None @ Use CUDA for the alignment step. @ 
e2align3d.py @ ['--delta'] @ 30.0 @ float @ step size for the orientation generator, default=30.0 @ 
e2align3d.py @ ['--dphi'] @ 30.0 @ float @ step size for the inplane angle phi, default=30.0 @ 
e2align3d.py @ ['--phi0'] @ 0.0 @ float @ lower bound for the inplane angle phi, default=0.0 @ 
e2align3d.py @ ['--phi1'] @ 359.0 @ float @ Upper bound for the inplane angle phi, default=359.0 @ 
e2align3d.py @ ['--search'] @ 10 @ int @ maximum extent of the translational search, default=10 @ 
e2align3d.py @ ['--sym'] @ c1 @ str @ model symmetry (using sym, if present, speeds thing up a lot), default='c1' @ 
e2align3d.py @ ['--cmp'] @ ccc @ str @ comparitor and params to use for the 3D refiner, default='ccc' @ 
e2align3d.py @ ['--dotrans'] @ 1 @ int @ Do translational search, default=1 @ 
e2align3d.py @ ['--ralign'] @ refine_3d:spin_coeff=1 @ str @ aligner to use for refine alignment, default='refine_3d:spin_coeff=1' @ 
e2align3d.py @ ['--rcmp'] @ ccc @ str @ comparitor and params to use for the 3D refiner, default='ccc' @ 
e2align3d.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2align3d.py @ ['--verbose', '-v'] @ 0 @ int @ Level of verboseness, default=0 @ 
e2align3d.py @ ['--verbose', '-v'] @ 0 @ int @ Level of verboseness, default=0 @ 
e2basis.py @ ['--normproj'] @ False @ None @ Normalize the projections resulting from 'project', such that the length of each vector is 1 @ 
e2basis.py @ ['--normcomponent'] @ False @ None @ Normalize the dot product for each component of the output vector. If the basis spans the input vector, then the projected vector length will be 1, otherwise it will be less than 1. @ 
e2basis.py @ ['--normalize'] @ normalize.unitlen @ str @ Normalize the input images using the named processor. Specify 'tomean' for mean-based scaling. Specify None to disable. @ 
e2basis.py @ ['--mask'] @ -2 @ int @ Mask radius @ 
e2basis.py @ ['--maskfile'] @ None @ str @ File containing a mask to apply to the particles before normalization @ 
e2basis.py @ ['--mean1'] @ False @ None @ Indicates that the first image in the basis set is actually the mean image, which should be subtracted prior to projection. Output from e2msa requires this flag. @ 
e2basis.py @ ['--recalcmean'] @ False @ None @ This will recompute the mean from the input set and subtract before projection. Useful if a different normalization is used than in the original basis file. @ 
e2basis.py @ ['--txtout'] @ False @ None @ Output will be a multicolumn text file suitable for plotting @ 
e2basis.py @ ['--oneout'] @ False @ None @ Output is a single 2-D image rather than a set of 1-D images @ 
e2basis.py @ ['--nbasis'] @ -1 @ int @ Will use the first n basis images from the input, excluding the mean if present @ 
e2basis.py @ ['--basislist'] @ None @ str @ List of basis vectors to use, comma delimited. @ 
e2basis.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2basis.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2basis.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2bdb.py @ ['--cleanup'] @ False @ None @ This option will clean up the database cache so files can safely be moved or accessed on another computer via NFS. @ 
e2bdb.py @ ['--force'] @ False @ None @ This will force an action that would normally fail due to failed checks. @ 
e2bdb.py @ ['--delete'] @ False @ None @ This will delete (or at least empty) the named database(s) @ 
e2bdb.py @ ['--all'] @ False @ None @ List per-particle info @ 
e2bdb.py @ ['--long'] @ False @ None @ Long listing @ 
e2bdb.py @ ['--short'] @ False @ None @ Dense listing of names only @ 
e2bdb.py @ ['--filt'] @ None @ str @ Only include dictionary names containing the specified string @ 
e2bdb.py @ ['--filtexclude'] @ None @ str @ Exclude dictionary names containing the specified string @ 
e2bdb.py @ ['--match'] @ None @ str @ Only include dictionaries matching the provided Python regular expression @ 
e2bdb.py @ ['--exclude'] @ None @ str @ The name of a database containing a list of exclusion keys @ 
e2bdb.py @ ['--dump'] @ False @ None @ List contents of an entire database, eg 'e2bdb.py -D refine_01#register @ 
e2bdb.py @ ['--smalldump'] @ False @ None @ Lists contents of an entire database, but only list 2 items per dictionary to better see headers @ 
e2bdb.py @ ['--extractplots'] @ False @ None @ If a database contains sets of plots, such as bdb:refine_xx#convergence.results, this will extract the plots as text files. @ 
e2bdb.py @ ['--check'] @ False @ None @ Check for self-consistency and errors in the structure of specified databases @ 
e2bdb.py @ ['--nocache'] @ False @ None @ Don't use the database cache for this operation @ 
e2bdb.py @ ['--merge'] @ False @ None @ This will merge the contents of BDB 2-N into BDB 1 (including BDB 1's contents) @ 
e2bdb.py @ ['--makevstack'] @ None @ str @ Creates a 'virtual' BDB stack with its own metadata, but the binary data taken from the (filtered) list of stacks @ 
e2bdb.py @ ['--appendvstack'] @ None @ str @ Appends to/creates a 'virtual' BDB stack with its own metadata, but the binary data taken from the (filtered) list of stacks @ 
e2bdb.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2bdb.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2bdb.py @ ['--list'] @ None @ str @ Specify the name of a file with a list of images to use in creation of virtual stacks. Please see source for details. @ 
e2bdb.py @ ['--exlist'] @ None @ str @ Specify the name of a file with a list of images to exclude in creation of virtual stacks. Please see source for details. @ 
e2bdb.py @ ['--restore'] @ None @ str @ Write changes in the derived virtual stack back to the original stack @ 
e2bdb.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2bdb.py @ ['--checkctf'] @ False @ None @ Verifies that all images in the file contain CTF information, and gives some basic statistics @ 
e2bdb.py @ ['--step'] @ 0,1 @ str @ Specify <init>,<step>[,<max>]. Processes only a subset of the input data. For example, 0,2 would process only the even numbered particles @ 
e2boxadjust.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2boxadjust.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2boxadjust.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2boxer.py @ ['--allmicrographs'] @ False @ None @ Add all images from micrographs folder @ 
e2boxer.py @ ['--unboxedonly'] @ False @ None @ Only include image files without existing box locations @ 
e2boxer.py @ ['--boxsize'] @ -1 @ int @ Box size in pixels @ 
e2boxer.py @ ['--ptclsize'] @ -1 @ int @ Longest axis of particle in pixels (diameter, not radius) @ 
e2boxer.py @ ['--compressbits'] @ 6 @ int @ Bits to keep when writing images with compression. 0->lossless floating point. Default 6 @ 
e2boxer.py @ ['--write_dbbox'] @ False @ None @ Export EMAN1 .box files @ 
e2boxer.py @ ['--write_ptcls'] @ False @ None @ Extract selected particles from micrographs and write to disk @ 
e2boxer.py @ ['--invert'] @ False @ None @ If specified, inverts input contrast. Particles MUST be white on a darker background. @ 
e2boxer.py @ ['--no_ctf'] @ False @ None @ Disable CTF determination @ 
e2boxer.py @ ['--suffix'] @  @ str @ Suffix of the micrographs used for particle picking (i.e. suffix=goodali will use micrographs end with __goodali.hdf). It is only useful when [allmicrographs] is True. @ 
e2boxer.py @ ['--apix'] @ -1 @ float @ Angstroms per pixel for all images @ 
e2boxer.py @ ['--voltage'] @ -1 @ float @ Microscope voltage in KV @ 
e2boxer.py @ ['--cs'] @ -1 @ float @ Microscope Cs (spherical aberation) @ 
e2boxer.py @ ['--ac'] @ 10 @ float @ Amplitude contrast (percentage, default=10) @ 
e2boxer.py @ ['--autopick'] @ None @ str @ Perform automatic particle picking. Provide mode and parameter string, eg - auto_local:threshold=5.5 @ 
e2boxer.py @ ['--gui'] @ False @ None @ Interactive GUI mode @ 
e2boxer.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2boxer.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2boxer.py @ ['--device'] @ cpu @ str @ For Convnet training only. Pick a device to use. chose from cpu, gpu, or gpuX (X=0,1,...) when multiple gpus are available. default is cpu @ 
e2boxer.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2boxer.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2boxer_old.py @ ['--boxsize'] @ -1 @ int @ Box size in pixels @ 
e2boxer_old.py @ ['--write_dbbox'] @ False @ None @ Write coordinate file (eman1 dbbox) files @ 
e2boxer_old.py @ ['--write_ptcls'] @ False @ None @ Write particles to disk @ 
e2boxer_old.py @ ['--exclude_edges'] @ False @ None @ Don't generate output for any particles extending outside the micrograph @ 
e2boxer_old.py @ ['--exclude_bad'] @ False @ None @ Don't generate output for any particles marked as exclude @ 
e2boxer_old.py @ ['--force'] @ False @ None @ Force overwrite @ 
e2boxer_old.py @ ['--format'] @ hdf @ None @ Format of the output particle images. For EMAN2 refinement must be HDF. @ 
e2boxer_old.py @ ['--norm'] @ normalize.edgemean @ str @ Normalization processor to apply to written particle images. Should be normalize, normalize.edgemean,etc.Specific "None" to turn this off @ 
e2boxer_old.py @ ['--invert'] @ False @ None @ If writing outputt inverts pixel intensities @ 
e2boxer_old.py @ ['--suffix'] @ _ptcls @ str @ suffix which is appended to the names of output particle and coordinate files @ 
e2boxer_old.py @ ['--dbls'] @ None @ str @ data base list storage, used by the workflow. You can ignore this argument. @ 
e2boxer_old.py @ ['--autoboxer'] @ None @ str @ A key of the swarm_boxers dict in the local directory, used by the workflow. @ 
e2boxer_old.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2boxer_old.py @ ['--gui'] @ True @ None @ Dummy option; used in older version of e2boxer @ 
e2boxer_old.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2boxer_old.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2boxer_old.py @ ['--gauss_autoboxer'] @ None @ str @ Name of autoboxed file whose autoboxing parameters (obtained via some previous run of Gauss autoboxer via the GUI) should be used for automatic boxing. @ 
e2boxer_old.py @ ['--do_ctf'] @ None @ str @ Name of file whose ctf estimation parameters (obtained via some previous run of Gauss autoboxer via the GUI) should be used for automatic ctf estimation. @ 
e2boxer_old.py @ ['--cter'] @ False @ None @ CTF estimation using cter @ 
e2boxer_old.py @ ['--indir'] @ . @ str @ Directory containing micrographs to be processed. @ 
e2boxer_old.py @ ['--nameroot'] @  @ str @ Prefix of micrographs to be processed. @ 
e2boxer_old.py @ ['--micsuffix'] @  @ str @ A string denoting micrograph type. For example 'mrc', 'hdf', 'ser' ... @ 
e2boxer_old.py @ ['--wn'] @ 256 @ int @ Size of window to use (should be slightly larger than particle box size) @ 
e2boxer_old.py @ ['--Cs'] @ 2.0 @ float @ Microscope Cs (spherical aberation) @ 
e2boxer_old.py @ ['--voltage'] @ 300.0 @ float @ Microscope voltage in KV @ 
e2boxer_old.py @ ['--ac'] @ 10.0 @ float @ Amplitude contrast (percentage, default=10) @ 
e2boxer_old.py @ ['--kboot'] @ 16 @ int @ kboot @ 
e2boxer_old.py @ ['--MPI'] @ False @ None @ use MPI version @ 
e2boxer_old.py @ ['--debug'] @ False @ None @ debug mode @ 
e2boxer_old.py @ ['--apix'] @ -1.0 @ float @ pixel size in Angstroms @ 
e2buildsets.py @ ['--setname'] @ all @ str @ Name of the stack to build @ 
e2buildsets.py @ ['--excludebad'] @ False @ None @ Exclude bad particles. @ 
e2buildsets.py @ ['--allparticles'] @ False @ None @ Will process all particle stacks stored in the particles subdirectory (if specified, list of files will be ignored) @ 
e2buildsets.py @ ['--withflipped'] @ False @ None @ Only include images with phase-flipped counterparts! @ 
e2buildsets.py @ ['--withinvar'] @ False @ None @ Only include images with _invar counterparts! @ 
e2buildsets.py @ ['--minptcl'] @ 0 @ int @ Files with fewer than the specified number of particles will be skipped @ 
e2buildsets.py @ ['--minqual'] @ 0 @ int @ Files with a quality value lower than specified will be skipped @ 
e2buildsets.py @ ['--mindf'] @ 0 @ float @ Files with a defocus lower than specified will be skipped @ 
e2buildsets.py @ ['--maxdf'] @ 20.0 @ float @ Files with a defocus higher than specified will be skipped @ 
e2buildsets.py @ ['--minlosnr'] @ 0 @ float @ Integrated SNR from 1/200-1/20 1/A must be larger than this @ 
e2buildsets.py @ ['--minhisnr'] @ 0 @ float @ Integrated SNR from 1/10-1/4 1/A must be larger than this @ 
e2buildsets.py @ ['--minbfactor'] @ 0.0 @ float @ Files with a B-factor lower than specified will be skipped @ 
e2buildsets.py @ ['--maxbfactor'] @ 5000.0 @ float @ Files with a B-factor higher than specified will be skipped @ 
e2buildsets.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2buildsets.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2buildsets.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2buildstacks.py @ ['--output'] @ None @ str @ Name of the output stack to build (Extension will be .hdf unless specified). Note, all tiltseries will be stored in the 'tiltseries' directory. @ 
e2buildstacks.py @ ['--tilts'] @ False @ None @ Write results to 'tiltseries' directory in current project. @ 
e2buildstacks.py @ ['--guess'] @ False @ None @ Guess how to split micrographs into tilt series and the order of images in each tilt series from file names. Tilt angles must be incuded in file names. May and may not work depending on the file name format... @ 
e2buildstacks.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2buildstacks.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2buildstacks.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classaverage.py @ ['--input'] @ None @ str @ The name of the input particle stack @ 
e2classaverage.py @ ['--output'] @ None @ str @ The name of the output class-average stack @ 
e2classaverage.py @ ['--oneclass'] @ None @ int @ Create only a single class-average. Specify the number. @ 
e2classaverage.py @ ['--classmx'] @ None @ str @ The name of the classification matrix specifying how particles in 'input' should be grouped. If omitted, all particles will be averaged. @ 
e2classaverage.py @ ['--focused'] @ None @ str @ Name of a reference projection file to read 1st iteration refine alignment references from. @ 
e2classaverage.py @ ['--ref'] @ None @ str @ Reference image(s). Used as an initial alignment reference and for final orientation adjustment if present. Also used to assign euler angles to the generated classes. This is typically the projections that were used for classification. @ 
e2classaverage.py @ ['--storebad'] @ False @ None @ Even if a class-average fails, write to the output. Forces 1->1 numbering in output @ 
e2classaverage.py @ ['--compressbits'] @ 10 @ int @ Bits to keep when writing class-averages with compression. 0->lossless floating point. Default 10 (3 significant figures) @ 
e2classaverage.py @ ['--decayedge'] @ False @ None @ Applies an edge decay to zero on the output class-averages. A very good idea if you plan on 3-D reconstruction. @ 
e2classaverage.py @ ['--resultmx'] @ None @ str @ Specify an output image to store the result matrix. This contains 5 images where row is particle number. Rows in the first image contain the class numbers and in the second image consist of 1s or 0s indicating whether or not the particle was included in the class. The corresponding rows in the third, fourth and fifth images are the refined x, y and angle (respectively) used in the final alignment, these are updated and accurate, even if the particle was excluded from the class. @ 
e2classaverage.py @ ['--iter'] @ 1 @ int @ The number of iterations to perform. Default is 1. @ 
e2classaverage.py @ ['--prefilt'] @ False @ None @ Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison @ 
e2classaverage.py @ ['--prectf'] @ False @ None @ Apply particle CTF to each reference before alignment @ 
e2classaverage.py @ ['--align'] @ None @ str @ This is the aligner used to align particles to the previous class average. Default is None. @ 
e2classaverage.py @ ['--aligncmp'] @ ccc @ str @ The comparitor used for the --align aligner. Default is ccc. @ 
e2classaverage.py @ ['--ralign'] @ None @ str @ This is the second stage aligner used to refine the first alignment. This is usually the 'refine' aligner. @ 
e2classaverage.py @ ['--raligncmp'] @ ccc @ str @ The comparitor used by the second stage aligner. @ 
e2classaverage.py @ ['--averager'] @ mean @ str @ The type of averager used to produce the class average. @ 
e2classaverage.py @ ['--setsfref'] @ False @ None @ This will impose the 1-D structure factor of the reference on the class-average (recommended when a reference is available) @ 
e2classaverage.py @ ['--cmp'] @ ccc @ str @ The comparitor used to generate quality scores for the purpose of particle exclusion in classes, strongly linked to the keep argument. @ 
e2classaverage.py @ ['--keep'] @ 1.0 @ float @ The fraction of particles to keep in each class. @ 
e2classaverage.py @ ['--keepsig'] @ False @ None @ Causes the keep argument to be interpreted in standard deviations. @ 
e2classaverage.py @ ['--automask'] @ False @ None @ Applies a 2-D automask before centering. Can help with negative stain data, and other cases where centering is poor. @ 
e2classaverage.py @ ['--center'] @ xform.center @ str @ If the default centering algorithm (xform.center) doesn't work well, you can specify one of the others here (e2help.py processor center), or the word 'nocenter' for no centering @ 
e2classaverage.py @ ['--bootstrap'] @ False @ None @ Ignored. Present for historical reasons only. @ 
e2classaverage.py @ ['--normproc'] @ normalize.edgemean @ str @ Normalization processor applied to particles before alignment. Default is normalize.edgemean. If you want to turn this option off specify 'None' @ 
e2classaverage.py @ ['--usefilt'] @ None @ None @ Specify a particle data file that has been low pass or Wiener filtered. Has a one to one correspondence with your particle data. If specified will be used to align particles to the running class average, however the original particle will be used to generate the actual final class average @ 
e2classaverage.py @ ['--idxcache'] @ False @ None @ Ignored. Present for historical reasons. @ 
e2classaverage.py @ ['--dbpath'] @ . @ None @ Ignored. Present for historical reasons. @ 
e2classaverage.py @ ['--resample'] @ False @ None @ If set, will perform bootstrap resampling on the particle data for use in making variance maps. @ 
e2classaverage.py @ ['--odd'] @ False @ None @ Used by EMAN2 when running eotests. Includes only odd numbered particles in class averages. @ 
e2classaverage.py @ ['--even'] @ False @ None @ Used by EMAN2 when running eotests. Includes only even numbered particles in class averages. @ 
e2classaverage.py @ ['--parallel'] @ None @ None @ parallelism argument @ 
e2classaverage.py @ ['--force'] @ False @ None @ Force overwrite the output file if it exists. @ 
e2classaverage.py @ ['--saveali'] @ False @ None @ Writes aligned particle images to aligned.hdf. Normally resultmx produces more useful information. This can be used for debugging. @ 
e2classaverage.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classaverage.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classaverage.py @ ['--debug'] @ False @ None @ Print debugging information while the program is running. Default is off. @ 
e2classaverage.py @ ['--nofilecheck'] @ False @ None @ Turns file checking off in the check functionality - used by e2refine.py. @ 
e2classaverage.py @ ['--check'] @ False @ None @ Performs a command line argument check only. @ 
e2classaverage.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2classesbyref.py @ ['--sep'] @ 1 @ int @ The number of classes a particle can contribute towards (default is 1) @ 
e2classesbyref.py @ ['--align'] @ rotate_translate_tree @ str @ specify an aligner to use after classification. Default rotate_translate_tree @ 
e2classesbyref.py @ ['--aligncmp'] @ ccc @ str @ Similarity metric for the aligner @ 
e2classesbyref.py @ ['--ralign'] @ None @ str @ specify a refine aligner to use after the coarse alignment @ 
e2classesbyref.py @ ['--raligncmp'] @ ccc @ str @ Similarity metric for the refine aligner @ 
e2classesbyref.py @ ['--cmp'] @ ccc @ str @ Default=auto. The name of a 'cmp' to be used in assessing the aligned images @ 
e2classesbyref.py @ ['--classmx'] @ None @ str @ Store results in a classmx_xx.hdf style file @ 
e2classesbyref.py @ ['--classinfo'] @ None @ str @ Store results in a classinfo_xx.json style file @ 
e2classesbyref.py @ ['--classes'] @ None @ str @ Generate class-averages directly. No bad particle exclusion or iteration. Specify filename. @ 
e2classesbyref.py @ ['--averager'] @ ctf.weight @ str @ Averager to use for class-averages @ 
e2classesbyref.py @ ['--invartype'] @ auto @ None @ Which type of invariants to generate: (bispec,harmonic) @ 
e2classesbyref.py @ ['--msamode'] @ None @ str @ Enable MSA based classification, default=disabled, typically 'pca', see e2msa.py --mode option for full list @ 
e2classesbyref.py @ ['--nbasisfp'] @ 12 @ int @ Only used in MSA mode. Number of MSA basis vectors to use when classifying particles, default=12 @ 
e2classesbyref.py @ ['--compressbits'] @ 10 @ int @ Bits to keep when writing class-averages with compression. 0->lossless floating point. Default 10 (3 significant figures) @ 
e2classesbyref.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on the local computer @ 
e2classesbyref.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classesbyref.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classesbyref.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2classextract.py @ ['--refinemulti'] @ False @ None @ Extracts particles based on the model_id header value in each class-average, normally produced by e2refinemulti @ 
e2classextract.py @ ['--classlist'] @ None @ str @ Filename of a text file containing a (comma or whitespace separated) list of class average numbers to operate on.  @ 
e2classextract.py @ ['--orientedparticles'] @ None @ str @ Filename of the set (.lst file) with the particles used for the --orientcls file @ 
e2classextract.py @ ['--orientcls'] @ None @ str @ Filename of a cls_result_xx or classmx_xx file.  @ 
e2classextract.py @ ['--orientclassn'] @ None @ str @ Specify a comma separated list of class numbers to extract in oriented particles mode. @ 
e2classextract.py @ ['--input_set'] @ None @ str @ Normally the set used to create the class-averages is used as input. Use this with another version of the same set of particles, for example '__ctf_flip_proc' instead of '__ctf_flip'  @ 
e2classextract.py @ ['--setname'] @ None @ str @ Name of the stack to build @ 
e2classextract.py @ ['--evenoddmerge'] @ False @ None @ with --orientedparticles, if cls_result_xx is specified, will include both _even and _odd particles in the output. @ 
e2classextract.py @ ['--excludebad'] @ False @ None @ Excludes the particles from the generated set(s). They are included by default. @ 
e2classextract.py @ ['--noderef'] @ False @ None @ If particle file was .lst, normally the output .lst will reference the original image file. With this option, the output will reference the .lst file instead, creating a lst pointing to another lst. @ 
e2classextract.py @ ['--sort'] @ False @ None @ If set, output .lst file will be sorted. The default is to leave the output grouped by class-average. If (and only if) sorted, duplicate entries will be removed. @ 
e2classextract.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2classextract.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classextract.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classify.py @ ['--sep'] @ 1 @ int @ The number of classes a particle can contribute towards (default is 1) @ 
e2classify.py @ ['--simvec'] @ False @ None @ Instead of using the class for the peak value, uses the pattern of similarities for each orientation for assignment. @ 
e2classify.py @ ['--force'] @ False @ None @ Force overwrite the output file if it exists @ 
e2classify.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classify.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classify.py @ ['--nofilecheck'] @ False @ None @ Turns file checking off in the check functionality - used by e2refine.py. @ 
e2classify.py @ ['--check'] @ False @ None @ Performs a command line argument check only. @ 
e2classify.py @ ['--noalign'] @ False @ None @ Ignore the alignments @ 
e2classify.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2classifycnn.py @ ['--gpuid'] @  @ str @ Specify the gpu to use @ 
e2classifykmeans.py @ ['--ncls'] @ -1 @ int @ Number of classes to generate @ 
e2classifykmeans.py @ ['--average'] @ False @ None @ Average the particles within each class @ 
e2classifykmeans.py @ ['--sigma'] @ False @ None @ with --average, this will also produce standard deviation images for each average @ 
e2classifykmeans.py @ ['--onein'] @ False @ None @ Read 1-d input images from a single 2-D image (oneout in e2basis.py, default out e2msa.py) @ 
e2classifykmeans.py @ ['--oneinali'] @ False @ None @ Read 1-d input images from a single 2-D image where the first 4 elements on each row are da,dx,dy,flip @ 
e2classifykmeans.py @ ['--normavg'] @ False @ None @ Normalize averages @ 
e2classifykmeans.py @ ['--clsmx'] @ None @ str @ Standard EMAN2 output suitable for use with e2classaverage, etc. @ 
e2classifykmeans.py @ ['--clsfiles'] @ False @ None @ Write EMAN 1 style cls files with members of each class @ 
e2classifykmeans.py @ ['--mininclass'] @ 2 @ int @ Try to eliminate classes with fewer than specified members. Default=2 @ 
e2classifykmeans.py @ ['--outlierclass'] @ False @ None @ If selected, classes with fewer than mininclass particles will move permanently to an outlier class (the last class) @ 
e2classifykmeans.py @ ['--original'] @ None @ str @ If the input stack was derived from another stack, you can provide the name of the original stack here @ 
e2classifykmeans.py @ ['--axes'] @ None @ str @ Works only for 1-D input images. Specify a range, eg 0-5 to indicate which components to use from each vector. Inclusive. default=all @ 
e2classifykmeans.py @ ['--exclude'] @ None @ str @ The named file should contain a set of integers, each representing an image from the input file to exclude. @ 
e2classifykmeans.py @ ['--minchange'] @ -1 @ int @ Minimum number of particles that change group before deicding to terminate. Default = len(data)/(#cls*25) @ 
e2classifykmeans.py @ ['--fastseed'] @ False @ None @ Will seed the k-means loop quickly, but may produce lest consistent results. @ 
e2classifykmeans.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2classifykmeans.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classifykmeans.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classifyligand.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classifyligand.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classifyligand.py @ ['--ref1'] @ None @ str @ Rather than using a mask, ref1/ref2 permit using a pair of volumes for classification. @ 
e2classifyligand.py @ ['--ref2'] @ None @ str @ Rather than using a mask, ref1/ref2 permit using a pair of volumes for classification. @ 
e2classifyligand.py @ ['--pairmask'] @ False @ None @ Will use the ref1/ref2 pair to generate a mask which is applied after subtracting ref1 from the particle @ 
e2classifyligand.py @ ['--alistacks'] @ -10000000000.0 @ float @ If sum of cmp results is less than the spefified value, will save the aligned particle to a per-class stack @ 
e2classifyligand.py @ ['--cmp'] @ ccc @ str @ The name of a 'cmp' to be used when pairmask is not specified @ 
e2classifyligand.py @ ['--process'] @ None @ str @ A processor to apply to the particle data before classifying @ 
e2classifyligand.py @ ['--plotout'] @ plot_ligand.txt @ str @ Name of a text file for the classification plot. @ 
e2classifyligand.py @ ['--badgroup'] @ False @ None @ Split the data into 4 groups rather than 2. The extra two groups contain particles more likely to be bad. @ 
e2classifyligand.py @ ['--badqualsig'] @ 0.5 @ float @ When identifying 'bad' particles, particles with similarities >mean+sigma*badqualsig will be considered bad. Default 0.5 @ 
e2classifyligand.py @ ['--badsepsig'] @ 0.25 @ float @ When identifying 'bad' particles, if s1/s2 are the similarities to reference 1/2, then those where |s1-s2| < sigma*badsepsig will be excluded. Default 0.25  @ 
e2classifyligand.py @ ['--postfix'] @  @ str @ This string will be appended to each set name to help differentiate the results from multiple runs @ 
e2classifyligand.py @ ['--splitparticles'] @ False @ None @ Specify this to write new files containing the classified particles @ 
e2classifyligand.py @ ['--tstcls'] @ -1 @ int @ Will generate tst.hdf containing test images for a specified class-number @ 
e2classifyligand.py @ ['--debug'] @ False @ None @ Enable debugging mode with verbose output and image display. Not suitable for real runs. @ 
e2classifyligand.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2classifytree.py @ ['--threads'] @ 12 @ int @  @ 
e2classifytree.py @ ['--nodes'] @ nodes.hdf @ str @  @ 
e2classifytree.py @ ['--output'] @ clsmx.hdf @ str @  @ 
e2classifytree.py @ ['--align'] @ None @ str @ The name of an 'aligner' to use prior to comparing the images @ 
e2classifytree.py @ ['--aligncmp'] @ dot @ str @ Name of the aligner along with its construction arguments @ 
e2classifytree.py @ ['--ralign'] @ None @ str @ The name and parameters of the second stage aligner which refines the results of the first alignment @ 
e2classifytree.py @ ['--raligncmp'] @ dot @ str @ The name and parameters of the comparitor used by the second stage aligner. Default is dot. @ 
e2classifytree.py @ ['--cmp'] @ dot:normalize=1 @ str @ The name of a 'cmp' to be used in comparing the aligned images @ 
e2classifytree.py @ ['--cmpdiff'] @ False @ None @ Compare using the difference of the two children @ 
e2classifytree.py @ ['--incomplete'] @ 0 @ int @ The degree of incomplete allowed in the tree on each level @ 
e2classifytree.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2classifytree.py @ ['--parallel'] @ None @ None @ parallelism argument @ 
e2classifytree.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classifytree.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classptcl.py @ ['--vstack'] @ False @ None @ Will output to a bdb virtual stack instead of copying the image data. Input images must have been BDB for this to work. @ 
e2classptcl.py @ ['--classes'] @ None @ str @ Comma separated list of class-numbers to extract particles for @ 
e2classptcl.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2classvsproj.py @ ['--ang'] @ 10.0 @ float @ Angle between projections if 3Dmap provided @ 
e2classvsproj.py @ ['--sym'] @ c1 @ None @ Set the symmetry; if no value is given then the model is assumed to have no symmetry. Choices are: i, c, d, tet, icos, or oct. @ 
e2classvsproj.py @ ['--align'] @ rotate_translate_flip @ str @ The name of an 'aligner' to use prior to comparing the images @ 
e2classvsproj.py @ ['--aligncmp'] @ ccc @ str @ Name of the aligner along with its construction arguments @ 
e2classvsproj.py @ ['--ralign'] @ refine @ str @ The name and parameters of the second stage aligner which refines the results of the first alignment @ 
e2classvsproj.py @ ['--raligncmp'] @ ccc @ str @ The name and parameters of the comparitor used by the second stage aligner. Default is ccc. @ 
e2classvsproj.py @ ['--cmp'] @ ccc @ str @ The name of a 'cmp' to be used in comparing the aligned images @ 
e2classvsproj.py @ ['--savesim'] @ None @ str @ Save all of the similarity results to a text file. (ptcl#,proj#,alt,az,sim) @ 
e2classvsproj.py @ ['--threads'] @ 4 @ int @ Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by this program at present. @ 
e2classvsproj.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2classvsproj.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2classvsproj.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2cmmtomrc.py @ ['--apix'] @ 1.0 @ float @ A/voxel @ 
e2cmmtomrc.py @ ['--res'] @ 2.8 @ float @ Resolution in A, equivalent to Gaussian lowpass with 1/e width at 1/res @ 
e2cmmtomrc.py @ ['--box'] @ 0 @ int @ Box size in pixels @ 
e2cmmtomrc.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2cmpxplor.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2compress.py @ ['--bits'] @ 10 @ int @ Bits to retain in the output file, 0 or 2-16. 0 is lossless floating point compression. <0 will store completely uncompressed @ 
e2compress.py @ ['--compresslevel'] @ None @ int @ Compression level to use when writing. No impact on image quality, but large impact on speed. Default = 1 @ 
e2compress.py @ ['--nooutliers'] @ False @ None @ will set --range to eliminate a few of the most extreme values from both ends of the histogram @ 
e2compress.py @ ['--range'] @ None @ str @ Specify <minval>,<maxval> representing the largest and smallest values to be saved in the output file. Automatic if unspecified. @ 
e2compress.py @ ['--sigrange'] @ None @ str @ Specify <minsig>,<maxsig>, eg- 4,4 Number of standard deviations below and above the mean to retain in the output. Default is not to truncate. 4-5 is usually safe. @ 
e2compress.py @ ['--outpath'] @ None @ str @ Specify a destination folder for the compressed files. This will avoid overwriting existing files. @ 
e2compress.py @ ['--threads'] @ 1 @ int @ Compression requires significant CPU, this can significantly improve speed @ 
e2compress.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2compress.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2compress.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2ctf.py @ ['--allparticles'] @ False @ None @ Will process all particle stacks stored in the particles subdirectory (no list of files required) @ 
e2ctf.py @ ['--onlynew'] @ False @ None @ Will skip any files for which __ctf_flip files already exist. @ 
e2ctf.py @ ['--onlynoinvar'] @ False @ None @ Will skip any files for which __ctf_flip_invar files already exist. @ 
e2ctf.py @ ['--sortdefocus'] @ False @ None @ Sorts the micrographs in order by defocus @ 
e2ctf.py @ ['--minptcl'] @ 0 @ int @ Files with fewer than the specified number of particles will be skipped @ 
e2ctf.py @ ['--minqual'] @ 0 @ int @ Files with a quality value lower than specified will be skipped @ 
e2ctf.py @ ['--chunk'] @ None @ str @ <chunksize>,<nchunk>. Will process files in groups of chunksize, and process the <nchunk>th group. eg - 100,3 will read files 300-399  @ 
e2ctf.py @ ['--gui'] @ False @ None @ Start the GUI for interactive fitting @ 
e2ctf.py @ ['--autofit'] @ False @ None @ Runs automated CTF fitting on the input images @ 
e2ctf.py @ ['--wholeimage'] @ False @ None @ Display an additional curve using the whole micrograph, not just particles. @ 
e2ctf.py @ ['--highdensity'] @ False @ None @ If particles are very close together, this will interfere with SSNR estimation. If set uses an alternative strategy, but may over-estimate SSNR. @ 
e2ctf.py @ ['--zerook'] @ False @ None @ Normally particles with zero value on the edge are considered to be bad. This overrides that behavior, primarily for simulated data. @ 
e2ctf.py @ ['--astigmatism'] @ False @ None @ Includes astigmatism in automatic fitting @ 
e2ctf.py @ ['--phaseplate'] @ False @ None @ Include phase/amplitude contrast in CTF estimation. For use with hole-less phase plates. @ 
e2ctf.py @ ['--curdefocushint'] @ False @ None @ Rather than doing the defocus from scratch, use existing values in the project as a starting point @ 
e2ctf.py @ ['--curdefocusfix'] @ False @ None @ Fixes the defocus at the current determined value (if any) (+-.001 um), but recomputes SSNR, etc. @ 
e2ctf.py @ ['--useframedf'] @ False @ None @ Use defocus/astig from whole frame even if particle-based value is present @ 
e2ctf.py @ ['--bgmask'] @ 0 @ int @ Background is computed using a soft mask of the center/edge of each particle with the specified radius. Default radius is boxsize/2.6. @ 
e2ctf.py @ ['--fixnegbg'] @ False @ None @ Will perform a final background correction to avoid slight negative values near zeroes @ 
e2ctf.py @ ['--computesf'] @ False @ None @ Will determine the structure factor*envelope for the aggregate set of images @ 
e2ctf.py @ ['--apix'] @ 0 @ float @ Angstroms per pixel for all images @ 
e2ctf.py @ ['--voltage'] @ 0 @ float @ Microscope voltage in KV @ 
e2ctf.py @ ['--cs'] @ 0 @ float @ Microscope Cs (spherical aberation) @ 
e2ctf.py @ ['--ac'] @ 10 @ float @ Amplitude contrast (percentage, default=10) @ 
e2ctf.py @ ['--defocusmin'] @ 0.6 @ float @ Minimum autofit defocus @ 
e2ctf.py @ ['--defocusmax'] @ 4 @ float @ Maximum autofit defocus @ 
e2ctf.py @ ['--constbfactor'] @ -1.0 @ float @ Set B-factor to fixed specified value, negative value autofits @ 
e2ctf.py @ ['--autohp'] @ False @ None @ Automatic high pass filter of the SNR only to remove initial sharp peak, phase-flipped data is not directly affected (default false) @ 
e2ctf.py @ ['--invert'] @ False @ None @ Invert the contrast of the particles in output files (default false) @ 
e2ctf.py @ ['--nonorm'] @ False @ None @ Suppress per image real-space normalization @ 
e2ctf.py @ ['--nosmooth'] @ False @ None @ Disable smoothing of the background (running-average of the log with adjustment at the zeroes of the CTF) @ 
e2ctf.py @ ['--refinebysnr'] @ False @ None @ Refines the defocus value by looking at the high resolution smoothed SNR. Requires good starting defocus. Important: also replaces the SNR with a smoothed version. @ 
e2ctf.py @ ['--phaseflip'] @ False @ None @ Perform phase flipping after CTF determination and writes to specified file. @ 
e2ctf.py @ ['--phasefliphp'] @ False @ None @ Perform phase flipping with auto-high pass filter (deprecated) @ 
e2ctf.py @ ['--extrapad'] @ False @ None @ If particles were boxed more tightly than EMAN requires, this will add some extra padding, but only to processed output particles @ 
e2ctf.py @ ['--phaseflipsmall'] @ False @ None @ Produce an output set with 1/2 size particles for faster initial model work (deprecated) @ 
e2ctf.py @ ['--wiener'] @ False @ None @ Wiener filter (optionally phaseflipped) particles. @ 
e2ctf.py @ ['--snrfilt'] @ False @ None @ Apply SNR filter as part of phase flipping. @ 
e2ctf.py @ ['--proctag'] @ proc @ None @ Tag added to the name of each particle when using the phaseflipproc options @ 
e2ctf.py @ ['--phaseflipproc'] @ None @ None @ If specified _proc particles will be generated. Typical = filter.lowpass.gauss:cutoff_freq=.07 @ 
e2ctf.py @ ['--phaseflipproc2'] @ None @ None @ If specified _proc particles will be generated. Typical = filter.highpass.gauss:cutoff_freq=.005 @ 
e2ctf.py @ ['--phaseflipproc3'] @ None @ None @ If specified _proc particles will be generated. Typical = math.meanshrink:n=2 @ 
e2ctf.py @ ['--phaseflipproc4'] @ None @ None @ If specified _proc particles will be generated. @ 
e2ctf.py @ ['--phaseflipproc5'] @ None @ None @ If specified _proc particles will be generated. @ 
e2ctf.py @ ['--compressbits'] @ 6 @ int @ Bits to keep when writing images with compression. 0->lossless floating point. Default 6 @ 
e2ctf.py @ ['--storeparm'] @ False @ None @ Output files will include CTF info. CTF parameters are used from the database, rather than values that may be present in the input image header. Critical to use this when generating output ! @ 
e2ctf.py @ ['--oversamp'] @ 1 @ int @ Oversampling factor @ 
e2ctf.py @ ['--classify'] @ 0 @ int @ Highly experimental ! Subclassify particles (hopefully by defocus) into n groups. @ 
e2ctf.py @ ['--sf'] @ auto @ str @ The name of a file containing a structure factor curve. Specify 'none' to use the built in generic structure factor. Default=auto @ 
e2ctf.py @ ['--parallel'] @ None @ None @ parallelism argument. This program supports only thread:<n> @ 
e2ctf.py @ ['--threads'] @ 1 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2ctf2eman1.py @ ['--first'] @ -1 @ int @ First image to include in the plot. @ 
e2ctf2eman1.py @ ['--last'] @ -1 @ int @ Last image to include in the plot. @ 
e2ctf2eman1.py @ ['--sf'] @ NULL @ str @ The name of a file containing a structure factor curve. @ 
e2ctf2eman1.py @ ['--noisemin'] @ -1.0 @ float @ Minimum resolution to examine for determining the noise parameters. @ 
e2ctf2eman1.py @ ['--noisemax'] @ -1.0 @ float @ Maximum resolution to examine for determining the noise parameters. @ 
e2ctf2eman1.py @ ['--ac'] @ 10.0 @ float @ Set amplitude contrast (percentage, default=10). @ 
e2ctf2eman1.py @ ['--bf'] @ 0.0 @ float @ Set constant B-factor (as defined in EMAN1) for all images. @ 
e2ctf2eman1.py @ ['--df'] @ False @ None @ Calculate defocus from entire CCD frame. @ 
e2ctf2eman1.py @ ['--dfmin'] @ 0.5 @ float @ Set minimum possible defocus value (positive is underfocus). @ 
e2ctf2eman1.py @ ['--dfmax'] @ 5.0 @ float @ Set maximum possible defocus value (positive is underfocus). @ 
e2ctf2eman1.py @ ['--dfval'] @ 0.0 @ float @ Set constant defocus for all images (positive is underfocus). @ 
e2ctf2eman1.py @ ['--ctfcoverage'] @ False @ None @ Create a map showing the integrated SNR for the combined data. @ 
e2ctf2eman1.py @ ['--debug'] @ False @ None @ Show debugging messages. @ 
e2ctf2eman1.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2ctf_auto.py @ ['--hires'] @ False @ None @ Perform CTF processing for projects targeting 2-6 A resolution @ 
e2ctf_auto.py @ ['--midres'] @ False @ None @ Perform CTF processing for projects targeting 7-15 A resolution @ 
e2ctf_auto.py @ ['--lores'] @ False @ None @ Perform CTF processing for projects targeting 15-30 A resolution @ 
e2ctf_auto.py @ ['--apix'] @ 0 @ float @ Angstroms per pixel for all images @ 
e2ctf_auto.py @ ['--voltage'] @ 0 @ float @ Microscope voltage in KV @ 
e2ctf_auto.py @ ['--cs'] @ 0 @ float @ Microscope Cs (spherical aberation) @ 
e2ctf_auto.py @ ['--fromscratch'] @ False @ None @ Force refitting of CTF from scratch, ignoring any previous fits. @ 
e2ctf_auto.py @ ['--curdefocusfix'] @ False @ None @ Recomputes everything, but maintains the current particle-based defocus/astigmatism, including any manual adjustments @ 
e2ctf_auto.py @ ['--astigmatism'] @ False @ None @ Includes astigmatism in automatic fitting (use e2rawdata first) @ 
e2ctf_auto.py @ ['--phaseplate'] @ False @ None @ Include phase/amplitude contrast in CTF estimation. For use with hole-less phase plates. @ 
e2ctf_auto.py @ ['--extrapad'] @ False @ None @ If particles were boxed more tightly than EMAN requires, this will add some extra padding @ 
e2ctf_auto.py @ ['--invartype'] @ auto @ None @ Which type of invariants to generate: (bispec,harmonic) @ 
e2ctf_auto.py @ ['--snrfilt'] @ False @ None @ Apply a SNR filter to phase flipped output images @ 
e2ctf_auto.py @ ['--missingonly'] @ False @ None @ Operates only on images with missing __ctf_flip_invar files, for cases where a previous run failed before completion @ 
e2ctf_auto.py @ ['--highdensity'] @ False @ None @ If particles are very close together, this will interfere with SSNR estimation. If set uses an alternative strategy, but may over-estimate SSNR. @ 
e2ctf_auto.py @ ['--invert'] @ False @ None @ Invert the contrast of the particles in output files (default false) @ 
e2ctf_auto.py @ ['--outputonly'] @ False @ None @ Skips all of the initial steps, and just generates the final output, assuming previous steps completed successfully @ 
e2ctf_auto.py @ ['--defocusmin'] @ 0.6 @ float @ Minimum defocus in autofitting @ 
e2ctf_auto.py @ ['--defocusmax'] @ 4 @ float @ Maximum defocus in autofitting @ 
e2ctf_auto.py @ ['--constbfactor'] @ -1.0 @ float @ Set B-factor to fixed specified value, negative value autofits @ 
e2ctf_auto.py @ ['--ac'] @ 10 @ float @ Amplitude contrast (percentage, default 10) @ 
e2ctf_auto.py @ ['--threads'] @ 1 @ int @ Number of threads to run in parallel on the local computer @ 
e2ctf_auto.py @ ['--minqual'] @ 0 @ int @ Files with a quality value lower than specified will be skipped @ 
e2ctf_auto.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2ctf_auto.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ctf_auto.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ctffind3util.py @ ['--apix'] @ 0.0 @ float @ The angstrom per pixel of the micrographs @ 
e2ctffind3util.py @ ['--cs'] @ 0.0 @ float @ The spherical aberration of the microscope @ 
e2ctffind3util.py @ ['--voltage'] @ 0.0 @ float @ The voltage (in kV) of the microscope @ 
e2ctffind3util.py @ ['--ac'] @ 0.0 @ float @ The amplitude contrast of the micrographs @ 
e2ctffind3util.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ctffind3util.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ctffind3util.py @ ['--importrelionstar'] @ False @ None @ Import CTFFIND3 data in Relion STAR format. Put STAR files in 'ctffind3' folder @ 
e2ctffind3util.py @ ['--importctffind3'] @ False @ None @ Import ctffind3 data? @ 
e2ctffind3util.py @ ['--importctffind4'] @ False @ None @ Import ctffind4 data? @ 
e2ctffind3util.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2ctffind3util.py @ ['--allmicrographs'] @ False @ None @ Run Ctffind3 on all micrographs in the micrographs directory? @ 
e2ctffind3util.py @ ['--maxres'] @ 0.0 @ float @ The highest resolution to be fitted (Angstroms) @ 
e2ctffind3util.py @ ['--minres'] @ 0.0 @ float @ The lowest resolution to be fitted (Angstroms) @ 
e2ctffind3util.py @ ['--defocusmin'] @ 0.0 @ float @ The starting defocus value for grid search (microns) @ 
e2ctffind3util.py @ ['--defocusmax'] @ 0.0 @ float @ The end defocus value for grid search (microns) @ 
e2ctffind3util.py @ ['--defocusstep'] @ 0.0 @ float @ The step width for grid search (microns) @ 
e2ctffind3util.py @ ['--runctffind3'] @ False @ None @ Run ctffind3 on the selected micrographs? @ 
e2ctffind3util.py @ ['--runctffind4'] @ False @ None @ Run ctffind4 on the selected micrographs? @ 
e2ctffind3util.py @ ['--windowsize'] @ 0 @ int @ The amplitude contrast of the micrographs @ 
e2ctfsim.py @ ['--apix'] @ 1.0 @ float @ Angstroms per pixel for all images @ 
e2ctfsim.py @ ['--voltage'] @ 300.0 @ float @ Microscope voltage in KV @ 
e2ctfsim.py @ ['--cs'] @ 4.1 @ float @ Microscope Cs (spherical aberation) @ 
e2ctfsim.py @ ['--ac'] @ 10 @ float @ Amplitude contrast (percentage, default=10) @ 
e2ctfsim.py @ ['--samples'] @ 256 @ int @ Number of samples in the plotted curve @ 
e2ctfsim.py @ ['--apply'] @ None @ str @ A 2-D image file which the CTF will be applied to in real-time @ 
e2ctfsim.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ctfsim.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ddd_external.py @ ['--program'] @ imod_alignframes @ str @ Use this external program to align frames. Choose between imod_alignframes and ucsf_motioncor2. Note, programs must be accessible from your PATH environment variable. @ 
e2ddd_external.py @ ['--device'] @ gpu @ str @ When possible, use this device to process movie frames. Default is gpu. @ 
e2ddd_external.py @ ['--mdoc'] @ None @ str @ When an mdoc or idoc is provided, the raw files are automatically found within the input directory @ 
e2ddd_external.py @ ['--apix'] @ -1 @ float @ Specify the Apix of the movies to be processed. @ 
e2ddd_external.py @ ['--dark'] @ None @ str @ Use this dark reference. @ 
e2ddd_external.py @ ['--gain'] @ None @ str @ Use this gain reference. @ 
e2ddd_external.py @ ['--defect_file'] @ None @ str @ Specify the camera defects file. @ 
e2ddd_external.py @ ['--mc2_rotgain'] @ 0 @ int @ Rotates the gain 90 degress counter clockwise X times. Rotation is applied before flipping. @ 
e2ddd_external.py @ ['--mc2_flipgain'] @ 0 @ int @ A value of 1 flips gain image vertically, 2 flips gain image horizontally. Default is 0. @ 
e2ddd_external.py @ ['--imod_rotflipgain'] @ 0 @ int @ Rotates the gain 90 degress counter clockwise X times. If value is greater than 3, gain image is flipped about the y axis before rotation. @ 
e2ddd_external.py @ ['--device_num'] @ 0 @ str @ When possible, use this device to process movie frames. Default is GPU. @ 
e2ddd_external.py @ ['--binby'] @ None @ int @ The degree of binning for final image. Default is 1, i.e. no binning. Note that this option takes only integer values. @ 
e2ddd_external.py @ ['--groupby'] @ None @ int @ Before alignment, sum raw frames in groups of X to increase signal to noise ratio. @ 
e2ddd_external.py @ ['--first'] @ None @ int @ The index of the leading frame to include in alignment. @ 
e2ddd_external.py @ ['--last'] @ None @ int @ The index of the last frame to include in alignment. @ 
e2ddd_external.py @ ['--mc2_patchX'] @ None @ int @ Use this many patches along X with MotionCor2. Default is 1, i.e. whole-frame alignment. @ 
e2ddd_external.py @ ['--mc2_patchY'] @ None @ int @ Use this many patches along Y with MotionCor2. Default is 1, i.e. whole-frame alignment. @ 
e2ddd_external.py @ ['--tomo'] @ False @ None @ If checked, aligned frames will be placed in a tiltseries located in the 'tiltseries' directory. Otherwise, aligned sums will populate the 'micrographs_mrc' directory. @ 
e2ddd_external.py @ ['--tiltseries_name'] @  @ str @ Specify the name of the output tiltseries. A .mrc extension will be appended to the filename provided. @ 
e2ddd_external.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2ddd_external.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2ddd_external.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2ddd_movie.py @ ['--tiltseries_name'] @  @ None @ Specify a name for the tilt series to be generated from the input movies. @ 
e2ddd_movie.py @ ['--tomo'] @ False @ None @ Process input movies as tilts from a tomogram. @ 
e2ddd_movie.py @ ['--dark'] @  @ str @ Perform dark image correction using the specified image file @ 
e2ddd_movie.py @ ['--gain'] @  @ str @ Perform gain image correction using the specified image file @ 
e2ddd_movie.py @ ['--ref_label'] @  @ str @ Optional: Specify a label for the averaged dark and gain references when using multiple, individual frames. A labeled will be written as movierefs/dark_<label>.hdf and movierefs/gain_<label>.hdf. Note: This option is ignored when using a single reference image/stack. @ 
e2ddd_movie.py @ ['--rotate_dark'] @ 0 @ str @ Rotate dark reference by 0, 90, 180, or 270 degrees. Default is 0. Transformation order is rotate then reverse. @ 
e2ddd_movie.py @ ['--reverse_dark'] @ False @ None @ Flip dark reference along y axis. Default is False. Transformation order is rotate then reverse. @ 
e2ddd_movie.py @ ['--k2'] @ False @ None @ Perform gain image correction on gain images from a Gatan K2. Note, these are the reciprocal of typical DDD gain images. @ 
e2ddd_movie.py @ ['--de64'] @ False @ None @ Perform gain image correction on DE64 data. Note, these should not be normalized. @ 
e2ddd_movie.py @ ['--rotate_gain'] @ 0 @ str @ Rotate gain reference by 0, 90, 180, or 270 degrees. Default is 0. Transformation order is rotate then reverse. @ 
e2ddd_movie.py @ ['--reverse_gain'] @ False @ None @ Flip gain reference along y axis (about x axis). Default is False. Transformation order is rotate then reverse. @ 
e2ddd_movie.py @ ['--gain_darkcorrected'] @ False @ None @ Do not dark correct gain image. False by default. @ 
e2ddd_movie.py @ ['--invert_gain'] @ False @ None @ Use reciprocal of input gain image @ 
e2ddd_movie.py @ ['--bad_columns'] @  @ str @ Comma separated list of camera defect columns @ 
e2ddd_movie.py @ ['--bad_rows'] @  @ str @ Comma separated list of camera defect rows @ 
e2ddd_movie.py @ ['--align_frames'] @ False @ None @ Perform whole-frame alignment of the input stacks @ 
e2ddd_movie.py @ ['--realign'] @ False @ None @ Align frames using previous alignment parameters. @ 
e2ddd_movie.py @ ['--round'] @ float @ None @ If float (default), apply subpixel frame shifts. If integer, use integer shifts. @ 
e2ddd_movie.py @ ['--noali'] @ False @ None @ Average of non-aligned frames. @ 
e2ddd_movie.py @ ['--allali'] @ False @ None @ Average of all aligned frames. @ 
e2ddd_movie.py @ ['--rangeali'] @  @ str @ Average frames 'n1-n2' @ 
e2ddd_movie.py @ ['--goodali'] @ False @ None @ Average of good aligned frames. @ 
e2ddd_movie.py @ ['--bestali'] @ False @ None @ Average of best aligned frames. @ 
e2ddd_movie.py @ ['--groupby'] @ 1 @ int @ Combine every N frames using a moving window approach. @ 
e2ddd_movie.py @ ['--optbox'] @ 512 @ int @ Box size to use during alignment optimization. Default is 512. @ 
e2ddd_movie.py @ ['--optstep'] @ 448 @ int @ Step size to use during alignment optimization. Default is 448. @ 
e2ddd_movie.py @ ['--optalpha'] @ 0.1 @ float @ Penalization to apply during robust regression. Default is 0.1. If 0.0, unpenalized least squares will be performed (i.e., no trajectory smoothing). @ 
e2ddd_movie.py @ ['--optccf'] @ robust @ str @ Use this approach to determine relative frame translations. Note: 'robust' utilizes a bimodal Gaussian to robustly determine CCF peaks between pairs of frames in the presence of a fixed background. @ 
e2ddd_movie.py @ ['--step'] @ 0,1 @ str @ Specify <first>,<step>,[last]. Processes only a subset of the input data. ie- 0,2 would process all even particles. Same step used for all input files. [last] is exclusive. Default= 0,1 @ 
e2ddd_movie.py @ ['--frames'] @ False @ None @ Write corrected stack of frames. @ 
e2ddd_movie.py @ ['--ext'] @ hdf @ str @ Save frames with this extension. Default is 'hdf'. @ 
e2ddd_movie.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel. The default is 4, and our alignment routine requires 2+ threads. Using more threads will result in faster processing times. @ 
e2ddd_movie.py @ ['--verbose', '-v'] @ 4 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ddd_movie.py @ ['--verbose', '-v'] @ 4 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ddd_movie.py @ ['--debug'] @ False @ None @ run with debugging output @ 
e2ddd_movie.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2ddd_movie.py @ ['--fixbadpixels'] @ False @ None @ Tries to identify bad pixels in the dark/gain reference, and fills images in with sane values instead @ 
e2ddd_movie.py @ ['--suffix'] @ proc @ str @ Specify a unique suffix for output frames. Default is 'proc'. Note that the output of --frames will be overwritten if identical suffix is already present. @ 
e2ddd_movie.py @ ['--phaseplate'] @ False @ None @ Use this flag when aligning phase plate frames. @ 
e2ddd_particles.py @ ['--noalign'] @ False @ None @ Regenerates unaligned particle averages into __orig @ 
e2ddd_particles.py @ ['--invert'] @ False @ None @ Invert the contrast of the particles in output files (default false) @ 
e2ddd_particles.py @ ['--filefilt'] @ None @ str @ Only processes image stacks where the filename contains the specified string. Mostly used for debugging. @ 
e2ddd_particles.py @ ['--frac'] @ None @ str @ Processes a fraction of the data, used automatically by --threads. <n>,<ntot> @ 
e2ddd_particles.py @ ['--step'] @ 0,-1,1 @ str @ Specify <first>,<last>,<step>. Processes only a subset of the input frames. For example, 0,6,2 would process only frames 0,2,4. 1,5,1 would process frames 1,2,3 and 4, skipping frame 0. First is inclusive, last exclusive @ 
e2ddd_particles.py @ ['--parallel'] @ None @ None @ parallelism argument. This program supports only thread:<n> @ 
e2ddd_particles.py @ ['--threads'] @ 1 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2ddd_particles.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2ddd_particles.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ddd_particles.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2display.py @ ['--classmx'] @ None @ str @ <classmx>,<#> Show particles in one class from a classification matrix. Pass raw particle file as first argument to command. @ 
e2display.py @ ['--classes'] @ None @ str @ <rawptcl>,<classmx> Show particles associated class-averages @ 
e2display.py @ ['--pdb'] @ None @ str @ <pdb file> Show PDB structure. @ 
e2display.py @ ['--singleimage'] @ False @ None @ Display a stack in a single image view @ 
e2display.py @ ['--server'] @ False @ None @ Launch a display server which can communicate with other EMAN3 programs @ 
e2display.py @ ['--serverport'] @ 31980 @ int @ Specify the port to listen to, needed for multiple users on one machine, default=31980 @ 
e2display.py @ ['--plot'] @ False @ None @ Data file(s) should be plotted rather than displayed in 2-D @ 
e2display.py @ ['--hist'] @ False @ None @ Data file(s) should be plotted as a histogram rather than displayed in 2-D. @ 
e2display.py @ ['--plot3d'] @ False @ None @ Data file(s) should be plotted rather than displayed in 3-D @ 
e2display.py @ ['--fullrange'] @ False @ None @ A specialized flag that disables auto contrast for the display of particles stacks and 2D images only. @ 
e2display.py @ ['--newwidget'] @ False @ None @ Use the new 3D widgetD. Highly recommended!!!! @ 
e2display.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2display.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2display.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2emx.py @ ['--export_whole_project'] @ False @ None @ This option will create an emx directory, where it will export the eman2 project into EMX format @ 
e2emx.py @ ['--import_emx'] @ None @ str @ Import emx information and corresponding micrographs @ 
e2emx.py @ ['--refinedefocus'] @ False @ None @ Will use EMAN2 CTF fitting to refine the defocus by SNR optimization (+-0.1 micron from the current values, no astigmatism adjustment) @ 
e2emx.py @ ['--refitdefocus'] @ False @ None @ Will use EMAN2 CTF fitting to refit the defocus values (+-0.1 micron, astigmatism unchanged) @ 
e2emx.py @ ['--writeimages'] @ False @ None @ If specified, micrographs and particles will be written to the emx directory. @ 
e2emx.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2emx.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2emx.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2enrich.py @ ['--nenrich'] @ 54 @ int @ Number of additional particles to average with each particle. Default=5 @ 
e2enrich.py @ ['--redoinvar'] @ None @ None @ Recomputes invariants @ 
e2enrich.py @ ['--threads'] @ 4 @ int @ Number of alignment threads to run in parallel on a single computer. @ 
e2enrich.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2enrich.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2enrich.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2erasefiducials.py @ ['--apix'] @ None @ float @ Override Apix in image header. @ 
e2erasefiducials.py @ ['--lowpass'] @ 1.11 @ float @ Multiply lowpass filter frequency by this constant when filtering noise image. Default is 1.11. @ 
e2erasefiducials.py @ ['--coords'] @  @ str @ Specify box file with x and y gold coordinates. Must follow standard box file format (x<tab>y<tab>xsize<ysize>) although box sizes are ignored. @ 
e2erasefiducials.py @ ['--keepdust'] @ False @ None @ Do not remove 'dust' from mask (include objects smaller than gold fiducials). @ 
e2erasefiducials.py @ ['--goldsize'] @ 30 @ float @ Diameter (in pixels) of gold fiducials to erase. @ 
e2erasefiducials.py @ ['--oversample'] @ 4 @ int @ Oversample noise image to smooth transitions from regions with different noise. @ 
e2erasefiducials.py @ ['--boxsize'] @ 128 @ int @ Box size to use when computing local noise. @ 
e2erasefiducials.py @ ['--debug'] @ False @ None @ Save noise and mask/masked image(s). @ 
e2erasefiducials.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2erasefiducials.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2erasefiducials.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2erasefiducials.py @ ['--parallel'] @ None @ str @ Default=None (not used). Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2erasefiducials.py @ ['--subset'] @ 0 @ int @ Default=0 (not used). Apply algorithm to only a subset of images in each stack file. @ 
e2erasefiducials.py @ ['--nsigmas'] @ 3.0 @ float @ Default=3.0. Number of standard deviations above the mean to determine pixels to mask out (erase). @ 
e2euler_refine.py @ ['--input'] @ None @ None @ The input projections. Project should usually have the xform.projection header attribute, which is used for slice insertion @ 
e2euler_refine.py @ ['--ref_volume'] @ None @ None @ The reference volume for orientation determination. @ 
e2euler_refine.py @ ['--input_model'] @ None @ None @ If the class-averages have the model_id parameter (produced by e2refinemulti.py), this will use only class-averages with the specified model_id for the reconstruction. @ 
e2euler_refine.py @ ['--no_wt'] @ False @ None @ This argument turns automatic weighting off causing all images to be weighted by 1. If this argument is not specified images inserted into the reconstructed volume are weighted by the number of particles that contributed to them (i.e. as in class averages), which is extracted from the image header (as the ptcl_repr attribute). @ 
e2euler_refine.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2euler_refine.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2euler_refine.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on a single computer. This is the only parallelism supported by e2make3dpar @ 
e2euler_refine.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2eulerxplor.py @ ['--eulerdata'] @ None @ str @ File for Eulerdata, Ryan style, if none is given, data is read from the DB. @ 
e2eulerxplor.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2eulerxplor.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2eulerxplor.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2evalimage.py @ ['--gui'] @ True @ None @ This is a GUI-only program. This option is provided for self-consistency @ 
e2evalimage.py @ ['--apix'] @ None @ float @ Angstroms per pixel for all images @ 
e2evalimage.py @ ['--constbfactor'] @ -1.0 @ float @ Set B-factor to fixed specified value, negative value autofits @ 
e2evalimage.py @ ['--voltage'] @ None @ float @ Microscope voltage in KV @ 
e2evalimage.py @ ['--cs'] @ None @ float @ Microscope Cs (spherical aberation) @ 
e2evalimage.py @ ['--ac'] @ 10 @ float @ Amplitude contrast (percentage, default=10) @ 
e2evalimage.py @ ['--phaseplate'] @ False @ None @ Include phase/amplitude contrast in CTF estimation. For use with hole-less phase plates. @ 
e2evalimage.py @ ['--astigmatism'] @ False @ None @ Includes astigmatism in automatic fitting @ 
e2evalimage.py @ ['--box'] @ -1 @ int @ Forced box size in grid mode. Overrides any previous setting.  @ 
e2evalimage.py @ ['--usefoldername'] @ False @ None @ If you have the same image filename in multiple folders, and need to import into the same project, this will prepend the folder name on each image name @ 
e2evalimage.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2evalimage.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2evalimage.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2evalparticles.py @ ['--gui'] @ True @ None @ Start the GUI for interactive use (default=True) @ 
e2evalparticles.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2evalparticles.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2evalparticles.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2evalrefine.py @ ['--timing'] @ False @ None @ Report on the time required for each step of each refinement run @ 
e2evalrefine.py @ ['--timingbypath'] @ False @ None @ Report on the CPU time required in each refine_xx folder @ 
e2evalrefine.py @ ['--resolution'] @ False @ None @ generates a resolution and convergence plot for a single refinement run. @ 
e2evalrefine.py @ ['--resolution_all'] @ False @ None @ generates resolution plot with the last iteration of all refine_xx directories @ 
e2evalrefine.py @ ['--resolution_vsref'] @ None @ str @ Computes the FSC between the last iteration of each refine_xx directory and a specified reference map. Map must be aligned, but will be rescaled if necessary. @ 
e2evalrefine.py @ ['--evalptclqual'] @ False @ None @ Evaluates the particle-map agreement using the refine_xx folder name. This may be used to identify bad particles. @ 
e2evalrefine.py @ ['--evalclassqual'] @ False @ None @ Evaluates the class-average-projection agreement using the refine_xx folder name. @ 
e2evalrefine.py @ ['--extractorientptcl'] @ None @ str @ Extracts the particles from a refinement with per-particle orientation information. If HDF output, will store as xform_align3d in header. @ 
e2evalrefine.py @ ['--anisotropy'] @ -1 @ int @ Specify a class-number (more particles better). Will use that class to evaluate magnification anisotropy in the data.  @ 
e2evalrefine.py @ ['--evalclassdetail'] @ False @ None @ If specified with evalclassqual, will generate individual FRC curves for each class average in the even subset @ 
e2evalrefine.py @ ['--includeprojs'] @ False @ None @ If specified with --evalptclqual, projections will be written to disk for easy comparison. @ 
e2evalrefine.py @ ['--iter'] @ None @ int @ If a refine_XX folder is being used, this selects a particular refinement iteration. Otherwise the last complete iteration is used. @ 
e2evalrefine.py @ ['--mask'] @ None @ str @ Mask to be used to focus --evalptclqual and other options. May be useful for separating heterogeneous data. @ 
e2evalrefine.py @ ['--sym'] @ None @ str @ Symmetry to be used in searching adjacent unit cells, default from refine_xx parms @ 
e2evalrefine.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2evalrefine.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2evalrefine.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2evalrefine.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2extractsubparticles.py @ ['--sym'] @ c1 @ None @ Specify symmetry - choices are: c<n>, d<n>, tet, oct, icos. If specified each input 'particle' will become N extracted subparticles. @ 
e2extractsubparticles.py @ ['--subunitmask'] @ None @ str @ Required. When applied to the 3-D volume, this mask contains the subunit being extracted. 'soft' edges are permitted @ 
e2extractsubparticles.py @ ['--outermask'] @ None @ str @ Optional. If specified, this mask is projected into 2-D and used to mask out noise outside the subunit. If not specified a thresholded subunitmask is used. Only useful with --masked.  @ 
e2extractsubparticles.py @ ['--masked'] @ False @ None @ If specified, each output subparticle will be masked based on the projection mask. Recommended. @ 
e2extractsubparticles.py @ ['--newbox'] @ -1 @ int @ New box size for extracted regions @ 
e2extractsubparticles.py @ ['--invartype'] @ auto @ None @ Which type of invariants to generate: (bispec,harmonic) @ 
e2extractsubparticles.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on a single computer @ 
e2extractsubparticles.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2extractsubparticles.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2extractsubparticles.py @ ['--debug'] @ False @ None @ Enable debugging mode with verbose output and image display. Not suitable for real runs. @ 
e2extractsubparticles.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2filtertool.py @ ['--apix'] @ 0.0 @ float @ Override the A/pix value stored in the file header @ 
e2filtertool.py @ ['--safemode'] @ False @ None @ Safe mode without the timer... @ 
e2filtertool.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2filtertool.py @ ['--idx'] @ -1 @ int @ index for an image in a stack @ 
e2filtertool.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2filtertool.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2fsc.py @ ['--output'] @ resvol143.hdf @ str @ Output .143 resolution volume @ 
e2fsc.py @ ['--outfilt'] @ res143_filtered.hdf @ str @ Output locally filtered average volume @ 
e2fsc.py @ ['--outfilte'] @ None @ str @ Apply the local filter to the even map as well and write to specified file @ 
e2fsc.py @ ['--outfilto'] @ None @ str @ Apply the local filter to the odd map as well and write to specified file @ 
e2fsc.py @ ['--localsize'] @ -1 @ int @ Size in pixels of the local region to compute the resolution in @ 
e2fsc.py @ ['--overlap'] @ 4 @ int @ Amount of oversampling to use in local resolution windows. Larger value -> larger output map @ 
e2fsc.py @ ['--apix'] @ 0 @ float @ A/pix to use for the comparison (default uses Vol1 apix) @ 
e2fsc.py @ ['--cutoff'] @ 0.143 @ float @ fsc cutoff. default is 0.143 @ 
e2fsc.py @ ['--gauss'] @ False @ None @ use gaussian filter instead of tophat @ 
e2fsc.py @ ['--mask'] @ None @ str @ Mask to apply to both input images before calculation @ 
e2fsc.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on the local computer @ 
e2fsc.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2fsc.py @ ['--verbose', '-v'] @ 0 @ int @ verbosity [0-9]. Larger values produce more output. @ 
e2fsc.py @ ['--verbose', '-v'] @ 0 @ int @ verbosity [0-9]. Larger values produce more output. @ 
e2fsc_local.py @ ['--even'] @  @ str @  @ 
e2fsc_local.py @ ['--odd'] @  @ str @  @ 
e2fsc_local.py @ ['--output'] @  @ str @  @ 
e2fsc_local.py @ ['--setsf'] @  @ str @  @ 
e2fsc_local.py @ ['--mask'] @  @ str @  @ 
e2fsc_local.py @ ['--step'] @ 4 @ int @  @ 
e2fsc_local.py @ ['--winsize'] @ 17 @ int @  @ 
e2fsc_local.py @ ['--cut'] @ 0.2 @ float @  @ 
e2fsc_local.py @ ['--sym'] @ c1 @ str @  @ 
e2fsc_local.py @ ['--overwrite'] @ False @ None @ overwrite even/odd input @ 
e2fsc_local.py @ ['--gauss'] @ False @ None @ gauss instead of tophat @ 
e2fsc_local.py @ ['--ppid'] @ -1 @ int @  @ 
e2fsc_real_local.py @ ['--output'] @ resvol143.hdf @ str @ Output .143 resolution volume @ 
e2fsc_real_local.py @ ['--outfilt'] @ res143_filtered.hdf @ str @ Output locally filtered average volume @ 
e2fsc_real_local.py @ ['--outfilte'] @ None @ str @ Apply the local filter to the even map as well and write to specified file @ 
e2fsc_real_local.py @ ['--outfilto'] @ None @ str @ Apply the local filter to the odd map as well and write to specified file @ 
e2fsc_real_local.py @ ['--compressbits'] @ 10 @ int @ Bits to keep when writing volumes with compression. 0->lossless floating point. Default 10 (3 significant figures) @ 
e2fsc_real_local.py @ ['--localsizea'] @ 50 @ int @ Size in Angstroms of the local region to compute the resolution in @ 
e2fsc_real_local.py @ ['--apix'] @ 0 @ float @ A/pix to use for the comparison (default uses Vol1 apix) @ 
e2fsc_real_local.py @ ['--normin'] @ normalize.edgemean @ str @ Apply a real space normalization to each input before FSC. Default normalize.edgemean. Use 'none' to disable. @ 
e2fsc_real_local.py @ ['--cutoff'] @ 0.143 @ float @ fsc cutoff. default is 0.143 @ 
e2fsc_real_local.py @ ['--mask'] @ None @ str @ Optional mask to produce masked overall FSC curve. Must have the same dimensions as the input volumes. @ 
e2fsc_real_local.py @ ['--tophat'] @ False @ None @ If set, the local filter is a tophat filter, otherwise a local Wiener filter is applied @ 
e2fsc_real_local.py @ ['--sampfscs'] @ False @ None @ If set, full fsc curves are stored for a range of specific locations within the volume @ 
e2fsc_real_local.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on the local computer @ 
e2fsc_real_local.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2fsc_real_local.py @ ['--verbose', '-v'] @ 0 @ int @ verbosity [0-9]. Larger values produce more output. @ 
e2fsc_real_local.py @ ['--verbose', '-v'] @ 0 @ int @ verbosity [0-9]. Larger values produce more output. @ 
e2gmm.py @ ['--threads'] @ -1 @ int @ Number of alignment threads to run in parallel on a single computer. @ 
e2gmm.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2gmm_analysis.py @ ['--midinput'] @ None @ str @ middle layer input @ 
e2gmm_analysis.py @ ['--decoder'] @ None @ str @ decoder input @ 
e2gmm_refine.py @ ['--sym'] @ c1 @ str @ symmetry. currently only support c and d @ 
e2gmm_refine.py @ ['--model'] @  @ str @ load from an existing model file @ 
e2gmm_refine.py @ ['--modelout'] @  @ str @ output trained model file. only used when --projs is provided @ 
e2gmm_refine.py @ ['--projs'] @  @ str @ projections with orientations (in hdf header or comment column of lst file) to train model @ 
e2gmm_refine.py @ ['--evalmodel'] @  @ str @ generate model projection images to the given file name @ 
e2gmm_refine.py @ ['--evalsize'] @ -1 @ int @ Box size for the projections for evaluation. @ 
e2gmm_refine.py @ ['--ptclsin'] @  @ str @ particles input for alignment @ 
e2gmm_refine.py @ ['--ptclsout'] @  @ str @ aligned particle output @ 
e2gmm_refine.py @ ['--learnrate'] @ 0.0001 @ float @ learning rate for model training only. Default is 1e-4.  @ 
e2gmm_refine.py @ ['--sigmareg'] @ 0.5 @ float @ regularizer for the sigma of gaussian width. Larger value means all Gaussian functions will have essentially the same width. Smaller value may help compensating local resolution difference. @ 
e2gmm_refine.py @ ['--ampreg'] @ 0 @ float @ regularizer for the Gaussian amplitudes in the first 1/2 of the iterations. Large values will encourage all Gaussians to have similar amplitudes. default = 0 @ 
e2gmm_refine.py @ ['--niter'] @ 10 @ int @ number of iterations @ 
e2gmm_refine.py @ ['--npts'] @ -1 @ int @ number of points to initialize.  @ 
e2gmm_refine.py @ ['--batchsz'] @ 32 @ int @ batch size @ 
e2gmm_refine.py @ ['--maxboxsz'] @ 64 @ int @ maximum fourier box size to use. 2 x target Fourier radius.  @ 
e2gmm_refine.py @ ['--maxres'] @ -1 @ float @ maximum resolution. will overwrite maxboxsz.  @ 
e2gmm_refine.py @ ['--align'] @ False @ None @ align particles. @ 
e2gmm_refine.py @ ['--heter'] @ False @ None @ heterogeneity analysis. @ 
e2gmm_refine.py @ ['--conv'] @ False @ None @ use convolutional network for heterogeneity analysis. @ 
e2gmm_refine.py @ ['--fromscratch'] @ False @ None @ start from coarse alignment. otherwise will only do refinement from last round @ 
e2gmm_refine.py @ ['--gradout'] @  @ str @ gradient output @ 
e2gmm_refine.py @ ['--gradin'] @  @ str @ reading from gradient output instead of recomputing @ 
e2gmm_refine.py @ ['--midout'] @  @ str @ middle layer output @ 
e2gmm_refine.py @ ['--decoderout'] @ None @ str @ Save the trained decoder model. Filename should be .h5 or .tf @ 
e2gmm_refine.py @ ['--pas'] @ 110 @ str @ choose whether to adjust position, amplitude, sigma. use 3 digit 0/1 input. default is 110, i.e. only adjusting position and amplitude @ 
e2gmm_refine.py @ ['--nmid'] @ 4 @ int @ size of the middle layer @ 
e2gmm_refine.py @ ['--mask'] @  @ str @ remove points outside mask @ 
e2gmm_refine.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2helixboxer.py @ ['--gui'] @ False @ None @ Start the graphic user interface for boxing helices. @ 
e2helixboxer.py @ ['--helix-coords', '-X'] @ None @ str @ Save coordinates for helices to the file specified, which will have the EMAN1 *.box format:   x1-w/2        y1-w/2        w        w        -1                    x2-w/2        y2-w/2        w        w        -2 @ 
e2helixboxer.py @ ['--helix-coords', '-X'] @ None @ str @ Save coordinates for helices to the file specified, which will have the EMAN1 *.box format:   x1-w/2        y1-w/2        w        w        -1                    x2-w/2        y2-w/2        w        w        -2 @ 
e2helixboxer.py @ ['--helix-images', '-x'] @ None @ str @ Save images of the helices. The file name specified will have helix numbers added to it. @ 
e2helixboxer.py @ ['--helix-images', '-x'] @ None @ str @ Save images of the helices. The file name specified will have helix numbers added to it. @ 
e2helixboxer.py @ ['--ptcl-coords', '-P'] @ None @ str @ Save coordinates of the centers of particles to the specified formatted text file @ 
e2helixboxer.py @ ['--ptcl-coords', '-P'] @ None @ str @ Save coordinates of the centers of particles to the specified formatted text file @ 
e2helixboxer.py @ ['--ptcl-images', '-p'] @ None @ str @ Save images of the particles. The file name specified will have helix numbers (and particle numbers if the file type does not support image stacks) added to it. @ 
e2helixboxer.py @ ['--ptcl-images', '-p'] @ None @ str @ Save images of the particles. The file name specified will have helix numbers (and particle numbers if the file type does not support image stacks) added to it. @ 
e2helixboxer.py @ ['--ptcl-images-stack-mode'] @ multiple @ str @ Options for saving particle images to stack files. 'single' uses one stack file, 'multiple' (default) uses one stack file per helix, 'none' uses a file for each particle and is always used when the output file format does not support image stacks. @ 
e2helixboxer.py @ ['--db-add-hcoords'] @ None @ str @ Append any unique helix coordinates to the database from the specified file (in EMAN1 *.box format). Use --helix-width to specify a width for all boxes. @ 
e2helixboxer.py @ ['--db-set-hcoords'] @ None @ str @ Replaces the helix coordinates in the database with the coordinates from the specified file (in EMAN1 *.box format). Use --helix-width to specify a width for all boxes. @ 
e2helixboxer.py @ ['--helix-width', '-w'] @ -1 @ int @ Helix width in pixels. Overrides widths saved in the database or in an input file. @ 
e2helixboxer.py @ ['--helix-width', '-w'] @ -1 @ int @ Helix width in pixels. Overrides widths saved in the database or in an input file. @ 
e2helixboxer.py @ ['--helix-length', '-l'] @ -1 @ int @ Helix length in pixels. Normally each filament can be an arbitrary length. This forces all new helices to a fixed size. @ 
e2helixboxer.py @ ['--helix-length', '-l'] @ -1 @ int @ Helix length in pixels. Normally each filament can be an arbitrary length. This forces all new helices to a fixed size. @ 
e2helixboxer.py @ ['--ptcl-overlap'] @ -1 @ int @ Particle overlap in pixels @ 
e2helixboxer.py @ ['--ptcl-length'] @ -1 @ int @ Particle length in pixels @ 
e2helixboxer.py @ ['--ptcl-width'] @ -1 @ int @ Particle width in pixels @ 
e2helixboxer.py @ ['--ptcl-not-rotated'] @ False @ None @ Particles are oriented as on the micrograph. They are square with length max(ptcl_length, ptcl_width). @ 
e2helixboxer.py @ ['--ptcl-norm-edge-mean'] @ False @ None @ Apply the normalize.edgemean processor to each particle. @ 
e2helixboxer.py @ ['--gridding'] @ False @ None @ Use a gridding method for rotation operations on particles. Requires particles to be square. @ 
e2helixboxer.py @ ['--save-ext'] @ hdf @ str @ The default file extension to use when saving 'particle' images. This is simply a convenience for improved workflow. If a format other than HDF is used, metadata will be lost when saving. @ 
e2helixboxer.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2help.py @ ['--gui'] @ False @ None @ Use the GUI for display help @ 
e2help.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2help.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2help.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2iminfo.py @ ['-H', '--header'] @ False @ None @ Show all header information @ 
e2iminfo.py @ ['-H', '--header'] @ False @ None @ Show all header information @ 
e2iminfo.py @ ['-N', '--number'] @ -1 @ int @ Image number for single image info @ 
e2iminfo.py @ ['-N', '--number'] @ -1 @ int @ Image number for single image info @ 
e2iminfo.py @ ['-Q', '--quality'] @ -1 @ int @ Include only images with a single quality value (integer 0-9) @ 
e2iminfo.py @ ['-Q', '--quality'] @ -1 @ int @ Include only images with a single quality value (integer 0-9) @ 
e2iminfo.py @ ['--dfmin'] @ None @ float @ Include only images with defocus >= the specified value @ 
e2iminfo.py @ ['--dfmax'] @ None @ float @ Include only images with defocus <= the specified value @ 
e2iminfo.py @ ['--nameonly'] @ False @ None @ Only display the matching filenames. No other info. @ 
e2iminfo.py @ ['-s', '--stat'] @ False @ None @ Show statistical information about the image(s). @ 
e2iminfo.py @ ['-s', '--stat'] @ False @ None @ Show statistical information about the image(s). @ 
e2iminfo.py @ ['-O', '--outliers'] @ False @ None @ Statistics on number of outlier values, must be used with --stat @ 
e2iminfo.py @ ['-O', '--outliers'] @ False @ None @ Statistics on number of outlier values, must be used with --stat @ 
e2iminfo.py @ ['-E', '--euler'] @ False @ None @ Show Euler angles from header @ 
e2iminfo.py @ ['-E', '--euler'] @ False @ None @ Show Euler angles from header @ 
e2iminfo.py @ ['-a', '--all'] @ False @ None @ Show info for all images in file @ 
e2iminfo.py @ ['-a', '--all'] @ False @ None @ Show info for all images in file @ 
e2iminfo.py @ ['-C', '--check'] @ False @ None @ Checks to make sure all image numbers are populated with images, and that all images have valid CTF parameters @ 
e2iminfo.py @ ['-C', '--check'] @ False @ None @ Checks to make sure all image numbers are populated with images, and that all images have valid CTF parameters @ 
e2iminfo.py @ ['-c', '--count'] @ False @ None @ Just show a count of the number of particles in each file @ 
e2iminfo.py @ ['-c', '--count'] @ False @ None @ Just show a count of the number of particles in each file @ 
e2iminfo.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2iminfo.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2iminfo.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2import.py @ ['--import_movies'] @ False @ None @ Import DDD movies @ 
e2import.py @ ['--darkrefs'] @  @ None @ Specify a comma separated list of dark refereence stacks/images to import. Files will be placed in movierefs_raw. See --importation for additional options. @ 
e2import.py @ ['--gainrefs'] @  @ None @ Specify a comma separated list of gain refereence stacks/images to import. Files will be placed in movierefs_raw. See --importation for additional options. @ 
e2import.py @ ['--apix'] @ -1 @ float @ Specify the apix of the tiltseries you are importing. If -1 (default), the apix in the header will not be changed. @ 
e2import.py @ ['--import_tiltseries'] @ False @ None @ Import tiltseries @ 
e2import.py @ ['--rawtlt'] @ None @ None @ Specify an imod/serialem rawtlt file, and imported tilt series will be sorted in tilt sequence instead of collection sequence, 'auto' will attempt to find a .tlt file automatically @ 
e2import.py @ ['--import_tomos'] @ False @ None @ Import tomograms for segmentation and/or subtomogram averaging @ 
e2import.py @ ['--compressbits'] @ 8 @ int @ Bits to keep for compression. default is 8 bits. Use 0 for lossless compression. Currently used only on tiltseries, eman1 and particles @ 
e2import.py @ ['--removesub'] @ None @ str @ If set will exclude the specified string from imported filenames @ 
e2import.py @ ['--import_particles'] @ False @ None @ Import particles @ 
e2import.py @ ['--import_eman1'] @ False @ None @ This will import a phase-flipped particle stack from EMAN1 @ 
e2import.py @ ['--importation'] @ copy @ None @ Specify import mode: move, copy or link @ 
e2import.py @ ['--invert'] @ False @ None @ Invert the contrast before importing tomograms @ 
e2import.py @ ['--shrink'] @ 1 @ int @ Shrink tomograms before importing. Does not work while not copying. @ 
e2import.py @ ['--import_boxes'] @ False @ None @ Import boxes @ 
e2import.py @ ['--extension'] @ dm3 @ str @ Extension of the micrographs that the boxes match @ 
e2import.py @ ['--box_type'] @ boxes @ None @ Type of boxes to import, normally boxes, but for tilted data use tiltedboxes, and untiltedboxes for the tilted  particle partner @ 
e2import.py @ ['--boxsize'] @ 256 @ int @ Specify the boxsize for each particle. @ 
e2import.py @ ['--curdefocushint'] @ False @ None @ Used with import_eman1, will use EMAN1 defocus as starting point @ 
e2import.py @ ['--curdefocusfix'] @ False @ None @ Used with import_eman1, will use EMAN1 defocus unchanged (+-.001 um) @ 
e2import.py @ ['--threads'] @ 1 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2import.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2import.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2import.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2initialmodel.py @ ['--input'] @ None @ str @ This file should contain good class-averages to use in constructing the initial model @ 
e2initialmodel.py @ ['--iter'] @ 8 @ int @ The total number of refinement iterations to perform, typically 5-10 @ 
e2initialmodel.py @ ['--tries'] @ 10 @ int @ The number of different initial models to generate in search of a good one @ 
e2initialmodel.py @ ['--shrink'] @ 0 @ int @ Optionally shrink the input particles by an integer factor prior to reconstruction. Default=0, no shrinking @ 
e2initialmodel.py @ ['--sym'] @ c1 @ None @ Specify symmetry - choices are: c<n>, d<n>, h<n>, tet, oct, icos @ 
e2initialmodel.py @ ['--automaskexpand'] @ -1 @ int @ Number of voxels of post-threshold expansion in the mask, for use when peripheral features are truncated. (default=shrunk boxsize/20) @ 
e2initialmodel.py @ ['--randorient'] @ False @ None @ Instead of seeding with a random volume, seeds by randomizing input orientations @ 
e2initialmodel.py @ ['--maskproc'] @ None @ str @ Default=none. If specified, this mask will be performed after the built-in automask, eg - mask.soft to remove the core of a virus @ 
e2initialmodel.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2initialmodel.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2initialmodel.py @ ['--orientgen'] @ eman:delta=9.0:inc_mirror=0:perturb=1 @ str @ The type of orientation generator. Default is eman:delta=9.0:inc_mirror=0:perturb=1. See e2help.py orientgens @ 
e2initialmodel.py @ ['--parallel'] @ thread:1 @ str @ Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2initialmodel.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2initialmodel_hisym.py @ ['--input'] @ None @ str @ This file should contain good class-averages to use in constructing the initial model @ 
e2initialmodel_hisym.py @ ['--shrink'] @ 0 @ int @ Optionally shrink the input particles by an integer factor prior to reconstruction. Default=0, no shrinking @ 
e2initialmodel_hisym.py @ ['--sym'] @ c1 @ None @ Specify symmetry - choices are: c<n>, d<n>, h<n>, tet, oct, icos @ 
e2initialmodel_hisym.py @ ['--orientgen'] @ eman:delta=3.0:inc_mirror=0:perturb=0 @ str @ The type of orientation generator. Default is eman:delta=3.0:inc_mirror=0. See e2help.py orientgens @ 
e2initialmodel_hisym.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2initialmodel_hisym.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2initialmodel_hisym.py @ ['--threads'] @ 1 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2initialmodel_hisym.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2initialmodel_sgd.py @ ['--path'] @ None @ str @ Path to write initial model output. Default is initmodel_XX @ 
e2initialmodel_sgd.py @ ['--ptcls'] @ None @ str @ Class average or particles input. @ 
e2initialmodel_sgd.py @ ['--sym'] @ c1 @ str @ Specify symmetry - choices are: c<n>, d<n>, h<n>, tet, oct, icos @ 
e2initialmodel_sgd.py @ ['--batchsize'] @ 10 @ int @ Batch size of stochastic gradient desent. N particles are randomly selected to generate an initial model at each step. @ 
e2initialmodel_sgd.py @ ['--niter'] @ 20 @ int @ Number of iterations @ 
e2initialmodel_sgd.py @ ['--ntry'] @ 10 @ int @ The number of different initial models to generate in search of a good one @ 
e2initialmodel_sgd.py @ ['--learnrate'] @ 0.3 @ float @ Learning rate. i.e. how much the initial model changes toward the gradient direction in each iteration. Range from 0.0~1.0. Default is 0.3 @ 
e2initialmodel_sgd.py @ ['--lrdecay'] @ 1.0 @ float @ Learning rate multiplier after each iteration. @ 
e2initialmodel_sgd.py @ ['--addnoise'] @ 3.0 @ float @ Add noise on particles at each iteration. Stablize convergence for some reason. @ 
e2initialmodel_sgd.py @ ['--shrink'] @ 1 @ int @ shrinking factor @ 
e2initialmodel_sgd.py @ ['--setsf'] @ None @ str @  @ 
e2initialmodel_sgd.py @ ['--ref'] @ None @ str @  @ 
e2initialmodel_sgd.py @ ['--writetmp'] @ False @ None @ Write output for each iteration @ 
e2initialmodel_sgd.py @ ['--fullcov'] @ False @ None @ Assume the input particles covers most of the orientation of the model. This gives better performance when the model is relatively feature-less, but is more likely to fail when there are incorrect particles in the input. @ 
e2initialmodel_sgd.py @ ['--threads'] @ 10 @ int @ threads @ 
e2initialmodel_sgd.py @ ['--verbose', '-v'] @ 0 @ int @ Verbose @ 
e2initialmodel_sgd.py @ ['--verbose', '-v'] @ 0 @ int @ Verbose @ 
e2initialmodel_sgd.py @ ['--targetres'] @ 20.0 @ float @ Target resolution @ 
e2make3d.py @ ['--output'] @ threed.hdf @ None @ Output reconstructed volume file name. @ 
e2make3d.py @ ['--input'] @ None @ None @ The input projections. Project should usually have the xform.projection header attribute, which is used for slice insertion @ 
e2make3d.py @ ['--input_model'] @ None @ None @ If the class-averages have the model_id parameter (produced by e2refinemulti.py), this will use only class-averages with the specified model_id for the reconstruction. @ 
e2make3d.py @ ['--tlt'] @ None @ str @ An imod tlt file containing alignment angles. If specified slices will be inserted using these angles in the IMOD convention @ 
e2make3d.py @ ['--sym'] @ c1 @ None @ Set the symmetry; if no value is given then the model is assumed to have no symmetry. Choices are: i, c, d, tet, icos, or oct. @ 
e2make3d.py @ ['--pad'] @ None @ str @ Will zero-pad images to the specifed size (x,y) or (x,x) prior to reconstruction. If not specified no padding occurs. @ 
e2make3d.py @ ['--padvol'] @ None @ str @ Defines the dimensions (x,y,z) or (x,x,x) of the reconstructed volume. If ommitted, implied value based on padded 2D images is used. @ 
e2make3d.py @ ['--outsize'] @ None @ str @ Defines the dimensions (x,y,z) or (x,x,x) of the final volume written to disk, if ommitted, size will be based on unpadded input size @ 
e2make3d.py @ ['--recon'] @ fourier @ None @ Reconstructor to use see e2help.py reconstructors -v. Default is fourier:mode=gauss_2 @ 
e2make3d.py @ ['--keep'] @ 1.0 @ float @ The fraction of slices to keep, based on quality scores (1.0 = use all slices). See keepsig. @ 
e2make3d.py @ ['--keepsig'] @ False @ None @ If set, keep will be interpreted as a standard deviation coefficient instead of as a percentage. @ 
e2make3d.py @ ['--keepabs'] @ False @ None @ If set, keep will refer to the absolute quality of the class-average, not a local quality relative to other similar sized classes. @ 
e2make3d.py @ ['--no_wt'] @ False @ None @ This argument turns automatic weighting off causing all images to be weighted by 1. If this argument is not specified images inserted into the reconstructed volume are weighted by the number of particles that contributed to them (i.e. as in class averages), which is extracted from the image header (as the ptcl_repr attribute). @ 
e2make3d.py @ ['--iter'] @ 2 @ int @ Set the number of iterations (default is 2). Iterative reconstruction improves the overall normalization of the 2D images as they are inserted into the reconstructed volume, and allows for the exclusion of the poorer quality images. @ 
e2make3d.py @ ['--force'] @ False @ None @ deprecated @ 
e2make3d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2make3d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2make3d.py @ ['--nofilecheck'] @ False @ None @ Turns file checking off in the check functionality - used by e2refine.py. @ 
e2make3d.py @ ['--check'] @ False @ None @ Performs a command line argument check only. @ 
e2make3d.py @ ['--lowmem'] @ False @ None @ Causes images to be loaded as needed to reduce memory usage at the cost of time. @ 
e2make3d.py @ ['--preprocess'] @ None @ str @ preprocessor to be applied to the projections prior to 3D insertion. There can be more than one preprocessor and they are applied in the order in which they are specifed. Applied before padding occurs. See e2help.py processors for a complete list of available processors. @ 
e2make3d.py @ ['--setsf'] @ none @ str @ Force the structure factor to match a 'known' curve prior to postprocessing (<filename>, auto or none). default=none @ 
e2make3d.py @ ['--postprocess'] @ None @ str @ postprocessor to be applied to the 3D volume once the reconstruction is completed. There can be more than one postprocessor, and they are applied in the order in which they are specified. See e2help.py processors for a complete list of available processors. @ 
e2make3d.py @ ['--apix'] @ None @ float @ A/pix value for output, overrides automatic values @ 
e2make3d.py @ ['--start'] @ None @ str @ This is a starting model for FFT reconstruction @ 
e2make3d.py @ ['--startweight'] @ 1.0 @ float @ This is the starting model weight @ 
e2make3d.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2make3dpar.py @ ['--output'] @ threed.hdf @ None @ Output reconstructed volume file name. @ 
e2make3dpar.py @ ['--input'] @ None @ None @ The input projections. Project should usually have the xform.projection header attribute, which is used for slice insertion @ 
e2make3dpar.py @ ['--input_model'] @ None @ None @ If the class-averages have the model_id parameter (produced by e2refinemulti.py), this will use only class-averages with the specified model_id for the reconstruction. @ 
e2make3dpar.py @ ['--tlt'] @ None @ str @ An imod tlt file containing alignment angles. If specified slices will be inserted using these angles in the IMOD convention @ 
e2make3dpar.py @ ['--sym'] @ c1 @ None @ Set the symmetry; if no value is given then the model is assumed to have no symmetry. Choices are: i, c, d, tet, icos, or oct. @ 
e2make3dpar.py @ ['--fillangle'] @ 0 @ float @ An angular range used for both alt & az over which the projection should be averaged. Generally the angular step used when making projections. @ 
e2make3dpar.py @ ['--pad'] @ None @ str @ Will zero-pad images to the specifed size (x,y) or (x,x) prior to reconstruction. If not specified or 0 no padding occurs. If a negative value is specified automatic padding is performed.  @ 
e2make3dpar.py @ ['--padvol'] @ None @ str @ Defines the dimensions (x,y,z) or (x,x,x) of the reconstructed volume. If ommitted, implied value based on padded 2D images is used. @ 
e2make3dpar.py @ ['--outsize'] @ None @ str @ Defines the dimensions (x,y,z) or (x,x,x) of the final volume written to disk, if ommitted, size will be based on unpadded input size @ 
e2make3dpar.py @ ['--compressbits'] @ 10 @ int @ Bits to keep when writing volumes with compression. 0->lossless floating point. Default 10 (3 significant figures) @ 
e2make3dpar.py @ ['--savenorm'] @ None @ str @ If set, will save the normalization volume showing Fourier space filling to the specified file @ 
e2make3dpar.py @ ['--keep'] @ 1.0 @ float @ The fraction of slices to keep, based on quality scores (1.0 = use all slices). See keepsig. @ 
e2make3dpar.py @ ['--keepsig'] @ False @ None @ If set, keep will be interpreted as a standard deviation coefficient instead of as a percentage. @ 
e2make3dpar.py @ ['--keepabs'] @ False @ None @ If set, keep will refer to the absolute quality of the class-average, not a local quality relative to other similar sized classes. @ 
e2make3dpar.py @ ['--altedgemask'] @ False @ None @ If set, assumes tomographic data with a thin specimen, and masks out the +-X edges based on the alt Euler angle. @ 
e2make3dpar.py @ ['--no_wt'] @ False @ None @ This argument turns automatic weighting off causing all images to be weighted by 1. If this argument is not specified images inserted into the reconstructed volume are weighted by the number of particles that contributed to them (i.e. as in class averages), which is extracted from the image header (as the ptcl_repr attribute). @ 
e2make3dpar.py @ ['--sqrt_wt'] @ False @ None @ Normally class-averages are weighted into the reconstruction based on the number of particles in the average. This option causes the sqrt of the number of particles to be used instead. @ 
e2make3dpar.py @ ['--iterative'] @ False @ None @ Uses iterative interpolation in Fourier space instead of single step gridding or interpolation. --mode and --usessnr are ignored with this option. @ 
e2make3dpar.py @ ['--itermask'] @ None @ str @ Used in iterative mode to define a mask to apply between iterations. The resulting reconstruction won't be masked per-se, but will be biased towards lower densities outside the mask. @ 
e2make3dpar.py @ ['--usessnr'] @ False @ None @ Makes use of the class_ssnr header data to weight each slice during insertion, instead of the default behavior of just using the number of particles in the average as a global weight. @ 
e2make3dpar.py @ ['--mode'] @ gauss_var @ str @ Fourier reconstruction 'mode' to use. The default should not normally be changed. default='gauss_var' @ 
e2make3dpar.py @ ['--noradcor'] @ False @ None @ Normally a radial correction will be applied based on the --mode used. This option disables that correction. @ 
e2make3dpar.py @ ['--seedmap'] @ None @ str @ If specified this volume will be used as a starting point for the reconstruction, filling any missing values in Fourier space. experimental. @ 
e2make3dpar.py @ ['--seedweight'] @ 1.0 @ float @ If seedmap specified, this is how strongly the seedmap will bias existing values. 1 is default, and is equivalent to a one particle weight. @ 
e2make3dpar.py @ ['--seedweightmap'] @ None @ str @ Specify a full map of weights for the seed. This must be in the same format as the --savenorm output map. @ 
e2make3dpar.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2make3dpar.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2make3dpar.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on a single computer. This is the only parallelism supported by e2make3dpar @ 
e2make3dpar.py @ ['--preprocess'] @ None @ str @ preprocessor to be applied to the projections prior to 3D insertion. There can be more than one preprocessor and they are applied in the order in which they are specifed. Applied before padding occurs. See e2help.py processors for a complete list of available processors. @ 
e2make3dpar.py @ ['--setsf'] @ none @ str @ Force the structure factor to match a 'known' curve prior to postprocessing (<filename>, auto or none). default=none @ 
e2make3dpar.py @ ['--postprocess'] @ None @ str @ postprocessor to be applied to the 3D volume once the reconstruction is completed. There can be more than one postprocessor, and they are applied in the order in which they are specified. See e2help.py processors for a complete list of available processors. @ 
e2make3dpar.py @ ['--apix'] @ None @ float @ A/pix value for output, overrides automatic values @ 
e2make3dpar.py @ ['--useseedasref'] @ False @ None @ use seed map as reference to weight the particles. @ 
e2make3dpar.py @ ['--parallel'] @ None @ str @ Thread/mpi parallelism to use @ 
e2make3dpar.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2maskbyclass.py @ ['--classes'] @ None @ str @ Path to a class-average file (must be EMAN2 HDF averages) @ 
e2maskbyclass.py @ ['--threads'] @ 4 @ int @ Number of alignment threads to run in parallel on a single computer. @ 
e2maskbyclass.py @ ['--nofullresok'] @ False @ None @ Overrides the requirement that the class-averages be made from _fullres particle images. @ 
e2maskbyclass.py @ ['--redobispec'] @ False @ None @ Recomputes bispectra from masked particles @ 
e2maskbyclass.py @ ['--redoharmonic'] @ False @ None @ Recomputes harmonic power from masked particles @ 
e2maskbyclass.py @ ['--gui'] @ False @ None @ Permits interactive adjustment of mask parameters @ 
e2maskbyclass.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2maskbyclass.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2maskbyclass.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2match.py @ ['--img2process'] @  @ str @ Path to the stack    that needs to be processed to match img2match. If you want to process multiple stacks    or files, just separate them by commas --imgs2process=vo1.mrc,vol2.hdf,file.pdb @ 
e2match.py @ ['--img2match'] @  @ str @ Path to the image or stack of images which --img2process will match after processing. Not compulsory if --apix is provided. @ 
e2match.py @ ['--output'] @  @ str @ Specify the name of the file to which the edited img2process will be written. @ 
e2match.py @ ['--boxsize'] @ 0 @ int @ If NOT specified, the reference's box size will match that of the data. If specified, both the reference and the data will be resized. @ 
e2match.py @ ['--sym'] @  @ str @ Will apply the specified symmetry to the edited img2process. @ 
e2match.py @ ['--apix'] @ 0.0 @ float @ If specified, the program    will assume this is the correct apix for --img2match if --img2match is provided,   so the current value will be overwritten if --img2match is in .hdf format.    This value will also be used to scale the images in --img2process. @ 
e2match.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2match.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2match.py @ ['--preprocess'] @  @ str @ Any processor (as in e2proc3d.py) to be applied to the edited img2process. @ 
e2match.py @ ['--lowpass'] @  @ str @ A lowpass filtering processor (as in e2proc3d.py) be applied to the edited img2process. @ 
e2match.py @ ['--highpass'] @  @ str @ A highpass filtering processor (as in e2proc3d.py) to be applied to the edited img2process. @ 
e2match.py @ ['--mask'] @  @ str @ Mask processor applied to particles before alignment. Default is None @ 
e2match.py @ ['--normproc'] @  @ str @ Normalization processor applied to    particles before alignment. Default is None. If normalize.mask is used,    results of the mask option will be passed in automatically. @ 
e2match.py @ ['--threshold'] @  @ str @ EMAN2 processor to be used   to threshold the img2process. See available thresholds by typing    e2help.py processors --verbose=10   at the command line. @ 
e2match.py @ ['--shrink'] @ 0.0 @ float @ This will scale the img2process   by the factor specified. This does NOT need to be an integer. You can enter 1.5, 2.7, etc.   any decimal number > 1.0 is valid. @ 
e2match.py @ ['--mirror'] @ False @ None @ Will generate a mirrored copy of the edited img2process. @ 
e2match.py @ ['--sharpfiltres'] @ 0.0 @ float @ If specified, the edited img2process will be sharply filtered to this resolution. @ 
e2match.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2motion.py @ ['--threads'] @ 0 @ int @ Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by e2spt_align at present. @ 
e2motion.py @ ['--path'] @ None @ str @ Path for the refinement, default=auto @ 
e2motion.py @ ['--iter'] @ 0 @ int @ Iteration number within path. Default = start a new iteration @ 
e2motion.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2msa.py @ ['--mode'] @ pca @ str @ Mode should be one of: pca, sparsepca, fastica, factan, lda, nmf @ 
e2msa.py @ ['--nomean'] @ False @ None @ Suppress writing the average image as the first output image @ 
e2msa.py @ ['--nomeansub'] @ False @ None @ Suppress subtracting the mean from each input image, also implies --nomean @ 
e2msa.py @ ['--nbasis'] @ 20 @ int @ Number of basis images to generate. @ 
e2msa.py @ ['--maskfile'] @ None @ str @ File containing a mask defining the pixels to include in the Eigenimages @ 
e2msa.py @ ['--projin'] @ None @ str @ When generating subspace projections, use this file instead of the input used for the MSA @ 
e2msa.py @ ['--normproj'] @ False @ None @ When generating subspace projections, normalize each projection vector to unit length @ 
e2msa.py @ ['--mask'] @ 0 @ int @ Mask radius, negative values imply ny/2+1+mask, --mask=0 disables, --maskfile overrides @ 
e2msa.py @ ['--simmx'] @ None @ str @ Will use transformations from simmx on each particle prior to analysis @ 
e2msa.py @ ['--normalize'] @ False @ None @ Perform a careful normalization of input images before MSA. Otherwise normalization is not modified until after mean subtraction. @ 
e2msa.py @ ['--step'] @ 0,1 @ str @ Specify <init>,<step>[,last]. Processes only a subset of the input data. For example, 0,2 would process only the even numbered particles @ 
e2msa.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2msa.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2msa.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2parallel.py @ ['--scratchdir'] @ /tmp @ str @ Internal use only. Used by the MPI client @ 
e2parallel.py @ ['--mode'] @ thread @ str @ choose from thread and mpi @ 
e2parallel.py @ ['--taskin'] @ None @ str @ Internal use only. Used when executing local threaded tasks. @ 
e2parallel.py @ ['--taskout'] @ None @ str @ Internal use only. Used when executing local threaded tasks. @ 
e2parallel.py @ ['--loadmodule'] @  @ str @ load module @ 
e2parallel.py @ ['--usethreads'] @ -1 @ int @ max thread to use. only used for producing occupancy in mpi mode. default is the same as threads/mpi option given @ 
e2parallel.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2parallel.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2pathwalker.py @ ['--output'] @ None @ str @ Output file @ 
e2pathwalker.py @ ['--mapfile'] @ None @ str @ Density map file @ 
e2pathwalker.py @ ['--start'] @ None @ int @ Start ATOM @ 
e2pathwalker.py @ ['--end'] @ None @ int @ End ATOM @ 
e2pathwalker.py @ ['--average'] @ 3.78 @ float @ Average Ca-Ca length @ 
e2pathwalker.py @ ['--mapweight'] @ 1000 @ float @ Weight of density, to balance between geometry and density score @ 
e2pathwalker.py @ ['--mapthresh'] @ 0 @ float @ Density threshold, bonds on density lower than threshold is not prefered @ 
e2pathwalker.py @ ['--dmin'] @ 2.0 @ float @ Mininum Ca-Ca length @ 
e2pathwalker.py @ ['--dmax'] @ 10.0 @ float @ Maximum Ca-Ca length @ 
e2pathwalker.py @ ['--noise'] @ 0.0 @ float @ Add Gaussian Noise @ 
e2pathwalker.py @ ['--solver'] @ None @ str @ Run TSP Solver: concorde or lkh @ 
e2pathwalker.py @ ['--atomtype'] @ CA @ str @ Load Atom Type. Default: 'CA'. Options: 'C' or 'all' @ 
e2pathwalker.py @ ['--chain'] @ None @ str @ Load Chain. Default: load all chains @ 
e2pathwalker.py @ ['--edgefile'] @ None @ str @ Load fixed fragment file; one sequence of forced connections per line, separated by space. @ 
e2pathwalker.py @ ['-e', '--edge'] @ None @ None @ Forced edge: e.g. -e1,3 @ 
e2pathwalker.py @ ['-e', '--edge'] @ None @ None @ Forced edge: e.g. -e1,3 @ 
e2pathwalker.py @ ['--fixed'] @ None @ str @ Same as --edgefile. @ 
e2pathwalker.py @ ['--iterations'] @ 1 @ int @ Iterations @ 
e2pathwalker.py @ ['--json'] @ 1 @ int @ If writing output pdb, also write JSON metadata. Default: 1. Options: 0, 1 @ 
e2pathwalker.py @ ['--overwrite'] @ False @ None @ Overwrite files without prompting @ 
e2pathwalker.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2pathwalker.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2pathwalker.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2pathwalker.py @ ['--subunit'] @ 1 @ int @ Number of subunits. @ 
e2pdb2mrc.py @ ['--apix'] @ 1.0 @ float @ A/voxel @ 
e2pdb2mrc.py @ ['--res'] @ 2.8 @ float @ Resolution in A, equivalent to Gaussian lowpass with 1/e width at 1/res @ 
e2pdb2mrc.py @ ['--box'] @ None @ str @ Box size in pixels, <xyz> or <x>,<y>,<z> @ 
e2pdb2mrc.py @ ['--het'] @ False @ None @ Include HET atoms in the map @ 
e2pdb2mrc.py @ ['--center'] @ False @ None @ Move the atomic center to the center of the box @ 
e2pdb2mrc.py @ ['--chains'] @ None @ str @ String list of chain identifiers to include, eg 'ABEFG' @ 
e2pdb2mrc.py @ ['--info'] @ False @ None @ If this is specified, information on the PDB file is displayed, no conversion is performed. @ 
e2pdb2mrc.py @ ['--full'] @ False @ None @ Apply non-crystallographic symmetry to obtain 'full' structure. @ 
e2pdb2mrc.py @ ['--quiet'] @ False @ None @ Verbose is the default @ 
e2pdb2mrc.py @ ['--model'] @ None @ int @ Extract only a single numbered model from a multi-model PDB @ 
e2pdb2mrc.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2pdb2mrc.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2pdb2mrc.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2pdb2mrc.py @ ['--quick'] @ False @ None @ Use a slight approximation to the Gaussian during insertion. Does not support B-factors. @ 
e2pdb2mrc.py @ ['--addpdbbfactor'] @ False @ None @ Use the bfactor/temperature factor as the atom blurring radius, equivalent to Gaussian lowpass with 1/e width at 1/bfactor @ 
e2pdb2mrc.py @ ['--omit'] @ 0.0 @ float @ Randomly omit this percentage of atoms in the output map. @ 
e2pdbviewer.py @ ['--pdbfiles'] @ None @ str @ Specify one or mode pdb files you   wish to view @ 
e2pdbviewer.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent   process, used for cross platform PPID @ 
e2pdbviewer.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher   number means higher level of verboseness @ 
e2pdbviewer.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher   number means higher level of verboseness @ 
e2plotEulers.py @ ['--iteration'] @ 0 @ int @ Refinement iteration to plot @ 
e2plotEulers.py @ ['--pointwidth'] @ 1.0 @ float @ The relative scale of the points plotted. The absoule size is dpenedent on particle count @ 
e2plotEulers.py @ ['--sym'] @ c1 @ None @ Set the symmetry; if no value is given then the model is assumed to have no symmetry. Choices are: i, c, d, tet, icos, or oct. @ 
e2plotEulers.py @ ['--norticklabels'] @ False @ None @ Disable radius tick labels @ 
e2plotEulers.py @ ['--nothetaticklabels'] @ False @ None @ Disable Theta tick labels @ 
e2plotEulers.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2proc2d.py @ ['--apix'] @ None @ float @ A/pixel for S scaling @ 
e2proc2d.py @ ['--average'] @ False @ None @ Averages all input images (without alignment) and writes a single output image @ 
e2proc2d.py @ ['--avgseq'] @ 0 @ int @ Averages sets of N sequential frames. eg - if N=4 and the input contains 100 images, the output would be 25 images @ 
e2proc2d.py @ ['--averager'] @ mean @ str @ If --average is specified, this is the averager to use (e2help.py averager). Default=mean @ 
e2proc2d.py @ ['--calcsf'] @ None @ str @ calculate a radial structure factor for the image and write it to the output file, must specify apix. divide into <n> angular bins @ 
e2proc2d.py @ ['--calccont'] @ False @ None @ Compute the low resolution azimuthal contrast of each image and put it in the header as eval_contrast_lowres. Larger values imply more 'interesting' images. @ 
e2proc2d.py @ ['--clip'] @ None @ str @ Specify the output size in pixels xsize,ysize[,xcenter,ycenter], images can be made larger or smaller. @ 
e2proc2d.py @ ['--exclude'] @ None @ str @ Excludes image numbers, either a list of comma separated values, or a filename with one number per line, first image == 0 @ 
e2proc2d.py @ ['--fftavg'] @ None @ str @ Incoherent Fourier average of all images and write a single power spectrum image @ 
e2proc2d.py @ ['--process'] @ None @ str @ apply a processor named 'processorname' with all its parameters/values. @ 
e2proc2d.py @ ['--mult'] @ None @ float @ Multiply image by a constant. mult=-1 to invert contrast. @ 
e2proc2d.py @ ['--add'] @ None @ float @ Adds a constant 'f' to the densities @ 
e2proc2d.py @ ['--addfile'] @ None @ str @ Adds the volume to another volume of identical size @ 
e2proc2d.py @ ['--first'] @ 0 @ int @ the first image in the input to process [0 - n-1]) @ 
e2proc2d.py @ ['--last'] @ -1 @ int @ the last image in the input to process @ 
e2proc2d.py @ ['--list'] @ None @ str @ Works only on the image numbers in LIST file @ 
e2proc2d.py @ ['--select'] @ None @ str @ Works only on the images in named selection set from bdb:select @ 
e2proc2d.py @ ['--randomn'] @ 0 @ int @ Selects a random subset of N particles from the file to operate on. @ 
e2proc2d.py @ ['--inplace'] @ False @ None @ Output overwrites input, USE SAME FILENAME, DO NOT 'clip' images. @ 
e2proc2d.py @ ['--interlv'] @ None @ str @ Specifies a 2nd input file. Output will be 2 files interleaved. @ 
e2proc2d.py @ ['--extractboxes'] @ False @ None @ Extracts box locations from the image header to produce a set of .box files for only the particles in the .lst files @ 
e2proc2d.py @ ['--meanshrink'] @ None @ float @ Reduce an image size by an integral (1.5 also allowed) scaling factor using average. eg - 2 will reduce image size to 1/2. Clip is not required. @ 
e2proc2d.py @ ['--medianshrink'] @ None @ int @ Reduce an image size by an integral scaling factor, uses median filter. eg - 2 will reduce image size to 1/2. Clip is not required. @ 
e2proc2d.py @ ['--fouriershrink'] @ None @ float @ Reduce an image size by an arbitrary scaling factor by clipping in Fourier space. eg - 2 will reduce image size to 1/2. @ 
e2proc2d.py @ ['--mraprep'] @ False @ None @ this is an experimental option @ 
e2proc2d.py @ ['--compressbits'] @ -1 @ int @ HDF only. Bits to keep for compression. -1 for no compression @ 
e2proc2d.py @ ['--outmode'] @ float @ str @ All EMAN2 programs write images with 4-byte floating point values when possible by default. This allows specifying an alternate format when supported (float, int8, int16, int32, uint8, uint16, uint32). Values are rescaled to fill MIN-MAX range. @ 
e2proc2d.py @ ['--outnorescale'] @ False @ None @ If specified, floating point values will not be rescaled when writing data as integers. Values outside of range are truncated. @ 
e2proc2d.py @ ['--mrc16bit'] @ False @ None @ (deprecated, use --outmode instead) output as 16 bit MRC file @ 
e2proc2d.py @ ['--mrc8bit'] @ False @ None @ (deprecated, use --outmode instead) output as 8 bit MRC file @ 
e2proc2d.py @ ['--fixintscaling'] @ None @ str @ When writing to an 8 or 16 bit integer format the data must be scaled. 'noscale' will assume the pixel values are already correct, 'full' will insure the full range of values are included in the output, 'sane' will pick a good range, a number will set the range to mean+=sigma*number @ 
e2proc2d.py @ ['--multfile'] @ None @ str @ Multiplies the volume by another volume of identical size. This can be used to apply masks, etc. @ 
e2proc2d.py @ ['--norefs'] @ False @ None @ Skip any input images which are marked as references (usually used with classes.*) @ 
e2proc2d.py @ ['--outtype'] @ None @ str @ output image format, 'mrc', 'imagic', 'hdf', etc. if specify spidersingle will output single 2D image rather than 2D stack. @ 
e2proc2d.py @ ['--radon'] @ False @ None @ Do Radon transform @ 
e2proc2d.py @ ['--randomize'] @ None @ str @ Randomly rotate/translate the image. Specify: da,dxy,flip  da is a uniform distribution over +-da degrees, dxy is a uniform distribution on x/y, if flip is 1, random handedness changes will occur @ 
e2proc2d.py @ ['--rotavg'] @ False @ None @ Compute the 1-D rotational average of each image as a final step before writing the output @ 
e2proc2d.py @ ['--rotate'] @ None @ float @ Rotate clockwise (in degrees) @ 
e2proc2d.py @ ['--rfp'] @ False @ None @ this is an experimental option @ 
e2proc2d.py @ ['--fp'] @ None @ int @ This generates rotational/translational 'footprints' for each input particle, the number indicates which algorithm to use (0-6) @ 
e2proc2d.py @ ['--scale'] @ None @ float @ Scale by specified scaling factor. Clip must also be specified to change the dimensions of the output map. @ 
e2proc2d.py @ ['--anisotropic'] @ None @ str @ Anisotropic scaling, stretches on one axis and compresses the orthogonal axis. Specify amount,angle. See e2evalrefine @ 
e2proc2d.py @ ['--selfcl'] @ None @ int @ Output file will be a 180x180 self-common lines map for each image. @ 
e2proc2d.py @ ['--setsfpairs'] @ False @ None @ Applies the radial structure factor of the 1st image to the 2nd, the 3rd to the 4th, etc @ 
e2proc2d.py @ ['--split'] @ None @ int @ Splits the input file into a set of n output files @ 
e2proc2d.py @ ['--translate'] @ None @ str @ Translate by x,y pixels @ 
e2proc2d.py @ ['--headertransform'] @ None @ int @ This will take the xform.align2d header value from each particle, and apply it. Pass 0 to perform the transform or 1 to perform the inverse. @ 
e2proc2d.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2proc2d.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2proc2d.py @ ['--plane'] @ xy @ str @ Change the plane of image processing, useful for processing 3D mrcs as 2D images. @ 
e2proc2d.py @ ['--writejunk'] @ False @ None @ Writes the image even if its sigma is 0. @ 
e2proc2d.py @ ['--swap'] @ False @ None @ Swap the byte order @ 
e2proc2d.py @ ['--threed2threed'] @ False @ None @ Process 3D image as a stack of 2D slices, then output as a 3D image @ 
e2proc2d.py @ ['--threed2twod'] @ False @ None @ Process 3D image as a stack of 2D slices, then output as a 2D stack @ 
e2proc2d.py @ ['--twod2threed'] @ False @ None @ Process a stack of 2D images, then output as a 3D image. @ 
e2proc2d.py @ ['--unstacking'] @ False @ None @ Process a stack of 2D images, then output as a series of numbered single image files @ 
e2proc2d.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2proc2d.py @ ['--step'] @ 0,1 @ str @ Specify <init>,<step>. Processes only a subset of the input data. For example, 0,2 would process only the even numbered particles @ 
e2proc2d.py @ ['--eer2x'] @ False @ None @ Render EER file on 8k grid. @ 
e2proc2d.py @ ['--eer4x'] @ False @ None @ Render EER file on 16k grid. @ 
e2proc2d.py @ ['--parallel'] @ None @ str @ Run in parallel, specify type:n=<proc>:option:option @ 
e2proc2dmulti.py @ ['--postfix'] @ None @ str @ Adds this string to each input filename to produce output filename (avoid overwriting) @ 
e2proc2dmulti.py @ ['--allparticles'] @ False @ None @ Will process all particle sets stored in BDB in the particles subdirectory @ 
e2proc2dmulti.py @ ['--apix'] @ None @ float @ A/pixel for S scaling @ 
e2proc2dmulti.py @ ['--clip'] @ None @ str @ Specify the output size in pixels xsize,ysize[,xcenter,ycenter], images can be made larger or smaller. @ 
e2proc2dmulti.py @ ['--process'] @ None @ str @ apply a processor named 'processorname' with all its parameters/values. @ 
e2proc2dmulti.py @ ['--autoinvert'] @ False @ None @ Automatically decides whether to invert each stack of images to make particles white (EMAN2 convention). Decision is made for an entire stack. Non-inverted images will NOT BET PROCESSED AT ALL ! @ 
e2proc2dmulti.py @ ['--mult'] @ None @ float @ Multiply image by a constant. mult=-1 to invert contrast. @ 
e2proc2dmulti.py @ ['--meanshrink'] @ None @ int @ Reduce an image size by an integral scaling factor using average. Clip is not required. @ 
e2proc2dmulti.py @ ['--medianshrink'] @ None @ int @ Reduce an image size by an integral scaling factor, uses median filter. Clip is not required. @ 
e2proc2dmulti.py @ ['--multfile'] @ None @ str @ Multiplies the volume by another volume of identical size. This can be used to apply masks, etc. @ 
e2proc2dmulti.py @ ['--norefs'] @ False @ None @ Skip any input images which are marked as references (usually used with classes.*) @ 
e2proc2dmulti.py @ ['--radon'] @ False @ None @ Do Radon transform @ 
e2proc2dmulti.py @ ['--randomize'] @ None @ str @ Randomly rotate/translate the image. Specify: da,dxy,flip  da is a uniform distribution over +-da degrees, dxy is a uniform distribution on x/y, if flip is 1, random handedness changes will occur @ 
e2proc2dmulti.py @ ['--rotate'] @ None @ float @ Rotate clockwise (in degrees) @ 
e2proc2dmulti.py @ ['--fp'] @ None @ int @ This generates rotational/translational 'footprints' for each input particle, the number indicates which algorithm to use (0-6) @ 
e2proc2dmulti.py @ ['--scale'] @ None @ float @ Scale by specified scaling factor. Clip must also be specified to change the dimensions of the output map. @ 
e2proc2dmulti.py @ ['--selfcl'] @ None @ int @ Output file will be a 180x180 self-common lines map for each image. @ 
e2proc2dmulti.py @ ['--translate'] @ None @ str @ Translate by x,y pixels @ 
e2proc2dmulti.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2proc2dmulti.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2proc2dmulti.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2proc2dmulti.py @ ['--writejunk'] @ False @ None @ Writes the image even if its sigma is 0. @ 
e2proc2dpar.py @ ['--outtype'] @ None @ str @ output image format, 'mrc', 'imagic', 'hdf', etc. if specify spidersingle will output single 2D image rather than 2D stack. @ 
e2proc2dpar.py @ ['--outmode'] @ float @ str @ All EMAN2 programs write images with 4-byte floating point values when possible by default. This allows specifying an alternate format when supported (float, int8, int16, int32, uint8, uint16, uint32). Values are rescaled to fill MIN-MAX range. @ 
e2proc2dpar.py @ ['--fixintscaling'] @ None @ str @ When writing to an 8 or 16 bit integer format the data must be scaled. 'noscale' will assume the pixel values are already correct, 'sane' will pick a good range, a number will set the range to mean+=sigma*number @ 
e2proc2dpar.py @ ['--apix'] @ None @ float @ A/pixel for S scaling @ 
e2proc2dpar.py @ ['--clip'] @ None @ str @ Specify the output size in pixels xsize,ysize[,xcenter,ycenter], images can be made larger or smaller. @ 
e2proc2dpar.py @ ['--process'] @ None @ str @ apply a processor named 'processorname' with all its parameters/values. @ 
e2proc2dpar.py @ ['--mult'] @ None @ float @ Multiply image by a constant. mult=-1 to invert contrast. @ 
e2proc2dpar.py @ ['--add'] @ None @ float @ Adds a constant 'f' to the densities @ 
e2proc2dpar.py @ ['--meanshrink'] @ None @ float @ Reduce an image size by an integral (1.5 also allowed) scaling factor using average. eg - 2 will reduce image size to 1/2. Clip is not required. @ 
e2proc2dpar.py @ ['--medianshrink'] @ None @ int @ Reduce an image size by an integral scaling factor, uses median filter. eg - 2 will reduce image size to 1/2. Clip is not required. @ 
e2proc2dpar.py @ ['--fouriershrink'] @ None @ float @ Reduce an image size by an arbitrary scaling factor by clipping in Fourier space. eg - 2 will reduce image size to 1/2. @ 
e2proc2dpar.py @ ['--multfile'] @ None @ str @ Multiplies the image by another image of identical size. This can be used to apply masks, etc. @ 
e2proc2dpar.py @ ['--randomize'] @ None @ str @ Randomly rotate/translate the image. Specify: da,dxy,flip  da is a uniform distribution over +-da degrees, dxy is a uniform distribution on x/y, if flip is 1, random handedness changes will occur @ 
e2proc2dpar.py @ ['--rotate'] @ None @ float @ Rotate clockwise (in degrees) @ 
e2proc2dpar.py @ ['--rfp'] @ False @ None @ this is an experimental option @ 
e2proc2dpar.py @ ['--fp'] @ None @ int @ This generates rotational/translational 'footprints' for each input particle, the number indicates which algorithm to use (0-6) @ 
e2proc2dpar.py @ ['--scale'] @ None @ float @ Scale by specified scaling factor. Clip must also be specified to change the dimensions of the output map. @ 
e2proc2dpar.py @ ['--anisotropic'] @ None @ str @ Anisotropic scaling, stretches on one axis and compresses the orthogonal axis. Specify amount,angle. See e2evalrefine @ 
e2proc2dpar.py @ ['--selfcl'] @ None @ int @ Output file will be a 180x180 self-common lines map for each image. @ 
e2proc2dpar.py @ ['--translate'] @ None @ str @ Translate by x,y pixels @ 
e2proc2dpar.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2proc2dpar.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2proc2dpar.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2proc2dpar.py @ ['--parallel'] @ None @ str @ Run in parallel, only thread:n supported @ 
e2proc2dpar.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2proc3d_huge.py @ ['--streaksubtract'] @ None @ str @ This will subtract the histogram peak value along a single axis in the volume. @ 
e2proc3d_huge.py @ ['--process'] @ None @ str @ apply a processor named 'processorname' with all its parameters/values. WARNING: this works by operating on fragments of the overall image at a time, and some processors won't work properly this way. @ 
e2proc3d_huge.py @ ['--mult'] @ None @ float @ Scales the densities by a fixed number in the output @ 
e2proc3d_huge.py @ ['--multfile'] @ None @ str @ Multiplies the volume by another volume of identical size. This can be used to apply masks, etc. @ 
e2proc3d_huge.py @ ['--add'] @ None @ float @ Adds a constant 'f' to the densities @ 
e2proc3d_huge.py @ ['--trans'] @ 0 @ str @ Translate map by dx,dy,dz  @ 
e2proc3d_huge.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2proc3d_huge.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2proc3d_huge.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2procheader.py @ ['--addfilename'] @ False @ None @ Adds the original filename of a file or stack to the header of each particle. This only works for .hdf files. @ 
e2procheader.py @ ['--input'] @ None @ str @ File or stack for which to fix header parameters. To indicate multiple files, do not use --input. Simply provide the program name followed by the string common to all files to process and *, followed by all parameters of interest. For example, to process all .mrc files in a directory, you would run e2fixheader.py *.mrc <parameters>. @ 
e2procheader.py @ ['--output'] @ None @ str @ File to write the fixed stack to. If not provided, the stack in --input will be overwritten. @ 
e2procheader.py @ ['--params'] @ None @ str @ Comma separated pairs of parameter:value. The parameter will be changed to the value specified. @ 
e2procheader.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2procheader.py @ ['--refheader'] @ None @ str @ If supplied, the header of this image will be copied to the header of all images in --input. @ 
e2procheader.py @ ['--stem'] @ None @ str @ Some parameters have common stems. For example, 'origin_x', 'origin_y', 'origin"x'. Supply the stem and all parameters containing it will be modified. @ 
e2procheader.py @ ['--stemval'] @ None @ str @ New value for all parameters containing --stem. @ 
e2procheader.py @ ['--valtype'] @ str @ str @ Type of the value to enforce. It can be: str, float, int, list, or transform. @ 
e2procheader.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2procheader.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2procjson.py @ ['--allinfo'] @ False @ None @ Uses all of the .json files in info/ rather than specifying a list on the command line @ 
e2procjson.py @ ['--listkeys'] @ False @ None @ Lists all of the keys in all of the specified info files @ 
e2procjson.py @ ['--remaplstkeys'] @ False @ None @ For JSON files where the keys are image name,# pairs referencing a .lst file, will replace each key with the original image @ 
e2procjson.py @ ['--retype'] @ None @ str @ For JSON files where the keys are image name,# pairs, will change the __type value in the image name in all keys @ 
e2procjson.py @ ['--extractkey'] @ None @ str @ This will extract a single named value from each specified file. Output will be multicolumn if the referenced label is an object, such as CTF. @ 
e2procjson.py @ ['--extractspt'] @ False @ None @ This will extract the parameters from a particle_parms JSON file in SPT projects as a multicolumn text file. @ 
e2procjson.py @ ['--removekey'] @ None @ str @ DANGER! This will remove all data associated with the named key from all listed .json files. @ 
e2procjson.py @ ['--output'] @ jsoninfo.txt @ str @ Output for text operations (not JSON) filename. default = jsoninfo.txt @ 
e2procjson.py @ ['--setoption'] @ None @ str @ Set a single option in application preferences, eg - display2d.autocontrast:true @ 
e2procjson.py @ ['--listoptions'] @ False @ None @ List all currently set user application preferences @ 
e2procjson.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2procjson.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2procjson.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2proclst.py @ ['--create'] @ None @ str @ to use this option, the input files should be image files. Specify an .lst or .lsx file to create here (e.g., --create mylst.lst) with references to all of the images in the inputs. @ 
e2proclst.py @ ['--eosplit'] @ False @ None @ Will generate _even and _odd .lst files for each specified input .lst file @ 
e2proclst.py @ ['--dereforig'] @ None @ str @ Extract the data_source and data_n parameters from each image in the file and create a new .lst file referencing the original image(s) @ 
e2proclst.py @ ['--exclude'] @ None @ str @ only works if --create is supplied. comma-separated list of indexes from the input file(s) to EXCLUDE from the created .lst file. @ 
e2proclst.py @ ['--include'] @ None @ str @ only works if --create is supplied. comma-separated list of indexes to take from the input file(s) to INCLUDE in the created .lst file. if you have the list of indexes to include in a .txt file, you can provide it through --list. @ 
e2proclst.py @ ['--inplace'] @ False @ None @ only works with --create. if the stack specified in --create already exists, this will prevent appending to it. rather, the file will be modified in place. @ 
e2proclst.py @ ['--force'] @ False @ None @ only works with --create. if the stack specified in --create already exists, it will be removed and rewritten. @ 
e2proclst.py @ ['--list'] @ None @ str @ only works if --create is supplied. .txt file with a list of indexes (one per line/row) to take from the input file(s) to INCLUDE in the created .lst file. @ 
e2proclst.py @ ['--merge'] @ None @ str @ Specify the output name here. This will concatenate all of the input .lst files into a single output @ 
e2proclst.py @ ['--mergesort'] @ None @ str @ Specify the output name here. This will merge all of the input .lst files into a single (resorted) output @ 
e2proclst.py @ ['--mergeeo'] @ False @ None @ Merge even odd lst. @ 
e2proclst.py @ ['--minhisnr'] @ -1 @ float @ Integrated SNR from 1/10-1/4 1/A must be larger than this @ 
e2proclst.py @ ['--minlosnr'] @ -1 @ float @ Integrated SNR from 1/200-1/20 1/A must be larger than this @ 
e2proclst.py @ ['--mindf'] @ -1 @ float @ Minimum defocus @ 
e2proclst.py @ ['--maxdf'] @ -1 @ float @ Maximum defocus @ 
e2proclst.py @ ['--numaslist'] @ None @ str @ extract the particle indexes (numbers) only from an lst file into a text file (one number per line). @ 
e2proclst.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2proclst.py @ ['--range'] @ None @ str @ Range of particles to use. Works only with --create option. Input of 0,10,2 means range(0,10, step=2). @ 
e2proclst.py @ ['--retype'] @ None @ str @ If a lst file is referencing a set of particles from particles/imgname__oldtype.hdf, this will change oldtype to the specified string in-place (modifies input files) @ 
e2proclst.py @ ['--refile'] @ None @ str @ similar to retype, but replaces the full filename of the source image file with the provided string @ 
e2proclst.py @ ['--nocomments'] @ False @ None @ Removes the comments from each line of the lst file. @ 
e2proclst.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2proclst.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2procpdb.py @ ['--animorph'] @ None @ str @ This will use a morph vector file (segment3d) to morph atom positions,#P [animorph=<n>,<apix>,<vecfile>] @ 
e2procpdb.py @ ['--scale'] @ 1.0 @ float @ scale @ 
e2procpdb.py @ ['--center'] @ 0.0,0.0,0.0 @ str @ center of the rotation, (0,0,0) @ 
e2procpdb.py @ ['--chains'] @ None @ str @ String list of chain identifiers to include, eg 'ABEFG' @ 
e2procpdb.py @ ['--trans'] @ 0,0,0 @ str @ transform, (0,0,0) @ 
e2procpdb.py @ ['--include'] @ ['helix', 'sheet', 'other'] @ str @ savetype @ 
e2procpdb.py @ ['--mirror'] @ 0 @ bool @ mirror @ 
e2procpdb.py @ ['--matrix'] @ 0,0,0,0,0,0,0,0,0,0,0,0 @ str @ transform matrix. @ 
e2procpdb.py @ ['--rot'] @ None @ str @ Rotate map. Specify az,alt,phi or convention:par=val:par=val:...  eg - mrc:psi=22:theta=15:omega=7 @ 
e2procpdb.py @ ['--type'] @ eman @ str @ convention type @ 
e2procpdb.py @ ['--az'] @ 0 @ float @ az in eman convention. @ 
e2procpdb.py @ ['--alt'] @ 0 @ float @ alt in eman convention. @ 
e2procpdb.py @ ['--phi'] @ 0 @ float @ phi. @ 
e2procpdb.py @ ['--alpha'] @ 0 @ float @ alpha in imagic convention. @ 
e2procpdb.py @ ['--beta'] @ 0 @ float @ beta in imagic convention. @ 
e2procpdb.py @ ['--gamma'] @ 0 @ float @ gamma in imagic convention. @ 
e2procpdb.py @ ['--theta'] @ 0 @ float @ theta. @ 
e2procpdb.py @ ['--psi'] @ 0 @ float @ psi in spider convention. @ 
e2procpdb.py @ ['--xtilt'] @ 0 @ float @ xtilt in xyz convention. @ 
e2procpdb.py @ ['--ytilt'] @ 0 @ float @ ytilt in xyz convention. @ 
e2procpdb.py @ ['--ztilt'] @ 0 @ float @ ztilt in xyz convention. @ 
e2procpdb.py @ ['--omega'] @ 0 @ float @ omega. @ 
e2procpdb.py @ ['--e0'] @ 0 @ float @ e0 in quaternion convention. @ 
e2procpdb.py @ ['--e1'] @ 0 @ float @ e1 in quaternion convention. @ 
e2procpdb.py @ ['--e2'] @ 0 @ float @ e2 in quaternion convention. @ 
e2procpdb.py @ ['--e3'] @ 0 @ float @ e3 in quaternion convention. @ 
e2procpdb.py @ ['--n1'] @ 0 @ float @ n1. @ 
e2procpdb.py @ ['--n2'] @ 0 @ float @ n2. @ 
e2procpdb.py @ ['--n3'] @ 0 @ float @ n3. @ 
e2procpdb.py @ ['--q'] @ 0 @ float @ q in sgirot convention. @ 
e2proctxt.py @ ['--merge'] @ None @ str @ Merge several files into a single output. All inputs must have the same number of rows. Row comments stripped. @ 
e2proctxt.py @ ['--sortcomment'] @ False @ None @ Sorts rows based on per-row comment (after #) before merging @ 
e2proctxt.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2proctxt.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2proctxt.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2procxml.py @ ['--fscxml2txt'] @ False @ None @ Convert the input XML FSC file into a text file @ 
e2procxml.py @ ['--fsctxt2xml'] @ FSC Plot @ str @ Convert the input text FSC file into an xml file. The value provided is the title of the graph. For example: --fsctxt2xml="My Graph Title" @ 
e2procxml.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2procxml.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2project3d.py @ ['--sym'] @ c1 @ None @ Specify symmetry - choices are: c<n>, d<n>, h<n>, tet, oct, icos. If multiple input models are specified, multiple comma-separated symmetries may also be specified. @ 
e2project3d.py @ ['--orientgen'] @ None @ None @ The orientation generator to use. See e2help.py orientgen. Example: --orientgen=eman:delta=3.0:inc_mirror=0:perturb=1 @ 
e2project3d.py @ ['--outfile'] @ e2proj.hdf @ None @ Output file. Default is 'e2proj.img' @ 
e2project3d.py @ ['--smear'] @ 0 @ int @ Used in conjunction with --phitoo, this will rotationally smear between phi steps. The user must specify the amount of smearing (typically 2-10) @ 
e2project3d.py @ ['--projector'] @ standard @ None @ Projector to use @ 
e2project3d.py @ ['--force'] @ False @ None @ Force overwrite the output file if it exists @ 
e2project3d.py @ ['--append'] @ False @ None @ Append to the output file @ 
e2project3d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2project3d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2project3d.py @ ['--check'] @ False @ None @ Checks to see if the command line arguments will work. @ 
e2project3d.py @ ['--nofilecheck'] @ False @ None @ Turns file checking off in the check functionality - used by e2refine.py. @ 
e2project3d.py @ ['--postprocess'] @ None @ str @ postprocessor to be applied to each projection. There can be more than one postprocessor, and they are applied in the order in which they are specified. See e2help.py processors for a complete list of available processors. @ 
e2project3d.py @ ['--cuda'] @ False @ None @ Use CUDA for the projections. @ 
e2project3d.py @ ['--prethreshold'] @ False @ None @ Applies an automatic threshold to the volume before projecting @ 
e2project3d.py @ ['--compressbits'] @ 10 @ int @ Bits to keep when writing projections with compression. 0->lossless floating point. Default 10 (3 significant figures) @ 
e2project3d.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2project3d.py @ ['--parallel'] @ None @ str @ Parallelism string @ 
e2projectupdate21.py @ ['--yes'] @ False @ None @ This will skip the 'are you sure' question, and proceed with the conversion @ 
e2projectupdate21.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2projectupdate21.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ptcltrace.py @ ['--output'] @ ptcltrace.txt @ str @ Name of output file. @ 
e2ptcltrace.py @ ['--refine'] @ None @ None @ Specify a refinement directory as an alternative to providing classmx files. Even and odd subsets will be interleaved based on input set. @ 
e2ptcltrace.py @ ['--sym'] @ c1 @ str @ Symmetry to be used in searching adjacent unit cells @ 
e2ptcltrace.py @ ['--printbad'] @ 180.0 @ float @ Print the particle number if the orientation mismatch is larger than the specified angle in the last pair of files @ 
e2ptcltrace.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2ptcltrace.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ptcltrace.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ptclvsmap.py @ ['--input'] @ None @ str @ The name of the image file containing the particle data @ 
e2ptclvsmap.py @ ['--model'] @ None @ str @ The map to use as a starting point for refinement @ 
e2ptclvsmap.py @ ['--filterout'] @ False @ None @ Filters output particles to match projections @ 
e2ptclvsmap.py @ ['--angstep'] @ 9.0 @ float @ Angular separation of projections. Default 9.0 degrees. @ 
e2ptclvsmap.py @ ['--sym'] @ c1 @ None @ Specify symmetry - choices are: c<n>, d<n>, tet, oct, icos. @ 
e2ptclvsmap.py @ ['--simalign'] @ rotate_translate_flip @ str @ Default=auto. The name of an 'aligner' to use prior to comparing the images @ 
e2ptclvsmap.py @ ['--simaligncmp'] @ ccc @ str @ Default=auto. Name of the aligner along with its construction arguments @ 
e2ptclvsmap.py @ ['--simralign'] @ None @ str @ Default=auto. The name and parameters of the second stage aligner which refines the results of the first alignment @ 
e2ptclvsmap.py @ ['--simraligncmp'] @ ccc @ str @ Default=auto. The name and parameters of the comparitor used by the second stage aligner. @ 
e2ptclvsmap.py @ ['--simcmp'] @ optsub:maxres=12 @ str @ Default=auto. The name of a 'cmp' to be used in comparing the aligned images @ 
e2ptclvsmap.py @ ['--parallel'] @ None @ str @ Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2ptclvsmap.py @ ['--threads'] @ 1 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2ptclvsmap.py @ ['--path'] @ None @ str @ The name of a directory where results are placed. Default = create new ptclmap_xx @ 
e2ptclvsmap.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ptclvsmap.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2rawdata.py @ ['--invert'] @ False @ None @ Invert contrast @ 
e2rawdata.py @ ['--compressbits'] @ 6 @ int @ Bits to keep when writing images. 4 generally safe for raw data. 0-> true lossless (floating point). Default 6 @ 
e2rawdata.py @ ['--edgenorm'] @ False @ None @ Edge normalize @ 
e2rawdata.py @ ['--usefoldername'] @ False @ None @ If you have the same image filename in multiple folders, and need to import into the same project, this will prepend the folder name on each image name @ 
e2rawdata.py @ ['--xraypixel'] @ False @ None @ Filter X-ray pixels @ 
e2rawdata.py @ ['--ctfest'] @ False @ None @ Perform CTF fitting on the (tiled) frame @ 
e2rawdata.py @ ['--phaseplate'] @ False @ None @ Include phase/amplitude contrast in CTF estimation. For use with hole-less phase plates. @ 
e2rawdata.py @ ['--astigmatism'] @ False @ None @ Includes astigmatism in automatic fitting @ 
e2rawdata.py @ ['--moverawdata'] @ False @ None @ Move raw data to directory ./raw_micrographs after filtration @ 
e2rawdata.py @ ['--apix'] @ None @ float @ Angstroms per pixel for all images @ 
e2rawdata.py @ ['--voltage'] @ None @ float @ Microscope voltage in KV @ 
e2rawdata.py @ ['--cs'] @ None @ float @ Microscope Cs (spherical aberation) @ 
e2rawdata.py @ ['--ac'] @ 10 @ float @ Amplitude contrast (percentage, default=10) @ 
e2rawdata.py @ ['--threads'] @ 1 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2rawdata.py @ ['--defocusmin'] @ 0.6 @ float @ Minimum autofit defocus @ 
e2rawdata.py @ ['--defocusmax'] @ 4 @ float @ Maximum autofit defocus @ 
e2rawdata.py @ ['--verbose', '-v'] @ 0 @ int @ verbosity [0-9] @ 
e2rawdata.py @ ['--verbose', '-v'] @ 0 @ int @ verbosity [0-9] @ 
e2rawdata.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2rct.py @ ['--path'] @ None @ str @ Path for the rct reconstruction, default=auto @ 
e2rct.py @ ['--untiltdata'] @ None @ str @ Name of the tilted dataset @ 
e2rct.py @ ['--tiltdata'] @ None @ str @ Name of the tilted dataset @ 
e2rct.py @ ['--classavg'] @ None @ str @ Name of classavg file created by e2refine2d.py @ 
e2rct.py @ ['--stagetilt'] @ 0 @ float @ Amount of tiliting of the cryo stage, default=0, get the stage tilt from particle attributes. Only possible if e2RCTboxer was used for particle picking @ 
e2rct.py @ ['--careject'] @ None @ str @ class averages to reject, default=None @ 
e2rct.py @ ['--minproj'] @ 1 @ int @ Minimum number of projections/images in a class average, for a class average to be used for a reconstruction, default=auto @ 
e2rct.py @ ['--align'] @ False @ None @ Switch on image alignment. This is only translational alignment for the tilted images, and uses a iterative method similar to EMAN1 centalignint @ 
e2rct.py @ ['--tiltaxis'] @ False @ None @ Do a tiltaxis correction(Takes into account variations in tilt axis from micrograph to micrograph. Only possible if e2RCTboxer was used for particle picking @ 
e2rct.py @ ['--maxshift'] @ 2 @ int @ Maximun amount to shift the images during alignment @ 
e2rct.py @ ['--process'] @ None @ str @ process RCT recons. Usually used to filter RCTS @ 
e2rct.py @ ['--avgrcts'] @ False @ None @ If set recons from each CA will be alinged and averaged. @ 
e2rct.py @ ['--reference'] @ None @ str @ Reference used to align RCT recons to, needs to be aligned to symetry axis is --sym is specified @ 
e2rct.py @ ['--sym'] @ c1 @ None @ Set the symmetry; if no value is given then the model is assumed to have no symmetry. Choices are: i, c, d, tet, icos, or oct. @ 
e2rct.py @ ['--cuda'] @ False @ None @ Use CUDA for the alignment step. @ 
e2rct.py @ ['--aligngran'] @ 10.0 @ float @ Fineness of global search in e2align3d.py, default=10.0 @ 
e2rct.py @ ['--weightrecons'] @ False @ None @ Weight the reconstruction by particle numbers. @ 
e2rct.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2rct.py @ ['--verbose'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refine2d.py @ ['--path'] @ None @ str @ Path for the refinement, default=auto @ 
e2refine2d.py @ ['--input'] @ None @ str @ The name of the file containing the particle data @ 
e2refine2d.py @ ['--ncls'] @ 32 @ int @ Number of classes to generate @ 
e2refine2d.py @ ['--normproj'] @ False @ None @ Normalizes each projected vector into the MSA subspace. Note that this is different from normalizing the input images since the subspace is not expected to fully span the image @ 
e2refine2d.py @ ['--fastseed'] @ False @ None @ Will seed the k-means loop quickly, but may produce less consistent results. Always use this when generating >~100 classes. @ 
e2refine2d.py @ ['--iter'] @ 8 @ int @ The total number of refinement iterations to perform @ 
e2refine2d.py @ ['--nbasisfp'] @ 12 @ int @ Number of MSA basis vectors to use when classifying particles @ 
e2refine2d.py @ ['--automask'] @ False @ None @ Automasking during class-averaging to help with centering when particle density is high @ 
e2refine2d.py @ ['--naliref'] @ 5 @ int @ Number of alignment references to when determining particle orientations @ 
e2refine2d.py @ ['--parallel'] @ None @ str @ Run in parallel, specify type:<option>=<value>:<option>:<value> @ 
e2refine2d.py @ ['--centeracf'] @ False @ None @ This option has been removed in favor of a new centering algorithm @ 
e2refine2d.py @ ['--center'] @ xform.center @ str @ If the default centering algorithm (xform.center) doesn't work well, you can specify one of the others here (e2help.py processor center) @ 
e2refine2d.py @ ['--check'] @ False @ None @ Checks the contents of the current directory to verify that e2refine2d.py command will work - checks for the existence of the necessary starting files and checks their dimensions. Performs no work  @ 
e2refine2d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refine2d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refine2d.py @ ['--maxshift'] @ -1 @ int @ Maximum particle translation in x and y @ 
e2refine2d.py @ ['--exclude'] @ None @ str @ The named file should contain a set of integers, each representing an image from the input file to exclude. @ 
e2refine2d.py @ ['--resume'] @ False @ None @ This will cause a check of the files in the current directory, and the refinement will resume after the last completed iteration. It's ok to alter other parameters. @ 
e2refine2d.py @ ['--initial'] @ None @ str @ File containing starting class-averages. If not specified, will generate starting averages automatically @ 
e2refine2d.py @ ['--minchange'] @ -1 @ int @ Minimum number of particles that change group before deicding to terminate. Default = -1 (auto) @ 
e2refine2d.py @ ['--simalign'] @ rotate_translate_tree @ str @ The name of an 'aligner' to use prior to comparing the images (default=rotate_translate_tree) @ 
e2refine2d.py @ ['--simaligncmp'] @ ccc @ str @ Name of the aligner along with its construction arguments (default=ccc) @ 
e2refine2d.py @ ['--simralign'] @ None @ str @ The name and parameters of the second stage aligner which refines the results of the first alignment @ 
e2refine2d.py @ ['--simraligncmp'] @ dot @ str @ The name and parameters of the comparitor used by the second stage aligner. (default=dot). @ 
e2refine2d.py @ ['--simcmp'] @ ccc @ str @ The name of a 'cmp' to be used in comparing the aligned images (default=ccc) @ 
e2refine2d.py @ ['--shrink'] @ 0 @ int @ Optionally shrink the input particles by an integer amount prior to computing similarity scores. For speed purposes. default=0, no shrinking @ 
e2refine2d.py @ ['--classkeep'] @ 0.85 @ float @ The fraction of particles to keep in each class, based on the similarity score generated by the --cmp argument (default=0.85). @ 
e2refine2d.py @ ['--classkeepsig'] @ False @ None @ Change the keep ('--keep') criterion from fraction-based to sigma-based. @ 
e2refine2d.py @ ['--classiter'] @ 5 @ int @ Number of iterations to use when making class-averages (default=5) @ 
e2refine2d.py @ ['--classalign'] @ rotate_translate_tree @ str @ If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average. @ 
e2refine2d.py @ ['--classaligncmp'] @ ccc @ str @ This is the name and parameters of the comparitor used by the fist stage aligner  Default is dot. @ 
e2refine2d.py @ ['--classralign'] @ None @ str @ The second stage aligner which refines the results of the first alignment in class averaging. Default is None. @ 
e2refine2d.py @ ['--classraligncmp'] @ ccc @ str @ The comparitor used by the second stage aligner in class averageing. Default is dot:normalize=1. @ 
e2refine2d.py @ ['--classaverager'] @ ctf.weight.autofilt @ str @ The averager used to generate the class averages. Default is 'mean'. @ 
e2refine2d.py @ ['--classcmp'] @ ccc @ str @ The name and parameters of the comparitor used to generate similarity scores, when class averaging. Default is ccc' @ 
e2refine2d.py @ ['--classnormproc'] @ normalize.edgemean @ str @ Normalization applied during class averaging @ 
e2refine2d.py @ ['--classrefsf'] @ False @ None @ Use the setsfref option in class averaging to produce better filtered averages. @ 
e2refine2d.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2refine2d_bispec.py @ ['--path'] @ None @ str @ Path for the refinement, default=auto @ 
e2refine2d_bispec.py @ ['--input'] @ None @ str @ The name of the file containing the particle data @ 
e2refine2d_bispec.py @ ['--ncls'] @ 32 @ int @ Number of classes to generate @ 
e2refine2d_bispec.py @ ['--alignsort'] @ False @ None @ This will align and sort the final class-averages based on mutual similarity. @ 
e2refine2d_bispec.py @ ['--msamode'] @ pca @ str @ e2msa can use a variety of different dimensionality reduction algorithms, the default is Principal Component Analysis (PCA), but others are available, see e2msa.py @ 
e2refine2d_bispec.py @ ['--basisrefs'] @ None @ str @ Will use a set of existing class-averages/projections to generate the Eigenbasis for classification. This must be an image stack with the same dimensions as the particle data. @ 
e2refine2d_bispec.py @ ['--normproj'] @ False @ None @ Normalizes each projected vector into the MSA subspace. Note that this is different from normalizing the input images since the subspace is not expected to fully span the image @ 
e2refine2d_bispec.py @ ['--iter'] @ 0 @ int @ The total number of refinement iterations to perform @ 
e2refine2d_bispec.py @ ['--nbasisfp'] @ 8 @ int @ Number of MSA basis vectors to use when classifying particles @ 
e2refine2d_bispec.py @ ['--parallel'] @ thread:4 @ str @ Run in parallel, specify type:<option>=<value>:<option>:<value> @ 
e2refine2d_bispec.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2refine2d_bispec.py @ ['--center'] @ xform.center @ str @ If the default centering algorithm (xform.center) doesn't work well, you can specify one of the others here (e2help.py processor center) @ 
e2refine2d_bispec.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refine2d_bispec.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refine2d_bispec.py @ ['--classkeep'] @ 0.8 @ float @ The fraction of particles to keep in each class, based on the similarity score generated by the --cmp argument (default=0.8). @ 
e2refine2d_bispec.py @ ['--classkeepsig'] @ False @ None @ Change the keep ('--keep') criterion from fraction-based to sigma-based. @ 
e2refine2d_bispec.py @ ['--classiter'] @ 4 @ int @ Number of iterations to use when making class-averages (default=4) @ 
e2refine2d_bispec.py @ ['--classalign'] @ rotate_translate_tree:flip=1 @ str @ If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average. @ 
e2refine2d_bispec.py @ ['--classaligncmp'] @ ccc @ str @ This is the name and parameters of the comparitor used by the fist stage aligner  Default is dot. @ 
e2refine2d_bispec.py @ ['--classralign'] @ None @ str @ The second stage aligner which refines the results of the first alignment in class averaging. Default is None. @ 
e2refine2d_bispec.py @ ['--classraligncmp'] @ ccc @ str @ The comparitor used by the second stage aligner in class averageing. Default is dot:normalize=1. @ 
e2refine2d_bispec.py @ ['--classaverager'] @ ctf.weight.autofilt @ str @ The averager used to generate the class averages. Default is 'mean'. @ 
e2refine2d_bispec.py @ ['--classcmp'] @ ccc @ str @ The name and parameters of the comparitor used to generate similarity scores, when class averaging. Default is ccc' @ 
e2refine2d_bispec.py @ ['--classnormproc'] @ normalize.edgemean @ str @ Normalization applied during class averaging @ 
e2refine2d_bispec.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2refine_easy.py @ ['--input'] @ None @ str @ Image stack containing phase-flipped particles used for alignment @ 
e2refine_easy.py @ ['--inputavg'] @ None @ str @ Optional file containing alternate version of the particles to use for reconstruction after alignment @ 
e2refine_easy.py @ ['--model'] @ None @ str @ The map to use as a starting point for refinement @ 
e2refine_easy.py @ ['--startfrom'] @ None @ str @ Path to an existing refine_xx directory to continue refining from. Alternative to --input and --model. @ 
e2refine_easy.py @ ['--targetres'] @ 25.0 @ float @ Target resolution in A of this refinement run. Usually works best in at least two steps (low/medium resolution, then final resolution) when starting with a poor starting model. Usually 3-4 iterations is sufficient. @ 
e2refine_easy.py @ ['--speed'] @ 5 @ int @ (1-7) Balances speed vs precision. Larger values sacrifice a bit of potential resolution for significant speed increases. Set to 1 when really pushing resolution. Set to 7 for initial refinements. default=5 @ 
e2refine_easy.py @ ['--sym'] @ c1 @ None @ Specify symmetry - choices are: c<n>, d<n>, tet, oct, icos. @ 
e2refine_easy.py @ ['--breaksym'] @ False @ None @ If selected, reconstruction will be asymmetric with sym= specifying a known pseudosymmetry, not an imposed symmetry. @ 
e2refine_easy.py @ ['--focused'] @ None @ None @ Highly experimental, and under development! Specify a 3-D mask. Not used for coarse alignment, but only for final 'fine tuning' and symmetrizing. With symmetry also use breaksym. @ 
e2refine_easy.py @ ['--tophat'] @ None @ str @ 'local', 'localwiener' or 'global'. Instead of imposing a final overall Wiener filter, use a tophat filter (global similar to Relion). local is a local tophat filter, localwiener is a localized Wiener filter @ 
e2refine_easy.py @ ['--nogoldfinal'] @ False @ None @ If selected, the final iteration will turn off gold-standard behavior and both halves will be refined from the same model. Normally used with --tophat=local. @ 
e2refine_easy.py @ ['--treeclassify'] @ False @ None @ Classify using a binary tree. @ 
e2refine_easy.py @ ['--norandomphase'] @ False @ None @ Suppress independent phase randomization of input map. Only appropriate if input map has been preprocessed in some suitable fashion. @ 
e2refine_easy.py @ ['--m3dold'] @ False @ None @ Use the traditional e2make3d program instead of the new e2make3dpar program @ 
e2refine_easy.py @ ['--iter'] @ 6 @ int @ The total number of refinement iterations to perform. Default=auto @ 
e2refine_easy.py @ ['--mass'] @ 0 @ float @ The ~mass of the particle in kilodaltons, used to run normalize.bymass. Due to resolution effects, not always the true mass. @ 
e2refine_easy.py @ ['--invar'] @ False @ None @ Will use invariants for orientation determination, set invariant type in project (EXPERIMENTAL). @ 
e2refine_easy.py @ ['--mirror'] @ False @ None @ Default for non bispectrum refinement is to handle mirrored projections by permitting flips in 2-D alignment. This will force the normal refinement to make explict mirrored projections @ 
e2refine_easy.py @ ['--apix'] @ 0 @ float @ The angstrom per pixel of the input particles. Normally set to 0, which will read the value from the header of the input file @ 
e2refine_easy.py @ ['--sep'] @ -1 @ int @ The number of classes each particle can contribute towards (normally 1). Increasing will improve SNR, but produce rotational blurring. @ 
e2refine_easy.py @ ['--classkeep'] @ 0.9 @ float @ The fraction of particles to keep in each class, based on the similarity score. (default=0.9 -> 90%%) @ 
e2refine_easy.py @ ['--classautomask'] @ False @ None @ This will apply an automask to the class-average during iterative alignment for better accuracy. The final class averages are unmasked. @ 
e2refine_easy.py @ ['--prethreshold'] @ False @ None @ Applies a threshold to the volume just before generating projections. A sort of aggressive solvent flattening for the reference. @ 
e2refine_easy.py @ ['--eulerrefine'] @ False @ None @ Refines Euler angles of class-averages before reconstruction @ 
e2refine_easy.py @ ['--m3dkeep'] @ 0.8 @ float @ The fraction of slices to keep in e2make3d.py. Default=0.8 -> 80%% @ 
e2refine_easy.py @ ['--m3dpostprocess'] @ None @ str @ Default=none. An arbitrary post-processor to run after all other automatic processing. Maps are autofiltered, so a low-pass filter should not normally be used here. @ 
e2refine_easy.py @ ['--parallel'] @ thread:4 @ str @ Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2refine_easy.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2refine_easy.py @ ['--path'] @ None @ str @ The name of a directory where results are placed. Default = create new refine_xx @ 
e2refine_easy.py @ ['--compressbits'] @ 10 @ int @ Bits of precision to keep in class-averages and 3-D volumes, 0->losless, default=10 (3 decimal digits of precision) @ 
e2refine_easy.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refine_easy.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refine_easy.py @ ['--automaskexpand'] @ -1 @ int @ Default=boxsize/20. Specify number of voxels to expand mask before soft edge. Use this if low density peripheral features are cut off by the mask. @ 
e2refine_easy.py @ ['--automask3d'] @ None @ str @ Default=auto. Specify as a processor, eg - mask.auto3d:threshold=1.1:radius=30:nshells=5:nshellsgauss=5. @ 
e2refine_easy.py @ ['--automask3d2'] @ None @ str @ Default=none. If specified, this mask will be multiplied by the result of the first mask, eg - using mask.soft to mask out the center of a virus. @ 
e2refine_easy.py @ ['--projector'] @ standard @ None @ Default=standard. Projector to use with parameters. @ 
e2refine_easy.py @ ['--orientgen'] @ None @ str @ Default=auto. Orientation generator for projections, eg - eman:delta=5.0:inc_mirror=0:perturb=1 @ 
e2refine_easy.py @ ['--simalign'] @ rotate_translate_flip:usebispec=1 @ str @ Default=auto. The name of an 'aligner' to use prior to comparing the images @ 
e2refine_easy.py @ ['--simaligncmp'] @ None @ str @ Default=auto. Name of the aligner along with its construction arguments @ 
e2refine_easy.py @ ['--simralign'] @ auto @ str @ Default=auto. The name and parameters of the second stage aligner which refines the results of the first alignment @ 
e2refine_easy.py @ ['--simraligncmp'] @ None @ str @ Default=auto. The name and parameters of the comparitor used by the second stage aligner. @ 
e2refine_easy.py @ ['--simcmp'] @ None @ str @ Default=auto. The name of a 'cmp' to be used in comparing the aligned images @ 
e2refine_easy.py @ ['--simmask'] @ None @ str @ Default=auto. A file containing a single 0/1 image to apply as a mask before comparison but after alignment @ 
e2refine_easy.py @ ['--shrink'] @ 0 @ int @ Default=auto. Optionally shrink the input particles by an integer amount prior to computing similarity scores. For speed purposes. 0 -> no shrinking @ 
e2refine_easy.py @ ['--shrinks1'] @ 0 @ int @ The level of shrinking to apply in the first stage of the two-stage classification process. Default=0 (autoselect) @ 
e2refine_easy.py @ ['--prefilt'] @ False @ None @ Default=auto. Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison. Applies both to classification and class-averaging. @ 
e2refine_easy.py @ ['--prectf'] @ False @ None @ Default=auto. Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison. Applies both to classification and class-averaging. @ 
e2refine_easy.py @ ['--cmpdiff'] @ False @ None @ Used only in binary tree classification. Use a mask that focus on the difference of two children. @ 
e2refine_easy.py @ ['--treeincomplete'] @ 0 @ int @ Used only in binary tree classification. Incompleteness of the tree on each level.Default=0 @ 
e2refine_easy.py @ ['--classkeepsig'] @ False @ None @ Change the keep ('--keep') criterion from fraction-based to sigma-based. @ 
e2refine_easy.py @ ['--classiter'] @ -1 @ int @ Default=auto. The number of iterations to perform. @ 
e2refine_easy.py @ ['--classalign'] @ rotate_translate_flip:usebispec=1 @ str @ Default=auto. If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average. @ 
e2refine_easy.py @ ['--classaligncmp'] @ None @ str @ Default=auto. This is the name and parameters of the comparitor used by the fist stage aligner. @ 
e2refine_easy.py @ ['--classralign'] @ auto @ str @ Default=auto. The second stage aligner which refines the results of the first alignment in class averaging. @ 
e2refine_easy.py @ ['--classraligncmp'] @ None @ str @ Default=auto. The comparitor used by the second stage aligner in class averageing. @ 
e2refine_easy.py @ ['--classaverager'] @ None @ str @ Default=auto. The averager used to generate the class averages. Default is auto. @ 
e2refine_easy.py @ ['--classcmp'] @ None @ str @ Default=auto. The name and parameters of the comparitor used to generate similarity scores, when class averaging. @ 
e2refine_easy.py @ ['--classnormproc'] @ normalize.edgemean @ str @ Default=auto. Normalization applied during class averaging @ 
e2refine_easy.py @ ['--classrefsf'] @ False @ None @ Use the setsfref option in class averaging. This matches the filtration of the class-averages to the projections for easier comparison. Disabled when ampcorrect=flatten is used. @ 
e2refine_easy.py @ ['--pad'] @ 0 @ int @ Default=auto. To reduce Fourier artifacts, the model is typically padded by ~25 percent - only applies to Fourier reconstruction @ 
e2refine_easy.py @ ['--recon'] @ fourier @ None @ Default=auto. Reconstructor to use see e2help.py reconstructors -v @ 
e2refine_easy.py @ ['--m3dkeepsig'] @ False @ None @ Default=auto. The standard deviation alternative to the --m3dkeep argument @ 
e2refine_easy.py @ ['--m3dpreprocess'] @ None @ str @ Default=auto. Normalization processor applied before 3D reconstruction @ 
e2refine_easy.py @ ['--ampcorrect'] @ auto @ None @ Will perform amplitude correction via the specified method.  'flatten' requires a target resolution better than 8 angstroms (experimental). 'none' will disable amplitude correction (experimental). @ 
e2refine_easy.py @ ['--lowmem'] @ True @ None @ Default=auto. Make limited use of memory when possible - useful on lower end machines @ 
e2refine_easy.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2refine_postprocess.py @ ['--even'] @ None @ str @ The filename of the map from the even 1/2 of the data @ 
e2refine_postprocess.py @ ['--odd'] @ None @ str @ The filename of the map from the odd 1/2 of the data @ 
e2refine_postprocess.py @ ['--output'] @ None @ str @ Filename for the final averaged/filtered result. @ 
e2refine_postprocess.py @ ['--compressbits'] @ 12 @ int @ Bits to keep when writing (most) volumes with compression. 0->lossless floating point. Default 12 (3 significant figures) @ 
e2refine_postprocess.py @ ['--mass'] @ 0 @ float @ The rough mass of the particle in kilodaltons, used to run normalize.bymass. Due to resolution effects, not always the true mass. @ 
e2refine_postprocess.py @ ['--restarget'] @ -1 @ float @ The specified target resolution to avoid underfiltering artifacts. @ 
e2refine_postprocess.py @ ['--setsf'] @ none @ str @ Force the structure factor to match a 'known' curve prior to postprocessing (<filename>, none). default=none @ 
e2refine_postprocess.py @ ['--iter'] @ -1 @ int @ Iteration number to generate FSC filenames @ 
e2refine_postprocess.py @ ['--align'] @ False @ None @ Will do o to e alignment and test for handedness flips. Should not be repeated as it overwrites the odd file with the aligned result. @ 
e2refine_postprocess.py @ ['--tomo'] @ False @ None @ Modifies settings to be more appropriate for typical subtomogram averaging @ 
e2refine_postprocess.py @ ['--tophat'] @ None @ str @ 'global', 'local' or 'localwiener'. Overall Wiener filter disabled, and replaced by a tophat filter either across the map at 0.143 as Relion appears to do, or locally based on e2fsc_local_real.py results (either local tophat or local wiener) @ 
e2refine_postprocess.py @ ['--ampcorrect'] @ strucfac @ None @ Will perform amplitude correction via the specified method. The default choice is strucfac. @ 
e2refine_postprocess.py @ ['--ncmult'] @ 1.05 @ float @ Specify how much to multiply noise cutoff during flattening amplitude correction. Default is 1.05. @ 
e2refine_postprocess.py @ ['--localsize'] @ -1 @ float @ Override the automatic local region size (in A) used for local resolution calculation and filtration. @ 
e2refine_postprocess.py @ ['--m3dpostprocess'] @ None @ str @ Default=none. An arbitrary post-processor to run after all other automatic processing. @ 
e2refine_postprocess.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2refine_postprocess.py @ ['--automaskexpand'] @ -1 @ int @ Default=boxsize/20. Specify number of voxels to expand mask before soft edge. Only used if automask3d not specified. @ 
e2refine_postprocess.py @ ['--automask3d'] @ None @ str @ Default=auto. Specify as a processor, eg - mask.auto3d:threshold=1.1:radius=30:nshells=5:nshellsgauss=5. @ 
e2refine_postprocess.py @ ['--mask'] @ None @ str @ specify a density map file to use as mask. overwrites automask3d @ 
e2refine_postprocess.py @ ['--mergelowres'] @ -1 @ float @ merge low resolution information of the two subset. @ 
e2refine_postprocess.py @ ['--automask3d2'] @ None @ str @ Default=None. Specify as a processor. This will be applied to the mask produced by the first automask. @ 
e2refine_postprocess.py @ ['--underfilter'] @ False @ None @ This will shift the computed Wiener filter to be about 10%% more resolution than has been achieved. @ 
e2refine_postprocess.py @ ['--sym'] @ c1 @ str @ Symmetry so we can decide how to align the particle. @ 
e2refine_postprocess.py @ ['--threads'] @ 2 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2refine_split.py @ ['--path'] @ None @ str @ The name of an existing refine_xx folder, where e2refine_easy ran to completion @ 
e2refine_split.py @ ['--usebasis'] @ 0 @ int @ Select which Eigenimage to use for separation. With novarimax, n=0 is highest energy. @ 
e2refine_split.py @ ['--nbasis'] @ -1 @ int @ Number of basis vectors to compute. Must be at least usebasis+1. Default 6 or usebasis+1. @ 
e2refine_split.py @ ['--minptcl'] @ 20 @ int @ Minimum number of particles in a class. Classes with fewer particles will be excluded. @ 
e2refine_split.py @ ['--mask'] @ None @ None @ Optional 3D mask to focus the classification @ 
e2refine_split.py @ ['--parallel'] @ thread:2 @ None @ Standard parallelism option. Default=thread:2 @ 
e2refine_split.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refine_split.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refine_split.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2refinefromfrealign.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2refinefromfrealign.py @ ['--icosahedral_symmetry'] @ False @ None @ Does it have icosahedral symmetry? @ 
e2refinemulti.py @ ['--model'] @ None @ str @ The map to use as a starting point for refinement @ 
e2refinemulti.py @ ['--nmodels'] @ 2 @ int @ The total number of different maps to generate. Specify with --model, but not with --models @ 
e2refinemulti.py @ ['--mapfragment'] @ False @ None @ Generate initial maps by randomly removing portions of the input map rather than by phase randomizing. @ 
e2refinemulti.py @ ['--randclassify'] @ False @ None @ Generate initial maps by randomly assigning the particles in each class to each model after the first iteration. @ 
e2refinemulti.py @ ['--randphase'] @ False @ None @ Generate initial maps by randomizing the phase of the given model. @ 
e2refinemulti.py @ ['--treeclassify'] @ False @ None @ Classify using a binary tree. This will call e2classifytree.py for particle classification, replacing e2simmx2stage.py and e2classify.py. This function is still experimental. @ 
e2refinemulti.py @ ['--models'] @ None @ str @ The map to use as a starting point for refinement @ 
e2refinemulti.py @ ['--input'] @ None @ str @ The name of the image file containing the particle data @ 
e2refinemulti.py @ ['--targetres'] @ 12.0 @ float @ Target resolution in A of the final single-model refinements. @ 
e2refinemulti.py @ ['--speed'] @ 5 @ int @ (1-7) Balances speed vs precision. Larger values sacrifice a bit of potential resolution for significant speed increases. Set to 1 when pushing resolution. default=5 @ 
e2refinemulti.py @ ['--sym'] @ c1 @ None @ Specify symmetry - choices are: c<n>, d<n>, tet, oct, icos. You can specify either a single value or one for each model. @ 
e2refinemulti.py @ ['--breaksym'] @ False @ None @ If selected, reconstruction will be asymmetric with sym= specifying a known pseudosymmetry, not an imposed symmetry. @ 
e2refinemulti.py @ ['--iter'] @ 6 @ int @ The total number of refinement iterations to perform. Default=auto @ 
e2refinemulti.py @ ['--mass'] @ 0 @ str @ The ~mass of the particles in kilodaltons. May specify one number or one number for each map. Due to resolution effects, not always the true mass. @ 
e2refinemulti.py @ ['--sep'] @ -1 @ int @ The number of classes each particle can contribute towards (normally 1). Increasing will improve SNR, but produce rotational blurring. @ 
e2refinemulti.py @ ['--classkeep'] @ 0.9 @ float @ The fraction of particles to keep in each class, based on the similarity score. (default=0.9 -> 90%%) @ 
e2refinemulti.py @ ['--classautomask'] @ False @ None @ This will apply an automask to the class-average during iterative alignment for better accuracy. The final class averages are unmasked. @ 
e2refinemulti.py @ ['--prethreshold'] @ False @ None @ Applies a threshold to the volume just before generating projections. A sort of aggressive solvent flattening for the reference. @ 
e2refinemulti.py @ ['--m3dkeep'] @ 0.8 @ float @ The fraction of slices to keep in e2make3d.py. Default=0.8 -> 80%% @ 
e2refinemulti.py @ ['--nosingle'] @ False @ None @ Normally the multi-model refinement will be followed by N single model refinements automatically. If this is set the job will finish after making the split data sets. @ 
e2refinemulti.py @ ['--m3dpostprocess'] @  @ str @ Default=none. An arbitrary post-processor to run after all other automatic processing. Maps are autofiltered, so a low-pass filter is not required here. @ 
e2refinemulti.py @ ['--parallel'] @ None @ str @ Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2refinemulti.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2refinemulti.py @ ['--path'] @ None @ str @ The name of a directory where results are placed. Default = create new multi_xx @ 
e2refinemulti.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refinemulti.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refinemulti.py @ ['--automask3d'] @ None @ str @ Default=auto. Specify as a processor, eg - mask.auto3d:threshold=1.1:radius=30:nshells=5:nshellsgauss=5. @ 
e2refinemulti.py @ ['--projector'] @ standard @ None @ Default=standard. Projector to use with parameters. @ 
e2refinemulti.py @ ['--orientgen'] @ None @ str @ Default=auto. Orientation generator for projections, eg - eman:delta=5.0:inc_mirror=0:perturb=1 @ 
e2refinemulti.py @ ['--simalign'] @ rotate_translate_flip @ str @ Default=auto. The name of an 'aligner' to use prior to comparing the images @ 
e2refinemulti.py @ ['--simaligncmp'] @ None @ str @ Default=auto. Name of the aligner along with its construction arguments @ 
e2refinemulti.py @ ['--simralign'] @ None @ str @ Default=auto. The name and parameters of the second stage aligner which refines the results of the first alignment @ 
e2refinemulti.py @ ['--simraligncmp'] @ None @ str @ Default=auto. The name and parameters of the comparitor used by the second stage aligner. @ 
e2refinemulti.py @ ['--simcmp'] @ None @ str @ Default=auto. The name of a 'cmp' to be used in comparing the aligned images @ 
e2refinemulti.py @ ['--simmask'] @ None @ str @ Default=auto. A file containing a single 0/1 image to apply as a mask before comparison but after alignment @ 
e2refinemulti.py @ ['--shrink'] @ 0 @ int @ Default=auto. Optionally shrink the input particles by an integer amount prior to computing similarity scores. For speed purposes. 0 -> no shrinking @ 
e2refinemulti.py @ ['--shrinks1'] @ 0 @ int @ The level of shrinking to apply in the first stage of the two-stage classification process. Default=0 (autoselect) @ 
e2refinemulti.py @ ['--prefilt'] @ False @ None @ Default=auto. Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison. Applies both to classification and class-averaging. @ 
e2refinemulti.py @ ['--cmpdiff'] @ False @ None @ Used only in binary tree classification. Use a mask that focus on the difference of two children. @ 
e2refinemulti.py @ ['--treeincomplete'] @ 0 @ int @ Used only in binary tree classification. Incompleteness of the tree on each level.Default=0 @ 
e2refinemulti.py @ ['--classkeepsig'] @ False @ None @ Change the keep ('--keep') criterion from fraction-based to sigma-based. @ 
e2refinemulti.py @ ['--classiter'] @ -1 @ int @ Default=auto. The number of iterations to perform. @ 
e2refinemulti.py @ ['--classalign'] @ rotate_translate_flip @ str @ Default=auto. If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average. @ 
e2refinemulti.py @ ['--classaligncmp'] @ None @ str @ Default=auto. This is the name and parameters of the comparitor used by the fist stage aligner. @ 
e2refinemulti.py @ ['--classralign'] @ None @ str @ Default=auto. The second stage aligner which refines the results of the first alignment in class averaging. @ 
e2refinemulti.py @ ['--classraligncmp'] @ None @ str @ Default=auto. The comparitor used by the second stage aligner in class averageing. @ 
e2refinemulti.py @ ['--classaverager'] @ None @ str @ Default=auto. The averager used to generate the class averages. Default is 'mean'. @ 
e2refinemulti.py @ ['--classcmp'] @ None @ str @ Default=auto. The name and parameters of the comparitor used to generate similarity scores, when class averaging. @ 
e2refinemulti.py @ ['--classnormproc'] @ normalize.edgemean @ str @ Default=auto. Normalization applied during class averaging @ 
e2refinemulti.py @ ['--classrefsf'] @ False @ None @ Default=True. Use the setsfref option in class averaging to produce better filtered averages. @ 
e2refinemulti.py @ ['--pad'] @ 0 @ int @ Default=auto. To reduce Fourier artifacts, the model is typically padded by ~25 percent - only applies to Fourier reconstruction @ 
e2refinemulti.py @ ['--recon'] @ fourier @ None @ Default=auto. Reconstructor to use see e2help.py reconstructors -v @ 
e2refinemulti.py @ ['--m3dkeepsig'] @ False @ None @ Default=auto. The standard deviation alternative to the --m3dkeep argument @ 
e2refinemulti.py @ ['--m3dsetsf'] @ None @ str @ Default=auto. Name of a file containing a structure factor to apply after refinement @ 
e2refinemulti.py @ ['--m3dpreprocess'] @ normalize.edgemean @ str @ Default=auto. Normalization processor applied before 3D reconstruction @ 
e2refinemulti.py @ ['--lowmem'] @ True @ None @ Default=auto. Make limited use of memory when possible - useful on lower end machines @ 
e2refinemulti.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2refinemultinoali.py @ ['--oldpath'] @ None @ str @ Path to the original refinement (input, required) @ 
e2refinemultinoali.py @ ['--path', '--newpath'] @ None @ str @ Path to the classified results (output). Default = multinoali_XX @ 
e2refinemultinoali.py @ ['--path', '--newpath'] @ None @ str @ Path to the classified results (output). Default = multinoali_XX @ 
e2refinemultinoali.py @ ['--models', '--model'] @ None @ str @ Comma separated list of reference maps used for classification. If a single map is provided, data will be split into two groups based on similarity to the single map. @ 
e2refinemultinoali.py @ ['--models', '--model'] @ None @ str @ Comma separated list of reference maps used for classification. If a single map is provided, data will be split into two groups based on similarity to the single map. @ 
e2refinemultinoali.py @ ['--simcmp'] @ ccc @ str @ The name of a 'cmp' to be used in comparing the aligned images. eg- frc:minres=80:maxres=20. Default=ccc @ 
e2refinemultinoali.py @ ['--threads'] @ 4 @ int @ Number of threads. @ 
e2refinemultinoali.py @ ['--randomphase'] @ 0.0 @ float @ Randomize initial model to certain frequency. @ 
e2refinemultinoali.py @ ['--parallel'] @ thread:4 @ str @ Parallel option. @ 
e2refinemultinoali.py @ ['--iter'] @ 1 @ int @ Number of iterations. @ 
e2refinemultinoali.py @ ['--mask'] @ None @ str @ Name of an optional mask file. The mask is applied to the input models to focus the classification on a particular region of the map. Consider e2classifyligand.py instead. @ 
e2refinemultinoali.py @ ['--breaksym'] @ False @ None @ breaksym @ 
e2refinemultinoali.py @ ['--symcopy'] @ False @ None @ symcopy @ 
e2refinemultinoali.py @ ['--nomask'] @ False @ None @ no mask @ 
e2refinemultinoali.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2refinetofrealign.py @ ['--mode'] @ 1 @ str @ Mode to run FreAlign in: Mode 1 - Refinement and Reconstruction, Mode 3 - Simple Search and Refinement @ 
e2refinetofrealign.py @ ['--fbeaut'] @ False @ None @ (T/F)Apply extra real space symmetry averaging and masking to beautify final map prior to output @ 
e2refinetofrealign.py @ ['--ffilt'] @ False @ None @ (T/F)Apply Single Particle Wiener filter to final reconstruction @ 
e2refinetofrealign.py @ ['--fstat'] @ False @ None @ (T/F)Calculate additional statistics in resolution table at end (QFACT, SSNR, CC, etc.). T Uses more than 50 percent more memory. @ 
e2refinetofrealign.py @ ['--reslow'] @ 200.0 @ float @ Resolution of the data included in the alignment. This is the low resolution value. ex:200 @ 
e2refinetofrealign.py @ ['--reshigh'] @ 25.0 @ float @ Resolution of the data included in the alignment. This is the high resolution value. ex:25 @ 
e2refinetofrealign.py @ ['--rrec'] @ 10.0 @ float @ Resolution of reconstruction in angstroms. It is the resolution to which the reconstruction is calculated. @ 
e2refinetofrealign.py @ ['--rclas'] @ 10.0 @ float @ High resloution limit used for classification @ 
e2refinetofrealign.py @ ['--thresh'] @ 0.0 @ float @ Phase Residual cutoff. Particles with a higher phase residual will not be included in the refinement  @ 
e2refinetofrealign.py @ ['--mass'] @ 0 @ float @ The ~mass of the particle in kilodaltons @ 
e2refinetofrealign.py @ ['--interp'] @ 0 @ str @ Type of interpolation: 0 - Nearest Neighbor, 1 - Trilinear Interpolation (More Time-Consuming) @ 
e2refinetofrealign.py @ ['--randomizemodel'] @ 0 @ None @ Optionally randomize the phases of the initial model to this resolution (in Angstroms) @ 
e2refinetofrealign.py @ ['--imem'] @ 1 @ str @ Memory Usage: 0 - Least Memory, 3 - Most memory @ 
e2refinetofrealign.py @ ['--verbose'] @ 1 @ int @ Level of verbose; how much information do you want the program to output?(0-9) @ 
e2refinetofrealign.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2refinetorelion2d.py @ ['--numclasses'] @ 8 @ int @ # of classes @ 
e2refinetorelion2d.py @ ['--ctfcorrect'] @ False @ None @ (T/F)Do CTF Correction? @ 
e2refinetorelion2d.py @ ['--dataphaseflipped'] @ False @ None @ (T/F)Has the data been phase flipped already? @ 
e2refinetorelion2d.py @ ['--ignoretofirstpeak'] @ False @ None @ (T/F)Ignore CTF's until the first peak? @ 
e2refinetorelion2d.py @ ['--numiter'] @ 25 @ int @ # of iterations to refine @ 
e2refinetorelion2d.py @ ['--regparam'] @ 1.0 @ float @ Regularization Parameter T (weights experimental data vs. prior @ 
e2refinetorelion2d.py @ ['--particle_mask_diameter'] @ -1 @ float @ Diameter of the soft circular image mask (in Angstroms) @ 
e2refinetorelion2d.py @ ['--maskzeroes'] @ False @ None @ (T/F) For individual particles, the area outside a circle with the radius of the particle will be set to zeros prior to taking the Fourier transform @ 
e2refinetorelion2d.py @ ['--solventmask'] @  @ str @ Location of the mask to be used @ 
e2refinetorelion2d.py @ ['--inplaneang'] @ None @ float @ In-plane angular sampling @ 
e2refinetorelion2d.py @ ['--offsetrange'] @ 10.0 @ float @ Offset search range (pix) @ 
e2refinetorelion2d.py @ ['--offsetstep'] @ 2.0 @ float @ Offset search step (pix) @ 
e2refinetorelion2d.py @ ['--threads'] @ 1 @ int @ # of threads @ 
e2refinetorelion2d.py @ ['--verbosity'] @ 1 @ int @ Set the level of verbosity for the code @ 
e2refinetorelion2d.py @ ['--voltage'] @ None @ int @ (Expert Option) Voltage of the Microscope (kV) @ 
e2refinetorelion2d.py @ ['--cs'] @ None @ float @ (Expert Option) Spherical Aberration @ 
e2refinetorelion2d.py @ ['--apix'] @ None @ float @ (Expert Option) Angstrom per pixel @ 
e2refinetorelion2d.py @ ['--defocus'] @ 10000 @ float @ (Expert Option) Defocus in A @ 
e2refinetorelion2d.py @ ['--ampcont'] @ 0.1 @ float @ (Expert Option) Amplitude Constrast. 10%% = .1 @ 
e2refinetorelion2d.py @ ['--echo'] @ False @ None @ Echo Relion Command to terminal only @ 
e2refinetorelion2d.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2refinetorelion3d.py @ ['--randomizemodel'] @ 0 @ None @ Optionally randomize the phases of the initial model to this resolution (in Angstroms) @ 
e2refinetorelion3d.py @ ['--greyscale'] @ False @ None @ Is the reference map in greyscale? @ 
e2refinetorelion3d.py @ ['--symmgroup'] @ C @ None @ Symmetry group @ 
e2refinetorelion3d.py @ ['--symmnumber'] @ 1 @ int @ Symmetry number @ 
e2refinetorelion3d.py @ ['--ctfcorrect'] @ False @ None @ (T/F)Do CTF Correction? @ 
e2refinetorelion3d.py @ ['--dataphaseflipped'] @ False @ None @ (T/F)Has the data been phase flipped already? @ 
e2refinetorelion3d.py @ ['--ignoretofirstpeak'] @ False @ None @ (T/F)Ignore CTF's until the first peak? @ 
e2refinetorelion3d.py @ ['--lowpass'] @ 60.0 @ float @ Initial low-pass filter for the reference map (Ang) @ 
e2refinetorelion3d.py @ ['--particle_mask_diameter'] @ -1 @ float @ Diameter of the soft spherical image mask in angstroms @ 
e2refinetorelion3d.py @ ['--solventmask'] @  @ str @ Location of the mask to be used @ 
e2refinetorelion3d.py @ ['--healpix'] @ 7.5 @ str @ Angular Sampling Interval (Degrees) @ 
e2refinetorelion3d.py @ ['--auto_healpix'] @ 1.8 @ str @ Local angular search value @ 
e2refinetorelion3d.py @ ['--offsetrange'] @ 10.0 @ float @ Offset search range (pix) @ 
e2refinetorelion3d.py @ ['--offsetstep'] @ 2.0 @ float @ Offset search step (pix) @ 
e2refinetorelion3d.py @ ['--threads'] @ 1 @ int @ # of threads @ 
e2refinetorelion3d.py @ ['--maxmemory'] @ None @ float @ Maximum memory (in GB) available for each thread @ 
e2refinetorelion3d.py @ ['--amplitudecontrast'] @ 0.07 @ float @ Amplitude Contrast value for the micrographs @ 
e2refinetorelion3d.py @ ['--intensitycorrection'] @ False @ None @ (T/F)Perform intensity-scale corrections on image groups? @ 
e2refinetorelion3d.py @ ['--print_symmetry'] @ False @ None @ Print all symmetry transformation matrices, and exit @ 
e2refinetorelion3d.py @ ['--nearest_neighbor'] @ False @ None @ Perform nearest-neighbor instead of linear Fourier-space interpolation @ 
e2refinetorelion3d.py @ ['--pad'] @ 1 @ int @ Padding factor @ 
e2refinetorelion3d.py @ ['--limit_tilt'] @ -91 @ int @ Limited tilt angle: positive for keeping side views, negative for keeping top views @ 
e2refinetorelion3d.py @ ['--verbose'] @ 1 @ int @ Set the level of verbosity for the code @ 
e2refinetorelion3d.py @ ['--onlyflipphase'] @ False @ None @ (T/F)Only flip phases? @ 
e2refinetorelion3d.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2refinevariance.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refinevariance.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2refinevariance.py @ ['--shrink3d'] @ 0 @ int @ Shrink the class-averages and make a downsampled variance map @ 
e2refinevariance.py @ ['--reslimit'] @ 10.0 @ float @ Low-pass filter the individual maps to target the variance to the specified resolution in A. Variance maps cannot be filtered as a post-processing operation. Default = 10 @ 
e2refinevariance.py @ ['--input'] @ None @ str @ The name of the image containing the particle data @ 
e2refinevariance.py @ ['--usefilt'] @ None @ str @ Specify a particle data file that has been low pass or Wiener filtered. Has a one to one correspondence with your particle data. If specified will be used in projection matching routines, and elsewhere. @ 
e2refinevariance.py @ ['--path'] @ None @ str @ The name of an existing refine_XX folder to use for input and output @ 
e2refinevariance.py @ ['--output'] @ None @ str @ The name of a directory where the variance calculated should be placed. If unspecified will generate one automatically of type refinevar_??. @ 
e2refinevariance.py @ ['--mass'] @ None @ float @ The mass of the particle in kilodaltons, used to run normalize.bymass. If unspecified nothing happens. Requires the --apix argument. @ 
e2refinevariance.py @ ['--apix'] @ None @ float @ The angstrom per pixel of the input particles. This argument is required if you specify the --mass argument. If unspecified, the convergence plot is generated using either the project apix, or if not an apix of 1. @ 
e2refinevariance.py @ ['--nmodels'] @ 10 @ int @ The number of different bootstrap models to generate for the variance computation. Default=10 @ 
e2refinevariance.py @ ['--iteration'] @ -1 @ int @ The refinement iteration to use as a basis for the variance map @ 
e2refinevariance.py @ ['--volfiles'] @ False @ None @ This will bypass the construction of the individual resampled models, and use files previously generated with the --keep3d options @ 
e2refinevariance.py @ ['--threads'] @ 1 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2refinevariance.py @ ['--sym'] @ c1 @ None @ Specify symmetry - choices are: c<n>, d<n>, h<n>, tet, oct, icos @ 
e2refinevariance.py @ ['--classkeep'] @ None @ float @ The fraction of particles to keep in each class, based on the similarity score generated by the --cmp argument. @ 
e2refinevariance.py @ ['--classkeepsig'] @ False @ None @ Change the keep ('--keep') criterion from fraction-based to sigma-based. @ 
e2refinevariance.py @ ['--classiter'] @ 1 @ int @ The number of iterations to perform. Default is 1. @ 
e2refinevariance.py @ ['--classalign'] @ rotate_translate_flip @ str @ If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average. @ 
e2refinevariance.py @ ['--classaligncmp'] @ phase @ str @ This is the name and parameters of the comparitor used by the fist stage aligner  Default is dot. @ 
e2refinevariance.py @ ['--classralign'] @ None @ str @ The second stage aligner which refines the results of the first alignment in class averaging. Default is None. @ 
e2refinevariance.py @ ['--classraligncmp'] @ dot:normalize=1 @ str @ The comparitor used by the second stage aligner in class averageing. Default is dot:normalize=1. @ 
e2refinevariance.py @ ['--classaverager'] @ mean @ str @ The averager used to generate the class averages. Default is 'mean'. @ 
e2refinevariance.py @ ['--classcmp'] @ dot:normalize=1 @ str @ The name and parameters of the comparitor used to generate similarity scores, when class averaging. Default is 'dot:normalize=1' @ 
e2refinevariance.py @ ['--classnormproc'] @ normalize.edgemean @ str @ Normalization applied during class averaging @ 
e2refinevariance.py @ ['--classrefsf'] @ False @ None @ Use the setsfref option in class averaging to produce better filtered averages. @ 
e2refinevariance.py @ ['--prefilt'] @ False @ None @ Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison @ 
e2refinevariance.py @ ['--pad'] @ 0 @ int @ To reduce Fourier artifacts, the model is typically padded by ~25 percent - only applies to Fourier reconstruction @ 
e2refinevariance.py @ ['--recon'] @ fourier @ None @ Reconstructor to use see e2help.py reconstructors -v @ 
e2refinevariance.py @ ['--m3dkeep'] @ None @ float @ The percentage of slices to keep in e2make3d.py @ 
e2refinevariance.py @ ['--m3dkeepsig'] @ False @ None @ The standard deviation alternative to the --m3dkeep argument @ 
e2refinevariance.py @ ['--m3dsetsf'] @ False @ None @ The standard deviation alternative to the --m3dkeep argument @ 
e2refinevariance.py @ ['--m3diter'] @ 4 @ int @ The number of times the 3D reconstruction should be iterated @ 
e2refinevariance.py @ ['--m3dpreprocess'] @ normalize.edgemean @ str @ Normalization processor applied before 3D reconstruction @ 
e2refinevariance.py @ ['--m3dpostprocess'] @ None @ str @ Post processor to be applied to the 3D volume once the reconstruction is completed @ 
e2refinevariance.py @ ['--keep3d'] @ False @ None @ Keep all of the individual 3-D models used to make the variance map. This make take substantial disk space. @ 
e2refinevariance.py @ ['--lowmem'] @ False @ None @ Make limited use of memory when possible - useful on lower end machines @ 
e2refinevariance.py @ ['--parallel'] @ None @ str @ Run in parallel, specify type:<option>=<value>:<option>:<value> @ 
e2refinevariance.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2relionsubsettoset.py @ ['--origname'] @ False @ None @ Adds the original STAR name as a comment on each image @ 
e2relionsubsettoset.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2relionsubsettoset.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2relionsubsettoset.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2reliontoeman.py @ ['--apix'] @ 0 @ float @ The angstrom per pixel of the input particles. @ 
e2reliontoeman.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2reliontoeman.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2reliontoeman.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2runfrealign.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2scannereval.py @ ['--box'] @ 256 @ int @ size in pixels of the power spectra @ 
e2scannereval.py @ ['--norm'] @ False @ None @ Normalize the image before analysis @ 
e2scannereval.py @ ['--nopad'] @ False @ None @ No padding between boxes @ 
e2scannereval.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2scannereval.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2scannereval.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2segment3d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2segment3d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2segment3d.py @ ['--process'] @ segment.kmeans:ampweight=1:nseg=50:thr=0.8 @ str @ The name and parameters of a processor to perform the segmentation. 'e2help.py processor segment -v 1' for a full list. Default=segment.kmeans:ampweight=1:nseg=50:thr=0.8  @ 
e2segment3d.py @ ['--output'] @ None @ str @ Name of output file for segmentation map @ 
e2segment3d.py @ ['--mask'] @ None @ str @ A mask to be used in segmentaion, specific use varies with segmentation method @ 
e2segment3d.py @ ['--segout'] @ None @ str @ Output stack for individual segmented volumes @ 
e2segment3d.py @ ['--chimeraout'] @ None @ str @ Name of file to write center of segments in UCSF Chimera marker format. @ 
e2segment3d.py @ ['--pdbout'] @ None @ str @ Name of file to write center of segments in PDB format. @ 
e2segment3d.py @ ['--txtout'] @ None @ str @ Name of file to write center of segments in text format (n x y z, with coordinates in pixels, 0,0,0 in the corner) @ 
e2segment3d.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2segment3d.py @ ['--shifttocenter'] @ False @ None @ Shift the output pdb to center of the density map @ 
e2segment3d.py @ ['--helixfile'] @ None @ str @ Start with existing secondary structure. @ 
e2segment3d.py @ ['--edgefile'] @ None @ str @ Write an edge file for pathwalker.py. Only avaliable while using existing secondary structures. @ 
e2segment3d.py @ ['--sym'] @ c1 @ str @ Symmetry of the target complex. Note the number of segment is per unit. @ 
e2segment3d.py @ ['--asymunit'] @ False @ None @ Write points of only one asymmetrical unit. @ 
e2simmx.py @ ['--align'] @ None @ str @ The name of an 'aligner' to use prior to comparing the images @ 
e2simmx.py @ ['--aligncmp'] @ dot @ str @ Name of the aligner along with its construction arguments @ 
e2simmx.py @ ['--ralign'] @ None @ str @ The name and parameters of the second stage aligner which refines the results of the first alignment @ 
e2simmx.py @ ['--raligncmp'] @ dot @ str @ The name and parameters of the comparitor used by the second stage aligner. Default is dot. @ 
e2simmx.py @ ['--cmp'] @ dot:normalize=1 @ str @ The name of a 'cmp' to be used in comparing the aligned images @ 
e2simmx.py @ ['--prefilt'] @ False @ None @ Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison @ 
e2simmx.py @ ['--prectf'] @ False @ None @ Apply CTF to each projection before comparison @ 
e2simmx.py @ ['--mask'] @ None @ str @ File containing a single mask image to apply after alignment, but before similarity comparison @ 
e2simmx.py @ ['--colmasks'] @ None @ str @ File containing one mask for each column (projection) image, to be used when refining row (particle) image alignments. @ 
e2simmx.py @ ['--range'] @ None @ str @ Range of images to process (c0,r0,c1,r1) c0,r0 inclusive c1,r1 exclusive @ 
e2simmx.py @ ['--saveali'] @ False @ None @ Save alignment values, output is 5, c x r images instead of 1. Images are (score,dx,dy,da,flip).  @ 
e2simmx.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2simmx.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2simmx.py @ ['--init'] @ False @ None @ Initialize the output matrix file before performing 'range' calculations @ 
e2simmx.py @ ['--fillzero'] @ False @ None @ Checks the existing output file, and fills only matrix elements which are exactly zero. @ 
e2simmx.py @ ['--force'] @ False @ None @ Force overwrite the output file if it exists @ 
e2simmx.py @ ['--exclude'] @ None @ str @ The named file should contain a set of integers, each representing an image from the input file to exclude. Matrix elements will still be created, but will be zeroed. @ 
e2simmx.py @ ['--shrink'] @ None @ float @ Optionally shrink the input particles by an integer amount prior to computing similarity scores. This will speed the process up. @ 
e2simmx.py @ ['--nofilecheck'] @ False @ None @ Turns file checking off in the check functionality - used by e2refine.py. @ 
e2simmx.py @ ['--check'] @ False @ None @ Performs a command line argument check only. @ 
e2simmx.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2simmx.py @ ['--parallel'] @ None @ str @ Parallelism string @ 
e2simmx2stage.py @ ['--align'] @ None @ str @ The name of an 'aligner' to use prior to comparing the images @ 
e2simmx2stage.py @ ['--aligncmp'] @ dot @ str @ Name of the aligner along with its construction arguments @ 
e2simmx2stage.py @ ['--ralign'] @ None @ str @ The name and parameters of the second stage aligner which refines the results of the first alignment @ 
e2simmx2stage.py @ ['--raligncmp'] @ dot @ str @ The name and parameters of the comparitor used by the second stage aligner. Default is dot. @ 
e2simmx2stage.py @ ['--cmp'] @ dot:normalize=1 @ str @ The name of a 'cmp' to be used in comparing the aligned images @ 
e2simmx2stage.py @ ['--mask'] @ None @ str @ File containing a single mask image to apply before similarity comparison @ 
e2simmx2stage.py @ ['--colmasks'] @ None @ str @ File containing one mask for each column (projection) image, to be used when refining row (particle) image alignments. @ 
e2simmx2stage.py @ ['--saveali'] @ False @ None @ Save alignment values, output is c x r x 4 instead of c x r x 1 @ 
e2simmx2stage.py @ ['--prefilt'] @ False @ None @ Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison @ 
e2simmx2stage.py @ ['--prectf'] @ False @ None @ Apply CTF to each projection before comparison @ 
e2simmx2stage.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2simmx2stage.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2simmx2stage.py @ ['--exclude'] @ None @ str @ The named file should contain a set of integers, each representing an image from the input file to exclude. Matrix elements will still be created, but will be zeroed. @ 
e2simmx2stage.py @ ['--shrink'] @ None @ float @ Optionally shrink the input particles by an integer amount prior to computing similarity scores. This will speed the process up but may change classifications. @ 
e2simmx2stage.py @ ['--shrinks1'] @ 2 @ float @ Shrinking performed for first stage classification, default=2 @ 
e2simmx2stage.py @ ['--finalstage'] @ False @ None @ Assume that existing preliminary particle classifications are correct, and only recompute final local orientations @ 
e2simmx2stage.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2simmx2stage.py @ ['--parallel'] @ thread:1 @ str @ Parallelism string @ 
e2simmx2stage.py @ ['--force'] @ True @ None @ Deprecated. Value ignored @ 
e2simmxxplor.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2simmxxplor.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2simmxxplor.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2skelpath.py @ ['--apix'] @ 1.0 @ float @ A/Pixel @ 
e2skelpath.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2skelpath.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2skelpath.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spa_align.py @ ['--ptclin'] @ None @ str @ particle input @ 
e2spa_align.py @ ['--ptclout'] @ None @ str @ particle output @ 
e2spa_align.py @ ['--ref'] @ None @ str @ reference input @ 
e2spa_align.py @ ['--keep'] @ 0.8 @ float @ propotion of tilts to keep. default is 0.8 @ 
e2spa_align.py @ ['--parallel'] @ thread:12 @ str @ Thread/mpi parallelism to use. Default is thread:12 @ 
e2spa_align.py @ ['--debug'] @ False @ None @ Turn on debug mode. This will only process a small subset of the data @ 
e2spa_align.py @ ['--maxshift'] @ -1 @ int @ maximum shift allowed @ 
e2spa_align.py @ ['--localrefine'] @ False @ None @ local refinement @ 
e2spa_align.py @ ['--maxres'] @ -1 @ float @ max resolution for cmp @ 
e2spa_align.py @ ['--minrespx'] @ 4 @ int @ skip the first x pixel in fourier space @ 
e2spa_align.py @ ['--sym'] @ c1 @ str @ symmetry.  @ 
e2spa_align.py @ ['--ppid'] @ -1 @ int @ ppid... @ 
e2spa_align.py @ ['--verbose', '-v'] @ 0 @ int @ Verbose @ 
e2spa_align.py @ ['--verbose', '-v'] @ 0 @ int @ Verbose @ 
e2spa_classify.py @ ['--ptclin'] @ None @ str @ particle input @ 
e2spa_classify.py @ ['--output'] @ None @ str @ score output @ 
e2spa_classify.py @ ['--parallel'] @ thread:12 @ str @ Thread/mpi parallelism to use. Default is thread:12 @ 
e2spa_classify.py @ ['--debug'] @ False @ None @ Turn on debug mode. This will only process a small subset of the data (threads * 8 particles) @ 
e2spa_classify.py @ ['--maxres'] @ 15 @ float @ max resolution for cmp @ 
e2spa_classify.py @ ['--minres'] @ 300 @ float @ min resolution for cmp @ 
e2spa_classify.py @ ['--mask'] @ None @ str @ mask.  @ 
e2spa_classify.py @ ['--ppid'] @ -1 @ int @ ppid... @ 
e2spa_classify.py @ ['--verbose', '-v'] @ 0 @ int @ Verbose @ 
e2spa_classify.py @ ['--verbose', '-v'] @ 0 @ int @ Verbose @ 
e2spa_make3d.py @ ['--output'] @ threed.hdf @ None @ Output reconstructed volume file name. @ 
e2spa_make3d.py @ ['--input'] @ None @ None @ The input projections. Project should usually have the xform.projection header attribute, which is used for slice insertion @ 
e2spa_make3d.py @ ['--sym'] @ c1 @ None @ Set the symmetry; if no value is given then the model is assumed to have no symmetry. Choices are: i, c, d, tet, icos, or oct. @ 
e2spa_make3d.py @ ['--pad'] @ -1 @ int @ Will zero-pad images to the specifed size.  @ 
e2spa_make3d.py @ ['--outsize'] @ -1 @ int @ Defines the dimensions of the final volume written to disk @ 
e2spa_make3d.py @ ['--keep'] @ 0.9 @ float @ The fraction of slices to keep, based on quality scores (1.0 = use all slices). See keepsig. @ 
e2spa_make3d.py @ ['--no_wt'] @ False @ None @ This argument turns automatic weighting off causing all images to be weighted by 1. @ 
e2spa_make3d.py @ ['--mode'] @ trilinear @ str @ Fourier reconstruction 'mode' to use. The default should not normally be changed. @ 
e2spa_make3d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spa_make3d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spa_make3d.py @ ['--apix'] @ None @ float @ A/pix value for output, overrides automatic values @ 
e2spa_make3d.py @ ['--ref'] @ None @ str @ ref @ 
e2spa_make3d.py @ ['--tidrange'] @ -1,-1 @ str @ range of tilt id to include @ 
e2spa_make3d.py @ ['--minres'] @ 50 @ float @  @ 
e2spa_make3d.py @ ['--maxres'] @ -1 @ float @  @ 
e2spa_make3d.py @ ['--parallel'] @ thread:1 @ str @ Thread/mpi parallelism to use @ 
e2spa_make3d.py @ ['--debug'] @ False @ None @  @ 
e2spa_make3d.py @ ['--clsid'] @ None @ str @ only reconstruct a class of particles @ 
e2spa_make3d.py @ ['--listsel'] @ None @ str @ only reconstruct particles of indices from the given list @ 
e2spa_make3d.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spa_refine.py @ ['--ptcl'] @  @ str @ particle input @ 
e2spa_refine.py @ ['--ref'] @  @ str @ reference @ 
e2spa_refine.py @ ['--path'] @ None @ str @ path. default is r3d_00 @ 
e2spa_refine.py @ ['--parallel'] @ thread:1 @ str @  @ 
e2spa_refine.py @ ['--sym'] @ c1 @ str @ sym @ 
e2spa_refine.py @ ['--res'] @ 10 @ float @ The resolution that reference map is lowpass filtered to (with phase randomization) at the begining of the refinement.  @ 
e2spa_refine.py @ ['--keep'] @ 0.9 @ float @ keep @ 
e2spa_refine.py @ ['--startiter'] @ 0 @ int @ iter @ 
e2spa_refine.py @ ['--niter'] @ 10 @ int @ iter @ 
e2spa_refine.py @ ['--setsf'] @ strucfac.txt @ str @ structure factor @ 
e2spa_refine.py @ ['--tophat'] @ local @ str @ Default=local, can also specify localwiener @ 
e2spa_refine.py @ ['--threads'] @ 4 @ int @ threads to use during postprocessing of 3d volumes @ 
e2spa_refine.py @ ['--automask3d'] @ auto @ str @ Default=auto. Specify as a processor, eg - mask.auto3d:threshold=1.1:radius=30:nshells=5:nshellsgauss=5. @ 
e2spa_refine.py @ ['--compressbits'] @ 6 @ int @ Bits to keep when writing images. 4 generally safe for raw data. 0-> true lossless (floating point). Default 6 @ 
e2spa_refine_multi.py @ ['--ptcl'] @  @ str @ particle input @ 
e2spa_refine_multi.py @ ['--ncls'] @ 2 @ int @ number of classes @ 
e2spa_refine_multi.py @ ['--path'] @ None @ str @ path @ 
e2spa_refine_multi.py @ ['--parallel'] @ thread:1 @ str @  @ 
e2spa_refine_multi.py @ ['--sym'] @ c1 @ str @ sym @ 
e2spa_refine_multi.py @ ['--mask'] @ None @ str @ mask file @ 
e2spa_refine_multi.py @ ['--maxres'] @ 10 @ float @ max resolution @ 
e2spa_refine_multi.py @ ['--minres'] @ 100 @ float @ min resolution @ 
e2spa_refine_multi.py @ ['--niter'] @ 10 @ int @ iter @ 
e2spa_refine_multi.py @ ['--setsf'] @ None @ str @ setsf @ 
e2sparxtoeman.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2sparxtoeman.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2sparxtoeman.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2speedtest.py @ ['--slow'] @ False @ None @ rtf_slow alignment @ 
e2speedtest.py @ ['--best'] @ False @ None @ rtf_best alignment @ 
e2speedtest.py @ ['--short'] @ False @ None @ Fewer iterations, mainly for profiling @ 
e2speedtest.py @ ['--old'] @ False @ None @ old rtf+refine aligner @ 
e2speedtest.py @ ['--bispec'] @ False @ None @ new rtf with usebispec @ 
e2speedtest.py @ ['--low'] @ False @ None @ low level test @ 
e2speedtest.py @ ['--size'] @ 192 @ int @ Size of particles, 192 default for comparisons @ 
e2speedtest.py @ ['--simpleout'] @ False @ None @ Simpler 2 column output file (appends) @ 
e2speedtest.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2speedtest.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2speedtest.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_align.py @ ['--threads'] @ 4 @ int @ Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by e2spt_align at present. @ 
e2spt_align.py @ ['--iter'] @ 0 @ int @ Iteration number within path. Default = start a new iteration @ 
e2spt_align.py @ ['--goldstandard'] @ 0 @ float @ If specified, will phase randomize the even and odd references past the specified resolution (in A, not 1/A) @ 
e2spt_align.py @ ['--goldcontinue'] @ False @ None @ Will use even/odd refs corresponding to specified reference to continue refining without phase randomizing again @ 
e2spt_align.py @ ['--mask'] @ None @ str @ Mask file aligned to the input reference. Alignment occurs under this mask. @ 
e2spt_align.py @ ['--path'] @ None @ str @ Path to a folder where results should be stored, following standard naming conventions (default = spt_XX) @ 
e2spt_align.py @ ['--sym'] @ c1 @ str @ Symmetry of the input. Must be aligned in standard orientation to work properly. @ 
e2spt_align.py @ ['--maxres'] @ 0 @ float @ Maximum resolution (the smaller number) to consider in alignment (in A, not 1/A) @ 
e2spt_align.py @ ['--minres'] @ 0 @ float @ Minimum resolution (the larger number) to consider in alignment (in A, not 1/A) @ 
e2spt_align.py @ ['--nsoln'] @ 1 @ int @ number of solutions to keep at low resolution for the aligner @ 
e2spt_align.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_align.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_align.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_align.py @ ['--parallel'] @ None @ str @ Thread/mpi parallelism to use @ 
e2spt_align.py @ ['--transonly'] @ False @ None @ translational alignment only, for prealigned particles @ 
e2spt_align.py @ ['--refine'] @ False @ None @ local refinement from xform.align3d in header. @ 
e2spt_align.py @ ['--flcf'] @ False @ None @ use slower aligner (experimental) @ 
e2spt_align.py @ ['--refinentry'] @ 8 @ int @ number of tests for refine mode. default is 8 @ 
e2spt_align.py @ ['--randphi'] @ False @ None @ randomize phi during refine alignment @ 
e2spt_align.py @ ['--breaksym'] @ False @ None @ symmetry breaking. @ 
e2spt_align.py @ ['--breaksymsym'] @ None @ str @ the symmetry to use for breaksym. setting sym to c6 and this to c2 results in a c3 structure. default is the same as sym @ 
e2spt_align.py @ ['--rand180'] @ False @ None @ randomly add a 180 degree rotation during refine alignment @ 
e2spt_align.py @ ['--test180'] @ False @ None @ Test for improved alignment with 180 degree rotations even during refine alignment @ 
e2spt_align.py @ ['--skipali'] @ False @ None @ skip alignment. the program will do nothing. mostly for testing... @ 
e2spt_align.py @ ['--maxang'] @ 30 @ float @ Maximum angular difference for the refine mode. default is 30 @ 
e2spt_align.py @ ['--maxshift'] @ -1 @ float @ Maximum shift for the refine mode. default is 16 @ 
e2spt_align.py @ ['--scipytest'] @ False @ None @ test scipy optimizer. @ 
e2spt_align.py @ ['--debug'] @ False @ None @ . @ 
e2spt_align_subtlt.py @ ['--path'] @ None @ str @ Path to a folder where results should be stored, following standard naming conventions (default = spt_XX) @ 
e2spt_align_subtlt.py @ ['--iter'] @ 0 @ int @ Iteration number within path. Default = start a new iteration @ 
e2spt_align_subtlt.py @ ['--goldcontinue'] @ False @ None @ Will use even/odd refs corresponding to specified reference to continue refining without phase randomizing again @ 
e2spt_align_subtlt.py @ ['--sym'] @ c1 @ str @ Symmetry of the input. Must be aligned in standard orientation to work properly. @ 
e2spt_align_subtlt.py @ ['--maxres'] @ 0 @ float @ Maximum resolution to consider in alignment (in A, not 1/A) @ 
e2spt_align_subtlt.py @ ['--minres'] @ 0 @ float @ Minimum resolution to consider in alignment (in A, not 1/A) @ 
e2spt_align_subtlt.py @ ['--parallel'] @ thread:4 @ str @ Thread/mpi parallelism to use @ 
e2spt_align_subtlt.py @ ['--fromscratch'] @ False @ None @ . @ 
e2spt_align_subtlt.py @ ['--use3d'] @ False @ None @ use projection of 3d particles instead of 2d sub tilt series @ 
e2spt_align_subtlt.py @ ['--debug'] @ False @ None @ . @ 
e2spt_align_subtlt.py @ ['--plst'] @ None @ str @ list of 2d particle with alignment parameters. will reconstruct before alignment. @ 
e2spt_align_subtlt.py @ ['--maxshift'] @ -1 @ int @ maximum shift. default box size/6 @ 
e2spt_align_subtlt.py @ ['--maxang'] @ 30 @ int @ maximum angle difference from starting point. ignored when fromscratch is on @ 
e2spt_align_subtlt.py @ ['--curve'] @ False @ None @ . @ 
e2spt_align_subtlt.py @ ['--skipali'] @ False @ None @ . @ 
e2spt_align_subtlt.py @ ['--breaksym'] @ None @ str @ specify symmetry to break. only in localsearch mode @ 
e2spt_align_subtlt.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_align_subtlt.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_align_subtlt.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_autoboxer.py @ ['--parallel'] @ None @ str @ Standard EMAN2 parallelism option. See http://eman2.org/Parallel @ 
e2spt_autoboxer.py @ ['--pad'] @ False @ None @ Provide this if the particles in the --particlestack used to create a template, or the template supplied through --template are in a tight box. The size @ 
e2spt_autoboxer.py @ ['--rotsearch'] @ False @ None @ At each translation position, vary euler angles as well when searching for particles. @ 
e2spt_autoboxer.py @ ['--tiltangles'] @  @ str @ File in .tlt or .txt format containing the tilt angle of each tilt image in the tiltseries. @ 
e2spt_autoboxer.py @ ['--tiltaxis'] @ y @ str @ Axis to produce projections about. Default is 'y'; the only other valid option is 'x'. @ 
e2spt_autoboxer.py @ ['--tiltrange'] @ 60 @ float @ Maximum angular value at which the highest tilt picture will be simulated. Projections will be simulated from -tiltrange to +titlrange. For example, if simulating a tilt series collected from -60 to 60 degrees, enter a --tiltrange value of 60. Note that this parameter will determine the size of the missing wedge. @ 
e2spt_autoboxer.py @ ['--nslices'] @ 61 @ int @ This will determine the tilt step between slices, depending on tiltrange. For example, to simulate a 2 deg tilt step supply --nslices=61 --tiltrange=60. Recall that --tiltrange goes from - to + the supplied value, and that there is a central slice or projection at 0 deg, for symmetrical tilt series. @ 
e2spt_autoboxer.py @ ['--pruneccc'] @ False @ None @ Pruned based on ccc mean and sigma. @ 
e2spt_autoboxer.py @ ['--nbins'] @ 0 @ int @ Used for histogram plot. Default=0 (not used). Number of bins for histogram. If not provided, the optimal bin number will be automatically calculated based on bin-width, computed using Scott's normal reference rule, width = (3.5*std)/cuberoot(n), where 'std' is the standard deviation of the distribution of scores and n is the number of values considered. Then, bins will be nbins = (max(scores) - min(scores)) / width. @ 
e2spt_autoboxer.py @ ['--inverttomo'] @ False @ None @ Multiply --tomogram subsections by -1 to invert the contrast BEFORE looking for particles. @ 
e2spt_autoboxer.py @ ['--inverttemplate'] @ False @ None @ Multiply --template subsections by -1 to invert the contrast BEFORE looking for particles. @ 
e2spt_autoboxer.py @ ['--simtemplatesn'] @ 0 @ int @ Number of orientations to simulate templates (that is, --template will be put into --simtemplatesn different orientations, and a 'subtomogram' will be simulated for each through projections by calling e2spt_simulation.py using the information in --angles or --tiltrange and --nslices. @ 
e2spt_autoboxer.py @ ['--savepreprocessed'] @ False @ None @ Default=False. Will save the intermediate steps of preprocessing of the tomogram. @ 
e2spt_autoboxer.py @ ['--outmode'] @ float @ str @ All EMAN2 programs write images with 4-byte floating point values when possible by default. This allows specifying an alternate format when supported (int8, int16, int32, uint8, uint16, uint32). Values are rescaled to fill MIN-MAX range. @ 
e2spt_autoboxer.py @ ['--normproc'] @  @ str @ Default=None. Normalization processor (e2help.py processors, applied through e2proc3d.py) applied to the tomogram before looking for particles. @ 
e2spt_autoboxer.py @ ['--clip'] @  @ str @ IMOD required for this option. Default=None. Provide x,y,z sizes to clip about the center of the tomogram. For example, specify --clip=2048,2048,250 to clip a tomogram originally sized 4096x4096x500 in half, around the center of the tomogram. To clip only in x and y but keep the full thickness in z, you would say --clip=2048,2048. If one variable is omitted, the default size from the tomogram will be used for that axis. @ 
e2spt_autoboxer.py @ ['--threshold'] @  @ str @ Default=None. Thresholding processor (e2help.py processors, applied through e2proc3d.py) applied to the tomogram before looking for particles. @ 
e2spt_autoboxer.py @ ['--automask'] @ False @ None @ Default=False. Will automask the tomogram 2 sigmas above mean. @ 
e2spt_autoboxer.py @ ['--pruneprj'] @ False @ None @ Generate a projection along the z-axis of potential particles, and compare to a projection of the template. @ 
e2spt_autoboxer.py @ ['--keep'] @ 0.0 @ float @ Default=0.0 (not used). Percentage of particles, expressed as a fraction, to keep right before writing the coordinates file and output stack. @ 
e2spt_autoboxer.py @ ['--nkeep'] @ 0 @ int @ Default=0 (not used). Total number of particles to keep right before writing the coordinates file and output stack. Supersedes --keep @ 
e2spt_autoboxer.py @ ['--tomogram'] @  @ str @ Name of the tomogram. @ 
e2spt_autoboxer.py @ ['--goldstack'] @  @ str @ Name of the stack containing a few gold particles picked from the tomogram. @ 
e2spt_autoboxer.py @ ['--ptclstack'] @  @ str @ Name of the stack containing a few sample particles picked from the tomogram, used to create an initial template.                with which to search for particles throughout the tomogram. @ 
e2spt_autoboxer.py @ ['--template'] @ None @ str @ Default=None. Path to file containing the template    to search for particles throughout the tomogram. Alternatively, provide --template=sphere    to generate a spherical template from scratch. This requires also setting --boxsize and --ptclradius.   You can also provide --template=cylinder, which generates a solid or hollow cylinder,   depending on which of the following options you specify:   --template=cylinder:radius=r:height=h:radiusinner=ri:heightinner=hi.   radiusinner and heightinner MUST be specified together, and must be smaller   than radius and height; otherwise they will be defaulted to radius/2 and height/2. @ 
e2spt_autoboxer.py @ ['--backgroundstack'] @ None @ str @ Name of the stack containing a few boxes picked from regions of the tomogram where there where no particles,                 no gold, and no carbon. @ 
e2spt_autoboxer.py @ ['--carbonstack'] @ None @ str @ Name of the stack containing a few boxes picked from the grid hole (or carbon). @ 
e2spt_autoboxer.py @ ['--boxsize'] @ 0 @ int @ Size of the box to put the extracted particles in, and amount by which the subregions will overlap, when searching for particles in the tomogram. @ 
e2spt_autoboxer.py @ ['--shrinktomo'] @ 0 @ int @ Requires IMOD. Default=0 (no shrinking). Integer factor by which the tomogram will be shrunk. @ 
e2spt_autoboxer.py @ ['--subsettrans'] @ 0 @ int @ Default=0 (not used). Subset of particles to keep/consider after translational alignment. @ 
e2spt_autoboxer.py @ ['--dilutionfactor'] @ 4 @ int @ Default=4. Determines how many particles will be pre-picked as putative particles. For example, if                 if the tomogram is broken up into subregions of volume V to look for particles in each                 and --dilutionfactor=1, then, the number of best-correlating subvolumes from the subregion                 that will be initially selected as potential particles will be n=V/(pv*D) where 'pv' is the volume of one particle                 calculated based on --particleradius or --boxsize, or the template's boxsize ['nx']; 'D' is the dilution factor;                 therefore, the larger D is, the fewer locations that will be initially picked as potential particles (before any pruning). @ 
e2spt_autoboxer.py @ ['--apix'] @ 0.0 @ float @ The actual apix of the tomogram if for some reason it is wrong on the header. @ 
e2spt_autoboxer.py @ ['--ptclradius'] @ 0 @ int @ The estimated radius of the particle in pixels. @ 
e2spt_autoboxer.py @ ['--cshrink'] @ 0 @ int @ If the tomogram was PREVIOUSLY shrunk, --cshrink is the factor by which the tomogram supplied through --tomogram was shrunk with respect to                the raw (unshrunk) tomogram. This CAN work in conjuction with --shrinktomo, so be careful. If both parameters are specified,               the coordinates found by the autoboxer will be multiplied by BOTH factors. @ 
e2spt_autoboxer.py @ ['--preprocess'] @ None @ str @ Any processor (as in e2proc3d.py) to be applied to the tomogram @ 
e2spt_autoboxer.py @ ['--lowpass'] @ None @ str @ A lowpass filtering processor (as in e2proc3d.py) be applied to the tomogram @ 
e2spt_autoboxer.py @ ['--highpass'] @ None @ str @ A highpass filtering processor (as in e2proc3d.py) to be applied to the tomogram. @ 
e2spt_autoboxer.py @ ['--mask'] @ False @ None @ If provided, a cylindrical mask will be created to mask out the carbon and keep only the grid hole.                --gridradius and --gridoffest must be specified. @ 
e2spt_autoboxer.py @ ['--gridradius'] @ 0 @ int @ Radius of the grid in pixels. Supply this parameter only if also supplying --mask. @ 
e2spt_autoboxer.py @ ['--gridoffset'] @  @ str @ x,y amount of pixels to translate the cylindrical mask if the carbon hole in your tomogram is off center.          The left bottom corner would be 0,0. Supply this parameter only if also supplying          --mask and the grid hole is not centered in the tomogram. @ 
e2spt_autoboxer.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_autoboxer.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_autoboxer.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_autoboxer.py @ ['--path'] @ None @ str @ Directory to store results in. The default is a numbered series of directories containing the prefix 'sptautobox';                 for example, sptautobox_01 will be the directory by default if 'sptautobox' already exists. @ 
e2spt_autoboxer.py @ ['--test'] @ False @ None @ N.A. @ 
e2spt_autoboxer.py @ ['--templatethreshold'] @ 0.0 @ float @ A binary threshold will be applied to the template which will zero out all the densities below the supplied value,              and will make the densities above the supplied value equal to one. @ 
e2spt_autoboxer.py @ ['--goldthreshtomo'] @ False @ None @ Zero out all densities above mean of max and min. @ 
e2spt_average.py @ ['--threads'] @ 4 @ int @ Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by e2spt_align at present. @ 
e2spt_average.py @ ['--iter'] @ -1 @ int @ Iteration number within path. Default = start a new iteration @ 
e2spt_average.py @ ['--simthr'] @ -0.1 @ float @ Similarity is smaller for better 'quality' particles. Specify the highest value to include from e2spt_hist.py. Default -0.1 @ 
e2spt_average.py @ ['--keep'] @ -1 @ float @ fraction of particles to keep. will overwrite simthr if set. @ 
e2spt_average.py @ ['--replace'] @ None @ str @ Replace the input subtomograms used for alignment with the specified file (used when the aligned particles were masked or filtered) @ 
e2spt_average.py @ ['--outfile'] @ None @ str @ Normally even/odd and overall outputs automatically generated. If specified, only overall file written with this specified filename. Suppresses postprocessing. @ 
e2spt_average.py @ ['--wedgesigma'] @ 3.0 @ float @ Threshold for identifying missing data in Fourier space in terms of standard deviation of each Fourier shell. Default 3.0 @ 
e2spt_average.py @ ['--minalt'] @ 0 @ float @ Minimum alignment altitude to include. Default=0 @ 
e2spt_average.py @ ['--maxalt'] @ 180 @ float @ Maximum alignment altitude to include. Deafult=180 @ 
e2spt_average.py @ ['--maxtilt'] @ 90.0 @ float @ Explicitly zeroes data beyond specified tilt angle. Assumes tilt axis exactly on Y and zero tilt in X-Y plane. Default 90 (no limit). @ 
e2spt_average.py @ ['--listfile'] @ None @ str @ Specify a filename containing a list of integer particle numbers to include in the average, one per line, first is 0. Additional exclusions may apply. @ 
e2spt_average.py @ ['--automaskexpand'] @ -1 @ int @ Default=boxsize/20. Specify number of voxels to expand mask before soft edge. Use this if low density peripheral features are cut off by the mask. @ 
e2spt_average.py @ ['--symalimasked'] @ None @ str @ This will translationally realign each asymmetric unit to the specified (usually masked) reference  @ 
e2spt_average.py @ ['--sym'] @ c1 @ str @ Symmetry of the input. Must be aligned in standard orientation to work properly. @ 
e2spt_average.py @ ['--path'] @ None @ str @ Path to a folder containing current results (default = highest spt_XX) @ 
e2spt_average.py @ ['--skippostp'] @ False @ None @ Skip post process steps (fsc, mask and filters) @ 
e2spt_average.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_average.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_average.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_average.py @ ['--parallel'] @ None @ str @ Thread/mpi parallelism to use @ 
e2spt_average_multi.py @ ['--iter'] @ 0 @ int @ Iteration number within path. Default = start a new iteration @ 
e2spt_average_multi.py @ ['--simthr'] @ -0.1 @ float @ Similarity is smaller for better 'quality' particles. Specify the highest value to include from e2spt_hist.py. Default -0.1 @ 
e2spt_average_multi.py @ ['--simthr2'] @ 0 @ float @ Simlarity score for the best matching final alignment. Scaling may be different due to resolution limit. Default 0 @ 
e2spt_average_multi.py @ ['--replace'] @ None @ str @ Replace the input subtomograms used for alignment with the specified file (used when the aligned particles were masked or filtered) @ 
e2spt_average_multi.py @ ['--wedgesigma'] @ 3.0 @ float @ Threshold for identifying missing data in Fourier space in terms of standard deviation of each Fourier shell. Default 3.0 @ 
e2spt_average_multi.py @ ['--minalt'] @ 0 @ float @ Minimum alignment altitude to include. Default=0 @ 
e2spt_average_multi.py @ ['--maxalt'] @ 180 @ float @ Maximum alignment altitude to include. Deafult=180 @ 
e2spt_average_multi.py @ ['--maxtilt'] @ 90.0 @ float @ Explicitly zeroes data beyond specified tilt angle. Assumes tilt axis exactly on Y and zero tilt in X-Y plane. Default 90 (no limit). @ 
e2spt_average_multi.py @ ['--maxres'] @ -1 @ float @ Lowpass filter applied to particles prior to alignment/averaging, resolution in A. Default disabled @ 
e2spt_average_multi.py @ ['--listfile'] @ None @ str @ Specify a filename containing a list of integer particle numbers to include in the average, one per line, first is 0. Additional exclusions may apply. @ 
e2spt_average_multi.py @ ['--shrinkcompare'] @ 0 @ int @ Shrink factor for classification only (for speed) @ 
e2spt_average_multi.py @ ['--sym'] @ c1 @ str @ Symmetry of the input. Must be aligned in standard orientation to work properly. The structure will be expanded from this symmetry to c1. @ 
e2spt_average_multi.py @ ['--applysym'] @ c1 @ str @ Symmetry to apply to the structure after classification. @ 
e2spt_average_multi.py @ ['--path'] @ None @ str @ Path to a folder containing current results (default = highest spt_XX) @ 
e2spt_average_multi.py @ ['--parallel'] @ None @ str @ parallel mode. Not all functions are implemented yet.. @ 
e2spt_average_multi.py @ ['--threads'] @ 4 @ int @ Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by e2spt_align at present. @ 
e2spt_average_multi.py @ ['--maskclass'] @ None @ str @ Mask each reference before classification @ 
e2spt_average_multi.py @ ['--mask'] @ None @ str @ Mask applied to final averages @ 
e2spt_average_multi.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_average_multi.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_average_multi.py @ ['--noali'] @ False @ None @ Skip translational alignment. @ 
e2spt_average_multi.py @ ['--symcopy'] @ False @ None @ Copy each particle for each asymetrical unit. need a maskclass to focus on one unit. do not work with applysym @ 
e2spt_average_multi.py @ ['--nolstout'] @ False @ None @ Skip writting lst output. @ 
e2spt_average_multi.py @ ['--sample'] @ -1 @ int @ use only N samples. @ 
e2spt_average_multi.py @ ['--randnclass'] @ -1 @ int @ split into N random classes. ignore refs @ 
e2spt_average_multi.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_binarytree.py @ ['--path'] @ spt_bt @ str @ Default=spt. Directory to store results in. The default is a numbered series of directories containing the prefix 'spt'; for example, spt_02 will be the directory by default if 'spt_01' already exists. @ 
e2spt_binarytree.py @ ['--input'] @  @ str @ Default=None. The name of the input volume stack. MUST be HDF since volume stack support is required. @ 
e2spt_binarytree.py @ ['--npeakstorefine'] @ 4 @ int @ Default=1. The number of best coarse alignments to refine in search of the best final alignment. Default=1. @ 
e2spt_binarytree.py @ ['--parallel'] @ None @ None @ Parallelism. See http://eman2.org/Parallel @ 
e2spt_binarytree.py @ ['--ppid'] @ -1 @ int @ Default=-1. Set the PID of the parent process, used for cross platform PPID @ 
e2spt_binarytree.py @ ['--verbose', '-v'] @ 0 @ int @ Default=0. Verbose level [0-9], higher number means higher level of verboseness; 10-11 will trigger many messages that might make little sense since this level of verboseness corresponds to 'debugging mode' @ 
e2spt_binarytree.py @ ['--verbose', '-v'] @ 0 @ int @ Default=0. Verbose level [0-9], higher number means higher level of verboseness; 10-11 will trigger many messages that might make little sense since this level of verboseness corresponds to 'debugging mode' @ 
e2spt_binarytree.py @ ['--plots'] @ False @ None @ Default=False. Turn this option on to generatea plot of the ccc scores during each iteration. Running on a cluster or via ssh remotely might not support plotting. @ 
e2spt_binarytree.py @ ['--subset'] @ 0 @ int @ Default=0 (not used). Refine only this substet of particles from the stack provided through --input @ 
e2spt_binarytree.py @ ['--preavgproc1'] @  @ str @ Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) @ 
e2spt_binarytree.py @ ['--preavgproc2'] @  @ str @ Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) @ 
e2spt_binarytree.py @ ['--weighbytiltaxis'] @  @ str @ Default=None. A,B, where A is an integer number and B a decimal. A represents the location of the tilt axis in the tomogram in pixels (eg.g, for a 4096x4096xZ tomogram, this value should be 2048), and B is the weight of the particles furthest from the tomogram. For example, --weighbytiltaxis=2048,0.5 means that praticles at the tilt axis (with an x coordinate of 2048) will have a weight of 1.0 during averaging, while the distance in the x coordinates of particles not-on the tilt axis will be used to weigh their contribution to the average, with particles at the edge(0+radius or 4096-radius) weighing 0.5, as specified by the value provided for B. @ 
e2spt_binarytree.py @ ['--weighbyscore'] @ False @ None @ Default=False. This option will weigh the contribution of each subtomogram to the average by score/bestscore. @ 
e2spt_binarytree.py @ ['--align'] @ rotate_translate_3d_tree @ str @ Default is rotate_translate_3d_tree. See e2help.py aligners to see the list of parameters the aligner takes (for example, if there's symmetry, supply --align rotate_translate_3d_tree:sym=icos). This is the aligner used to align particles to the previous class average. Specify 'None' (with capital N) to disable. @ 
e2spt_binarytree.py @ ['--aligncmp'] @ ccc.tomo.thresh @ str @ Default=ccc.tomo.thresh. The comparator used for the --align aligner. Do not specify unless you need to use anotherspecific aligner. @ 
e2spt_binarytree.py @ ['--averager'] @ mean.tomo @ str @ Default=mean.tomo. The type of averager used to produce the class average. Default=mean.tomo. @ 
e2spt_binarytree.py @ ['--shrink'] @ 1 @ int @ Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for coarse alignment. @ 
e2spt_binarytree.py @ ['--shrinkfine'] @ 1 @ int @ Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for refine alignment. @ 
e2spt_binarytree.py @ ['--threshold'] @  @ str @ Default=None. A threshold applied to the subvolumes after normalization. For example, --threshold=threshold.belowtozero:minval=0 makes all negative pixels equal 0, so that they do not contribute to the correlation score. @ 
e2spt_binarytree.py @ ['--mask'] @  @ str @ Default=None. Masking processor applied to particles before alignment. IF using --clip, make sure to express outer mask radii as negative pixels from the edge. @ 
e2spt_binarytree.py @ ['--maskfile'] @  @ str @ Default=None. Mask file (3D IMAGE) applied to particles before alignment. Must be in HDF format. Default is None. @ 
e2spt_binarytree.py @ ['--normproc'] @  @ str @ Default=None (see 'e2help.py processors -v 10' at the command line). Normalization processor applied to particles before alignment. If normalize.mask is used, results of the mask option will be passed in automatically. If you want to turn this option off specify 'None' @ 
e2spt_binarytree.py @ ['--clip'] @ 0 @ int @ Default=0 (which means it's not used). Boxsize to clip particles as part of preprocessing to speed up alignment. For example, the boxsize of the particles might be 100 pixels, but the particles are only 50 pixels in diameter. Aliasing effects are not always as deleterious for all specimens, and sometimes 2x padding isn't necessary; still, there are some benefits from 'oversampling' the data during averaging; so you might still want an average of size 2x, but perhaps particles in a box of 1.5x are sufficiently good for alignment. In this case, you would supply --clip=75 @ 
e2spt_binarytree.py @ ['--preprocess'] @  @ str @ Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_binarytree.py @ ['--preprocessfine'] @  @ str @ Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. @ 
e2spt_binarytree.py @ ['--lowpass'] @  @ str @ Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_binarytree.py @ ['--lowpassfine'] @  @ str @ Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. @ 
e2spt_binarytree.py @ ['--highpass'] @  @ str @ Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_binarytree.py @ ['--highpassfine'] @  @ str @ Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. @ 
e2spt_binarytree.py @ ['--matchimgs'] @ False @ None @ Default=False. Applies filter.matchto to one image so that it matches the other's spectral profile during preprocessing for pair-wise alignment purposes. @ 
e2spt_binarytree.py @ ['--filterbyfsc'] @ False @ None @ Default=False. If on, this parameter will use dynamic FSC filtering. --lowpass will be used to build initial references if no --ref supplied, then, the FSC between the even and odd initial references will be used to filter the data during preprocessing. If --ref is supplied, --lowpass will be used during the first iteration to align the particles against the reference. Thereafter, the FSC between the most current particle average and the original reference (--ref) will be used in the next iteration. @ 
e2spt_binarytree.py @ ['--radius'] @ 0 @ float @ Default=0 (which means it's not used by default). Hydrodynamic radius of the particle in Angstroms. This will be used to automatically calculate the angular steps to use in search of the best alignment. Make sure the apix is correct on the particles' headers, sine the radius will be converted from Angstroms to pixels. Then, the fine angular step is equal to 360/(2*pi*radius), and the coarse angular step 4 times that. @ 
e2spt_binarytree.py @ ['--precision'] @ 1.0 @ float @ Default=1.0. Precision in pixels to use when figuring out alignment parameters automatically using --radius. Precision would be the number of pixels that the the edge of the specimen is moved (rotationally) during the finest sampling, --falign. If precision is 1, then the precision of alignment will be that of the sampling (apix of your images) times the --shrinkfine factor specified. @ 
e2spt_binarytree.py @ ['--search'] @ 8 @ int @ "Default=8. During COARSE alignment translational search in X, Y and Z, in pixels. Default=8. This WILL overwrite any search: provided through --align, EXCEPT if you provide --search=8, which is the default. In general, just avoid providing search twice (through here and through the aligner, --align). If you do, just be careful to make them consistent to minimize misinterpretation and error. @ 
e2spt_binarytree.py @ ['--searchfine'] @ 2 @ int @ "Default=2. During FINE alignment translational search in X, Y and Z, in pixels. Default=2. This WILL overwrite any search: provided through --falign, EXCEPT if you provide --searchfine=2, which is the default. In general, just avoid providing search twice (through here and through the fine aligner --falign). If you do, just be careful to make them consistent to minimize misinterpretation and error. @ 
e2spt_binarytree.py @ ['--iterstop'] @ 0 @ int @ Default=0. (Not used). The program is called to convergence by default (all particles merge into one final average). To stop at an intermediate iteration, provide this parameter. For example, --iterstop=1, will only allow the algorithm to complete 1 iteration; --iterstop=2 will allow it to go through 2, etc. @ 
e2spt_binarytree.py @ ['--savesteps'] @ False @ None @ Default=False. If set, will save the average after each iteration to class_#.hdf. Each class in a separate file. Appends to existing files. @ 
e2spt_binarytree.py @ ['--saveali'] @ False @ None @ Default=False. If set, will save the aligned particle volumes in class_ptcl.hdf. Overwrites existing file. @ 
e2spt_binarytree.py @ ['--saveallalign'] @ False @ None @ Default=False. If set, will save the alignment parameters after each iteration @ 
e2spt_binarytree.py @ ['--sym'] @  @ None @ Default=None (equivalent to c1). Symmetry to impose -choices are: c<n>, d<n>, h<n>, tet, oct, icos @ 
e2spt_binarytree.py @ ['--postprocess'] @  @ str @ A processor to be applied to the FINAL volume after averaging the raw volumes in their FINAL orientations, after all iterations are done. @ 
e2spt_binarytree.py @ ['--procfinelikecoarse'] @ False @ None @ If you supply this parameters, particles for fine alignment will be preprocessed identically to particles for coarse alignment by default. If you supply this, but want specific parameters for preprocessing particles for also supply: fine alignment, nd supply fine alignment parameters, such as --lowpassfine, --highpassfine, etc; to preprocess the particles for FINE alignment differently than for COARSE alignment. @ 
e2spt_binarytree.py @ ['--falign'] @ None @ str @ Default=None. This is the second stage aligner used to fine-tune the first alignment. @ 
e2spt_binarytree.py @ ['--faligncmp'] @ ccc.tomo.thresh @ str @ Default=ccc.tomo.thresh. The comparator used by the second stage aligner. @ 
e2spt_binarytree.py @ ['--breaksym'] @ False @ None @ Default=False. Break symmetry. Do not apply symmetrization after averaging, even if searching the asymmetric unit provided through --sym only for alignment. Default=False @ 
e2spt_binarytree.py @ ['--randomizewedge'] @ False @ None @ Default=False. This parameter is EXPERIMENTAL. It randomizes the position of the particles BEFORE alignment, to minimize missing wedge bias and artifacts during symmetric alignment where only a fraction of space is scanned @ 
e2spt_binarytree.py @ ['--autocenter'] @  @ str @ Default=None. Autocenters each averaged pair during initial average generation with --btref and --hacref. Will also autocenter the average of all particles after each iteration of iterative refinement. Options are --autocenter=xform.centerofmass (self descriptive), or --autocenter=xform.centeracf, which applies auto-convolution on the average. @ 
e2spt_binarytree.py @ ['--autocentermask'] @  @ str @ Default=None. Masking processor to apply before autocentering. See 'e2help.py processors -v 10' at the command line. @ 
e2spt_binarytree.py @ ['--autocenterpreprocess'] @ False @ None @ Default=False. This will apply a highpass filter at a frequency of half the box size times the apix, shrink by 2, and apply a low pass filter at half nyquist frequency to any computed average for autocentering purposes if --autocenter is provided. Default=False. @ 
e2spt_binarytree.py @ ['--tweak'] @ False @ None @ WARNING: BUGGY. This will perform a final alignment with no downsampling [without using --shrink or --shrinkfine] if --shrinkfine > 1. @ 
e2spt_binarytree.py @ ['--nseedlimit'] @ 0 @ int @ Maximum number of particles   to use. For example, if you supply a stack with 150 subtomograms, the program will   automatically select 128 as the limit to use because it's the largest power of 2 that is   smaller than 150. But if you provide, say --nseedlimit=100, then the number of particles   used will be 64, because it's the largest power of 2 that is still smaller than 100. @ 
e2spt_boxer.py @ ['--box2d'] @ False @ None @ Boxing 2D particls from tomograms. @ 
e2spt_boxer.py @ ['--box3d'] @ False @ None @ Boxing 3D particls from tomograms (default). @ 
e2spt_boxer.py @ ['--ppid'] @ -2 @ int @ ppid @ 
e2spt_boxer_convnet.py @ ['--label'] @ tomobox @ str @ Load previous contour segmentation. @ 
e2spt_boxer_convnet.py @ ['--gpuid'] @  @ str @ Specify the gpu to use @ 
e2spt_boxer_convnet.py @ ['--mult'] @ 1 @ float @ multiply data by factor. useful for vpp data... @ 
e2spt_boxer_convnet.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_boxer_old.py @ ['--coords'] @  @ str @ Default=None. Used to extract particles without the GUI. Provide a coordinates file that contains the center coordinates of the subvolumes you want to extract from the command line (without bringing up the GUI). @ 
e2spt_boxer_old.py @ ['--output'] @  @ str @ Default=None. Used to extract particles without the GUI. Requires --coords. If not specified, the suffix '_ptlcs' will be attached to the name of the input tomogram. Otherwise, specify here the name of the stack file where to write the extracted subvolumes. @ 
e2spt_boxer_old.py @ ['--inmemory'] @ False @ None @ Default=False. If on, this option will read the entire tomogram into memory. Much faster than reading 'from disk', but you must have enough RAM! @ 
e2spt_boxer_old.py @ ['--invert'] @ False @ None @ Default=False. If on, this option means you want the contrast to me inverted while boxing, AND for the extracted sub-volumes. Remember that EMAN2 **MUST** work with "white" protein. You can very easily figure out what the original color of the protein is in your data by looking at the gold fiducials or the edge of the carbon hole in your tomogram. If they look black you MUST specify this option @ 
e2spt_boxer_old.py @ ['--apix'] @ 0.0 @ float @ apix @ 
e2spt_boxer_old.py @ ['--bruteaverage'] @ False @ None @ Default=False. If specified, this will generate an "as is" average of all the subvolumes (no alignment performed). This can be useful to see if, on average, particles correspond to the desired specimen and are reasonably centered. @ 
e2spt_boxer_old.py @ ['--boxsize'] @ 0 @ int @ Default=0. Used to extract particles without the GUI. Requires --coords. Box size in pixels @ 
e2spt_boxer_old.py @ ['--cshrink'] @ 1 @ int @ Default=1 (not used; no scaling of --coords). Used to extract particles without the GUI. Requires --coords. Specifies the factor by which to multiply the coordinates in --coords, so that they can be at the same scale as the RAW tomogram (or whatever tomogram you intend for the particles to be extracted from). For example, provide --cshrink=2 if the coordinates were determined in a binned-by-2 (shrunk-by-2) tomogram, but you want to extract the subvolumes from a tomogram without binning/shrinking (which should be 2x larger). @ 
e2spt_boxer_old.py @ ['--subset'] @ 0 @ int @ Default=0 (not used). Used to extract particles without the GUI. Requires --coords. Specify how many subvolumes from --coords you want to extract; e.g, if you specify 10, the first 10 particles will be extracted. 0 means "box them all" because it makes no sense to box none. @ 
e2spt_boxer_old.py @ ['--normproc'] @ normalize @ str @ Default=normalize. Used to extract particles without the GUI. Requires --coords. Normalization processor applied to particles before extraction. Use --normproc=normalize.edgemean if the particles have a clear solvent background (i.e., they're not part of a larger complex or embeded in a membrane. @ 
e2spt_boxer_old.py @ ['--path'] @  @ str @ Default=none (not used). Used to extract particles without the GUI. Requires --coords. Name of directory to save data to. @ 
e2spt_boxer_old.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2spt_boxer_old.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2spt_boxer_old.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_buildsets.py @ ['--label'] @  @ str @ label of particles for sets @ 
e2spt_buildsets.py @ ['--allparticles'] @ False @ None @ make sets for all particles @ 
e2spt_buildsets.py @ ['--spliteo'] @ False @ None @ split even/odd set so there is no overlap of particles from the two sets. @ 
e2spt_buildsets.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_classaverage.py @ ['--input'] @  @ str @ Default=None. The name of the input volume stack. MUST be HDF since volume stack support is required. @ 
e2spt_classaverage.py @ ['--ref'] @  @ str @ Default=None. Reference image. Used as an initial alignment reference. The refinements are 'gold standard' by default, and therefore two independent copies of the reference will be generated and randomphase-lowpass filtered to the resolution specified through --refrandphase. To turn dataset splitting and gold standard refinement off, supply --goldstandardoff. @ 
e2spt_classaverage.py @ ['--apix'] @ 0.0 @ float @ Default=0.0 (not used). Use this apix value where relevant instead of whatever is in the header of the reference and the particles. @ 
e2spt_classaverage.py @ ['--align'] @ rotate_translate_3d_tree @ str @ Default is rotate_translate_3d_tree. See e2help.py aligners to see the list of parameters the aligner takes (for example, if there's symmetry, supply --align rotate_translate_3d_tree:sym=icos). This is the aligner used to align particles to the previous class average. Specify 'None' (with capital N) to disable. @ 
e2spt_classaverage.py @ ['--aligncmp'] @ ccc.tomo.thresh @ str @ Default=ccc.tomo.thresh. The comparator used for the --align aligner. Do not specify unless you need to use another specific aligner. @ 
e2spt_classaverage.py @ ['--clip'] @ 0 @ int @ Default=0 (which means it's not used). Boxsize to clip particles as part of preprocessing to speed up alignment. For example, the boxsize of the particles might be 100 pixels, but the particles are only 50 pixels in diameter. Aliasing effects are not always as deleterious for all specimens, and sometimes 2x padding isn't necessary; still, there are some benefits from 'oversampling' the data during averaging; so you might still want an average of size 2x, but perhaps particles in a box of 1.5x are sufficiently good for alignment. In this case, you would supply --clip=75 @ 
e2spt_classaverage.py @ ['--iter'] @ 1 @ int @ Default=1. The number of iterations to perform. @ 
e2spt_classaverage.py @ ['--path'] @ spt @ str @ Default=spt. Directory to store results in. The default is a numbered series of directories containing the prefix 'spt'; for example, spt_02 will be the directory by default if 'spt_01' already exists. @ 
e2spt_classaverage.py @ ['--npeakstorefine'] @ 1 @ int @ Default=1. The number of best coarse alignments to refine in search of the best final alignment. @ 
e2spt_classaverage.py @ ['--preavgproc1'] @  @ str @ Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) @ 
e2spt_classaverage.py @ ['--preavgproc2'] @  @ str @ Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) @ 
e2spt_classaverage.py @ ['--parallel'] @ None @ None @ default=thread:1. Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2spt_classaverage.py @ ['--ppid'] @ -1 @ int @ Default=-1. Set the PID of the parent process, used for cross platform PPID @ 
e2spt_classaverage.py @ ['--resume'] @  @ str @ (Not working currently). sptali_ir.json file that contains alignment information for the particles in the set. If the information is incomplete (i.e., there are less elements in the file than particles in the stack), on the first iteration the program will complete the file by working ONLY on particle indexes that are missing. For subsequent iterations, all the particles will be used. @ 
e2spt_classaverage.py @ ['--plots'] @ False @ None @ Default=False. Turn this option on to generate a plot of the ccc scores during each iteration in.png format (otherwise only .txt files will be saved). This option will also produce a plot of mean ccc score across iterations. Running on a cluster or via ssh remotely might not support plotting. @ 
e2spt_classaverage.py @ ['--savepreproc'] @ False @ None @ Default=False. Will save stacks of preprocessed particles (one for coarse alignment and one for fine alignment if preprocessing options are different). @ 
e2spt_classaverage.py @ ['--subset'] @ 0 @ int @ Default=0 (not used). Refine only this substet of particles from the stack provided through --input @ 
e2spt_classaverage.py @ ['--savesteps'] @ False @ None @ Default=False. If set, this will save the average after each iteration to class_#.hdf. Each class in a separate file. Appends to existing files. @ 
e2spt_classaverage.py @ ['--saveali'] @ False @ None @ Default=False. If set, this will save the aligned particle volumes in class_ptcl.hdf. Overwrites existing file. @ 
e2spt_classaverage.py @ ['--saveallalign'] @ False @ None @ Default=False. If set, this will save an aligned stack of particles for each iteration @ 
e2spt_classaverage.py @ ['--saveallpeaks'] @ False @ None @ Default=False. If set, this will save the alignment information and score for all examined peaks --npeakstorefine during coarse alignment. @ 
e2spt_classaverage.py @ ['--sym'] @  @ str @ Default=None (equivalent to c1). Symmetry to impose -choices are: c<n>, d<n>, h<n>, tet, oct, icos @ 
e2spt_classaverage.py @ ['--verbose', '-v'] @ 0 @ int @ Default=0. Verbose level [0-9], higher number means higher level of verboseness; 10-11 will trigger many messages that might make little sense since this level of verboseness corresponds to 'debugging mode' @ 
e2spt_classaverage.py @ ['--verbose', '-v'] @ 0 @ int @ Default=0. Verbose level [0-9], higher number means higher level of verboseness; 10-11 will trigger many messages that might make little sense since this level of verboseness corresponds to 'debugging mode' @ 
e2spt_classaverage.py @ ['--weighbytiltaxis'] @  @ str @ Default=None. A,B, where A is an integer number and B a decimal. A represents the location of the tilt axis in the tomogram in pixels (eg.g, for a 4096x4096xZ tomogram, this value should be 2048), and B is the weight of the particles furthest from the tiltaxis. For example, --weighbytiltaxis=2048,0.5 means that praticles at the tilt axis (with an x coordinate of 2048) will have a weight of 1.0 during averaging, while the distance in the x coordinates of particles not-on the tilt axis will be used to weigh their contribution to the average, with particles at the edge(0+radius or 4096-radius) weighing 0.5, as specified by the value provided for B. @ 
e2spt_classaverage.py @ ['--weighbyscore'] @ False @ None @ Default=False. This option will weigh the contribution of each subtomogram to the average by score/bestscore. @ 
e2spt_classaverage.py @ ['--goldstandardoff'] @ False @ None @ Default=False. This will PREVENT splitting the dataset provided through --input into two groups, and the entire dataset will be refined together. If this parameter is NOT supplied (and thus the refinement is 'gold standard') and --ref is supplied, two copies of the reference will be generated and randomphase-lowpass filtered to the resolution specified through --refrandphase. @ 
e2spt_classaverage.py @ ['--classmx'] @  @ str @ Default=None. The name of the classification matrix specifying how particles in 'input' should be grouped. If omitted, all particles will be averaged. @ 
e2spt_classaverage.py @ ['--recompute'] @ False @ None @ default=False. This parameter requires --classmx and will recompute averages (for example, even and odd) based on the classmx file and the alignment parameters specified therein for each particle. No refinements will follow. This is exclusively for recomputing averages. @ 
e2spt_classaverage.py @ ['--donotaverage'] @ False @ None @ Default=False. If e2spt_refinemulti.py is calling e2spt_classaverage.py, the latter need not average any particles, but rather only yield the alignment results. @ 
e2spt_classaverage.py @ ['--refpreprocess'] @ False @ None @ Default=False. This will preprocess the reference identically to the particles. It is off by default, but it is internally turned on when no reference is supplied. It should probably be off when using a crystal structure (with all positive densities) turned to EM density as an initial model, but it should be on when using an EM map. @ 
e2spt_classaverage.py @ ['--refrandphase'] @ 0.0 @ float @ Default=0 (off). Resolution to phase randomize the reference to (or the two copies of the reference if --goldstandardoff is NOT supplied [gold standard refinement is on by default]. @ 
e2spt_classaverage.py @ ['--resultmx'] @ None @ str @ Default=None. Specify an output image to store the result matrix. This is in the same format as the classification matrix. http://blake.bcm.edu/emanwiki/EMAN2/ClassmxFiles @ 
e2spt_classaverage.py @ ['--refinemultireftag'] @  @ str @ Default=''. DO NOT USE THIS PARAMETER. It is passed on from e2spt_refinemulti.py if needed. @ 
e2spt_classaverage.py @ ['--keep'] @ 1.0 @ float @ Default=1.0 (all particles kept). The fraction of particles to keep in each class. @ 
e2spt_classaverage.py @ ['--keepsig'] @ False @ None @ Default=False. Causes the keep argument to be interpreted in standard deviations. @ 
e2spt_classaverage.py @ ['--averager'] @ mean.tomo @ str @ Default=mean.tomo. The type of averager used to produce the class average. Default=mean.tomo. @ 
e2spt_classaverage.py @ ['--shrink'] @ 1 @ int @ Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for coarse alignment. @ 
e2spt_classaverage.py @ ['--shrinkfine'] @ 1 @ int @ Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for refine alignment. @ 
e2spt_classaverage.py @ ['--threshold'] @  @ str @ Default=None. A threshold applied to the subvolumes after normalization. For example, --threshold=threshold.belowtozero:minval=0 makes all negative pixels equal 0, so that they do not contribute to the correlation score. @ 
e2spt_classaverage.py @ ['--mask'] @  @ str @ Default=None. Masking processor applied to particles before alignment. IF using --clip, make sure to express outer mask radii as negative pixels from the edge. @ 
e2spt_classaverage.py @ ['--maskfile'] @  @ str @ Default=None. Mask file (3D IMAGE) applied to the reference image before alignment. It will also be applied to the average in each iteration since the average serves as the reference for the next iteration. Must be in HDF format. Default is None. @ 
e2spt_classaverage.py @ ['--normproc'] @  @ str @ Default=None (see 'e2help.py processors -v 10' at the command line). Normalization processor applied to particles before alignment. If normalize.mask is used, results of the mask option will be passed in automatically. If you want to turn this option off specify 'None' @ 
e2spt_classaverage.py @ ['--preprocess'] @  @ str @ Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_classaverage.py @ ['--preprocessfine'] @  @ str @ Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. @ 
e2spt_classaverage.py @ ['--lowpass'] @  @ str @ Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_classaverage.py @ ['--lowpassfine'] @  @ str @ Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. @ 
e2spt_classaverage.py @ ['--highpass'] @  @ str @ Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_classaverage.py @ ['--highpassfine'] @  @ str @ Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. @ 
e2spt_classaverage.py @ ['--matchimgs'] @ False @ None @ Default=False. Applies filter.matchto to one image so that it matches the other's spectral profile during preprocessing for pair-wise alignment purposes. @ 
e2spt_classaverage.py @ ['--filterbyfsc'] @ False @ None @ Default=False. If on, this parameter will use dynamic FSC filtering. --lowpass will be used to build initial references if no --ref supplied, then, the FSC between the even and odd initial references will be used to filter the data during preprocessing. If --ref is supplied, --lowpass will be used during the first iteration to align the particles against the reference. Thereafter, the FSC between the most current particle average and the original reference (--ref) will be used in the next iteration. @ 
e2spt_classaverage.py @ ['--radius'] @ 0 @ float @ Default=0 (which means it's not used by default). Hydrodynamic radius of the particle in Angstroms. This will be used to automatically calculate the angular steps to use in search of the best alignment. Make sure the apix is correct on the particles' headers, sine the radius will be converted from Angstroms to pixels. Then, the fine angular step is equal to 360/(2*pi*radius), and the coarse angular step 4 times that. @ 
e2spt_classaverage.py @ ['--precision'] @ 1.0 @ float @ Default=1.0. Precision in pixels to use when figuring out alignment parameters automatically using --radius. Precision would be the number of pixels that the the edge of the specimen is moved (rotationally) during the finest sampling, --falign. If precision is 1, then the precision of alignment will be that of the sampling (apix of your images) times the --shrinkfine factor specified. @ 
e2spt_classaverage.py @ ['--search'] @ 8 @ int @ "Default=8. During COARSE alignment, translational search in X, Y and Z, in pixels. This WILL overwrite any search: provided through --align, EXCEPT if you provide --search=8, which is the default. In general, just avoid providing search twice (through here and through the aligner, --align). If you do, just be careful to make them consistent to minimize misinterpretation and error. @ 
e2spt_classaverage.py @ ['--searchfine'] @ 2 @ int @ "Default=2. During FINE alignment translational search in X, Y and Z, in pixels. Default=2. This WILL overwrite any search: provided through --falign, EXCEPT if you provide --searchfine=2, which is the default. In general, just avoid providing search twice (through here and through the fine aligner --falign). If you do, just be careful to make them consistent to minimize misinterpretation and error. @ 
e2spt_classaverage.py @ ['--postprocess'] @  @ str @ Default=None. A processor to be applied to the FINAL volume after averaging the raw volumes in their FINAL orientations, after all iterations are done. @ 
e2spt_classaverage.py @ ['--procfinelikecoarse'] @ False @ None @ If you supply this parameters, particles for fine alignment will be preprocessed identically to particles for coarse alignment by default. If you supply this, but want specific parameters for preprocessing particles for also supply: fine alignment, nd supply fine alignment parameters, such as --lowpassfine, --highpassfine, etc; to preprocess the particles for FINE alignment differently than for COARSE alignment. @ 
e2spt_classaverage.py @ ['--falign'] @  @ str @ Default=None. This is the second stage aligner when the default aligner (rotate_translate_3d_tree) is NOT used. The fine alignment aligner is used to fine-tune the first alignment. @ 
e2spt_classaverage.py @ ['--faligncmp'] @  @ str @ Default=None. The default will depend on the aligner used (ccc.tomo or ccc.tomo.thresh). The comparator used by the second stage aligner. @ 
e2spt_classaverage.py @ ['--translateonly'] @ False @ None @ Default=False. This will force the aligner to not do any rotations and thus serves for translational centering. Specify search values through --search, otherwise its default value will be used. @ 
e2spt_classaverage.py @ ['--inputaliparams'] @  @ str @ Default=None. .json file containing a dict of transforms to apply to 'pre-align' the particles. @ 
e2spt_classaverage.py @ ['--breaksym'] @ False @ None @ Default=False. Break symmetry. Do not apply symmetrization after averaging, even if searching the asymmetric unit provided through --sym only for alignment. Default=False @ 
e2spt_classaverage.py @ ['--randomizewedge'] @ False @ None @ Default=False. This parameter is EXPERIMENTAL. It randomizes the position of the particles BEFORE alignment, to minimize missing wedge bias and artifacts during symmetric alignment where only a fraction of space is scanned @ 
e2spt_classaverage.py @ ['--autocenter'] @  @ str @ WARNING: Experimental. Default=None. Autocenters each averaged pair during initial average generation with --btref and --hacref. Will also autocenter the average of all particles after each iteration of iterative refinement. Options are --autocenter=xform.centerofmass (self descriptive), or --autocenter=xform.centeracf, which applies auto-convolution on the average. @ 
e2spt_classaverage.py @ ['--tweak'] @ False @ None @ WARNING: BUGGY. This will perform a final alignment with no downsampling [without using --shrink or --shrinkfine] if --shrinkfine > 1. @ 
e2spt_classify.py @ ['--refs'] @ None @ str @ 3D reference volumes @ 
e2spt_classify.py @ ['--mask'] @  @ str @ mask @ 
e2spt_classify.py @ ['--niter'] @ 3 @ int @ iterations @ 
e2spt_classify.py @ ['--sym'] @ c1 @ str @ sym @ 
e2spt_classify.py @ ['--tarres'] @ 20.0 @ float @ target resolution @ 
e2spt_classify.py @ ['--mass'] @ 500 @ float @ mass @ 
e2spt_classify.py @ ['--localfilter'] @ False @ None @ use tophat local @ 
e2spt_classify.py @ ['--threads'] @ 12 @ int @ threads @ 
e2spt_classify.py @ ['--path'] @ None @ str @ path @ 
e2spt_classify.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_classify.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_classify.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_classify_byproj.py @ ['--path'] @ None @ str @ Path to an existing spt_XX folder with the alignment results to use, defualt = highest spt_XX @ 
e2spt_classify_byproj.py @ ['--iter'] @ -1 @ int @ Iteration number within path, default = last iteration @ 
e2spt_classify_byproj.py @ ['--ncls'] @ 3 @ int @ Number of classes to generate @ 
e2spt_classify_byproj.py @ ['--nbasis'] @ 4 @ int @ Number of basis vectors for the MSA phase, default=4 @ 
e2spt_classify_byproj.py @ ['--layers'] @ 2 @ int @ number of 1 pixel layers about the center to use for the projection in each direction (size in reduced image if --shrink used), ie 0->1, 1->3, 2->5. Default=2 @ 
e2spt_classify_byproj.py @ ['--sym'] @ c1 @ str @ Symmetry of the input. Must be aligned in standard orientation to work properly. @ 
e2spt_classify_byproj.py @ ['--shrink'] @ 1 @ int @ shrink the particles before processing @ 
e2spt_classify_byproj.py @ ['--mask'] @ None @ str @ A 3D mask file or a single mask processor specification to apply prior to local projection generation @ 
e2spt_classify_byproj.py @ ['--threads'] @ 4 @ int @ Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by e2spt_align at present. @ 
e2spt_classify_byproj.py @ ['--hp'] @ -1 @ float @ Apply a high-pass filter at the specified resolution when generating projections. Specify as resolution in A, eg - 100 @ 
e2spt_classify_byproj.py @ ['--lp'] @ -1 @ float @ Apply a low-pass filter at the specified resolution when generating projections. Specify the resolution in A, eg - 25 @ 
e2spt_classify_byproj.py @ ['--saveali'] @ False @ None @ In addition to the unaligned sets/ for each class, generate aligned particle stacks per class @ 
e2spt_classify_byproj.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_classify_byproj.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_classify_byproj.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_ctf_old.py @ ['--tiltseries'] @  @ str @ Aligned tilt series. File format must be MRC and must have .mrc or .st or .ali extension. @ 
e2spt_ctf_old.py @ ['--exclude'] @  @ str @ Comma-separated list of image indexes in the --tiltseries to exclude from CTF fitting. For example, --exclude 0,3,4,6,7. @ 
e2spt_ctf_old.py @ ['--skipstripping'] @  @ str @ Default=None. Comma-separated list of image indexes to exclude from strip-based fitting (in this case, only global defocus tiling the entire image wil be measured). @ 
e2spt_ctf_old.py @ ['--imagestem'] @  @ str @ Default=None. If the images to apply ctf correction on are already unstacked and are individual mrc files, supply a common string to all of them. @ 
e2spt_ctf_old.py @ ['--invert'] @ False @ None @ Invert the contrast of the output data, compared to the input data. @ 
e2spt_ctf_old.py @ ['--excludeedges'] @ False @ None @ Ignore 'excedent' (smaller than the width of a strip) at the edge of micrographs after dividing them into strips. @ 
e2spt_ctf_old.py @ ['--mintiles'] @ 0 @ int @ Minimum number of 'good tiles' in strip to consider it. @ 
e2spt_ctf_old.py @ ['--defocusvariationlimit'] @ 0.1 @ float @ default=0.1. total variation in defocus (in micrometers) tolerated within a strip and still consider it a region of 'constant defocus'. @ 
e2spt_ctf_old.py @ ['--infodir'] @  @ str @ Folder typically produced by e2evalimage.py or previous runs of this program containing info.json files, one per tilt image in a tilt series. Each .json file should contain the fitted ctf and all associated parameters for each tilt image. @ 
e2spt_ctf_old.py @ ['--output'] @  @ str @ Filename for the output CTF-corrected tilt series. @ 
e2spt_ctf_old.py @ ['--subtiltsdir'] @  @ str @ Provide a directory containing individual stacks, where each stack is a 'mini tilt series' or a 'subtilt series' for single particles. Then, each image for each particle in the dir will be phase-phlipped using the ctf parameters you provide. If each image in the subtilt series is at a different defocus, then the parameters should be provided through --ctfparamsfile, whith a different defocus value per row. (There should be as many rows as images in each subtiltseries). @ 
e2spt_ctf_old.py @ ['--path'] @ sptctf @ str @ Directory to store results in. The default is a numbered series of directories containing the prefix 'sptctf'; for example, sptctf_02 will be the directory by default if 'sptctf_01' already exists. @ 
e2spt_ctf_old.py @ ['--reconstructor'] @ fourier:mode=gauss_2 @ str @ Default=fourier:mode=gauss_2. The reconstructor to use to reconstruct the tilt series into a tomogram. Type 'e2help.py reconstructors' at the command line to see all options and parameters available. To specify the interpolation scheme for the fourier reconstruction, specify 'mode'. Options are 'nearest_neighbor', 'gauss_2', 'gauss_3', 'gauss_5', 'gauss_5_slow', 'gypergeom_5', 'experimental'. For example --reconstructor=fourier:mode=gauss_5  @ 
e2spt_ctf_old.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2spt_ctf_old.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2spt_ctf_old.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_ctf_old.py @ ['--pad2d'] @ 0.0 @ float @ Padding factor to zero-pad   the 2d images in the tilt series prior to reconstruction.   (The final reconstructed subvolumes will be cropped to the original size). @ 
e2spt_ctf_old.py @ ['--pad3d'] @ 0.0 @ float @ Padding factor to zero-pad   the reconstruction volume. (The final reconstructed subvolumes will be cropped to    the original size). @ 
e2spt_ctf_old.py @ ['--save3d'] @ False @ None @ If on, the CTF   corrected subtiltseries will be reconstrcuted into subvolumes and save into a stack.   Options --reconstructor, --pad2d, --pad3d are used if --save3d is on. @ 
e2spt_ctf_old.py @ ['--save2d'] @ False @ None @ If on, the CTF   corrected subtiltseries will be saved as 2-D imag stacks [one per particle]. @ 
e2spt_ctf_old.py @ ['--outputstem'] @  @ str @ Stem common to all   output image stacks. For example, if --outputstem=myvirus and --save2d is provided,    the phase-flipped images for each subtiltseries wille be saved to myvirus_subtiltptclXXXX.hdf.   If --save3d is provided, the stack of reconstructed subvolumes will be saved to myvirus_stack3d.hdf @ 
e2spt_ctf_old.py @ ['--savestriptiles'] @ False @ None @ Saves   all tiles for all strips, for all images, in one stack per strip. @ 
e2spt_ctf_old.py @ ['--saveffts'] @ False @ None @ Saves   ffts of each average of tiles per strip, for all images. @ 
e2spt_ctf_old.py @ ['--icethickness'] @ 0 @ int @ This corresponds   to the Z dimension in pixels of the reconstructed raw tomogram (uncropped), at the same binning   (sampling) as the provided tiltseries, images or subtiltseries.   This value MUST be provided, only if --subtiltsdir is given.    @ 
e2spt_ctf_old.py @ ['--autofit'] @ False @ None @ Runs automated   CTF fitting on the input images, based on tiling. @ 
e2spt_ctf_old.py @ ['--firstfitglobal'] @ False @ None @ Default=False.   Supplying this option will tile the entire image first (for each tilt angle) and find the average   defocus. Then it will use that value to provide an educated 'guess' during stripe-by-stripe    fitting for each image. @ 
e2spt_ctf_old.py @ ['--tilesize'] @ 512 @ int @ Tile size to use for strips   when --autofit is provided. @ 
e2spt_ctf_old.py @ ['--defocusmin'] @ 0.0 @ float @  If --autofit, minimum autofit defocus. Default=0.0, not used. A value will be estimated based on tilt angle and distance from the tilt axis. @ 
e2spt_ctf_old.py @ ['--defocusmax'] @ 0.0 @ float @ Default=0.0, not used. If --autofit, maximum autofit defocus. A value will be estimated based on tilt angle and distance from the tilt axis. @ 
e2spt_ctf_old.py @ ['--stripstep'] @ 0 @ int @ This will determine the   amount of strips and the overlap between them for defocus estimation. The default    is half the tilesize. For example, for a 4000x4000 pixels image, a tile size of   400 would yield 20, not 10 strips, by default. If --stripstep=1 were provided, the   image would be devided into 4000-400=3600 strips. The first strip would go from pixel   0 to pixel 400, the second strip from pixel 1 to pixel 401, the third from pixel 2   to 402, etc... up to the las strip going from pixel 3600 to 4000. @ 
e2spt_ctf_old.py @ ['--subset'] @ 0 @ int @ Requires --subtiltsdir. Specify how many subtiltseries (or particles) to ctf correct. If you specify 10, the first 10 subtiltseires in --subtiltsdir will be corrected. 0 means "process all" because it makes no sense to process none @ 
e2spt_ctf_old.py @ ['--icethicknessauto'] @ False @ None @    If --subtiltsdir is provided (and if --icethickness is *not* provided), the thickness of the    specimen in Z will be calculated by computing the difference between the largest    and the smallest Z coordinate found in the header of the subtiltseries, plus the size of the specimen, calculated from --radius. @ 
e2spt_ctf_old.py @ ['--radius'] @ 0 @ int @ Radius of the particle in pixels. @ 
e2spt_ctf_old.py @ ['--framexsize'] @ 0 @ int @ This correspond to the X   size in pixes of the images/frames in the raw tilt series; that is, the size of the entire frame   along the X axis (perpendicular to the direction of the tilt axis in the aligned tilt series).   It is used to calculate the distance of each particle (subtiltseries) to the tilt axis, since   this will induce different shifts in defocus in 3-D for the actual particles. Particles   right at the tilt axis don't move "up" or "down" as they are tilted.   This MUST be provided if --subtiltsdir is provided.   Othwerwise, it will be read from the header of the images provided. @ 
e2spt_ctf_old.py @ ['--phaseflipwhole'] @ False @ None @ This    will perform phase flipping on the entire image for each image in an aligned tilt    series using the CTF parameters supplied. @ 
e2spt_ctf_old.py @ ['--phaseflipstrips'] @ False @ None @ This will   perform phase flipping on images of an aligned tilt series on a strip-by-strip basis,   assuming the supplied ctf parameters correspond to the proper values at the tilt axis,   either the same values for all images (--defocus,--ampcont,--cs,--apix,--voltage,--bfactor)   or a different set for each (--ctfparamsfile), taking into account the tilt angle for    each image (--tltfile), which should be supplied through an IMOD-like .tlt file. @ 
e2spt_ctf_old.py @ ['--prunetest'] @ 0.1 @ float @ Default=0.1.   Decimal number that indicates the percentage of --tilesize (in terms of side length)    to tolerate of 'bad' values (i.e., empty regions of constant density) at the corners,    and still include the tile for CTF fitting. For example, if --tilesize=256, and   --prunetest=0.1, a box of ~25-26 pixels each corner of every tile will be analyzed   and if the standard deviation of any of the corners is 0, the tile will be excluded.   To turn off this option supply --prunetest=-1.0. The program automatically adjusts    things so that the minimum size of regions at the corners to check will be 4x4 pixels. @ 
e2spt_ctf_old.py @ ['--tltfile'] @  @ str @ File containing a list of    tilt angles corresponding to the tilt angles of images 0 to n of an aligned   tilt series @ 
e2spt_ctf_old.py @ ['--coords'] @  @ str @ text file containing x y z (or just z) coordinates for the particles, used to calculate icethickness if --icethicknessauto is specified for ctf fitting. NOT needed if --subtiltsdir is provided for ctf correction. @ 
e2spt_ctf_old.py @ ['--ctfparamsfile'] @  @ str @ This should be a text file   with ctf parameters in the following format;   defocus=value voltage=value cs=value apix=value bfactor=value ampcont=value   A single space should separate each parameter from the next.   Do not write any unit symbols for the values; just the numerical value.   Defocus should be in microns, voltage in kV, apix in angstroms per pixel, and ampcont (amplitude contrast)   should be a decimal; for example, 0.1 for 10 percent amplitude contrast.   IF you want to use DIFFERENT PARAMETERS PER IMAGE, then the file must contain   multiple rows with the different values.   The first row will be used to phase flip the first image,   the second row to phase flip the second, etc. @ 
e2spt_ctf_old.py @ ['--defocilist'] @  @ str @ Text file containing   a single column of defocus values in microns. The file should have as many   defocus values as images in the tiltseries or subtiltseries supplied. @ 
e2spt_ctf_old.py @ ['--defocus'] @ 0.0 @ float @ Default=0.    Target defocus at the tilt axis. In the absence of ctfparamsfile(s)   this value will be assumed to be the defocus at the tilt axis for all tilt images. @ 
e2spt_ctf_old.py @ ['--voltage'] @ 200 @ int @ Default=200. Voltage of   the microscope with which the images where collected. Supply it to replace the value   in ctfparamsfile(s), or if ctfparamsfile(s) are lacking altogether. @ 
e2spt_ctf_old.py @ ['--cs'] @ 2.1 @ float @ Default=2.1. Cs of the microscope   with which the images were collected. Supply it to replace the value in ctfparamsfile(s),    or if ctfparamsfile(s) are lacking altogether. @ 
e2spt_ctf_old.py @ ['--apix'] @ 0.0 @ float @ Default=whatever is on the header   of the images. Sampling of the images in angstroms/pixel.    Supply --apix here to replace the value in ctfparamsfile(s), or if ctfparamsfile(s)    are lacking altogether. @ 
e2spt_ctf_old.py @ ['--bfactor'] @ 1000 @ int @ Default=1000. Bfactor or   temperature factor to use. Supply it to replace the value   in ctfparamsfile(s), or if ctfparamsfile(s) are lacking altogether. @ 
e2spt_ctf_old.py @ ['--ampcont'] @ 0.05 @ float @ Default=0.05. Amplitude    contrast to use for CTF correction phase flipping. Supply it to replace the value   in ctfparamsfile(s), or if ctfparamsfile(s) are lacking altogether. @ 
e2spt_ctf_old.py @ ['--nozcorrection'] @ False @ None @ If you    turn on this option and --subtiltsdir is provided, the position in Z of each subtomogram   will not be considered for CTF correction @ 
e2spt_ctf_old.py @ ['--defocustop'] @ False @ None @ Assumes the signal for defocus measurement (e.g., carbon film) is at the top layer of the tomogram. @ 
e2spt_ctf_old.py @ ['--defocusbottom'] @ False @ None @ Assumes the signal for defocus measurement (e.g., carbon film) is at the top layer of the tomogram. @ 
e2spt_eval.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_evalrefine.py @ ['--jsonortcmp'] @ False @ None @ Compare the particle orientations from two .json files. Provide the path to 2 json files as arguments to the command. @ 
e2spt_evalrefine.py @ ['--timing'] @ False @ None @ Report on the time required for each step of each refinement run @ 
e2spt_evalrefine.py @ ['--timingbypath'] @ False @ None @ Report on the CPU time required in each refine_xx folder @ 
e2spt_evalrefine.py @ ['--resolution_all'] @ False @ None @ generates resolution plot with the last iteration of all refine_xx directories @ 
e2spt_evalrefine.py @ ['--resolution_vsref'] @ None @ str @ Computes the FSC between the last iteration of each refine_xx directory and a specified reference map. Map must be aligned, but will be rescaled if necessary. @ 
e2spt_evalrefine.py @ ['--sym'] @ c1 @ str @ Symmetry to be used in searching adjacent unit cells @ 
e2spt_evalrefine.py @ ['--threads'] @ 4 @ int @ Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful @ 
e2spt_evalrefine.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_evalrefine.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_evalrefine.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_evalsubtlt.py @ ['--path'] @ None @ str @ path @ 
e2spt_evalsubtlt.py @ ['--loadali2d'] @ None @ str @ previous 2d alignment @ 
e2spt_evalsubtlt.py @ ['--loadali3d'] @ None @ str @ previous 3d alignment @ 
e2spt_extract.py @ ['--boxsz_unbin'] @ -1 @ int @ box size in unbinned tomogram @ 
e2spt_extract.py @ ['--label'] @ None @ str @ Only extract particle with this name. Leave blank to extract all particles. @ 
e2spt_extract.py @ ['--newlabel'] @  @ str @ Label of output particles. Same as original particle label by default. @ 
e2spt_extract.py @ ['--threads'] @ 12 @ int @ threads @ 
e2spt_extract.py @ ['--maxtilt'] @ 100 @ int @ max tilt @ 
e2spt_extract.py @ ['--padtwod'] @ 2.0 @ float @ padding factor @ 
e2spt_extract.py @ ['--noctf'] @ False @ None @ skip ctf correction. @ 
e2spt_extract.py @ ['--wiener'] @ False @ None @ wiener filter the particles using ctf information.. @ 
e2spt_extract.py @ ['--alltomograms'] @ False @ None @ use all tomograms. @ 
e2spt_extract.py @ ['--dotest'] @ False @ None @ only make 1 batch of subtomograms for testing @ 
e2spt_extract.py @ ['--shrink'] @ 1 @ float @ Shrinking factor for output particles. 1.5 or integers allowed. Default is 1 (no shrink). @ 
e2spt_extract.py @ ['--tltkeep'] @ 1.0 @ float @ keep a fraction of tilt images with good score determined from tomogram reconstruction @ 
e2spt_extract.py @ ['--rmbeadthr'] @ -1 @ float @ remove 2d particles with high contrast object beyond N sigma at 100A. Note that this may result in generating fewer particles than selected. Default is -1 (include all particles). 0.5 might be a good choice for removing gold beads but may need some testing... @ 
e2spt_extract.py @ ['--curves'] @ -1 @ int @ specify curve id to extract particles from saved curves.  @ 
e2spt_extract.py @ ['--curves_overlap'] @ 0.5 @ float @ fraction of overlap when generating particle along curves. default is 0.5 @ 
e2spt_extract.py @ ['--jsonali'] @  @ str @ re-extract particles using a particle_param_xx json file from a spt alignment @ 
e2spt_extract.py @ ['--mindist'] @ 10 @ float @ minimum distance between particles in A. for reextraction only @ 
e2spt_extract.py @ ['--keep'] @ 0.9 @ float @ fraction of particles to keep fron previous alignment. for reextraction only. @ 
e2spt_extract.py @ ['--postproc'] @  @ str @ processor after 3d particle reconstruction @ 
e2spt_extract.py @ ['--postmask'] @  @ str @ masking after 3d particle reconstruction. The mask is transformed if json  @ 
e2spt_extract.py @ ['--compressbits'] @ -1 @ int @ Bits to keep for compression. default is -1 meaning uncompressed floating point. 8 bit seems fine... @ 
e2spt_extract.py @ ['--norewrite'] @ False @ None @ skip existing files. do not rewrite. @ 
e2spt_extract.py @ ['--append'] @ False @ None @ append to existing files. @ 
e2spt_extract.py @ ['--parallel'] @  @ str @ parallel @ 
e2spt_extract.py @ ['--postxf'] @ None @ str @ a file listing post transforms (see http://eman2.org/e2tomo_more), or for simple symmetry, <sym>,<cx>,<cy>,<cz> where the coordinates specify the center of a single subunit @ 
e2spt_extract.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_extract.py @ ['--skip3d'] @ False @ None @ do not make 3d particles. only generate 2d particles and 3d header.  @ 
e2spt_extract.py @ ['--verbose'] @ 1 @ int @ verbose @ 
e2spt_extractfromseg.py @ ['--thresh'] @ 1.0 @ float @ Threshold of density value for particle extraction. @ 
e2spt_extractfromseg.py @ ['--featurename'] @  @ str @ name of the current feature to extract @ 
e2spt_extractfromseg.py @ ['--boxsz'] @ 32 @ int @ Box size @ 
e2spt_extractfromseg.py @ ['--random'] @ -1 @ int @ Specifying N will randomly seed N particles on density above threshold. default is -1, means only choosing peaks. Useful for non-globular particles @ 
e2spt_extractfromseg.py @ ['--massthresh'] @ 20.0 @ float @ Threshold of total mass of each continous object to be considered a particle.  @ 
e2spt_extractfromseg.py @ ['--edge'] @ 4 @ int @ mininmum distance to the edge of tomogram @ 
e2spt_extractfromseg.py @ ['--sort'] @ False @ None @ Sort particles by segmentation density. @ 
e2spt_extractfromseg.py @ ['--ppid'] @ -1 @ int @ ppid @ 
e2spt_fftamp.py @ ['--input'] @ None @ str @ default=None. Filename of 3-D image or stack of 3-D images whose FFT amplitudes you want to see. @ 
e2spt_fftamp.py @ ['--ppid'] @ -1 @ int @ Default=-1. Set the PID of the parent process, used for cross platform PPID @ 
e2spt_fftamp.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_fftamp.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_hac.py @ ['--path'] @ spt_hac @ str @ Default=spt. Directory to store results in. The default is a numbered series of directories containing the prefix 'spt'; for example, spt_02 will be the directory by default if 'spt_01' already exists. @ 
e2spt_hac.py @ ['--input'] @  @ str @ Default=None. The name of the input volume stack. MUST be HDF since volume stack support is required. @ 
e2spt_hac.py @ ['--npeakstorefine'] @ 4 @ int @ Default=1. The number of best coarse alignments to refine in search of the best final alignment. Default=1. @ 
e2spt_hac.py @ ['--parallel'] @ None @ None @ default=thread:2. Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2spt_hac.py @ ['--ppid'] @ -1 @ int @ Default=-1. Set the PID of the parent process, used for cross platform PPID @ 
e2spt_hac.py @ ['--verbose', '-v'] @ 0 @ int @ Default=0. Verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_hac.py @ ['--verbose', '-v'] @ 0 @ int @ Default=0. Verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_hac.py @ ['--plots'] @ False @ None @ Default=False. Turn this option on to generatea plot of the ccc scores during each iteration. Running on a cluster or via ssh remotely might not support plotting. @ 
e2spt_hac.py @ ['--subset'] @ 0 @ int @ Default=0 (not used). Refine only this substet of particles from the stack provided through --input @ 
e2spt_hac.py @ ['--preavgproc1'] @  @ str @ Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) @ 
e2spt_hac.py @ ['--preavgproc2'] @  @ str @ Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) @ 
e2spt_hac.py @ ['--weighbytiltaxis'] @  @ str @ Default=None. A,B, where A is an integer number and B a decimal. A represents the location of the tilt axis in the tomogram in pixels (eg.g, for a 4096x4096xZ tomogram, this value should be 2048), and B is the weight of the particles furthest from the tomogram. For example, --weighbytiltaxis=2048,0.5 means that praticles at the tilt axis (with an x coordinate of 2048) will have a weight of 1.0 during averaging, while the distance in the x coordinates of particles not-on the tilt axis will be used to weigh their contribution to the average, with particles at the edge(0+radius or 4096-radius) weighing 0.5, as specified by the value provided for B. @ 
e2spt_hac.py @ ['--weighbyscore'] @ False @ None @ Default=False. This option will weigh the contribution of each subtomogram to the average by score/bestscore. @ 
e2spt_hac.py @ ['--align'] @ rotate_translate_3d_tree @ str @ This is the aligner used to align particles to the previous class average. Default is rotate_translate_3d:search=8:delta=12:dphi=12, specify 'None' (with capital N) to disable. @ 
e2spt_hac.py @ ['--aligncmp'] @ ccc.tomo.thresh @ str @ Default=ccc.tomo.thresh. The comparator used for the --align aligner. Do not specify unless you need to use anotherspecific aligner. @ 
e2spt_hac.py @ ['--averager'] @ mean.tomo @ str @ Default=mean.tomo. The type of averager used to produce the class average. Default=mean.tomo. @ 
e2spt_hac.py @ ['--shrink'] @ 1 @ int @ Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for coarse alignment. @ 
e2spt_hac.py @ ['--shrinkfine'] @ 1 @ int @ Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for refine alignment. @ 
e2spt_hac.py @ ['--threshold'] @  @ str @ Default=None. A threshold applied to the subvolumes after normalization. For example, --threshold=threshold.belowtozero:minval=0 makes all negative pixels equal 0, so that they do not contribute to the correlation score. @ 
e2spt_hac.py @ ['--mask'] @  @ str @ Default=None. Masking processor applied to particles before alignment. IF using --clip, make sure to express outer mask radii as negative pixels from the edge. @ 
e2spt_hac.py @ ['--maskfile'] @  @ str @ Default=None. Mask file (3D IMAGE) applied to particles before alignment. Must be in HDF format. Default is None. @ 
e2spt_hac.py @ ['--normproc'] @ None @ str @ Default=None. See 'e2help.py processors -v 10' at the command line for other available normalization processors. Normalization processor applied to particles before alignment. If normalize.mask is used, results of the mask option will be passed in automatically. If you want to turn this option off specify 'None' @ 
e2spt_hac.py @ ['--clip'] @ 0 @ int @ Default=0 (which means it's not used). Boxsize to clip particles as part of preprocessing to speed up alignment. For example, the boxsize of the particles might be 100 pixels, but the particles are only 50 pixels in diameter. Aliasing effects are not always as deleterious for all specimens, and sometimes 2x padding isn't necessary; still, there are some benefits from 'oversampling' the data during averaging; so you might still want an average of size 2x, but perhaps particles in a box of 1.5x are sufficiently good for alignment. In this case, you would supply --clip=75 @ 
e2spt_hac.py @ ['--preprocess'] @  @ str @ Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_hac.py @ ['--preprocessfine'] @  @ str @ Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. @ 
e2spt_hac.py @ ['--lowpass'] @  @ str @ Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_hac.py @ ['--lowpassfine'] @  @ str @ Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. @ 
e2spt_hac.py @ ['--highpass'] @  @ str @ Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_hac.py @ ['--highpassfine'] @  @ str @ Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. @ 
e2spt_hac.py @ ['--matchimgs'] @ False @ None @ Default=False. Applies filter.matchto to one image so that it matches the other's spectral profile during preprocessing for pair-wise alignment purposes. @ 
e2spt_hac.py @ ['--filterbyfsc'] @ False @ None @ Default=False. If on, this parameter will use dynamic FSC filtering. --lowpass will be used to build initial references if no --ref supplied, then, the FSC between the even and odd initial references will be used to filter the data during preprocessing. If --ref is supplied, --lowpass will be used during the first iteration to align the particles against the reference. Thereafter, the FSC between the most current particle average and the original reference (--ref) will be used in the next iteration. @ 
e2spt_hac.py @ ['--radius'] @ 0 @ float @ Default=0 (which means it's not used by default). Hydrodynamic radius of the particle in Angstroms. This will be used to automatically calculate the angular steps to use in search of the best alignment. Make sure the apix is correct on the particles' headers, sine the radius will be converted from Angstroms to pixels. Then, the fine angular step is equal to 360/(2*pi*radius), and the coarse angular step 4 times that. @ 
e2spt_hac.py @ ['--precision'] @ 1.0 @ float @ Default=1.0. Precision in pixels to use when figuring out alignment parameters automatically using --radius. Precision would be the number of pixels that the the edge of the specimen is moved (rotationally) during the finest sampling, --falign. If precision is 1, then the precision of alignment will be that of the sampling (apix of your images) times the --shrinkfine factor specified. @ 
e2spt_hac.py @ ['--search'] @ 8 @ int @ "Default=8. During COARSE alignment translational search in X, Y and Z, in pixels. Default=8. This WILL overwrite any search: provided through --align, EXCEPT if you provide --search=8, which is the default. In general, just avoid providing search twice (through here and through the aligner, --align). If you do, just be careful to make them consistent to minimize misinterpretation and error. @ 
e2spt_hac.py @ ['--searchfine'] @ 2 @ int @ "Default=2. During FINE alignment translational search in X, Y and Z, in pixels. Default=2. This WILL overwrite any search: provided through --falign, EXCEPT if you provide --searchfine=2, which is the default. In general, just avoid providing search twice (through here and through the fine aligner --falign). If you do, just be careful to make them consistent to minimize misinterpretation and error. @ 
e2spt_hac.py @ ['--iterstop'] @ 0 @ int @ Default=0. (Not used). The program is called to convergence by default (all particles merge into one final average). To stop at an intermediate iteration, provide this parameter. For example, --iterstop=1, will only allow the algorithm to complete 1 iteration; --iterstop=2 will allow it to go through 2, etc. @ 
e2spt_hac.py @ ['--savesteps'] @ False @ None @ Default=False. If set, will save the average after each iteration to class_#.hdf. Each class in a separate file. Appends to existing files. @ 
e2spt_hac.py @ ['--saveali'] @ False @ None @ Default=False. If set, will save the aligned particle volumes in class_ptcl.hdf. Overwrites existing file. @ 
e2spt_hac.py @ ['--saveallalign'] @ False @ None @ Default=False. If set, will save the alignment parameters after each iteration @ 
e2spt_hac.py @ ['--sym'] @ None @ None @ Default=None (equivalent to c1). Symmetry to impose -choices are: c<n>, d<n>, h<n>, tet, oct, icos @ 
e2spt_hac.py @ ['--postprocess'] @ None @ str @ default=None. A processor to be applied to the FINAL volume after averaging the raw volumes in their FINAL orientations, after all iterations are done. @ 
e2spt_hac.py @ ['--procfinelikecoarse'] @ False @ None @ If you supply this parameters, particles for fine alignment will be preprocessed identically to particles for coarse alignment by default. If you supply this, but want specific parameters for preprocessing particles for also supply: fine alignment, nd supply fine alignment parameters, such as --lowpassfine, --highpassfine, etc; to preprocess the particles for FINE alignment differently than for COARSE alignment. @ 
e2spt_hac.py @ ['--falign'] @ None @ str @ Default=None. This is the second stage aligner used to fine-tune the first alignment. @ 
e2spt_hac.py @ ['--faligncmp'] @ ccc.tomo.thresh @ str @ Default=ccc.tomo.thresh. The comparator used by the second stage aligner. @ 
e2spt_hac.py @ ['--breaksym'] @ False @ None @ Default=False. Break symmetry. Do not apply symmetrization after averaging, even if searching the asymmetric unit provided through --sym only for alignment. Default=False @ 
e2spt_hac.py @ ['--randomizewedge'] @ False @ None @ Default=False. This parameter is EXPERIMENTAL. It randomizes the position of the particles BEFORE alignment, to minimize missing wedge bias and artifacts during symmetric alignment where only a fraction of space is scanned @ 
e2spt_hac.py @ ['--autocenter'] @  @ str @ Default=None. Autocenters each averaged pair during initial average generation with --btref and --hacref. Will also autocenter the average of all particles after each iteration of iterative refinement. Options are --autocenter=xform.centerofmass (self descriptive), or --autocenter=xform.centeracf, which applies auto-convolution on the average. @ 
e2spt_hac.py @ ['--autocentermask'] @  @ str @ Default=None. Masking processor to apply before autocentering. See 'e2help.py processors -v 10' at the command line. @ 
e2spt_hac.py @ ['--autocenterpreprocess'] @ False @ None @ Default=False. This will apply a highpass filter at a frequency of half the box size times the apix, shrink by 2, and apply a low pass filter at half nyquist frequency to any computed average for autocentering purposes if --autocenter is provided. Default=False. @ 
e2spt_hac.py @ ['--tweak'] @ False @ None @ WARNING: BUGGY. This will perform a final alignment with no downsampling [without using --shrink or --shrinkfine] if --shrinkfine > 1. @ 
e2spt_hac.py @ ['--groups'] @ 1 @ int @ Default=0 (not used; data not split). This parameter will split the data into a user defined number of groups. For purposes of gold-standard FSC computation later, select --group=2. @ 
e2spt_hac.py @ ['--clusters'] @ 1 @ int @ Number of clusters to group the data in after the 1st iteration, based on correlation. @ 
e2spt_hac.py @ ['--exclusive_class_min'] @ 0.0 @ int @ Default=0.0 (not used). The minimum multiplicity (number of particles that went into an average) to look for mutually exclusive classes/averages. Two classes are mutually exclusive when non of the members in one are present in the other. In HAC (hierarchical ascendant classification or "all vs all" alignments, classes MERGE, so a class from a later round will be composed of classes from earlier rounds. Some classes remain un-merged for many rounds. If set, this parameter will extract classes with a minimum number of particles (from whatever round/iteration they were generated in) whose members are not present in any other of the extracted classes. The mutually exclusive classes will be put into a separate sub-directory starting with the character 'me_classes'. @ 
e2spt_hac.py @ ['--minscore'] @ 0.0 @ float @ Default=0.0 (which means this option is off by default and not used). Percent of the maximum score to use as a threshold for the minimum score to allow. For example, if the best pair in the first iteration yielded a score of -15.0, and you supply --minscore=0.9, any pair-wise alignments with a score worse than -15*0.9 = -13.5 will be forbidden. Remember that 'more negative' is 'better' in EMAN2. @ 
e2spt_hac.py @ ['--maxmergenum'] @ 0 @ int @ Default=0 (which means this option is off by default and not used). This is the maximum number of particles ('multiplicity') that any two given averages can have to be allowed to merge. For example, if at some point (some given iteration in the algorithm) a particular average "A" is an average of 10 particles, and --maxmergenum=8, this average "A" will only be allowed to merge with other averages that have 8 particles or less in them. This maintains "big classes" in a mutually exclusive state. For example, if --maxmergenum=1, particles will merge pair-wise in the first round; but after that averages with more than one particle will NOT merge each other, because they will contain 2 or more particles, which exceeds 'maxmergenum'. So in subsequent iterations, the averages formed in the first iteration will continue to take up raw particles or new averages (between single raw particles) might emerge; but "large averages" never inter-merge @ 
e2spt_intrafsc.py @ ['--averager'] @ mean.tomo @ str @ Default=mean.tomo. The type of averager used to produce the class average. @ 
e2spt_intrafsc.py @ ['--averagehalves'] @ False @ None @ Default=False. This will average the even and odd volumes. @ 
e2spt_intrafsc.py @ ['--input'] @  @ str @ Default=None. Subtiltseries file to process. If processing a single file, --inputstem will work too, but you can also just provide the entire filename here --input=subt00.hdf @ 
e2spt_intrafsc.py @ ['--inputstem'] @  @ str @ Default=None. Aligned tilt series. String common to all files to be processed, in the current folder. For example, if you have many subtiltseries named subt00.hdf, subt01.hdf, ...subt99.hdf, you would supply --stem=subt to have all these processed. @ 
e2spt_intrafsc.py @ ['--nolog'] @ False @ None @ Default=False. Turn off recording of the command ran for this program onto the .eman2log.txt file @ 
e2spt_intrafsc.py @ ['--nonewpath'] @ False @ None @ Default=False. If True, a new --path directory will not be made. Therefore, whatever is sepcified in --path will be used as the output directory. Note that this poses the risk of overwriting data. @ 
e2spt_intrafsc.py @ ['--normproc'] @ None @ str @ default=None. Normalization processor to apply to the reconstructed halves; e.g., --normproc=normalize.edgemean. @ 
e2spt_intrafsc.py @ ['--pad2d'] @ 0.0 @ float @ Default=0.0. Padding factor (e.g., 2.0, to make the box twice as big) to zero-pad the 2d images in the tilt series for reconstruction purposes (the final reconstructed subvolumes will be cropped back to the original size though). @ 
e2spt_intrafsc.py @ ['--pad3d'] @ 0.0 @ float @ Default=0.0. Padding factor (e.g., 2.0, to make the box twice as big) to zero-pad the volumes for reconstruction purposes (the final reconstructed subvolumes will be cropped back to the original size though). @ 
e2spt_intrafsc.py @ ['--path'] @ spt_intrafsc @ str @ Default=sptintrafsc. Directory to save the results. @ 
e2spt_intrafsc.py @ ['--ppid'] @ -1 @ int @ default=-1. Set the PID of the parent process, used for cross platform PPID. @ 
e2spt_intrafsc.py @ ['--savehalftiltseries'] @ False @ None @ Default=False. If this parameter is on, the odd and even subtiltseries will be saved. @ 
e2spt_intrafsc.py @ ['--savehalfvolumes'] @ False @ None @ Default=False. If this parameter is on, the odd and even volumes will be saved. @ 
e2spt_intrafsc.py @ ['--reconstructor'] @ fourier:mode=gauss_2 @ str @ Default=fourier:mode=gauss_2. The reconstructor to use to reconstruct the tilt series into a tomogram. Type 'e2help.py reconstructors' at the command line to see all options and parameters available. To specify the interpolation scheme for the fourier reconstructor, specify 'mode'. Options are 'nearest_neighbor', 'gauss_2', 'gauss_3', 'gauss_5'. For example --reconstructor=fourier:mode=gauss_5  @ 
e2spt_intrafsc.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_intrafsc.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_isr.py @ ['--input'] @  @ str @ Comma separated files in .ali, .st .hdf format of the aligned subtiltseries. @ 
e2spt_isr.py @ ['--inputstem'] @  @ str @ Alternative to supplying --input. This is a string common to multiple files to be processed in the CURRENT directory. The common string doesn't need to be at a particular location in the filenames. For example, a series of files "tiltA.hdf, tiltB.hdf, tiltC.hdf" could have either 'hdf', '.hdf', 't,','ti', 'til', 'tilt', etc., as a common string. The key is to choose a string shared ONLY by the files of interest. The files should be multiple subtiltseries in .hdf format; each file should correspond to an individual subtiltseries for a different particle: That is, each file should be a subtiltseries corresponding to an individual subtomogram, as extracted by e2spt_subtilt.py, or as simulated by e2spt_simulation.py @ 
e2spt_isr.py @ ['--inputdir'] @  @ str @ Alternative to --input and --inputstem. Path to a directory containing individual subtiltseries stacks. @ 
e2spt_isr.py @ ['--path'] @  @ str @ Directory to store results in. The default is a numbered series of directories containing the prefix 'sptisr'; for example, sptisr02 will be the directory by default if 'sptisr_01' already exists. @ 
e2spt_isr.py @ ['--ppid'] @ -1 @ int @ Default=1. Set the PID of the parent process, used for cross platform PPID @ 
e2spt_isr.py @ ['--verbose', '-v'] @ 0 @ int @ Default 0. Verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_isr.py @ ['--verbose', '-v'] @ 0 @ int @ Default 0. Verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_isr.py @ ['--reconstructor'] @ fourier:mode=gauss_2 @ str @ Default=fourier:mode=gauss_2. The reconstructor to use to reconstruct the tilt series into a tomogram. Type 'e2help.py reconstructors' at the command line to see all options and parameters available. To specify the interpolation scheme for the fourier reconstructor, specify 'mode'. Options are 'nearest_neighbor', 'gauss_2', 'gauss_3', 'gauss_5'. For example --reconstructor=fourier:mode=gauss_5  @ 
e2spt_isr.py @ ['--iter'] @ 1 @ int @ Number of iterations to run algorithm for. @ 
e2spt_isr.py @ ['--tltfile'] @  @ str @ IMOD-like .tlt file with tilt angles for the aligned tiltseries (or set of subtiltseries). @ 
e2spt_isr.py @ ['--tiltaxis'] @ y @ str @ Axis to produce projections about. Default is 'y'; the only other valid option is 'x'. @ 
e2spt_isr.py @ ['--pad2d'] @ 0.0 @ float @ Default=0.0. Padding factor (e.g., 2.0, to make the box twice as big) to zero-pad the 2d images in the tilt series for reconstruction purposes (the final reconstructed subvolumes will be cropped back to the original size though). @ 
e2spt_isr.py @ ['--pad3d'] @ 0.0 @ float @ Default=0.0. Padding factor (e.g., 2.0, to make the box twice as big) to zero-pad the volumes for reconstruction purposes (the final reconstructed subvolumes will be cropped back to the original size though). @ 
e2spt_isr.py @ ['--savevols'] @ False @ None @ This option will save the reconstructed volumes at each iteration. @ 
e2spt_isr.py @ ['--outxsize'] @ 0 @ int @ Clip the output volume in x to this size. The default size is the nx size of the input images. @ 
e2spt_isr.py @ ['--outysize'] @ 0 @ int @ Clip the output volume in y to this size. The default size is the ny size of the input images. @ 
e2spt_isr.py @ ['--outzsize'] @ 0 @ int @ Clip the output volume in z to this size. The default size is the nx size of the input images. @ 
e2spt_isr.py @ ['--mask'] @ None @ str @ Default=None. Masking processor (see e2help.py --verbose=10) applied to the images to aid alignment. Default=None. @ 
e2spt_isr.py @ ['--preprocess'] @ None @ str @ Default=None. Any processor (see e2help.py --verbose=10) applied to the images to aid alignment. @ 
e2spt_isr.py @ ['--lowpass'] @  @ str @ Default=None. A lowpass filtering processor (see e2help.py --verbose=10) applied to each volume prior to reprojection generation.. @ 
e2spt_isr.py @ ['--highpass'] @  @ str @ Default=None. A highpass filtering processor (see e2help.py --verbose=10) applied to each volume prior to reprojection generation. @ 
e2spt_isr.py @ ['--threshold'] @  @ str @ Default=None. A threshold  processor (see e2help.py --verbose=10) applied to each volume prior to reprojection generation. @ 
e2spt_isr.py @ ['--saveali'] @ False @ None @ Default=False. If set, will save the recentered subtiltseries after each iteration. @ 
e2spt_make3d.py @ ['--ptclin'] @ None @ str @ 2D particle input @ 
e2spt_make3d.py @ ['--ptclout'] @ None @ str @ 3D particle output. @ 
e2spt_make3d.py @ ['--clip'] @ -1 @ int @ Final output size. @ 
e2spt_make3d.py @ ['--mask'] @ None @ str @ Mask on the final output. @ 
e2spt_make3d.py @ ['--threads'] @ 5 @ int @ Number of threads to use. @ 
e2spt_mapptclstotomo.py @ ['--path'] @  @ str @ spt_xx path @ 
e2spt_mapptclstotomo.py @ ['--iter'] @ 1 @ int @ iteration number @ 
e2spt_mapptclstotomo.py @ ['--tomo'] @  @ str @ tomogram file name @ 
e2spt_mapptclstotomo.py @ ['--avg'] @  @ str @ 3D volume to insert. spt_xx/threed_xx if unspecified @ 
e2spt_mapptclstotomo.py @ ['--postxf'] @  @ str @ extra shift after alignment @ 
e2spt_mapptclstotomo.py @ ['--keep'] @ 1.0 @ float @ propotion to keep. will exclude bad particles if this is smaller than 1.0 @ 
e2spt_mapptclstotomo.py @ ['--gui'] @ False @ None @ open the resulting map and tomogram in a GUI display @ 
e2spt_mapptclstotomo.py @ ['--new'] @ False @ None @ new pipeline format @ 
e2spt_mapptclstotomo.py @ ['--ppid'] @ -1 @ int @ ppid... @ 
e2spt_pcasplit.py @ ['--path'] @ None @ str @ Path to a folder where results should be stored, following standard naming conventions (default = spt_XX) @ 
e2spt_pcasplit.py @ ['--iter'] @ -2 @ int @ Iteration number within path. Default is the second to last iteration (-2). @ 
e2spt_pcasplit.py @ ['--nclass'] @ 2 @ int @ Number of classes. Default is 2. @ 
e2spt_pcasplit.py @ ['--maxres'] @ 30.0 @ float @ Filter particles to this resolution (in Angstroms) before classification @ 
e2spt_pcasplit.py @ ['--sym'] @ c1 @ str @ Apply this symmetry. @ 
e2spt_pcasplit.py @ ['--mask'] @  @ str @ Apply this mask. Default is 'mask_tight.hdf' from <--path>_<--iter>. Specify 'none' for no masking @ 
e2spt_pcasplit.py @ ['--nbasis'] @ 3 @ int @ Number of PCA basis vectors. Default is 3. @ 
e2spt_pcasplit.py @ ['--nowedgefill'] @ False @ None @ Do not fill the missing wedge before classification. @ 
e2spt_pcasplit.py @ ['--clean'] @ False @ None @ remove outliers before PCA. @ 
e2spt_pcasplit.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2spt_pcasplit.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2spt_pcasplit.py @ ['--shrink'] @ 1 @ int @ Shrink particles before classification @ 
e2spt_pcasplit.py @ ['--dotest'] @ -1 @ int @ test using N random particles @ 
e2spt_pcasplit.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_preproc.py @ ['--apix'] @ 0.0 @ float @ Default=0.0 (not used). Use this apix value where relevant instead of whatever is in the header of the reference and the particles. Will overwrite particle header as well. @ 
e2spt_preproc.py @ ['--clip'] @ 0 @ int @ Default=0 (which means it's not used). Boxsize to clip particles. For example, the boxsize of the particles might be 100 pixels, but the particles are only 50 pixels in diameter. Aliasing effects are not always as deleterious for all specimens, and sometimes 2x padding isn't necessary. @ 
e2spt_preproc.py @ ['--highpass'] @  @ str @ Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_preproc.py @ ['--input'] @  @ str @ Default=None. The name of the input volume stack. MUST be HDF since volume stack support is required. @ 
e2spt_preproc.py @ ['--lowpass'] @  @ str @ Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_preproc.py @ ['--mask'] @  @ str @ Default=None. Masking processor applied to particles before alignment. IF using --clip, make sure to express outer mask radii as negative pixels from the edge. @ 
e2spt_preproc.py @ ['--maskfile'] @  @ str @ Default=None. Mask file (3D IMAGE) applied to particles before alignment. Must be in HDF format. Default is None. @ 
e2spt_preproc.py @ ['--nopath'] @ False @ None @ If supplied, this option will save results in the directory where the command is run. A directory to store the results will not be made. @ 
e2spt_preproc.py @ ['--normproc'] @  @ str @ Default=None (see 'e2help.py processors -v 10' at the command line). Normalization processor applied to particles before alignment. If normalize.mask is used, results of the mask option will be passed in automatically. If you want to turn this option off specify 'None' @ 
e2spt_preproc.py @ ['--output'] @  @ str @ Default=None. Specific name of HDF file to write processed particles to. @ 
e2spt_preproc.py @ ['--path'] @ spt_preproc @ str @ Default=spt. Directory to store results in. The default is a numbered series of directories containing the prefix 'sptpreproc'; for example, sptpreproc_02 will be the directory by default if 'sptpreproc_01' already exists. @ 
e2spt_preproc.py @ ['--parallel'] @  @ str @ default=None. Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2spt_preproc.py @ ['--ppid'] @ -1 @ int @ Default=-1. Set the PID of the parent process, used for cross platform PPID @ 
e2spt_preproc.py @ ['--preprocess'] @  @ str @ Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_preproc.py @ ['--shrink'] @ 0 @ int @ Default=0 (no shrinking). Optionally shrink the input volumes by an integer amount for coarse alignment. @ 
e2spt_preproc.py @ ['--subset'] @ 0 @ int @ Default=0 (not used). Refine only this substet of particles from the stack provided through --input @ 
e2spt_preproc.py @ ['--threshold'] @  @ str @ Default=None. A threshold applied to the subvolumes after normalization. For example, --threshold=threshold.belowtozero:minval=0 makes all negative pixels equal 0, so that they do not contribute to the correlation score. @ 
e2spt_preproc.py @ ['--verbose', '-v'] @ 0 @ int @ Default=0. Verbose level [0-9], higher number means higher level of verboseness; 10-11 will trigger many messages that might make little sense since this level of verboseness corresponds to 'debugging mode' @ 
e2spt_preproc.py @ ['--verbose', '-v'] @ 0 @ int @ Default=0. Verbose level [0-9], higher number means higher level of verboseness; 10-11 will trigger many messages that might make little sense since this level of verboseness corresponds to 'debugging mode' @ 
e2spt_project.py @ ['--threads'] @ 4 @ int @ Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by e2spt_align at present. @ 
e2spt_project.py @ ['--iter'] @ 0 @ int @ Iteration number within path. Default = start a new iteration @ 
e2spt_project.py @ ['--simthr'] @ -0.1 @ float @ Similarity is smaller for better 'quality' particles. Specify the highest value to include from e2spt_hist.py. Default -0.1 @ 
e2spt_project.py @ ['--replace'] @ None @ str @ Replace the input subtomograms used for alignment with the specified file (used when the aligned particles were masked or filtered) @ 
e2spt_project.py @ ['--minalt'] @ 0 @ float @ Minimum alignment altitude to include. Default=0 @ 
e2spt_project.py @ ['--maxalt'] @ 180 @ float @ Maximum alignment altitude to include. Deafult=180 @ 
e2spt_project.py @ ['--symalimasked'] @ None @ str @ This will translationally realign each asymmetric unit to the specified (usually masked) reference  @ 
e2spt_project.py @ ['--sym'] @ None @ str @ Symmetry of the input. Must be aligned in standard orientation to work properly. @ 
e2spt_project.py @ ['--path'] @ None @ str @ Path to a folder containing current results (default = highest spt_XX) @ 
e2spt_project.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_project.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_project.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_recompute.py @ ['--stacks'] @  @ str @ Comma separated list of HDF image stacks to process. @ 
e2spt_recompute.py @ ['--tomograms'] @  @ str @ Comma separated list of tomograms with REC extension from which all particles in --stacks came from. @ 
e2spt_recompute.py @ ['--sym'] @  @ str @ Symmetry to impose - choices are: c<n>, d<n>, h<n>, tet, oct, icos @ 
e2spt_recompute.py @ ['--path'] @  @ str @ Name of directory where to save the output file. @ 
e2spt_recompute.py @ ['--boxsize'] @ 0 @ int @ Default=0 (option not used). Provide a value for the boxsize of the output average in pixels. If not provided, the boxsize of --stacks will be used. @ 
e2spt_recompute.py @ ['--normproc'] @ normalize.edgemean @ str @ Normalization processor applied to particles before extraction. Default=normalize.edgemean. If using the latter, you must provide --masknorm, otherwise, a default --masknorm=mask.sharp:outer_radius=-2 will be used. @ 
e2spt_recompute.py @ ['--threshold'] @  @ str @ Threshold processor to apply to particles before writing them out to get rid of too high and/or too low pixel values. @ 
e2spt_recompute.py @ ['--usetomograms'] @ False @ None @ "Re-extract particles from the original tomogram. @ 
e2spt_recompute.py @ ['--useinverseali'] @ False @ None @ "Use the inverse of the value stored in xform.align3d in the header of each particle. @ 
e2spt_recompute.py @ ['--shrink'] @ 1 @ int @ Shrink factor to shrink particles before averaging. Default=1, which means no shrinking. @ 
e2spt_recompute.py @ ['--lowpass'] @  @ str @ Lowpass filtering processor to apply to particles before averaging. Default=None. @ 
e2spt_recompute.py @ ['--preprocess'] @ None @ str @ A processor (as in e2proc3d.py) to be applied to the tomogram before opening it.  For example, a specific filter with specific parameters you might like.  Type 'e2proc3d.py --processors' at the commandline to see a list of the available processors and their usage @ 
e2spt_recompute.py @ ['--invert'] @ False @ None @ Default=False. This parameer indicates you want the contrast to me inverted while boxing, AND for the extracted sub-volumes. Remember that EMAN2 **MUST** work with "white" protein. You can very easily figure out what the original color of the protein is in your data by looking at the gold fiducials or the edge of the carbon hole in your tomogram. If they look black you MUST specify this option @ 
e2spt_recompute.py @ ['--averager'] @ mean.tomo @ str @ The type of averager used to produce the class average. Default=mean.tomo @ 
e2spt_recompute.py @ ['--keep'] @ 1.0 @ float @ The fraction of particles to keep in each class. Default=1.0 @ 
e2spt_recompute.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_recompute.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2spt_recompute.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2spt_refine.py @ ['--reference', '--ref'] @  @ None @ 3D reference for iterative alignment/averaging. No reference is used by default. <name> or <name>,# @ 
e2spt_refine.py @ ['--reference', '--ref'] @  @ None @ 3D reference for iterative alignment/averaging. No reference is used by default. <name> or <name>,# @ 
e2spt_refine.py @ ['--mask'] @  @ str @ Mask file to be applied to initial model @ 
e2spt_refine.py @ ['--maskalign'] @ None @ str @ Mask file applied to 3D alignment reference in each iteration. Not applied to the average, which will follow normal masking routine. @ 
e2spt_refine.py @ ['--niter'] @ 5 @ int @ Number of iterations @ 
e2spt_refine.py @ ['--sym'] @ c1 @ str @ symmetry @ 
e2spt_refine.py @ ['--maxres'] @ 0 @ float @ Maximum resolution (the smaller number) to consider in alignment (in A, not 1/A) @ 
e2spt_refine.py @ ['--minres'] @ 200 @ float @ Minimum resolution (the larger number) to consider in alignment (in A, not 1/A, default=200) @ 
e2spt_refine.py @ ['--mass'] @ -1 @ float @ mass. default -1 will skip by mass normalization @ 
e2spt_refine.py @ ['--localfilter'] @ False @ None @ Deprecated. Please use --tophat @ 
e2spt_refine.py @ ['--tophat'] @ None @ str @ 'local', 'localwiener' or 'global'. Instead of imposing a uniform Wiener filter, use a tophat filter (global similar to Relion). local is a local tophat filter, localwiener is a localized Wiener filter @ 
e2spt_refine.py @ ['--goldstandard'] @ -1 @ int @ Phase randomization resolution for gold standard refinement in A. Not equivalent to restarget in e2refine_easy. @ 
e2spt_refine.py @ ['--goldcontinue'] @ False @ None @ continue from an existing gold standard refinement @ 
e2spt_refine.py @ ['--restarget'] @ 0 @ float @ The resolution you reasonably expect to achieve in the current refinement run in A. @ 
e2spt_refine.py @ ['--setsf'] @ None @ str @ structure factor @ 
e2spt_refine.py @ ['--pkeep'] @ 0.8 @ float @ fraction of particles to keep @ 
e2spt_refine.py @ ['--maxtilt'] @ 90.0 @ float @ Explicitly zeroes data beyond specified tilt angle. Assumes tilt axis exactly on Y and zero tilt in X-Y plane. Default 90 (no limit). @ 
e2spt_refine.py @ ['--path'] @ None @ str @ Specify name of refinement folder. Default is spt_XX. @ 
e2spt_refine.py @ ['--smooth'] @ 40 @ float @ smoothing factor for subtlt. @ 
e2spt_refine.py @ ['--maxang'] @ -1 @ float @ maximum anglular difference in refine mode. @ 
e2spt_refine.py @ ['--maxshift'] @ -1 @ float @ maximum shift in pixel. @ 
e2spt_refine.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_refine.py @ ['--threads'] @ 12 @ int @ threads @ 
e2spt_refine.py @ ['--parallel'] @  @ str @ Thread/mpi parallelism to use @ 
e2spt_refine.py @ ['--transonly'] @ False @ None @ translational alignment only @ 
e2spt_refine.py @ ['--refine'] @ False @ None @ local refinement from xform in header. @ 
e2spt_refine.py @ ['--refinentry'] @ 8 @ int @ Number of local perturbations to initialize local alignment with (default=8) @ 
e2spt_refine.py @ ['--realign'] @ False @ None @ realigns the average to the initial reference to prevent drift in C1 refinements @ 
e2spt_refine.py @ ['--randphi'] @ False @ None @ randomize phi for refine search @ 
e2spt_refine.py @ ['--rand180'] @ False @ None @ include 180 degree rotation for refine search @ 
e2spt_refine.py @ ['--test180'] @ False @ None @ Test for improved alignment with 180 degree rotations even during refine alignment @ 
e2spt_refine.py @ ['--resume'] @ False @ None @ resume from previous run @ 
e2spt_refine.py @ ['--scipy'] @ False @ None @ test scipy refinement @ 
e2spt_refine.py @ ['--breaksym'] @ False @ None @ break symmetry @ 
e2spt_refine.py @ ['--breaksymsym'] @ None @ str @ Specify a different symmetry for breaksym. @ 
e2spt_refine.py @ ['--symalimask'] @ None @ str @ This will translationally realign each asymmetric unit to the previous map masked by the specified mask. While this invokes symalimasked in e2spt_average, this isn't the same, it is a mask, not a masked reference.  @ 
e2spt_refine.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_refine.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_refine_new.py @ ['--ptcls'] @ None @ str @ 3d particle input @ 
e2spt_refine_new.py @ ['--ref'] @ None @ str @ reference map @ 
e2spt_refine_new.py @ ['--goldstandard'] @ 50 @ float @ starting resolution for gold standard refinement. default 50 @ 
e2spt_refine_new.py @ ['--restarget'] @ 0 @ float @ The resolution you reasonably expect to achieve in the current refinement run (in A). @ 
e2spt_refine_new.py @ ['--maxres'] @ 0 @ float @ Maximum resolution to consider in alignment (in A, not 1/A) @ 
e2spt_refine_new.py @ ['--minres'] @ 0 @ float @ Minimum resolution to consider in alignment (in A, not 1/A) @ 
e2spt_refine_new.py @ ['--path'] @ None @ str @ path @ 
e2spt_refine_new.py @ ['--sym'] @ c1 @ str @ symmetry @ 
e2spt_refine_new.py @ ['--iters'] @ p,p,p,t,r,p,r,d @ str @ iterations. Types of refinement separated by comma. p - 3d particle translation-rotation. t - subtilt translation. r - subtilt translation-rotation. d - subtilt defocus. Default is p,p,p,t,r,p,r,d @ 
e2spt_refine_new.py @ ['--keep'] @ 0.95 @ float @ fraction to keep @ 
e2spt_refine_new.py @ ['--parallel', '-P'] @ thread:4 @ str @ Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2spt_refine_new.py @ ['--parallel', '-P'] @ thread:4 @ str @ Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2spt_refine_new.py @ ['--threads'] @ 10 @ int @ threads for post-processing @ 
e2spt_refine_new.py @ ['--setsf'] @ None @ str @ structure factor for sharpening @ 
e2spt_refine_new.py @ ['--tophat'] @ None @ str @ tophat filter options @ 
e2spt_refine_new.py @ ['--startres'] @ -1 @ float @ starting maximum resolution. required when goldstandard is not specified @ 
e2spt_refine_new.py @ ['--ssnrwt'] @ False @ None @ weight particles by SSNR accroding to references @ 
e2spt_refine_new.py @ ['--goldcontinue'] @ False @ None @ ues the _even/_odd version of the given reference @ 
e2spt_refine_new.py @ ['--curve'] @ False @ None @ curve refinement. still testing @ 
e2spt_refine_new.py @ ['--use3d'] @ False @ None @ use projection of 3d particles instead of 2d sub tilt series @ 
e2spt_refine_new.py @ ['--localrefine'] @ False @ None @ only perform local search around the solution from the last iteration @ 
e2spt_refine_new.py @ ['--loadali2d'] @ None @ str @ load previous 2d alignment @ 
e2spt_refine_new.py @ ['--loadali3d'] @ None @ str @ load previous 3d alignment @ 
e2spt_refine_new.py @ ['--mask'] @ None @ str @ Mask applied to the results (instead of automasking) @ 
e2spt_refine_new.py @ ['--breaksym'] @ None @ str @ symmetry to break @ 
e2spt_refine_new.py @ ['--maskalign'] @ None @ str @ Mask file applied to 3D alignment reference in each iteration. Not applied to the average, which will follow normal masking routine. @ 
e2spt_refine_new.py @ ['--maxshift'] @ -1 @ int @ maximum shift. default box size/6 @ 
e2spt_refine_new.py @ ['--maxang'] @ 30 @ int @ maximum angle difference from starting point for localrefine.  @ 
e2spt_refine_new.py @ ['--smooth'] @ 100 @ float @ smooth local motion by this factor. smoother local motion with larger numbers. default 100 @ 
e2spt_refine_new.py @ ['--smoothN'] @ 15 @ int @ number of neighboring particles used for smoothing. default 15 @ 
e2spt_refinemsa.py @ ['--ncls'] @ 3 @ int @ Default=3. Number of classes to sort the particle stack into. In theory, a minimum of 2 conformational classes and 1 'garbage' class should be used. @ 
e2spt_refinemsa.py @ ['--nbasis'] @ 3 @ int @ Basis vectors to use @ 
e2spt_refinemsa.py @ ['--input'] @ None @ str @ The name of the volumes stack that HAVE BEEN ALIGNED to a common reference @ 
e2spt_refinemsa.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_refinemsa.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_refinemsa.py @ ['--filter'] @ 0 @ int @ Resolution (integer, in Angstroms) at which you want to apply a gaussian lowpass filter to the tomogram prior to loading it for boxing @ 
e2spt_refinemsa.py @ ['--preprocess'] @ None @ str @ A processor (as in e2proc3d.py) to be applied to the tomogram before opening it.  For example, a specific filter with specific parameters you might like.  Type 'e2proc3d.py --processors' at the commandline to see a list of the available processors and their usage @ 
e2spt_refinemulti.py @ ['--ref'] @ None @ None @ 3D reference for iterative alignment/averaging. <name> or <name>,#. For multiple references use this option multiple times. The first reference will be used for alignment. @ 
e2spt_refinemulti.py @ ['--mask'] @ None @ str @ Mask file to be applied to initial model @ 
e2spt_refinemulti.py @ ['--maskalign'] @ None @ str @ Mask file applied to 3D alignment reference in each iteration. Not applied to the average, which will follow normal masking routine. @ 
e2spt_refinemulti.py @ ['--maskclass'] @ None @ str @ Mask file applied to 3D classification references in each iteration. Not applied to the average. @ 
e2spt_refinemulti.py @ ['--niter'] @ 5 @ int @ Number of iterations @ 
e2spt_refinemulti.py @ ['--sym'] @ c1 @ str @ symmetry @ 
e2spt_refinemulti.py @ ['--setsf'] @ None @ str @ structure factor @ 
e2spt_refinemulti.py @ ['--maxtilt'] @ 90.0 @ float @ Explicitly zeroes data beyond specified tilt angle. Assumes tilt axis exactly on Y and zero tilt in X-Y plane. Default 90 (no limit). @ 
e2spt_refinemulti.py @ ['--restarget'] @ -1.0 @ float @ Filters each map at the end of each iteration to this resolution (in A) since FSC isn't available @ 
e2spt_refinemulti.py @ ['--path'] @ None @ str @ Specify name of refinement folder. Default is spt_XX. @ 
e2spt_refinemulti.py @ ['--maxang'] @ 30 @ float @ maximum anglular difference in refine mode. @ 
e2spt_refinemulti.py @ ['--maxshift'] @ -1 @ float @ maximum shift in pixel. @ 
e2spt_refinemulti.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_refinemulti.py @ ['--threads'] @ 12 @ int @ threads @ 
e2spt_refinemulti.py @ ['--parallel'] @  @ str @ Thread/mpi parallelism to use @ 
e2spt_refinemulti.py @ ['--transonly'] @ False @ None @ translational alignment only @ 
e2spt_refinemulti.py @ ['--refine'] @ False @ None @ local refinement from xform in header. @ 
e2spt_refinemulti.py @ ['--randphi'] @ False @ None @ randomize phi for refine search @ 
e2spt_refinemulti.py @ ['--rand180'] @ False @ None @ include 180 degree rotation for refine search @ 
e2spt_refinemulti.py @ ['--scipy'] @ False @ None @ test scipy refinement @ 
e2spt_refinemulti_new.py @ ['--ptcls'] @ None @ str @ path @ 
e2spt_refinemulti_new.py @ ['--path'] @ None @ str @ path @ 
e2spt_refinemulti_new.py @ ['--nref'] @ -1 @ int @ duplicate the first ref N times with phase randomization at 2xres @ 
e2spt_refinemulti_new.py @ ['--maskalign'] @ None @ str @ Mask file applied to 3D alignment reference in each iteration. Not applied to the average, which will follow normal masking routine. @ 
e2spt_refinemulti_new.py @ ['--maxres'] @ 0 @ float @ Maximum resolution (the smaller number) to consider in alignment (in A, not 1/A) @ 
e2spt_refinemulti_new.py @ ['--minres'] @ 0 @ float @ Minimum resolution (the larger number) to consider in alignment (in A, not 1/A) @ 
e2spt_refinemulti_new.py @ ['--niter'] @ 5 @ int @ number of iterations @ 
e2spt_refinemulti_new.py @ ['--loadali3d'] @ False @ None @ load previous 3d alignment from --ptcls input. @ 
e2spt_refinemulti_new.py @ ['--res'] @ 20.0 @ float @ target resolution @ 
e2spt_refinemulti_new.py @ ['--skipali'] @ False @ None @ . @ 
e2spt_refinemulti_new.py @ ['--threads'] @ 12 @ int @  @ 
e2spt_refinemulti_new.py @ ['--parallel'] @ thread:12 @ str @ parallel @ 
e2spt_refinemulti_new.py @ ['--sym'] @ c1 @ str @ symmetry to apply to the average structure @ 
e2spt_refinemulti_new.py @ ['--breaksym'] @ None @ str @ break specified symmetry @ 
e2spt_refinemulti_new.py @ ['--setsf'] @ None @ str @ set structure factor @ 
e2spt_refinemulti_noali.py @ ['--path'] @ None @ str @ Output path, default=sptcls_XX @ 
e2spt_refinemulti_noali.py @ ['--ncls'] @ 2 @ int @ Number of classes to generate. Specify this or multiple --ref options. Default 2 @ 
e2spt_refinemulti_noali.py @ ['--ref'] @ None @ None @ 3D reference for iterative alignment/averaging. <name> or <name>,#. For multiple references use this option multiple times. Refs autogenerated if this is not specified. @ 
e2spt_refinemulti_noali.py @ ['--niter'] @ 10 @ int @ number of iterations @ 
e2spt_refinemulti_noali.py @ ['--maxres'] @ 15 @ float @ max resolution in A @ 
e2spt_refinemulti_noali.py @ ['--parm'] @  @ str @ particle_parms_xx.json file from spt_refine, this provides both the input particles and alignment parameters @ 
e2spt_refinemulti_noali.py @ ['--strucfac'] @ None @ str @ Structure factor file @ 
e2spt_refinemulti_noali.py @ ['--parallel'] @ thread:1 @ str @ parallel @ 
e2spt_refinemulti_noali.py @ ['--mask'] @  @ str @ mask file @ 
e2spt_refinemulti_noali.py @ ['--sym'] @ c1 @ str @  @ 
e2spt_refinemulti_noali.py @ ['--applysym'] @ c1 @ str @  @ 
e2spt_refinemulti_noali.py @ ['--symcopy'] @ False @ None @ Copy each particle for each asymetrical unit. need a maskclass to focus on one unit. do not work with applysym @ 
e2spt_refinemulti_noali.py @ ['--randsym'] @ False @ None @ randomize symmetry unit assignment at the begining. seems to be helpful for high symmetry without obvious asymetrical features.. @ 
e2spt_refinemulti_old.py @ ['--input'] @ None @ str @ The name of the input volume stack. MUST be HDF since volume stack support is required. @ 
e2spt_refinemulti_old.py @ ['--ref'] @  @ str @ Comma separated list of individual images; e.g. --refs=ref1.hdf,ref2.hdf,ref3.hdf. If a single image is provided, several copies will be made based on the number of references specified through --nref. @ 
e2spt_refinemulti_old.py @ ['--nref'] @ 3 @ int @ Default=3. (For single reference refinement use e2spt_classaverage.py). Number of references to generate from a single image provided through --ref (random-phase filtered differently), or number of different initial references to generate from scratch from the data set (--input). Default=2 @ 
e2spt_refinemulti_old.py @ ['--refgenmethod'] @ bt @ str @ Method for generating the initial reference(s). Options are 'bt', for binary tree (see e2spt_binarytree.py), 'hac', for hierarchical ascendant classification (see e2spt_hac.py), or 'ssa' for self-symmetry alignment (see e2symsearch3d.py). Default=bt @ 
e2spt_refinemulti_old.py @ ['--subset4ref'] @ None @ int @  Size of the subset of particles to use for generating each reference. Default=0, which means all particles in each subgroup will be used (for example, if --input has 100 particles and --nref is 10, 10 references will be generated using 10 particles for each). If --ref not provided, the program generates an --nref number of references from --input. @ 
e2spt_refinemulti_old.py @ ['--subset'] @ 0 @ int @  WARNING: NOT IMPLEMENTED HERE YET. Default=0 (not used). Refine only this substet of particles from the stack provided through --input @ 
e2spt_refinemulti_old.py @ ['--apix'] @ 0.0 @ float @ Default=0.0 (not used). Use this apix value where relevant instead of whatever is in the header of the reference and the particles. @ 
e2spt_refinemulti_old.py @ ['--path'] @  @ str @ Directory to store results in. The default is a numbered series of directories containing the prefix 'spt_refinemulti'; for example, spt_refinemulti02 will be the directory by default if 'spt_refinemulti01' already exists. @ 
e2spt_refinemulti_old.py @ ['--syms'] @  @ str @ List comma-separated symmetries to apply separately on the different references. For example, if you provide --syms=d8,d7 and provide 2 references via --nref=2 or supply two references via --refs=r1.hdf,r2.hdf, d8 symmetry will be applied to the first reference and d7 to the second after each iteration of refinement (the final average in one iteration becomes a reference for the next). @ 
e2spt_refinemulti_old.py @ ['--output'] @ None @ str @ The name of the output class-average stack. MUST be in  .hdf format, since volume stack support is required. @ 
e2spt_refinemulti_old.py @ ['--classmx'] @  @ str @ Default=None. WARNING: Not implemented yet. The name of the classification matrix specifying how particles in 'input' should be grouped to generate initial averages and seed refinement. @ 
e2spt_refinemulti_old.py @ ['--refpreprocess'] @ False @ None @ Default=False. This will preprocess the reference identically to the particles. It is off by default, but it is internally turned on when no reference is supplied. It should probably be off when using a crystal structure (with all positive densities) turned to EM density as an initial model, but it should be on when using an EM map. @ 
e2spt_refinemulti_old.py @ ['--refrandphase'] @ 0 @ float @ Default=0. Resolution to phase-randomize the reference to. @ 
e2spt_refinemulti_old.py @ ['--hacref'] @ 0 @ int @ WARNING: MIGHT BE BUGGY OR NOT WORKING. Mulst supply references through --ref. Default=0 (not used by default). Size of the SUBSET of particles to use to build an initial reference by calling e2spt_hac.py which does Hierarchical Ascendant Classification (HAC) or 'all vs all' alignments. @ 
e2spt_refinemulti_old.py @ ['--ssaref'] @ 0 @ int @ WARNING: MIGHT BE BUGGY OR NOT WORKING. Mulst supply references through --ref. Default=0 (not used by default). Size of the SUBSET of particles to use to build an initial reference by calling e2symsearch3d.py, which does self-symmetry alignments. You must provide --sym different than c1 for this to make any sense. @ 
e2spt_refinemulti_old.py @ ['--btref'] @ 0 @ int @ WARNING: MIGHT BE BUGGY OR NOT WORKING. Mulst supply references through --ref. Default=0 (internally turned on and set to 64). Size of the SUBSET of particles to use to build an initial reference by calling e2spt_binarytree.py. By default, the largest power of two smaller than the number of particles in --input will be used. For example, if you supply a stack with 150 subtomograms, the program will automatically select 128 as the limit to use because it's the largest power of 2 that is smaller than 150. But if you provide, say --btref=100, then the number of particles used will be 64, because it's the largest power of 2 that is still smaller than 100. @ 
e2spt_refinemulti_old.py @ ['--radius'] @ 0 @ float @ Default=0 (not used). Will make --align and --falign None. Hydrodynamic radius of the particle in Angstroms. This will be used to automatically calculate the angular steps to use in search of the best alignment. Make sure the apix is correct on the particles' headers, sine the radius will be converted from Angstroms to pixels. Then, the fine angular step is equal to 360/(2*pi*radius), and the coarse angular step 4 times that @ 
e2spt_refinemulti_old.py @ ['--iter'] @ 1 @ int @ The number of iterations to perform. Default is 1. @ 
e2spt_refinemulti_old.py @ ['--savesteps'] @ False @ None @ Default=False. If set, will save the average after each iteration to class_#.hdf. Each class in a separate file. Appends to existing files. @ 
e2spt_refinemulti_old.py @ ['--saveali'] @ False @ None @ Default=False. If set, will save the aligned particle volumes in class_ptcl.hdf. Overwrites existing file. @ 
e2spt_refinemulti_old.py @ ['--saveallalign'] @ False @ None @ Default=False. If set, will save the alignment parameters after each iteration @ 
e2spt_refinemulti_old.py @ ['--sym'] @ None @ None @ Symmetry to impose -choices are: c<n>, d<n>, h<n>, tet, oct, icos @ 
e2spt_refinemulti_old.py @ ['--mask'] @  @ str @ Mask processor applied to particles before alignment. Default=None. @ 
e2spt_refinemulti_old.py @ ['--maskfile'] @  @ str @ Default=None. Mask file (3D IMAGE) applied to particles before alignment. Must be in HDF format. Default is None. @ 
e2spt_refinemulti_old.py @ ['--normproc'] @  @ str @ Default=None. Normalization processor applied to particles before alignment. Default is to use normalize. If normalize.mask is used, results of the mask option will be passed in automatically. If you want to turn this option off specify 'None' @ 
e2spt_refinemulti_old.py @ ['--threshold'] @  @ str @ Default=None. A threshold applied to the subvolumes after normalization. For example, --threshold=threshold.belowtozero:minval=0 makes all negative pixels equal 0, so that they do not contribute to the correlation score. @ 
e2spt_refinemulti_old.py @ ['--preprocess'] @  @ str @ Default=''. Any processor (as in e2proc3d.py) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_refinemulti_old.py @ ['--preprocessfine'] @  @ str @ Default=''. Any processor (as in e2proc3d.py) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. @ 
e2spt_refinemulti_old.py @ ['--lowpass'] @  @ str @ Default=None. A lowpass filtering processor (as in e2proc3d.py) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_refinemulti_old.py @ ['--lowpassfine'] @  @ str @ Default=None.A lowpass filtering processor (as in e2proc3d.py) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. @ 
e2spt_refinemulti_old.py @ ['--highpass'] @  @ str @ Default=None.A highpass filtering processor (as in e2proc3d.py) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2spt_refinemulti_old.py @ ['--highpassfine'] @  @ str @ Default=None.A highpass filtering processor (as in e2proc3d.py) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. @ 
e2spt_refinemulti_old.py @ ['--postprocess'] @  @ str @ Default=None.A processor to be applied to the FINAL volume after averaging the raw volumes in their FINAL orientations, after all iterations are done. @ 
e2spt_refinemulti_old.py @ ['--procfinelikecoarse'] @ True @ bool @ Turn on with --procfinelikecoarse=False, and supply fine alignment parameters, such as --lowpassfine, --highpassfine, etc; to preprocess the particles for FINE alignment differently than for COARSE alignment. @ 
e2spt_refinemulti_old.py @ ['--npeakstorefine'] @ 1 @ int @ Default=1. The number of best coarse alignments to refine in search of the best final alignment. @ 
e2spt_refinemulti_old.py @ ['--align'] @ rotate_translate_3d_tree @ str @ This is the aligner used to align particles to the previous class average. Default is rotate_translate_3d:search=8:delta=12:dphi=12, specify 'None' (with capital N) to disable. @ 
e2spt_refinemulti_old.py @ ['--aligncmp'] @ ccc.tomo.thresh @ str @ The comparator used for the --align aligner. Default is the internal tomographic ccc.tomo.thresh. Do not specify unless you need to use another specific aligner. @ 
e2spt_refinemulti_old.py @ ['--falign'] @  @ str @ Default=None (not used). This is the second stage aligner used to fine-tune the first alignment. Specify 'None' to disable. @ 
e2spt_refinemulti_old.py @ ['--faligncmp'] @ ccc.tomo.thresh @ str @ The comparator used by the second stage aligner. Default is the internal tomographic ccc.tomo.thresh. @ 
e2spt_refinemulti_old.py @ ['--averager'] @ mean.tomo @ str @ The type of averager used to produce the class average. Default=mean @ 
e2spt_refinemulti_old.py @ ['--keep'] @ 1.0 @ float @ Default=1.0. The fraction of particles to keep in each class. @ 
e2spt_refinemulti_old.py @ ['--inixforms'] @  @ str @ Default=None. .json file containing a dict of transform to apply before reference generation @ 
e2spt_refinemulti_old.py @ ['--breaksym'] @ False @ None @ Default=False. Breaks symmetry (skip symmetrization after averaging). @ 
e2spt_refinemulti_old.py @ ['--randomizewedge'] @ False @ None @ Default=False. This parameter is EXPERIMENTAL. It randomizes the position of the particles BEFORE alignment, to minimize missing wedge bias and artifacts during symmetric alignment where only a fraction of space is scanned @ 
e2spt_refinemulti_old.py @ ['--savepreproc'] @ False @ None @ Default=False. Will save stacks of preprocessed particles (one for coarse alignment and one for fine alignment if preprocessing options are different). @ 
e2spt_refinemulti_old.py @ ['--keepsig'] @ False @ None @ Causes the keep argument to be interpreted in standard deviations. @ 
e2spt_refinemulti_old.py @ ['--autocenter'] @  @ str @ WARNING: Experimental. Default=None. Autocenters each averaged pair during initial average generation with --btref and --hacref. Will also autocenter the average of all particles after each iteration of iterative refinement. Options are --autocenter=xform.centerofmass (self descriptive), or --autocenter=xform.centeracf, which applies auto-convolution on the average. @ 
e2spt_refinemulti_old.py @ ['--autocentermask'] @  @ str @ WARNING: Experimental. Requires --autocenter. Default=None. Masking processor to apply before autocentering. See 'e2help.py processors -v 10' at the command line. @ 
e2spt_refinemulti_old.py @ ['--autocenterpreprocess'] @ False @ None @ WARNING: Experimental. Requires --autocenter. Default=False. This will apply a highpass filter at a frequency of half the box size times the apix, shrink by 2, and apply a low pass filter at half nyquist frequency to any computed average for autocentering purposes if --autocenter is provided. Default=False. @ 
e2spt_refinemulti_old.py @ ['--shrink'] @ 0 @ int @ Optionally shrink the input volumes by an integer amount for coarse alignment. @ 
e2spt_refinemulti_old.py @ ['--shrinkfine'] @ 0 @ int @ Optionally shrink the input volumes by an integer amount for fine alignment. @ 
e2spt_refinemulti_old.py @ ['--search'] @ 8 @ int @ "During COARSE alignment translational search in X, Y and Z, in pixels. Default=8. This WILL overwrite any search: provided through --align, EXCEPT if you provide --search=8, which is the default. In general, just avoid providing search twice (through here and through the aligner, --align). If you do, just be careful to make them consistent to minimize misinterpretation and error. @ 
e2spt_refinemulti_old.py @ ['--searchfine'] @ 2 @ int @ "During FINE alignment translational search in X, Y and Z, in pixels. Default=2. This WILL overwrite any search: provided through --falign, EXCEPT if you provide --searchfine=2, which is the default. In general, just avoid providing search twice (through here and through the fine aligner --falign). If you do, just be careful to make them consistent to minimize misinterpretation and error. @ 
e2spt_refinemulti_old.py @ ['--parallel'] @ thread:1 @ None @ Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2spt_refinemulti_old.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_refinemulti_old.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_refinemulti_old.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_refinemulti_old.py @ ['--plots'] @ False @ None @ Turn this option on to generate a plot of the ccc scores both during model generation with e2spt_classaverage.py or e2spt_hac.py and for refinement results of e2spt_refinemulti.py. Running on a cluster or via ssh remotely might not support plotting. @ 
e2spt_refinemulti_old.py @ ['--notmatchimgs'] @ False @ None @ Default=True. This option prevents applying filter.match.to to one image so that it matches the other's spectral profile during preprocessing for alignment purposes. @ 
e2spt_refinemulti_old.py @ ['--preavgproc1'] @  @ str @ Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) @ 
e2spt_refinemulti_old.py @ ['--preavgproc2'] @  @ str @ Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) @ 
e2spt_refinemulti_old.py @ ['--weighbytiltaxis'] @  @ str @ Default=None. A,B, where A is an integer number and B a decimal. A represents the location of the tilt axis in the tomogram in pixels (eg.g, for a 4096x4096xZ tomogram, this value should be 2048), and B is the weight of the particles furthest from the tomogram. For example, --weighbytiltaxis=2048,0.5 means that praticles at the tilt axis (with an x coordinate of 2048) will have a weight of 1.0 during averaging, while the distance in the x coordinates of particles not-on the tilt axis will be used to weigh their contribution to the average, with particles at the edge(0+radius or 4096-radius) weighing 0.5, as specified by the value provided for B. @ 
e2spt_refinemulti_old.py @ ['--weighbyscore'] @ False @ None @ Default=False. This option will weigh the contribution of each subtomogram to the average by score/bestscore. @ 
e2spt_refinemulti_old.py @ ['--clip'] @ 0 @ int @ Default=0 (which means it's not used). Boxsize to clip particles as part of preprocessing to speed up alignment. For example, the boxsize of the particles might be 100 pixels, but the particles are only 50 pixels in diameter. Aliasing effects are not always as deleterious for all specimens, and sometimes 2x padding isn't necessary; still, there are some benefits from 'oversampling' the data during averaging; so you might still want an average of size 2x, but perhaps particles in a box of 1.5x are sufficiently good for alignment. In this case, you would supply --clip=75 @ 
e2spt_refinemulti_old.py @ ['--precision'] @ 1.0 @ float @ Default=1.0. Precision in pixels to use when figuring out alignment parameters automatically using --radius. Precision would be the number of pixels that the the edge of the specimen is moved (rotationally) during the finest sampling, --falign. If precision is 1, then the precision of alignment will be that of the sampling (apix of your images) times the --shrinkfine factor specified. @ 
e2spt_refinemulti_old.py @ ['--tweak'] @ False @ None @ WARNING: BUGGY. This will perform a final alignment with no downsampling [without using --shrink or --shrinkfine] if --shrinkfine > 1. @ 
e2spt_remake3dptcl.py @ ['--path'] @ subtlt_00 @ str @ path to subtilt refinement @ 
e2spt_remake3dptcl.py @ ['--iter'] @ 1 @ int @ iteration number @ 
e2spt_remake3dptcl.py @ ['--label'] @  @ str @ new particle label @ 
e2spt_resolutionplot.py @ ['--input'] @ None @ str @ Volume or stack of volumes to be compared to --ref @ 
e2spt_resolutionplot.py @ ['--path'] @ e2sptfscs @ str @ Results directory. If not specified, defaults to e2sptfscs/ @ 
e2spt_resolutionplot.py @ ['--ref'] @ None @ str @ Volume that will be 'static' (the 'reference' to which volumes in --input will be aligned to). The format MUST be '.hdf' or '.mrc'  @ 
e2spt_resolutionplot.py @ ['--nocolor'] @ False @ None @ Turns the ouput png(s) into grey scale figures. Instead of using different colors to distinguish between various curves on the same plot, this option will have the program automatically use different markers in black and white for each curve. @ 
e2spt_resolutionplot.py @ ['--sym'] @ c1 @ str @ Will symmetrize --ref and --input prior to FSC computation. @ 
e2spt_resolutionplot.py @ ['--mask'] @ None @ str @ Mask processor applied to particles before fsc computation. Default is mask.sharp:outer_radius=-2 @ 
e2spt_resolutionplot.py @ ['--mirror'] @ False @ None @ If set, it will generate a mirrored version of --ref and recompute FSCs against it. This will be IN ADDITION to FSC computation of --input against the original, unmirrored --ref. @ 
e2spt_resolutionplot.py @ ['--averagefscs'] @ False @ None @ Default=False. Averages FSC curves if --input contains multiple images. @ 
e2spt_resolutionplot.py @ ['--parallel'] @ thread:2 @ None @ Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2spt_resolutionplot.py @ ['--apix'] @ 1.0 @ float @ Provide --apix for automatic FSC calculation if you supply --plotonly and no volumes for --input and --ref, or if the apix of these is wrong. @ 
e2spt_resolutionplot.py @ ['--maxres'] @ 1.0 @ float @ How far in resolution to extend the FSC curve on the x axis; for example, to see up to 20anstroms, provide --maxres=1.0. Default=15 @ 
e2spt_resolutionplot.py @ ['--cutoff'] @ 0.5 @ str @ Comma separated values of cutoff thresholds to plot as horizontal lines. Default=0.5, to turn of supply 'None'.  @ 
e2spt_resolutionplot.py @ ['--smooth'] @ False @ None @ Smooth out FSC curves by taking the average of a low value with a subsequent maxima. @ 
e2spt_resolutionplot.py @ ['--smooththresh'] @ 100 @ float @ If --smooth is provided the curve will be smoothed only up to this resolution. Default is 100. @ 
e2spt_resolutionplot.py @ ['--polydegree'] @ None @ int @ Degree of the polynomial to fit. @ 
e2spt_resolutionplot.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID. @ 
e2spt_resolutionplot.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_resolutionplot.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_resolutionplot.py @ ['--plotonly'] @ None @ str @ FSC curves to plot in separate plots. Skips fsc curve generation. Provide .txt. files separated by commas --plotonly=file1.txt,file2.txt,file3.txt etc... @ 
e2spt_resolutionplot.py @ ['--singleplot'] @ False @ None @ It --plotonly provided, all FSC curves will be on the same plot/figure @ 
e2spt_scramblestack.py @ ['--input'] @ None @ str @ The name of the volumes stack that HAVE BEEN ALIGNED to a common reference @ 
e2spt_scramblestack.py @ ['--output'] @ None @ str @ The name of the volumes stack that HAVE BEEN ALIGNED to a common reference @ 
e2spt_scramblestack.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_scramblestack.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_sgd.py @ ['--reference', '--ref'] @  @ str @ 3D reference for initial model generation. No reference is used by default. @ 
e2spt_sgd.py @ ['--reference', '--ref'] @  @ str @ 3D reference for initial model generation. No reference is used by default. @ 
e2spt_sgd.py @ ['--mask'] @ None @ str @ Mask file to be applied to initial model @ 
e2spt_sgd.py @ ['--sym'] @ c1 @ str @ symmetry @ 
e2spt_sgd.py @ ['--filterto'] @ 0.02 @ float @ Fiter map to frequency after each iteration. Default is 0.02 @ 
e2spt_sgd.py @ ['--fourier'] @ False @ None @ gradient descent in fourier space @ 
e2spt_sgd.py @ ['--batchsize'] @ 12 @ int @ SGD batch size @ 
e2spt_sgd.py @ ['--learnrate'] @ 0.1 @ float @ Learning rate. Default is 0.1 @ 
e2spt_sgd.py @ ['--niter'] @ 5 @ int @ Number of iterations @ 
e2spt_sgd.py @ ['--nbatch'] @ 10 @ int @ Number of batches per iteration @ 
e2spt_sgd.py @ ['--applysym'] @ False @ None @ apply symmetry @ 
e2spt_sgd.py @ ['--writemovie'] @ False @ None @ write all temporary files as a stack @ 
e2spt_sgd.py @ ['--shrink'] @ 1 @ int @ Shrink factor for particles @ 
e2spt_sgd.py @ ['--path'] @ None @ str @ path of output @ 
e2spt_sgd.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2spt_sgd.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2spt_sgd.py @ ['--ppid'] @ -2 @ int @ ppid @ 
e2spt_sgd.py @ ['--refine'] @ False @ None @ start from xform.align3d in header @ 
e2spt_simulation.py @ ['--clip'] @ None @ int @ Default=None. The final box size to clip the output subtomograms to. @ 
e2spt_simulation.py @ ['--dualaxis'] @ False @ None @ Default=False. Simulate subtomograms made of two independent and orthogonal tilt series. @ 
e2spt_simulation.py @ ['--gridholesize'] @ 1.0 @ float @ Default=1.0. Size of the carbon hole in micrometers for the simulated grid (this will determine the shifts in defocus for each particle at each tilt angle, depending on the position of the particle respect to the tilt axis; the tilt axis by convention goes parallel to Y through the middle of the tomogram. @ 
e2spt_simulation.py @ ['--icethickness'] @ 0.0 @ float @ Default=0.0. Thickness of the specimen to simulate, in microns (e.g., 0.4 would be 400 nm); --icethickness will be used to calculate the size of the tomogram in Z in PIXELS for the simulated tomogram. This parameter will also be used to assign a random coordinate in Z to each subtomogram. @ 
e2spt_simulation.py @ ['--input'] @  @ str @ The name of the input volume from which simulated subtomograms will be generated. The output will be in HDF format, since volume stack support is required. The input CAN be PDB, MRC or and HDF stack. If the input file is PDB or MRC, a version of the supplied model will be written out in HDF format. If the input file is a stack, simulatd subvolumes will be generated from each model in the stack and written to different output stacks. For example, if the input file contains models A and B, two output stacks with simulated subvolumes will be generated. @ 
e2spt_simulation.py @ ['--invert'] @ False @ None @ "Default=False. This will multiply the pixel values by -1. This is intended to make the simulated particles be like real EM data before contrast reversal (black, negative contrast), assuming that they're being generated from a model/image where the protein has positive values. It not supplied, 'white protein' (positive density values) will be used by default (or whatever the original contrast is of the image supplied as a model). @ 
e2spt_simulation.py @ ['--nosim'] @ False @ None @ Default=False. If on, the program will generate stacks of "perfect particles" in different random orientations, but with no missing wedge, no noise, no ctf parameters, etc. The output randstack.hdf will be identical to simptcls.hdf @ 
e2spt_simulation.py @ ['--notrandomize'] @ False @ None @ Default=False. This will prevent the simulated particles from being rotated and translated into random orientations. @ 
e2spt_simulation.py @ ['--nptcls'] @ 10 @ int @ Default=10. Number of simulated subtomograms to generate per reference model supplied. @ 
e2spt_simulation.py @ ['--nslices'] @ 61 @ int @ Default=61. This will determine the tilt step between slices, depending on tiltrange. For example, to simulate a 2 deg tilt step supply --nslices=61 --tiltrange=60. Recall that --tiltrange goes from - to + the supplied value, and that there is a central slice or projection at 0 deg, for symmetrical tilt series. @ 
e2spt_simulation.py @ ['--path'] @ sptsim @ str @ Defautl=sptsim. Directory to store results in. The default is a numbered series of directories containing the prefix 'sptsim'; for example, sptsim_02 will be the directory by default if 'sptsim_01' already exists. @ 
e2spt_simulation.py @ ['--pad3d'] @ 0.0 @ float @ Default=0.0. Factor to calculate the boxsize to use for 3D reconstruction. For example, if the model in --input has an original boxsize with its largest dimension of 64 and you enter --pad3d=1.5x, then the volume used for 3D reconstruction will be 1.5*64, that is, 96. If you provide --shrink, for example, --shrink=2, then the reconstruction box will be 64/2 * 1.5 = 48. Make sure to supply --clip to clip the simulated subtomograms to the final desired box size; otherwise they will be clipped to the current largest dimension of the supplied model/volume. @ 
e2spt_simulation.py @ ['--pad2d'] @ 0.0 @ float @ Default=0.0. Factor to pad projections in the tilt series by before reconstruction. @ 
e2spt_simulation.py @ ['--parallel'] @ thread:1 @ str @ Default=thread:1. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2spt_simulation.py @ ['--ppid'] @ -1 @ int @ Default=-1. Set the PID of the parent process, used for cross platform PPID @ 
e2spt_simulation.py @ ['--preferredside'] @ None @ float @ Default=None. Standard deviation in degrees to use to generate a set of orientations with a mean altitude equal to 90 degrees. Works in conjuction with --preferredtop, in which case half of the particles will be biased towards 'top' view orientations and half towards 'side' view orientations. @ 
e2spt_simulation.py @ ['--preferredtop'] @ None @ float @ Default=None. Standard deviation in degrees to use to generate a set of orientations with a mean altitude equal to 180 and 0 degrees (half of the particles will be oriented around mean alt=0, half around mean alat=180). Works in conjuction with --preferredside, in which case half of the particles will be biased towards 'top' view orientations and half towards 'side' view orientations. @ 
e2spt_simulation.py @ ['--randstack'] @  @ str @ Default=None. If you already have a stack of particles (presumably in random orientations) you can supply it here. @ 
e2spt_simulation.py @ ['--reconstructor'] @ fourier @ str @ Default=fourier. The reconstructor to use to reconstruct the tilt series into a tomogram. Type 'e2help.py reconstructors' at the command line to see all options and parameters available. To specify the interpolation scheme for the fourier reconstruction, specify 'mode'. Options are 'nearest_neighbor', 'gauss_2', 'gauss_3', 'gauss_5', 'gauss_5_slow', 'gypergeom_5', 'experimental'. For example --reconstructor=fourier:mode=gauss_5  @ 
e2spt_simulation.py @ ['--savenoise'] @ False @ None @ Default=False. If on, it saves the noise stack for each particle. This can be useful for testing alignment under varying SNR, so that the same noise (just at a different ratio/level) is tested. @ 
e2spt_simulation.py @ ['--saveorthostack'] @ False @ None @ Default=False. If on, --nptcls is ignored and you get 3 subtomograms (simulated from the model supplied) which are orthogonal to each other. @ 
e2spt_simulation.py @ ['--saverandstack'] @ True @ None @ Default=True. DEPREPCATED. [This option is on by default and there's no way to turn it off. The stack of randomly oriented particles before simulating the missing wedge WILL be saved]. Save the stack of randomly oriented particles, before subtomogram simulation (before the missing wedge and noise are added). @ 
e2spt_simulation.py @ ['--saveprjs'] @ False @ None @ Default=False. Save the projections (the 'tilt series') for each simulated subtomogram. @ 
e2spt_simulation.py @ ['--savetlt'] @ False @ None @ Default=False. Save a text file with .tlt extension (as in IMOD) containing the tilt angles for the simulated tomogram and/or subtomograms. @ 
e2spt_simulation.py @ ['--savemissingtilts'] @ False @ None @ Default=False. Save tilt images corresponding to the missing wedge region. @ 
e2spt_simulation.py @ ['--snr'] @ None @ float @ Default=None. Number smaller than 1.0 to make the final SNR in each tilt image. This will be calculated as SNR=sgima_signal/sigma_noise. 0.5 might be a good number assuming typical cryoEM-SPA images have SNR of 0.1 or less, and cryoET tilt series are collected with 4-6x the dose as cryoEM-SPA images. @ 
e2spt_simulation.py @ ['--sym'] @ c1 @ str @ Default=c1. If your particle is symmetrical, it is only necessary to randomize orientations within the asymmetric unit. @ 
e2spt_simulation.py @ ['--simref'] @ False @ None @ Default=False. This will make a simulated particle in the same orientation as the original --input, saved to its own separate file. @ 
e2spt_simulation.py @ ['--set2tiltaxis'] @ False @ None @ Default=False. Simulate particles along the tilt axis only. @ 
e2spt_simulation.py @ ['--tiltaxis'] @ y @ str @ Default=y. Axis to produce projections about. The only other valid option is 'x'. @ 
e2spt_simulation.py @ ['--tiltangles'] @ None @ str @ Default=None. File in .tlt or .txt format containing the tilt angle of each tilt image in the tiltseries. @ 
e2spt_simulation.py @ ['--txrange'] @ None @ int @ Default=None. Maximum number of pixels to randomly translate each subtomogram in X. The random translation will be picked between -txrange and +txrange. Default value is set by --trange, but --txrange will overwrite it if specified. @ 
e2spt_simulation.py @ ['--txerror'] @ None @ int @ Default=None. Range of random translation error in pixels to perturb individual 2-D images in each subtiltseries by along x. The random translation perturbation will be picked between -txerror and +txerror. Default value is set by --terror, but --txerror will overwrite it if specified. @ 
e2spt_simulation.py @ ['--tyrange'] @ None @ int @ Default=None. Maximum number of pixels to randomly translate each subtomogram in Y. The random translation will be picked between -tyrange and +tyrange. Default value is set by --trange, but --txrange will overwrite it if specified. @ 
e2spt_simulation.py @ ['--tyerror'] @ None @ int @ Default=None. Range of random translation error in pixels to perturb individual 2-D images in each subtiltseries by along y. The random translation perturbation will be picked between -tyerror and +tyerror. Default value is set by --terror, but --tyerror will overwrite it if specified. @ 
e2spt_simulation.py @ ['--tzrange'] @ None @ int @ Default=None. Maximum number of pixels to randomly translate each subtomogram in Z. The random translation will be picked between -tzrange and +tzrange. Default value is set by --trange, but --txrange will overwrite it if specified. @ 
e2spt_simulation.py @ ['--trange'] @ None @ int @ Default=None. Maximum number of pixels to randomly translate each subtomogram in all X, Y and Z. The random translation will be picked between -transrage and +trange; --txrange, --tyrange and --tzrange overwrite --trange for each specified direction. @ 
e2spt_simulation.py @ ['--terror'] @ None @ int @ Default=None. Range of random translation error in pixels to perturb individual 2-D images in each subtiltseries by along x, y and z. The random translation perturbation will be picked between -terror and +terror. If set, this will overwrite --txerror, --tyerror and --tzerror. @ 
e2spt_simulation.py @ ['--tiltrange'] @ 60 @ float @ Default=60. Maximum angular value at which the highest tilt picture will be simulated. Projections will be simulated from -tiltrange to +titlrange. For example, if simulating a tilt series collected from -60 to 60 degrees, enter a --tiltrange value of 60. Note that this parameter will determine the size of the missing wedge. @ 
e2spt_simulation.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_simulation.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_simulation.py @ ['--applyctf'] @ False @ None @ Default=False (off). If on, it applies ctf to the projections in the simulated tilt series based on defocus, cs, and voltage parameters. @ 
e2spt_simulation.py @ ['--applyfocusdepth'] @ False @ None @ Default=False (off). If on, this will assign different 'z-height' values to different particles @ 
e2spt_simulation.py @ ['--defocus'] @ 3.0 @ float @ Default=3.0. Target defocus at the tilt axis (in microns) for the simulated tilt series. Notice that DEFOCUS (underfocus) values are POSITIVE, by convention. @ 
e2spt_simulation.py @ ['--voltage'] @ 200 @ int @ Default=200 KV. Voltage of the microscope, used to simulate the ctf added to the subtomograms. @ 
e2spt_simulation.py @ ['--cs'] @ 2.1 @ float @ Default is 2.1. Cs of the microscope, used to simulate the ctf added to the subtomograms. @ 
e2spt_simulation.py @ ['--apix'] @ None @ float @ Default=None. Provide accurate apix in case the header of --input has the wrong apix info. @ 
e2spt_simulation.py @ ['--bfactor'] @ 400 @ int @ Default=400. Bfactor to use for CTF correction phase flipping. @ 
e2spt_simulation.py @ ['--ampcont'] @ 0.05 @ float @ Default=0.05. Amplitude contrast to use for CTF correction phase flipping. @ 
e2spt_stat.py @ ['--path'] @ None @ str @ Path to a folder containing current results (default = highest spt_XX) @ 
e2spt_stat.py @ ['--iter'] @ 0 @ int @ Iteration number within path. Default = auto @ 
e2spt_stat.py @ ['--bins'] @ 100 @ int @ Number of bins to use in the histogram @ 
e2spt_stat.py @ ['--mask'] @ None @ str @ Mask file to use for remask score calculation. If not specified, remask must have been previously computed @ 
e2spt_stat.py @ ['--maskref'] @ None @ str @ File containing the reference to compare the masked volumes with (required with --mask) @ 
e2spt_stat.py @ ['--mode'] @ score @ str @ Which variable to histogram, score, coverage, alt, az, phi, dx, dy, dz, score_remask. default=score. @ 
e2spt_stat.py @ ['--extract'] @ False @ None @ If set, will convert the .json file to a .txt file suitable for plotting. No histogramming is involved, this is a per-particle conversion @ 
e2spt_stat.py @ ['--gui'] @ False @ None @ If set will open an interactive plot with the results @ 
e2spt_stat.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_stat.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_stat.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_structfac.py @ ['--even'] @ None @ str @ even threed file @ 
e2spt_structfac.py @ ['--label'] @ None @ str @ particles label @ 
e2spt_structfac.py @ ['--sfout'] @ sf.txt @ str @ output @ 
e2spt_structfac.py @ ['--cutoff'] @ 20 @ float @ cutoff @ 
e2spt_structfac.py @ ['--res'] @ 15 @ float @ lowpass resolution. default 15 @ 
e2spt_subtilt_from_imod.py @ ['--tomo'] @  @ str @ File name of reconstructed tomogram. @ 
e2spt_subtilt_from_imod.py @ ['--ptclin'] @  @ str @ File name of input 3D particles. @ 
e2spt_subtilt_from_imod.py @ ['--edf'] @  @ str @ IMOD .edf file name. @ 
e2spt_subtilt_from_imod.py @ ['--ptclout'] @ None @ str @ File name of output 2D extracted particles. @ 
e2spt_subtilt_from_imod.py @ ['--unbin'] @ -1 @ float @ Unbin factor from input particles/tomogram to raw tilt. If unspecified, the program will calculate from the Apix of the header. @ 
e2spt_subtilt_from_imod.py @ ['--boxsz'] @ -1 @ int @ Box size of extracted 2D particles. @ 
e2spt_subtilt_from_imod.py @ ['--defcol'] @ 2 @ int @ Which column of ctf file is the defocus @ 
e2spt_subtilt_from_imod.py @ ['--weight'] @ False @ None @ Weight the particles by the variance of defocus. @ 
e2spt_subtilt_from_imod.py @ ['--ctffile'] @ None @ str @ Estimated CTF @ 
e2spt_subtilt_old.py @ ['--tiltseries'] @  @ str @ File in .ali, .mrc or .hdf format of the aligned tiltseries. @ 
e2spt_subtilt_old.py @ ['--tiltangles'] @  @ str @ File in .tlt or .txt format containing the tilt angle of each tilt image in the tiltseries. @ 
e2spt_subtilt_old.py @ ['--coords3d'] @  @ str @ File in .txt format containing the coordinates of particles determined from the reconstructed tomogram of the supplied tiltseries. @ 
e2spt_subtilt_old.py @ ['--coords2d'] @  @ str @ File in .txt format containing the coordinates of particles determined from the aligned 0 tilt image in the supplied tiltseries. @ 
e2spt_subtilt_old.py @ ['--zerotiltindx'] @ -1 @ int @ The default is the image at the middle of the stack. Since the stack might have more images to the left or the right of the actual 0-tilt (or lowest tilt) image, you can explicitly provide the index of the lowest tilt image here. This is used for tracking images. @ 
e2spt_subtilt_old.py @ ['--centerzerotilt'] @ False @ None @ Default=False. If specified, this option will center the zerotilt (or least tilted image) for each particle by using as a reference a sharp-circle of radius=box/2 or the value specified through --radius. @ 
e2spt_subtilt_old.py @ ['--excludeedge'] @ 0.0 @ float @ Integer number of pixels away from the edge of each image in the tilt series to not extract particles from. For example, if you specify 100, and the images are 4096x4096 pixels, any particle with its center lying between 0 and 200 or 3896 and 4096 will nto be extracted. @ 
e2spt_subtilt_old.py @ ['--cshrink'] @ 1 @ int @ Specifies the factor by which to multiply the coordinates in the coordinates file, so that they can be at the same scale as the tomogram. For example, provide 2 if the coordinates are on a 2K x 2K scale, but you want to extract the particles' subtiltseries from the UN-shrunk 4K x 4Ktiltseries. @ 
e2spt_subtilt_old.py @ ['--tomogram'] @  @ str @ Path to raw, unbinned tomogram. @ 
e2spt_subtilt_old.py @ ['--saveanglestacks'] @  @ str @ Default=None. Comma separated values of tilt angle indexes for which you want to save all particles as a stack. For example, if you want all particles from the 0 tilt image, you would provide the index for that image in the tilt series. In a tilt series with 61 images (1-61), the 0 tilt image is probably image number 31, so you would say --saveanglestakcs=31, and all the particles from the 0 tilt image would be put into a single HDF stack. @ 
e2spt_subtilt_old.py @ ['--tiltaxislocation'] @ -1 @ int @ By default, the tilt axis will be assumed to run through the middle of the tomogram in X, parallel to the Y axis. For example, if the dimensions of the tomogram are 4096x3000x500, the tilt axis will be assumed to be at X=2048. Provide a different integer number to change the location of the tilt axis (it will still be assumed to be parallel to Y though). @ 
e2spt_subtilt_old.py @ ['--tiltaxisptcls'] @ -1 @ int @ Specifies the distance from the tilt axis to consider particles for extraction. By default, all particles will be extracted. However, if you provide, for example, --tiltaxisptls=10, only particles with centers -10 to 10 pixels away from the tilt axis will be extracted. @ 
e2spt_subtilt_old.py @ ['--ntiltslow'] @ 0 @ int @ Default=0 (not used). If you supply an even number 1 will be added to it (for example, 4 will be turned into 5). If --ntiltslow>0, it specifies the number of tiltimages to keep in each subtiltseries, starting from the zero-tilt image and incorporating particles from right and left, one at a time. For example, in a tiltseries from -60 to 60 degress with a step size of 2 degrees, --ntiltslow=5 would keep tiltimages at angles 0,2,-2,-4,-4. @ 
e2spt_subtilt_old.py @ ['--ntiltslowneg'] @ 0 @ int @ Default=0 (not used). If --ntiltslowneg>0, it specifies the number of tiltimages to keep in each subtiltseries, starting from the zero-tilt image and progressively incorporating particles from negatively tilted images only. For example, in a tiltseries from -60 to 60 degress with a step size of 2 degrees, --ntiltslowneg=5 would keep tiltimages at angles 0,-2,-4,-6,-8. @ 
e2spt_subtilt_old.py @ ['--ntiltslowpos'] @ 0 @ int @ Default=0 (not used). If --ntiltslowpos>0, it specifies the number of tiltimages to keep in each subtiltseries, starting from the zero-tilt image and progressively incorporating particles from positively tilted images only. For example, in a tiltseries from -60 to 60 degress with a step size of 2 degrees, --ntiltslowpos=5 would keep tiltimages at angles 0,+2,+4,+6,+8. @ 
e2spt_subtilt_old.py @ ['--tomosides'] @  @ str @ Comma separated values for the tomogram dimensions. Alternatively, provide the path to the tomogram itself through --tomogram. @ 
e2spt_subtilt_old.py @ ['--icethicknessauto'] @ False @ None @ Default=False. If supplied, the thickness of the tomogram in Z will be calculated by computing the difference between the largest and the smallest Z coordinate found in the --coords3d coordinates file. @ 
e2spt_subtilt_old.py @ ['--zshift'] @ half @ str @ By default, the tomogram will be shifted -half the ice thickness so that the middle of the tomogram is at z=0. Provide a positive or negative integer to shift the z position by a different amount @ 
e2spt_subtilt_old.py @ ['--radius'] @ 0 @ int @ Default=0 (not used). Radius of the particle in pixels. 2*radius will be added to the icethickness if --radius AND --icethicknessauto are supplied. @ 
e2spt_subtilt_old.py @ ['--invertangles'] @ False @ None @ Default=False. If True, this will multiple all angles by -1, in case the directionality is messed up. @ 
e2spt_subtilt_old.py @ ['--path'] @ spt_subtilt @ str @ Directory to save the results. @ 
e2spt_subtilt_old.py @ ['--boxsize'] @ 128 @ int @ Size of the 2D "tiles" or images for each particle from each image in the tiltseries. @ 
e2spt_subtilt_old.py @ ['--apix'] @ 0.0 @ float @ If provided, this value will be used for apix instead of the one read from the header of --tiltseries @ 
e2spt_subtilt_old.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_subtilt_old.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_subtilt_old.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_subtilt_old.py @ ['--subset'] @ 0 @ int @ Specify how many sub-tiltseries (or particles) from the coordinates file you want to extract; e.g, if you specify 10, the first 10 particles will be boxed. 0 means "box them all" because it makes no sense to box none @ 
e2spt_subtilt_old.py @ ['--subtractbackground'] @ False @ None @ (Experimental. Not working yet). This will extract a box from the tomogram much larger than the subtomogram. Projections will be generated. You MUST provide --tomogram for this. @ 
e2spt_subtilt_old.py @ ['--normproc'] @  @ str @ WARNING: Not used anywhere yet. Default=None @ 
e2spt_subtilt_old.py @ ['--shrink'] @ 1 @ int @ Default=1 (no shrinking). Integer shrinking factor, part of preprocessing to facilitate particle tracking. @ 
e2spt_subtilt_old.py @ ['--lowpass'] @  @ str @ Default=None. Requires --track. Low pass filtering processor (see e2help.py processors at the command line), part of preprocessing to facilitate particle tracking. @ 
e2spt_subtilt_old.py @ ['--highpass'] @  @ str @ Default=None (no highpass). High pass filtering processor (see e2help.py processors at the command line), part of preprocessing to facilitate particle tracking. @ 
e2spt_subtilt_old.py @ ['--mask'] @  @ str @ Default=None. Requires --track. Masking processor (see e2help.py processors at the command line), part of preprocessing to facilitate particle tracking. @ 
e2spt_subtilt_old.py @ ['--threshold'] @  @ str @ Default=None (no threshold). Requires --track. Thresholding processor (see e2help.py processors at the command line), part of preprocessing to facilitate particle tracking. @ 
e2spt_subtilt_old.py @ ['--preprocess'] @  @ str @ Default=None (no additional preprocessing). Requires --track. Any additional preprocessing processor (see e2help.py processors at the command line), part of preprocessing to facilitate particle tracking. @ 
e2spt_subtilt_old.py @ ['--track'] @ False @ None @ Default=False (not used). If supplied, this option will track particles from one tilt image to another. @ 
e2spt_subtilt_old.py @ ['--trackytoo'] @ False @ None @ Default=False (not used). In theory, particles should not drift in Y with tilt angle. Still, this option can turn Y tracking on. @ 
e2spt_subtlt_local.py @ ['--path'] @ subtlt_00 @ str @ Path to a folder where results should be stored, following standard naming conventions @ 
e2spt_subtlt_local.py @ ['--ref'] @ None @ str @ reference map @ 
e2spt_subtlt_local.py @ ['--iter'] @ 0 @ int @ Iteration number within path. Default = start a new iteration @ 
e2spt_subtlt_local.py @ ['--goldcontinue'] @ False @ None @ Will use even/odd refs corresponding to specified reference to continue refining without phase randomizing again @ 
e2spt_subtlt_local.py @ ['--maxres'] @ 0 @ float @ Maximum resolution to consider in alignment (in A, not 1/A) @ 
e2spt_subtlt_local.py @ ['--minres'] @ 0 @ float @ Minimum resolution to consider in alignment (in A, not 1/A) @ 
e2spt_subtlt_local.py @ ['--smooth'] @ 100 @ float @ smooth local motion by this factor. smoother local motion with larger numbers. default 100 @ 
e2spt_subtlt_local.py @ ['--smoothN'] @ 15 @ int @ number of neighboring particles used for smoothing. default 15 @ 
e2spt_subtlt_local.py @ ['--maxshift'] @ -1 @ float @ max shift in pixel. default default box size/6 @ 
e2spt_subtlt_local.py @ ['--refine_trans'] @ False @ None @ do translational alignment. @ 
e2spt_subtlt_local.py @ ['--refine_rot'] @ False @ None @ do translational-rotational alignment. better to start from an existing translational alignment. @ 
e2spt_subtlt_local.py @ ['--refine_defocus'] @ False @ None @ do defocus refinement. need aliptcls input. doesn't work with refine_trans or rot yet.. @ 
e2spt_subtlt_local.py @ ['--use3d'] @ False @ None @ use projection of 3d particles instead of 2d ones.. @ 
e2spt_subtlt_local.py @ ['--aliptcls2d'] @  @ str @ optional aliptcls input. the program can start search from the position from last run. @ 
e2spt_subtlt_local.py @ ['--aliptcls3d'] @  @ str @ optional aliptcls input. @ 
e2spt_subtlt_local.py @ ['--parallel'] @ thread:4 @ str @ Thread/mpi parallelism to use @ 
e2spt_subtlt_local.py @ ['--debug'] @ False @ None @ for testing. @ 
e2spt_subtlt_local.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_subtlt_local.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_subtlt_local.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_tempmatch.py @ ['--reference'] @  @ None @ Specify a 3D reference volume. This should be 'light contrast', ie - positive isosurface. @ 
e2spt_tempmatch.py @ ['--label'] @ None @ str @ Assign unique label to particles resembling specified reference. This allows specific particles to be extracted in the next step and aids project organization with easily interpreted filenames. If --label is not specified, this set of particles will be labeled according to the file name of the reference without file extension. @ 
e2spt_tempmatch.py @ ['--nptcl'] @ 500 @ int @ maximum number of particles @ 
e2spt_tempmatch.py @ ['--dthr'] @ -1 @ float @ distance threshold @ 
e2spt_tempmatch.py @ ['--vthr'] @ 2.0 @ float @ value threshold (n sigma) @ 
e2spt_tempmatch.py @ ['--delta'] @ 30.0 @ float @ delta angle @ 
e2spt_tempmatch.py @ ['--sym'] @ c1 @ str @ symmetry @ 
e2spt_tempmatch.py @ ['--rmedge'] @ False @ None @ Remove particles on the edge. @ 
e2spt_tempmatch.py @ ['--rmgold'] @ False @ None @ Remove particles near gold fiducial. @ 
e2spt_tempmatch.py @ ['--boxsz'] @ -1 @ int @ Overwrite box size @ 
e2spt_tempmatch.py @ ['--threads'] @ 12 @ int @ number of threads to use @ 
e2spt_tempmatch.py @ ['--shrink'] @ -1 @ int @ binning factor. Default (-1) will downsample to ~500 @ 
e2spt_tempmatch.py @ ['--ppid'] @ -2 @ int @ ppid @ 
e2spt_tiltrefine.py @ ['--path'] @ None @ str @ Path to the previous spt/subtlt refinement (required) @ 
e2spt_tiltrefine.py @ ['--iter'] @ -1 @ int @ Start from iteration X of previous refinement @ 
e2spt_tiltrefine.py @ ['--niters'] @ 4 @ int @ Run this many iterations. Default is 4. @ 
e2spt_tiltrefine.py @ ['--keep'] @ 0.8 @ float @ propotion of tilts to keep. default is 0.8 @ 
e2spt_tiltrefine.py @ ['--maxalt'] @ 45.0 @ float @ max altitude to insert to volume @ 
e2spt_tiltrefine.py @ ['--mask'] @ auto @ str @ Refinement and reprojection masking. Default uses mask from source @ 
e2spt_tiltrefine.py @ ['--maskalign'] @  @ str @ Mask to apply during alignment, but not the final model. Default is to use the same mask. @ 
e2spt_tiltrefine.py @ ['--nogs'] @ False @ None @ Skip gold standard. This is not a great idea... @ 
e2spt_tiltrefine.py @ ['--threads'] @ 12 @ int @ Number of CPU threads to use. Default is 12. @ 
e2spt_tiltrefine.py @ ['--parallel'] @ thread:12 @ str @ Thread/mpi parallelism to use. Default is thread:12 @ 
e2spt_tiltrefine.py @ ['--buildsetonly'] @ False @ None @ will only prepare particle set for the refinement but skip the actual refinement process. @ 
e2spt_tiltrefine.py @ ['--resume'] @ False @ None @ continue from previous run @ 
e2spt_tiltrefine.py @ ['--reproject'] @ False @ None @ Reproject 3D particles into 2D particles. @ 
e2spt_tiltrefine.py @ ['--reprj_offset'] @  @ str @ Offset translation before reprojection @ 
e2spt_tiltrefine.py @ ['--reprj_clip'] @ -1 @ int @ clip after reprojection @ 
e2spt_tiltrefine.py @ ['--tophat'] @ localwiener @ str @ 'local', 'localwiener' or 'global'. Instead of imposing a uniform Wiener filter, use a tophat filter ('global' similar to Relion). local is a local tophat filter, localwiener is a local Wiener filter @ 
e2spt_tiltrefine.py @ ['--refineastep'] @ 1.0 @ float @ Mean angular variation for refine alignment @ 
e2spt_tiltrefine.py @ ['--refinentry'] @ 8 @ int @ number of starting points for refine alignment @ 
e2spt_tiltrefine.py @ ['--maxshift'] @ 8 @ int @ maximum shift allowed @ 
e2spt_tiltrefine.py @ ['--padby'] @ 1.5 @ float @ pad by factor. default is 1.5 @ 
e2spt_tiltrefine.py @ ['--debug'] @ False @ None @ Turn on debug mode. This will only process a small subset of the data (threads * 8 particles) @ 
e2spt_tiltrefine.py @ ['--localnorm'] @ False @ None @ local normalization. do not use yet.... @ 
e2spt_tiltrefine.py @ ['--sym'] @  @ str @ symmetry. will use symmetry from spt refinement by default @ 
e2spt_tiltrefine.py @ ['--ppid'] @ -1 @ int @ ppid... @ 
e2spt_tiltrefine.py @ ['--transonly'] @ False @ None @ only refine translation @ 
e2spt_tiltrefine.py @ ['--maxres'] @ -1 @ float @ max resolution for fsc @ 
e2spt_tiltrefine.py @ ['--minres'] @ -1 @ float @ min resolution for fsc @ 
e2spt_tiltrefine_oneiter.py @ ['--ptclin'] @ None @ str @ particle input @ 
e2spt_tiltrefine_oneiter.py @ ['--ptclout'] @ None @ str @ particle output @ 
e2spt_tiltrefine_oneiter.py @ ['--ref'] @ None @ str @ reference input @ 
e2spt_tiltrefine_oneiter.py @ ['--threedout'] @ None @ str @ map output @ 
e2spt_tiltrefine_oneiter.py @ ['--keep'] @ 0.5 @ float @ propotion of tilts to keep. default is 0.5 @ 
e2spt_tiltrefine_oneiter.py @ ['--threads'] @ 12 @ int @ Number of CPU threads to use. Default is 12. @ 
e2spt_tiltrefine_oneiter.py @ ['--parallel'] @ thread:12 @ str @ Thread/mpi parallelism to use. Default is thread:12 @ 
e2spt_tiltrefine_oneiter.py @ ['--debug'] @ False @ None @ Turn on debug mode. This will only process a small subset of the data (threads * 8 particles) @ 
e2spt_tiltrefine_oneiter.py @ ['--transonly'] @ False @ None @ only refine translation @ 
e2spt_tiltrefine_oneiter.py @ ['--savepath'] @ False @ None @ save alignment path in a json file for testing. @ 
e2spt_tiltrefine_oneiter.py @ ['--fromscratch'] @ False @ None @ align from scratch and ignore previous particle transforms. for spt mostly. will include mirror @ 
e2spt_tiltrefine_oneiter.py @ ['--refineastep'] @ 2.0 @ float @ Mean angular variation for refine alignment @ 
e2spt_tiltrefine_oneiter.py @ ['--refinentry'] @ 4 @ int @ number of starting points for refine alignment @ 
e2spt_tiltrefine_oneiter.py @ ['--maxshift'] @ 8 @ int @ maximum shift allowed @ 
e2spt_tiltrefine_oneiter.py @ ['--localrefine'] @ False @ None @ local refinement @ 
e2spt_tiltrefine_oneiter.py @ ['--defocus'] @ False @ None @ refine defocus. Still under development @ 
e2spt_tiltrefine_oneiter.py @ ['--seedmap'] @ False @ None @ seed @ 
e2spt_tiltrefine_oneiter.py @ ['--ctfweight'] @ False @ None @ weight by ctf @ 
e2spt_tiltrefine_oneiter.py @ ['--skipm3d'] @ False @ None @ skip make3d. only output aligned list @ 
e2spt_tiltrefine_oneiter.py @ ['--padby'] @ 2.0 @ float @ pad by factor. default is 2 @ 
e2spt_tiltrefine_oneiter.py @ ['--maxres'] @ -1 @ float @ max resolution for cmp @ 
e2spt_tiltrefine_oneiter.py @ ['--minres'] @ -1 @ float @ min resolution for cmp @ 
e2spt_tiltrefine_oneiter.py @ ['--sym'] @ c1 @ str @ symmetry. will use symmetry from spt refinement by default @ 
e2spt_tiltrefine_oneiter.py @ ['--smooth'] @ -1 @ int @ Smooth trajectory per image based on nearby particles. Still under development @ 
e2spt_tiltrefine_oneiter.py @ ['--ppid'] @ -1 @ int @ ppid... @ 
e2spt_tiltrefine_oneiter.py @ ['--nkeep'] @ 1 @ int @  @ 
e2spt_tiltrefine_oneiter.py @ ['--verbose', '-v'] @ 0 @ int @ Verbose @ 
e2spt_tiltrefine_oneiter.py @ ['--verbose', '-v'] @ 0 @ int @ Verbose @ 
e2spt_tiltstacker.py @ ['--anglesindxinfilename'] @ None @ int @ Default=None. The filename of the images will be split at any occurence of the following delimiters: '_', '-', '+', '[' , ']' , ',' , ' ' (the two last ones are a comma and a blank space). Provide the index (position) of the angle in the split filename. For example, if the filename of an image is "my_specimen-oct-10-2015_-50_deg-from_k2 camera.mrc", it will be split into ['my','specimen','oct','10','2015','','50','deg','from','k2','camera','mrc']. The angle '-50', is at position 6 (starting from 0). Therefore, you would provide --anglesindxinfilename=6, assuming all images to be stacked/processed are similarly named. No worries about the minus sign disappearing. The program will look at whether there's a minus sign immediately preceeding the position where the angle info is. @ 
e2spt_tiltstacker.py @ ['--apix'] @ 0.0 @ float @ True apix of images to be written on final stack. @ 
e2spt_tiltstacker.py @ ['--bidirectional'] @ False @ None @ This will assume the first image is at 0 degrees and will stack images from --lowerend through 0, and then will stack the rest from 0+tiltstep throgh --upperend. If --negativetiltseries is supplied, images will be stacked from --upperend through 0, then from 0-tiltstep through --lowerend. @ 
e2spt_tiltstacker.py @ ['--clip'] @  @ str @ Resize the 2-D images in the tilt series. If one number is provided, then x and y dimensions will be made the same. To specify both dimensions, supply two numbers, --clip=x,y. Clipping will be about the center of the image. @ 
e2spt_tiltstacker.py @ ['--exclude'] @  @ str @ Comma separated list of numbers corresponding to images to exclude. --unstack or --restack must be supplied. You can also exclude by ranges. For example: Recall that the FIRST image INDEX is 0. --exclude=1,5-7,10,12,15-19 will exclude images 1,5,6,7,10,12,15,16,17,18,19 @ 
e2spt_tiltstacker.py @ ['--highesttilt'] @ 0.0 @ float @ Highest tilt angle. If not supplied, it will be assumed to be 1* --tiltrange. @ 
e2spt_tiltstacker.py @ ['--include'] @  @ str @ Comma separated list of numbers corresponding to images to include (all others will be excluded). --unstack or --restack must be supplied. Recall that the FIRST image INDEX is 0. --include=1,5-7,10,12,15-19 will include images 1,5,6,7,10,12,15,16,17,18,19 @ 
e2spt_tiltstacker.py @ ['--invert'] @ False @ None @ "This will multiply the pixel values by -1. @ 
e2spt_tiltstacker.py @ ['--lowesttilt'] @ 0.0 @ float @ Lowest tilt angle. If not supplied, it will be assumed to be -1* --tiltrange. @ 
e2spt_tiltstacker.py @ ['--mirroraxis'] @  @ str @ Options are x or y, and the mirrored copy of the 2-D images will be generated before being put into the tilt series. @ 
e2spt_tiltstacker.py @ ['--negativetiltseries'] @ False @ None @ This indicates that the tilt series goes from -tiltrange to +tiltrange, or 0 to -tiltrange, then +tiltstep to +tiltrange if --bidirectional is specified. @ 
e2spt_tiltstacker.py @ ['--normalizeimod'] @ False @ None @ Default=False. This will apply 'newstack -float 2' to the input stack. Requires IMOD. Does not apply to --unstack or --restack. @ 
e2spt_tiltstacker.py @ ['--outmode'] @ float @ str @ All EMAN2 programs write images with 4-byte floating point values when possible by default. This allows specifying an alternate format when supported: float, int8, int16, int32, uint8, uint16, uint32. Values are rescaled to fill MIN-MAX range. @ 
e2spt_tiltstacker.py @ ['--path'] @ sptstacker @ str @ Directory to store results in. The default is a numbered series of directories containing the prefix 'sptstacker'; for example, sptstacker_02 will be the directory by default if 'sptstacker_01' already exists. @ 
e2spt_tiltstacker.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_tiltstacker.py @ ['--restack'] @  @ str @ .hdf, or 3D .st, .mrc, .ali, or .mrcs stack file to restack. This option can be used with --include or --exclude to unstack only specific images. Recall that the FIRST image INDEX is 0 (but unstacked image will be numbered from 1). --exclude=1,5-7,10,12,15-19 will exclude images 1,5,6,7,10,12,15,16,17,18,19 @ 
e2spt_tiltstacker.py @ ['--replacestring'] @  @ str @ default=None. Comma separated strings to replace in the input filenames with an underscore. For example, if --stem2stack=data, and this triggers the program to find images named 'data[1].mrc', 'data[2].mrc', etc., supplying --replacestring=[,] will first change the filename of the images to 'data_1_.mrc, data_2_.mrc, etc. @ 
e2spt_tiltstacker.py @ ['--shrink'] @ 0.0 @ float @ Default=0.0 (not used). Shrinking factor to do Fourier cropping of the images in a titlseries; can be a fractional number (for example, 1.5) @ 
e2spt_tiltstacker.py @ ['--stackregardless'] @ False @ None @ "Stack images found with the common string provided through --stem2stack, even if the number of images does not match the predicted number of tilt angles. @ 
e2spt_tiltstacker.py @ ['--stem2stack'] @  @ str @ String common to all the files to put into an .st stack, which is in .MRC format; for example, --stem2stack=.hdf will process all .hdf files in the current directory. If not specified, all valid EM imagefiles in the current directory will be put into an .st stack. @ 
e2spt_tiltstacker.py @ ['--tltfile'] @  @ str @ ".tlt file IF unstacking an aligned tilt series with --unstack=<stackfile> or restacking a tiltseries with --restack=<stackfile> @ 
e2spt_tiltstacker.py @ ['--tiltrange'] @ 0.0 @ float @ If provided, this will make --lowesttilt=-1*tiltrange and --highesttilt=tiltrange. If the range is asymmetric, supply --lowesttilt and --highesttilt directly. @ 
e2spt_tiltstacker.py @ ['--tiltstep'] @ 0.0 @ float @ Step between tilts. Required if using --stem2stack. @ 
e2spt_tiltstacker.py @ ['--unstack'] @  @ str @ .hdf, or 3D .st, .mrc, .ali, or .mrcs stack file to unstack. This option can be used with --include or --exclude to unstack only specific images. Recall that the FIRST image INDEX is 0 (but unstacked image will be numbered from 1). --exclude=1,5-7,10,12,15-19 will exclude images 1,5,6,7,10,12,15,16,17,18,19 @ 
e2spt_tiltstacker.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2spt_tiltstacker.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2spt_tomoctf.py @ ['--alltiltseries'] @ False @ None @ Use all tilt series in the folder. Acceptable file extensions include hdf, mrc, mrcs, st. @ 
e2spt_tomoctf.py @ ['--dfrange'] @ 2.0,7.0,0.02 @ str @ Search range of defocus (start, end, step). default is 2., 7, 0.02 @ 
e2spt_tomoctf.py @ ['--psrange'] @ 10,15,5 @ str @ phase shift range (start, end, step). default is 10, 15, 5 @ 
e2spt_tomoctf.py @ ['--tilesize'] @ 256 @ int @ Size of tile to calculate FFT, default is 256 @ 
e2spt_tomoctf.py @ ['--voltage'] @ 300 @ int @ Voltage of microscope in kV @ 
e2spt_tomoctf.py @ ['--cs'] @ 2.7 @ float @ Cs of microscope @ 
e2spt_tomoctf.py @ ['--nref'] @ 15 @ int @ Using N tilt images near the center tilt to estimate the range of defocus for all images. Default is 15 @ 
e2spt_tomoctf.py @ ['--stepx'] @ 20 @ int @ Number of tiles to generate on x-axis (different defocus) @ 
e2spt_tomoctf.py @ ['--stepy'] @ 40 @ int @ Number of tiles to generate on y-axis (same defocus) @ 
e2spt_tomoctf.py @ ['--checkhand'] @ False @ None @ Check the handedness of tomogram. @ 
e2spt_tomoctf.py @ ['--threads'] @ 1 @ int @ Number of threads to run in parallel on the local computer @ 
e2spt_tomoctf.py @ ['--nolog'] @ False @ None @ Default=False. Turn off recording of the command ran for this program onto the .eman2log.txt file @ 
e2spt_tomoctf.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_tomoctf.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_tomoctf.py @ ['--bgcurve'] @ None @ str @ load a curve of background power spectrum to substract for ctf estimation. @ 
e2spt_tomoctf.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_trajfromrefine.py @ ['--ali3dold'] @ None @ str @  @ 
e2spt_trajfromrefine.py @ ['--ali3dnew'] @ None @ str @  @ 
e2spt_trajfromrefine.py @ ['--path'] @ None @ str @  @ 
e2spt_trajfromrefine.py @ ['--ali2d'] @ None @ str @  @ 
e2spt_trajfromrefine.py @ ['--nframe'] @ 5 @ int @ number of frames in the trajectory @ 
e2spt_trajfromrefine.py @ ['--maxshift'] @ 7 @ float @ ignore particles with drift/rotation (pixel/degree) larger than this. default 7 @ 
e2spt_trajfromrefine.py @ ['--nstd'] @ 2 @ float @ build trajectories from -n x std to n x std of eigenvalues. default is 2 @ 
e2spt_trajfromrefine.py @ ['--nptcl'] @ 500 @ int @ number of particle per average. default is 500 @ 
e2spt_trajfromrefine.py @ ['--threads'] @ 12 @ int @ threads @ 
e2spt_wedge.py @ ['--wedgeangle'] @ 60.0 @ float @ Missing wedge angle @ 
e2spt_wedge.py @ ['--wedgei'] @ 0.05 @ float @ Missingwedge begining @ 
e2spt_wedge.py @ ['--wedgef'] @ 0.5 @ float @ Missingwedge ending @ 
e2spt_wedge.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_wedge.py @ ['--nogui'] @ False @ None @ Do not launch the GUI and set the average of the missing wedge statistics on all the volumes. @ 
e2spt_wedge.py @ ['--averagestats'] @ False @ None @ Do not launch the GUI and set the average of the missing wedge statistics on all the volumes. @ 
e2spt_wedgefill.py @ ['--input'] @  @ str @ this is redundant with supplying the image stack directly after the program name. @ 
e2spt_wedgefill.py @ ['--output'] @  @ str @ optional file name to save the stack with a filled wedge. @ 
e2spt_wedgefill.py @ ['--fillimage'] @  @ str @ the iamge to use to fill in the missing wedge of the images in --input. Ideally, this is the average of the aligned images in --input, or the reference the images in --input were aligned to. @ 
e2spt_wedgefill.py @ ['--fillwithnoise'] @ False @ None @ this will fill the missing wedge with gaussian noise. --matchto will be turned on by default if this option is supplied. @ 
e2spt_wedgefill.py @ ['--matchto'] @ False @ None @ this will match the power spectrum of each image in --input to that --fillimage so that things are properly normalized. @ 
e2spt_wedgefill.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2spt_wedgefill.py @ ['--subset'] @ 0 @ int @ Default=0 (not used). Plot only this substet of transforms from the hdf stack or json file provided. @ 
e2spt_wedgefill.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2spt_wedgefill.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ssehunter.py @ ['--atoms'] @ none @ str @ pseudoatoms file @ 
e2ssehunter.py @ ['--atomswt'] @ 1.0 @ float @ pseudoatom weight @ 
e2ssehunter.py @ ['--coeff'] @ none @ str @ helix correlation file @ 
e2ssehunter.py @ ['--coeffwt'] @ 1.0 @ float @ helix correlation weight @ 
e2ssehunter.py @ ['--skeleton'] @ none @ str @ skeleton file @ 
e2ssehunter.py @ ['--skeletonwt'] @ 1.0 @ float @ skeleton weight @ 
e2ssehunter.py @ ['--helixlength'] @ 16.2 @ float @ helix length om angstroms @ 
e2ssehunter.py @ ['--da'] @ 5.0 @ float @ helix angular search step @ 
e2ssehunter.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2ssematch.py @ ['--maxbad'] @ 2 @ int @ Maximumum number of unassigned helices @ 
e2ssematch.py @ ['--minhelix'] @ 6 @ int @ Minimum residues in a helix @ 
e2ssematch.py @ ['--maxpairerr'] @ 10.0 @ float @ Maximum error match between pairs of helices, default=50 @ 
e2ssematch.py @ ['--skelpath'] @ None @ str @ Optional (recommended) output from the e2skelpath.py program @ 
e2ssematch.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2ssematch.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2ssematch.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2stackanim.py @ ['--scale'] @ 1.0 @ float @ Scale factor @ 
e2stackanim.py @ ['--pingpong'] @ False @ None @ Cycle through the sequence forwards then backwards @ 
e2stackanim.py @ ['--contrast'] @ 1.0 @ float @ Relative setting. Try 0.75 if images too bright. Default 1.0  @ 
e2stackanim.py @ ['--last'] @ 0 @ int @ Number of last image to use @ 
e2stackanim.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2stackanim.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2stackanim.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2stacksort.py @ ['--simcmp'] @ optvariance:keepzero=1:matchfilt=1 @ str @ The name of a 'cmp' to be used in comparing the after optional alignment (default=optvariance:keepzero=1:matchfilt=1) @ 
e2stacksort.py @ ['--simalign'] @ None @ str @ The name of an 'aligner' to use prior to comparing the images (default=no alignment) @ 
e2stacksort.py @ ['--simmask'] @ None @ str @ A file containing a mask to apply prior to comparisons, to focus the sort on one particular region @ 
e2stacksort.py @ ['--reverse'] @ False @ None @ Sort in order of least mutual similarity @ 
e2stacksort.py @ ['--byptcl'] @ False @ None @ Sort in order of number of particles represented in each class-average. No alignment, shrinking, etc. is performed @ 
e2stacksort.py @ ['--bykurtosis'] @ False @ None @ Sort by image Kurtosis. No alignment, shrinking, etc. is performed @ 
e2stacksort.py @ ['--byheader'] @ None @ str @ Uses the named header parameter to sort the images @ 
e2stacksort.py @ ['--iterative'] @ False @ None @ Iterative approach for achieving a good 'consensus alignment' among the set of particles @ 
e2stacksort.py @ ['--invar'] @ False @ None @ Sorting and alignment using invariants. @ 
e2stacksort.py @ ['--useali'] @ False @ None @ Save aligned particles to the output file, note that if used with shrink= this will store the reduced aligned particles @ 
e2stacksort.py @ ['--seqali'] @ False @ None @ Align each particle to the previous particle before saving with rotate_translate_tree. No flip in alignment. Aligns stack #2 instead if provided. @ 
e2stacksort.py @ ['--seqalicen'] @ False @ None @ Align each particle to the previous particle before saving, with a postalignment recentering. No flip in alignment. Aligns stack #2 instead if provided. @ 
e2stacksort.py @ ['--center'] @ False @ None @ After alignment, particles are centered via center of mass before comparison @ 
e2stacksort.py @ ['--nsort'] @ 0 @ int @ Number of output particles to generate (mainly for reverse mode) @ 
e2stacksort.py @ ['--ninput'] @ 0 @ int @ Number of input particles to read (first n in the file) @ 
e2stacksort.py @ ['--shrink'] @ 1 @ int @ Reduce the particles for comparisons @ 
e2stacksort.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2stacksort.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2stacksort.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2symbest.py @ ['--nkeep'] @ None @ int @ Number of particles to keep @ 
e2symbest.py @ ['--sym'] @ None @ str @ Symmetry to search for @ 
e2symbest.py @ ['--mirror'] @ None @ str @ search for particles with mirror symmetry and write them out to outputfile. @ 
e2symbest.py @ ['--rtp'] @ False @ None @ make a rotational footprint @ 
e2symbest.py @ ['--mask'] @ None @ int @ Mask radius @ 
e2symbest.py @ ['--imask'] @ None @ int @ Inside mask radius @ 
e2symbest.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2symbest.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2symbest.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2symsearch3d.py @ ['--align'] @ symalignquat @ str @ Default=symalignquat. WARNING: The aligner cannot be changed for this program currently. Option ignored. @ 
e2symsearch3d.py @ ['--average'] @ False @ None @ Default=False. If supplied and a stack is provided through --input, the average of the aligned and/or symmetrized stack will also be saved. @ 
e2symsearch3d.py @ ['--averager'] @ mean.tomo @ str @ Default=mean.tomo. The type of averager used to produce the class average. Default=mean.tomo. @ 
e2symsearch3d.py @ ['--clip'] @ 0 @ int @ Boxsize to clip particles as part of preprocessing to speed up alignment. For example, the boxsize of the particles might be 100 pixels, but the particles are only 50 pixels in diameter. Aliasing effects are not always as deleterious for all specimens, and sometimes 2x padding isn't necessary; still, there are some benefits from 'oversampling' the data during averaging; so you might still want an average of size 2x, but perhaps particles in a box of 1.5x are sufficiently good for alignment. In this case, you would supply --clip=75 @ 
e2symsearch3d.py @ ['--cmp'] @ ccc @ str @ The name of a 'cmp' to be used in comparing the symmtrized object to unsymmetrized @ 
e2symsearch3d.py @ ['--highpass'] @  @ str @ A highpass filtering processor (from e2proc3d.py, see e2help.py processors) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2symsearch3d.py @ ['--input'] @  @ str @ The name of input volume or hdf stack of volumes @ 
e2symsearch3d.py @ ['--keep'] @ 1.0 @ float @ Fraction of particles to include if --average is on, after correlating the particles with the average. @ 
e2symsearch3d.py @ ['--keepsig'] @ False @ None @ Default=False. Causes theoptions.keep argument to be interpreted in standard deviations. @ 
e2symsearch3d.py @ ['--lowpass'] @  @ str @ A lowpass filtering processor (from e2proc3d.py; see e2help.py processors) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2symsearch3d.py @ ['--mask'] @ mask.sharp:outer_radius=-2 @ str @ Mask processor applied to particles before alignment. Default is mask.sharp:outer_radius=-2. IF using --clip, make sure to express outer mask radii as negative pixels from the edge. @ 
e2symsearch3d.py @ ['--maskfile'] @  @ str @ Mask file (3D IMAGE) applied to particles before alignment. Must be in HDF format. Default is None. @ 
e2symsearch3d.py @ ['--mirror'] @  @ str @ Axis across of which to generate a mirrored copy of --ref. All particles will be compared to it in addition to the unmirrored image in --ref if --keepsig is provided or if --keep < 1.0. @ 
e2symsearch3d.py @ ['--nolog'] @ False @ None @ If supplied, this option will prevent logging the command run in .eman2log.txt. @ 
e2symsearch3d.py @ ['--nopath'] @ False @ None @ If supplied, this option will save results in the directory where the command is run. A directory to store the results will not be made. @ 
e2symsearch3d.py @ ['--nopreprocprefft'] @ False @ None @ Turns off all preprocessing that happens only once before alignment (--normproc, --mask, --maskfile, --clip, --threshold; i.e., all preprocessing excepting filters --highpass, --lowpass, --preprocess, and --shrink. @ 
e2symsearch3d.py @ ['--normproc'] @  @ str @ Normalization processor applied to particles before alignment. Default is to use normalize. If normalize.mask is used, results of the mask option will be passed in automatically. If you want to turn this option off specify 'None' @ 
e2symsearch3d.py @ ['--parallel'] @ None @ str @ Default=thread:2. Run in parallel, see http://eman2.org/Parallel @ 
e2symsearch3d.py @ ['--path'] @  @ str @ Name of path for output file @ 
e2symsearch3d.py @ ['--plots'] @ False @ None @ Default=False. Turn this option on to generate a plot of the ccc scores if --average is supplied. Running on a cluster or via ssh remotely might not support plotting. @ 
e2symsearch3d.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID. @ 
e2symsearch3d.py @ ['--preavgproc1'] @  @ str @ Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) @ 
e2symsearch3d.py @ ['--preavgproc2'] @  @ str @ Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) @ 
e2symsearch3d.py @ ['--preprocess'] @  @ str @ Any processor (as in e2proc3d.py) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. @ 
e2symsearch3d.py @ ['--ref'] @  @ str @ Default=None. If provided and --average is also provided and --keep < 1.0 or --keepsig is specified, 'good particles' will be determined by correlation to --ref. @ 
e2symsearch3d.py @ ['--saveali'] @ False @ None @ Save the stack of aligned/symmetrized particles. @ 
e2symsearch3d.py @ ['--savepreproc'] @ False @ None @ Default=False. Will save stacks of preprocessed particles (one for coarse alignment and one for fine alignment if preprocessing options are different). @ 
e2symsearch3d.py @ ['--savesteps'] @ False @ None @ If --avgiter > 1, save all intermediate averages and intermediate aligned kept stacks. @ 
e2symsearch3d.py @ ['--shrink'] @ 0 @ int @ Optionally shrink the input particles by an integer amount prior to computing similarity scores. For speed purposes. Default=0, no shrinking @ 
e2symsearch3d.py @ ['--subset'] @ 0 @ int @ Number of particles in a subset of particles from the --input stack of particles to run the alignments on. @ 
e2symsearch3d.py @ ['--sym'] @ c1 @ None @ Specify symmetry -choices are: c<n>, d<n>, h<n>, tet, oct, icos. For asymmetric reconstruction ommit this option or specify c1. @ 
e2symsearch3d.py @ ['--threshold'] @  @ str @ A threshold applied to the subvolumes after normalization. For example, --threshold=threshold.belowtozero:minval=0 makes all negative pixels equal 0, so that they do not contribute to the correlation score. @ 
e2symsearch3d.py @ ['--tweak'] @ False @ None @ WARNING: Not used for anything yet. This will perform a final alignment with no downsampling [without using --shrink or --shrinkfine] if --shrinkfine > 1. @ 
e2symsearch3d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level ofoptions.verboseness. @ 
e2symsearch3d.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level ofoptions.verboseness. @ 
e2symsearch3d.py @ ['--weighbytiltaxis'] @  @ str @ Default=None. A,B, where A is an integer number and B a decimal. A represents the location of the tilt axis in the tomogram in pixels (eg.g, for a 4096x4096xZ tomogram, this value should be 2048), and B is the weight of the particles furthest from the tomogram. For example, --weighbytiltaxis=2048,0.5 means that praticles at the tilt axis (with an x coordinate of 2048) will have a weight of 1.0 during averaging, while the distance in the x coordinates of particles not-on the tilt axis will be used to weigh their contribution to the average, with particles at the edge(0+radius or 4096-radius) weighing 0.5, as specified by the value provided for B. @ 
e2symsearch3d.py @ ['--weighbyscore'] @ False @ None @ Default=False. This option will weigh the contribution of each subtomogram to the average by score/bestscore. @ 
e2symsearch3d.py @ ['--avgiter'] @ 1 @ int @ Default=1. If --keep is different from 1.0 and --average is on, the initial average will include all the particles, but then the percent specified byoptions.keep will be kept (the rest thrown away) and a new average will be computed. If --avgiter > 1, this new average will be compared again against all the particles. The procedure will be repeated for however many iterations --avgiter is given, or the process will stop automatically if in two consecutive rounds exactly the same particles are kept @ 
e2symsearch3d.py @ ['--notmatchimgs'] @ False @ None @ Default=True. This option prevents applying filter.match.to to one image so that it matches the other's spectral profile during preprocessing for alignment purposes. @ 
e2symsearch3d.py @ ['--steps'] @ 10 @ int @ Number of steps (for the MC). Default=10. @ 
e2symsearch3d.py @ ['--symmetrize'] @ False @ None @ Symmetrize volume after alignment. @ 
e2tilefile.py @ ['--build'] @ None @ str @ Build a new tile file from the specified image @ 
e2tilefile.py @ ['--buildpspec'] @ None @ float @ Builds 1D and 2D power spectra for the images when building, Value is A/pix for image. @ 
e2tilefile.py @ ['--tilesize'] @ 256 @ int @ Build a new tile file from this image @ 
e2tilefile.py @ ['--dump'] @ False @ None @ Dump the tile dictionary from the file @ 
e2tilefile.py @ ['--display'] @  @ str @ Displays a specific tile (level,x,y)) @ 
e2tilefile.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tilefile.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2tilefile.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2tileimage.py @ ['--boxsize'] @ 512 @ int @ Box size for each tile in pixels. Default is 512. @ 
e2tileimage.py @ ['--xmin'] @ -1 @ int @ Start tiling on this x-pixel. If -1, will start one boxsize inward. @ 
e2tileimage.py @ ['--xmax'] @ -1 @ int @ Generate tiles in x-direction until this many pixels. If -1, will tile the entire image. @ 
e2tileimage.py @ ['--xstep'] @ 256 @ int @ Step length in x-direction. If less than --boxsize, tiles will overlap. Default is 256. @ 
e2tileimage.py @ ['--ymin'] @ -1 @ int @ Start tiling on this y-pixel. If -1, will start one boxsize inward. @ 
e2tileimage.py @ ['--ymax'] @ -1 @ int @ Generate tiles in y-direction until this many pixels. If -1, will tile the entire image. @ 
e2tileimage.py @ ['--ystep'] @ 256 @ int @ Step length in y-direction. If less than --boxsize, tiles will overlap. Default is 256. @ 
e2tileimage.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2tileimage.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2tiltseries.py @ ['--output'] @ None @ str @ Name of the output stack to build (including file extension). @ 
e2tiltseries.py @ ['--tilts'] @ False @ None @ Write results to 'tiltseries' directory in current project. @ 
e2tiltseries.py @ ['--rawtlt'] @  @ str @ Name of tilt angles text file. Note, angles must correspond to stack file names in alphabetical/numerical order. @ 
e2tiltseries.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tiltseries.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2tiltseries.py @ ['--verbose', '-v'] @ 1 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2tiltvalidate.py @ ['--untiltdata'] @ None @ str @ Stack of untilted images @ 
e2tiltvalidate.py @ ['--tiltdata'] @ None @ str @ Stack of tilted images @ 
e2tiltvalidate.py @ ['--volume'] @ None @ str @ 3D volume to validate @ 
e2tiltvalidate.py @ ['--maxtiltangle'] @ 180.0 @ float @ Maximum tiltangle permitted when finding tilt distances @ 
e2tiltvalidate.py @ ['--quaternion'] @ False @ None @ Use Quaterions for tilt distance computation @ 
e2tiltvalidate.py @ ['--sym'] @ c1 @ str @ The recon symmetry @ 
e2tiltvalidate.py @ ['--docontourplot'] @ False @ None @ Compute a contour plot @ 
e2tiltvalidate.py @ ['--tiltrange'] @ 15 @ int @ The angular tiltrange to search @ 
e2tiltvalidate.py @ ['--align'] @ translational @ str @ The name of a aligner to be used in comparing the aligned images @ 
e2tiltvalidate.py @ ['--cmp'] @ ccc @ str @ The name of a 'cmp' to be used in comparing the aligned images @ 
e2tiltvalidate.py @ ['--delta'] @ 5.0 @ float @ The angular step size for alingment @ 
e2tiltvalidate.py @ ['--shrink'] @ 0 @ int @ Optionally shrink the input particles by an integer amount prior to computing similarity scores. For speed purposes. Defulat = 0, no shrinking @ 
e2tiltvalidate.py @ ['--simcmp'] @ ccc @ str @ The name of a 'cmp' to be used in comparing the aligned images (default=ccc) @ 
e2tiltvalidate.py @ ['--simalign'] @ rotate_translate @ str @ The name of an 'aligner' to use prior to comparing the images (default=rotate_translate) @ 
e2tiltvalidate.py @ ['--simaligncmp'] @ ccc @ str @ Name of the aligner along with its construction arguments (default=ccc) @ 
e2tiltvalidate.py @ ['--simralign'] @ None @ str @ The name and parameters of the second stage aligner which refines the results of the first alignment @ 
e2tiltvalidate.py @ ['--simraligncmp'] @ dot @ str @ The name and parameters of the comparitor used by the second stage aligner. (default=dot). @ 
e2tiltvalidate.py @ ['--parallel'] @ None @ str @ Parallelism string @ 
e2tiltvalidate.py @ ['--verbose'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness @ 
e2tiltvalidate.py @ ['--path'] @  @ str @ The folder the results are placed @ 
e2tiltvalidate.py @ ['--radcut'] @ -1 @ float @ For use in the GUI, truncate the polar plot after R. -1 = no truncation @ 
e2tiltvalidate.py @ ['--gui'] @ False @ None @ Start the GUI for viewing the tiltvalidate plots @ 
e2tiltvalidate.py @ ['--planethres'] @ 360.0 @ float @ Maximum out of plane threshold for the tiltaxis. 0 = perfectly in plane, 1 = normal to plane @ 
e2tiltvalidate.py @ ['--datalabelscolor'] @ #00ff00 @ str @ Set the color of the data labels. Any vaild matplotlib color is ok @ 
e2tiltvalidate.py @ ['--datalabels'] @ False @ None @ Add data labels to the plot @ 
e2tiltvalidate.py @ ['--colorzaxis'] @ False @ None @ Color scatter dots by Z axis @ 
e2tiltvalidate.py @ ['--eulerfile'] @ None @ str @ Euler angles file, to create tiltdistance from pre-aligned particles. Format is: imgnum, name, az, alt, phi @ 
e2tiltvalidate.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tomo_ctfraw.py @ ['--ampcont'] @ 0.05 @ float @ Default=0.05. Amplitude contrast to use for CTF correction phase flipping. @ 
e2tomo_ctfraw.py @ ['--apix'] @ None @ float @ Default=whatever is on the header of the images. Sampling of the images in angstroms/pixel. @ 
e2tomo_ctfraw.py @ ['--bfactor'] @ 1000 @ int @ Default=1000. Bfactor ("temperature factor") to use. @ 
e2tomo_ctfraw.py @ ['--cs'] @ 2.7 @ float @ Default=2.7. Cs of the microscope with which the images were collected. @ 
e2tomo_ctfraw.py @ ['--defocus'] @ None @ float @ Default=None. Target defocus at the tilt axis. If not provided, a "global defocus" value will be estimated automatially. @ 
e2tomo_ctfraw.py @ ['--debug'] @ False @ None @ Default=False. Shows plots as they are being produced -requires user feedback to proceed. @ 
e2tomo_ctfraw.py @ ['--input'] @ None @ str @ Default=None. Single 2D image or image stack to calculate CTF for. @ 
e2tomo_ctfraw.py @ ['--path'] @ tomoctfraw @ str @ Directory to store results in. The default is a numbered series of directories containing the prefix 'tomoctfraw'; for example, sptctf_02 will be the directory by default if 'sptctf_01' already exists. @ 
e2tomo_ctfraw.py @ ['--phaseplate'] @ False @ None @ Default=False. Supply this if the data were collected with hole-free phase plate. @ 
e2tomo_ctfraw.py @ ['--plots'] @ False @ None @ Default=False. Turn this option on to generate plots of the background-subtracted 1D power spectrum overlaid with the best CTF fit. Running on a cluster or via ssh remotely might not support plotting. @ 
e2tomo_ctfraw.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tomo_ctfraw.py @ ['--savefft'] @ False @ None @ Default=False. Saves the average of the ffts of the tiles for an image or its strips. @ 
e2tomo_ctfraw.py @ ['--tilesize'] @ 256 @ int @ Tile size to use for strips when --autofit is provided. @ 
e2tomo_ctfraw.py @ ['--tiltangle'] @ None @ float @ Default=None. Single 2D image or image stack to calculate CTF for. @ 
e2tomo_ctfraw.py @ ['--tltfile'] @ None @ str @ File containing a list of tilt angles corresponding to the tilt angles of images 0 to n. @ 
e2tomo_ctfraw.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness. @ 
e2tomo_ctfraw.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness. @ 
e2tomo_ctfraw.py @ ['--voltage'] @ 300 @ int @ Default=300. Voltage of the microscope with which the images where collected. @ 
e2tomo_drawcontour.py @ ['--load'] @ None @ str @ Load previous contour segmentation. @ 
e2tomo_drawcontour.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tomo_drawcurve.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tomo_eval.py @ ['--ppid'] @ None @ int @  @ 
e2tomo_icongpu.py @ ['--gpus'] @ -1 @ str @ default=-1 (all available GPUs will be used). To select specific GPUs to use, provide them as a comma-separated list of integers. @ 
e2tomo_icongpu.py @ ['--highpasspixels'] @ 4 @ int @ Default=4. Number of Fourier pixels to zero out during highpass filtering AFTER reconstruction (postprocessing). Provide 'None' or '0' to disactivate. @ 
e2tomo_icongpu.py @ ['--iconpreproc'] @ False @ None @ default=False. If on, this will trigger a call to ICONPreProcess on the .st file supplied through --tiltseries. @ 
e2tomo_icongpu.py @ ['--lowpassresolution'] @ 100.0 @ float @ Default=100. Resolution in angstroms to lowpass filter the tomogram AFTER reconstruction (postprocessing). Type 'None' or '0' to disactivate. @ 
e2tomo_icongpu.py @ ['--path'] @ icongpu @ str @ Default=icongpu. Name of the directory where to store the output results. Only works when reconstructing the .ali file (preprocessing of the .st file will output the preprocessed tiltseries to the current directory). A numbered series of 'icongpu' directories will be created (i.e., if the program is run more than once, results will be stored in iconpu_01, icongpu_02, etc., directories, to avoid overwriting data). @ 
e2tomo_icongpu.py @ ['--ppid'] @ -1 @ int @ Default=-1. Set the PID of the parent process, used for cross platform PPID @ 
e2tomo_icongpu.py @ ['--shrink'] @ 0 @ int @ Default=0 (not used). Shrink factor to provide IMOD's binvol program with to bin/shrink the output tomogram after rotation about the x axis. @ 
e2tomo_icongpu.py @ ['--sizez'] @ 0 @ int @ Default=0 (not used). Output size in Z for the reconstructed tomogram. This should be the same as the --thickness value provided during tiltseries preprocessing, or larger (it's good to make sure the entire reconstruction will fit in the reconstruction volume without being too tight). If running a reconstruction of the .ali file and both --thickness and --sizez are provided, the latter will supersede the former. @ 
e2tomo_icongpu.py @ ['--skipgolderasing'] @ False @ None @ default=False. If on, this will call IMOD to generate a new aligned tiltseries after ICONPreProcess, and then ICON-GPU will be automatically called to perform the reconstruction. Typically, one would NOT use this option as it is useful to delete the gold fiducials prior to reconstruction. @ 
e2tomo_icongpu.py @ ['--thickness'] @ 0 @ int @ default=0. Thickness of the specimen as seen in a preliminary weighted back projection reconstruction from IMOD (through how many slices in Z are there specimen densities?). @ 
e2tomo_icongpu.py @ ['--tiltseries'] @ None @ str @ default=None. .st file from IMOD if --iconpreproc is turned on. Otherwise, supply the .ali file from IMOD *after* X-ray correction, iconpreprocessing, and alignment with IMOD. @ 
e2tomo_icongpu.py @ ['--tltfile'] @ None @ str @ default=None. .tlt file from IMOD. @ 
e2tomo_icongpu.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2tomo_icongpu.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2tomo_mwfill.py @ ['--train'] @ None @ str @ train on tomo @ 
e2tomo_mwfill.py @ ['--boxsz'] @ 128 @ int @ box size @ 
e2tomo_mwfill.py @ ['--gpuid'] @ None @ int @ gpu id @ 
e2tomo_mwfill.py @ ['--nsample'] @ 2000 @ int @ number of samples @ 
e2tomo_mwfill.py @ ['--learnrate'] @ 0.0002 @ float @ learning rate @ 
e2tomo_mwfill.py @ ['--load'] @ None @ str @ load model @ 
e2tomo_mwfill.py @ ['--applyto'] @ None @ str @ apply to tomo @ 
e2tomo_showali.py @ ['--path'] @  @ str @ path to tomorecon_xx directory to examine fiducial error. @ 
e2tomo_showali.py @ ['--ppid'] @ -2 @ int @ ppid @ 
e2tomo_stackframes.py @ ['--apix'] @ 0.0 @ float @ default=0.0 (not used). Reset the apix on the header of each image to this value. @ 
e2tomo_stackframes.py @ ['--extension'] @ .mrc @ str @ default=.mrc. Valid choices are .mrcs, .hdf, .tiff @ 
e2tomo_stackframes.py @ ['--inputstring'] @ .mrc @ str @ default=.mrc. String common to all images to be processed. E.g., with '.mrc' as the default, all files in the directory ending in '.mrc' (or containing this as part of the filename) will be analyzed. @ 
e2tomo_stackframes.py @ ['--nframes'] @ 0 @ int @ default=0 (not used). Number of expected frames per tilt angle, used to check whether errors occur in the stacking of images. @ 
e2tomo_stackframes.py @ ['--outputstem'] @ stack @ str @ default=stack. Output filename stem/root to write stacked frames out to; e.g., "stack_01", "stack_02", "stack_03", etc. Explicitly choose an extension/format by supplying --extension; e.g., --extension=.hdf, and the output will be 'stack_01_angle+02.hdf','stack_02_angle+00.hdf','stack_03_angle-02.hdf', etc, etc. @ 
e2tomo_stackframes.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tomo_stackframes.py @ ['--twodstack'] @ False @ None @ default=False (not used). Produces a stack of 2D images (Z number of images of X,Y size under the same "virutal stack" file name). By default, the output stack will be a 3D stack (a single image of size X,Y,Z, where Z is equal to the number of stacked frames). @ 
e2tomo_stackframes.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2tomo_stackframes.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2tomo_tiltstacker.py @ ['--anglesindxinfilename'] @ None @ int @ Default=None. The filename of the images will be split at any occurence of the following delimiters: '_', '-', '+', '[' , ']' , ',' , ' ' (the two last ones are a comma and a blank space). Provide the index (position) of the angle in the split filename. For example, if the filename of an image is "my_specimen-oct-10-2015_-50_deg-from_k2 camera.mrc", it will be split into ['my','specimen','oct','10','2015','','50','deg','from','k2','camera','mrc']. The angle '-50', is at position 6 (starting from 0). Therefore, you would provide --anglesindxinfilename=6, assuming all images to be stacked/processed are similarly named. No worries about the minus sign disappearing. The program will look at whether there's a minus sign immediately preceeding the position where the angle info is. @ 
e2tomo_tiltstacker.py @ ['--apix'] @ 0.0 @ float @ True apix of images to be written on final stack. @ 
e2tomo_tiltstacker.py @ ['--exclude_extremes'] @ False @ None @ Default=False. Will exclude images with a mean value 3 standard deviations away from the "mean of means" of all images. @ 
e2tomo_tiltstacker.py @ ['--highesttilt'] @ 0.0 @ float @ Highest tilt angle. If not supplied, it will be assumed to be 1* --tiltrange. @ 
e2tomo_tiltstacker.py @ ['--input'] @ None @ str @ String common all files to process. For example, to process all .mrc files in a directory, you would run e2tomo_tiltstacker.py --input=.mrc <parameters>. @ 
e2tomo_tiltstacker.py @ ['--lowesttilt'] @ 0.0 @ float @ Lowest tilt angle. If not supplied, it will be assumed to be -1* --tiltrange. @ 
e2tomo_tiltstacker.py @ ['--path'] @ tomostacker @ str @ Directory to store results in. The default is a numbered series of directories containing the prefix 'sptstacker'; for example, sptstacker_02 will be the directory by default if 'sptstacker_01' already exists. @ 
e2tomo_tiltstacker.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tomo_tiltstacker.py @ ['--precheckfiles'] @ False @ None @ "Make sure that only valid images found by --input=* are processed -if unreadable or bad images are fed to the program, it might crash. @ 
e2tomo_tiltstacker.py @ ['--stackregardless'] @ False @ None @ "Stack images found with the common string provided through --stem2stack, even if the number of images does not match the predicted number of tilt angles. @ 
e2tomo_tiltstacker.py @ ['--tag'] @ None @ str @ "String to append to the beginning of the tiltseries output filename. The default is filename is 'stack.st'; if tag=xxx, the output will be 'xxx_stack.st'  @ 
e2tomo_tiltstacker.py @ ['--tiltrange'] @ 0.0 @ float @ If provided, this will make --lowesttilt=-1*tiltrange and --highesttilt=tiltrange. If the range is asymmetric, supply --lowesttilt and --highesttilt directly. @ 
e2tomo_tiltstacker.py @ ['--tiltstep'] @ 0.0 @ float @ Step between tilts. Required if using --stem2stack. @ 
e2tomo_tiltstacker.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2tomo_tiltstacker.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2tomogram.py @ ['--alltiltseries'] @ False @ None @ Use all tilt series in the folder. Acceptable file extensions include hdf, mrc, mrcs, st. @ 
e2tomogram.py @ ['--zeroid'] @ -1 @ int @ Index of the center tilt. Ignored when rawtlt is provided. @ 
e2tomogram.py @ ['--tltstep'] @ 2.0 @ float @ Step between tilts. Ignored when rawtlt is provided. Default is 2.0. @ 
e2tomogram.py @ ['--rawtlt'] @  @ str @ Specify a text file contains raw tilt angles. Will look for files with the same name as the tilt series if a directory is provided @ 
e2tomogram.py @ ['--mdoc'] @  @ str @ Specify a SerialEM .mdoc file or a folder containing same-named .mdoc files @ 
e2tomogram.py @ ['--npk'] @ 20 @ int @ Number of landmarks to use (such as gold fiducials). Default is 20. @ 
e2tomogram.py @ ['--tltax'] @ None @ float @ Angle of the tilt axis. Note the angle stored internally will have an opposite sign. The program will calculate one if this option is not provided. @ 
e2tomogram.py @ ['--tltkeep'] @ 0.9 @ float @ Fraction of tilts to keep in the reconstruction. @ 
e2tomogram.py @ ['--tltrange'] @ None @ str @ Include only tilts between 'START' and 'STOP', i.e. -40.0,40.0. Default behavior is to include all tilts. @ 
e2tomogram.py @ ['--outsize'] @ 1k @ str @ Size of output tomograms. choose from 1k, 2k and 4k. default is 1k @ 
e2tomogram.py @ ['--niter'] @ 2,1,1,1 @ str @ Number of iterations for bin8, bin4, bin2 images. Default if 2,1,1,1 @ 
e2tomogram.py @ ['--bytile'] @ False @ None @ make final tomogram by tiles..  @ 
e2tomogram.py @ ['--load'] @ False @ None @ load existing tilt parameters. @ 
e2tomogram.py @ ['--notmp'] @ False @ None @ Do not write temporary files. @ 
e2tomogram.py @ ['--pkkeep'] @ 0.9 @ float @ Fraction of landmarks to keep in the tracking. @ 
e2tomogram.py @ ['--compressbits'] @ -1 @ int @ Number of bits of precision in output tomogram with lossless compression. -1 -> uncompressed float @ 
e2tomogram.py @ ['--clipz'] @ -1 @ int @ Z thickness of the final tomogram output. default is -1, (5/16 of tomogram length) @ 
e2tomogram.py @ ['--bxsz'] @ 32 @ int @ Box size of the particles for tracking. Default is 32. Maybe helpful to use a larger one for fiducial-less cases.. @ 
e2tomogram.py @ ['--pk_maxval'] @ -5.0 @ float @ Maximum Density value of landmarks (n sigma). Default is -5 @ 
e2tomogram.py @ ['--pk_mindist'] @ 0.125 @ float @ Minimum distance between landmarks, as fraction of micrograph length. Default is 0.125 @ 
e2tomogram.py @ ['--correctrot'] @ False @ None @ correct for global rotation and position sample flat in tomogram. @ 
e2tomogram.py @ ['--filterto'] @ 0.45 @ float @ filter to abs. @ 
e2tomogram.py @ ['--extrapad'] @ False @ None @ Use extra padding for tilted reconstruction. slower and cost more memory, but reduce boundary artifacts when the sample is thick @ 
e2tomogram.py @ ['--moretile'] @ False @ None @ Sample more tiles during reconstruction. Slower, but reduce boundary artifacts when the sample is thick @ 
e2tomogram.py @ ['--rmbeadthr'] @ -1 @ float @ Density value threshold (of sigma) for removing beads. high contrast objects beyond this value will be removed. default is -1 for not removing. try 10 for removing fiducials @ 
e2tomogram.py @ ['--threads'] @ 12 @ int @ Number of threads @ 
e2tomogram.py @ ['--tmppath'] @ None @ str @ Temporary path @ 
e2tomogram.py @ ['--verbose', '-v'] @ 0 @ int @ Verbose @ 
e2tomogram.py @ ['--verbose', '-v'] @ 0 @ int @ Verbose @ 
e2tomogram.py @ ['--noali'] @ False @ None @ skip initial alignment @ 
e2tomogram.py @ ['--dryrun'] @ False @ None @ skip final reconstruction @ 
e2tomogram.py @ ['--patchtrack'] @ -1 @ int @ use patch tracking before landmark based alignment. input 0/1/2 as the number of patch tracking iterations. @ 
e2tomogram.py @ ['--posz'] @ False @ None @ auto positioning along z axis @ 
e2tomogram.py @ ['--xdrift'] @ False @ None @ apply extra correction for drifting along x axis @ 
e2tomogram.py @ ['--ppid'] @ -2 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tomogram.py @ ['--reconmode'] @ trilinear @ str @ Intepolation mode for reconstruction. default is trilinear. check e2help.py for details. Not recommended to change. @ 
e2tomogram.py @ ['--maxshift'] @ 0.35 @ float @ Maximum shift between tilt(/image size). default is 0.35 @ 
e2tomogram.py @ ['--highpass'] @ 3 @ int @ initial highpass filter for alignment in pixels. default if 3 @ 
e2tomogram.py @ ['--badone'] @ False @ None @ Remove one bad tilt during coarse alignment. seem to work better with smaller maxshift... @ 
e2tomogram.py @ ['--flip'] @ False @ None @ Flip the tomogram by rotating the tilt axis. need --load existing alignment @ 
e2tomogram.py @ ['--autoclipxy'] @ False @ None @ Optimize the x-y shape of the tomogram to fit in the tilt images. only works in bytile reconstruction. useful for non square cameras. @ 
e2tomopreproc.py @ ['--path'] @  @ str @ Directory to store results in.    The default is a numbered series of directories containing the prefix 'tomopreproc';   for example, tomopreproc_02 will be the directory by default if 'tomopreproc_01'    already exists. @ 
e2tomopreproc.py @ ['--input'] @  @ str @ "tiltseries to process. redundant with --tiltseries, or with providing images as arguments (separated by a space: e2tomopreproc.py stack1.hdf stack2.hdf), but --input takes precedence. @ 
e2tomopreproc.py @ ['--tiltseries'] @  @ str @ "tiltseries to process. redundant with --input @ 
e2tomopreproc.py @ ['--tltfile'] @  @ str @ ".tlt file containing the tilt angles for --tiltseries @ 
e2tomopreproc.py @ ['--outmode'] @  @ str @ All EMAN2 programs write images with 4-byte floating point values when possible by default. This allows specifying an alternate format when supported: float, int8, int16, int32, uint8, uint16, uint32. Values are rescaled to fill MIN-MAX range. @ 
e2tomopreproc.py @ ['--dontcleanup'] @ False @ None @ If specified, intermediate files will be kept. @ 
e2tomopreproc.py @ ['--clip'] @  @ str @ Default=None. This resizes the 2-D images in the tilt series. If one number is provided, then x and y dimensions will be made the same. To specify both dimensions, supply two numbers, --clip=x,y. Clipping will be about the center of the image. @ 
e2tomopreproc.py @ ['--shrink'] @ 0.0 @ float @ Default=0.0 (no shrinking). Can use decimal numbers, larger than 1.0. Optionally shrink the images by this factor. Uses processor math.fft.resample. @ 
e2tomopreproc.py @ ['--threshold'] @  @ str @ Default=None. A threshold processor applied to each image. @ 
e2tomopreproc.py @ ['--erasegold'] @  @ None @ Default=False. Runs erase_gold.py on the stack. @ 
e2tomopreproc.py @ ['--mask'] @  @ str @ Default=None. Masking processor applied to each image. @ 
e2tomopreproc.py @ ['--maskbyangle'] @ False @ None @ Default=False. Requires --tltfile. This will mask out from tilted images the info that isn't present at the 0 tilt angle. It uses the tomo.tiltedgemask processor (type 'e2help.py processors' at the commandline to read a description of the processor and its parameters). Provide --maskbyanglefalloff and --maskbyanglesigma to modify the default parameters. @ 
e2tomopreproc.py @ ['--maskbyanglefalloff'] @ 4 @ int @ Default=4. Number of pixels over which --maskbyangle will fall off to zero. @ 
e2tomopreproc.py @ ['--maskbyanglesigma'] @ 2.0 @ float @ Default=2.0. Number of sigmas for the width of the gaussian fall off in --maskbyangle and --maskbyanglefalloff @ 
e2tomopreproc.py @ ['--normproc'] @  @ str @ Default=None (see 'e2help.py processors -v 10' at the command line). Normalization processor applied to each image. @ 
e2tomopreproc.py @ ['--normalizeimod'] @ False @ None @ Default=False. This will apply 'newstack -float 2' to the input stack. Requires IMOD. @ 
e2tomopreproc.py @ ['--preprocess'] @  @ str @ Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each image. @ 
e2tomopreproc.py @ ['--lowpassfrac'] @ 0.0 @ float @ Default=0.0 (not used). Fraction of Nyquist to lowpass at. The processor used is filter.lowpass.tanh @ 
e2tomopreproc.py @ ['--highpasspix'] @ 0 @ int @ Default=0 (not used). Number of Fourier pixels to apply highpass filter at. The processor used is filter.highpass.gauss. @ 
e2tomopreproc.py @ ['--parallel'] @ thread:1 @ str @ default=thread:1. Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2tomopreproc.py @ ['--prenadminite'] @ 0 @ int @ Default=0. Requires IMOD to be installed. Used to apply prenad filtering to a tiltseries. This is the --minite parameter in IMOD's preNAD program (minimum number of iterations). @ 
e2tomopreproc.py @ ['--prenadmaxite'] @ 0 @ int @ Default=0. Requires IMOD to be installed. Used to apply prenad filtering to a tiltseries. This is the --maxite parameter in IMOD's preNAD program (maximum number of iterations). @ 
e2tomopreproc.py @ ['--prenadsigma'] @ 0 @ int @ Default=0. Requires IMOD to be installed. Used to apply prenad filtering to a tiltseries. This is the --sigma parameter in IMOD's preNAD program (initial sigma for 'smoothing structure tensor'). @ 
e2tomopreproc.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2tomopreproc.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higher number means higher level of verboseness. @ 
e2tomopreproc.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tomoresolution.py @ ['--averager'] @ mean @ str @ The averager used to generate the averages. Default is 'mean'. @ 
e2tomoresolution.py @ ['--sym'] @ c1 @ str @ The recon symmetry @ 
e2tomoresolution.py @ ['--mask'] @ None @ str @ The mask to apply before FSC calculation @ 
e2tomoresolution.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tomoseg_buildtrainset.py @ ['--boxing'] @ False @ None @ Boxing particles. @ 
e2tomoseg_buildtrainset.py @ ['--boxsize'] @ -1 @ int @ Box size in pixels @ 
e2tomoseg_buildtrainset.py @ ['--segment'] @ False @ None @ Segment particles. @ 
e2tomoseg_buildtrainset.py @ ['--output'] @ None @ str @ output file name. Default is the input particle file name plus _seg.hdf @ 
e2tomoseg_buildtrainset.py @ ['--buildset'] @ False @ None @ Segment particles. @ 
e2tomoseg_buildtrainset.py @ ['--particles_raw'] @ None @ str @ Input raw particle file @ 
e2tomoseg_buildtrainset.py @ ['--particles_label'] @ None @ str @ Input labels for particle file @ 
e2tomoseg_buildtrainset.py @ ['--boxes_negative'] @ None @ str @ Input boxes of negative samples @ 
e2tomoseg_buildtrainset.py @ ['--ncopy'] @ 10 @ int @ Number of copies for NEGATIVE samples. (number of copies of particles is calculated accordingly)  @ 
e2tomoseg_buildtrainset.py @ ['--trainset_output'] @ None @ str @ output file name of the training set.Default is the input particle file name plus _trainset.hdf @ 
e2tomoseg_buildtrainset.py @ ['--validset'] @ 0.0 @ float @ Propotion of particles in validation set. Default is 0.2  @ 
e2tomoseg_buildtrainset.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tomoseg_convnet.py @ ['--trainset'] @ None @ None @ Training set. @ 
e2tomoseg_convnet.py @ ['--from_trained'] @ None @ str @ Train from an existing network @ 
e2tomoseg_convnet.py @ ['--nnet'] @ None @ str @ Trained network input (nnet_save_xx.hdf) @ 
e2tomoseg_convnet.py @ ['--nettag'] @  @ str @ Tag of the output neural net file. Will use the tag of good particles in training set by default. @ 
e2tomoseg_convnet.py @ ['--learnrate'] @ 0.0001 @ float @ Learning rate  @ 
e2tomoseg_convnet.py @ ['--niter'] @ 20 @ int @ Training iterations @ 
e2tomoseg_convnet.py @ ['--ncopy'] @ 1 @ int @ Number of copies for each particle @ 
e2tomoseg_convnet.py @ ['--batch'] @ 20 @ int @ Batch size for the stochastic gradient descent. Default is 20. @ 
e2tomoseg_convnet.py @ ['--nkernel'] @ 40,40,1 @ str @ Number of kernels for each layer, from input to output. The number of kernels in the last layer must be 1.  @ 
e2tomoseg_convnet.py @ ['--ksize'] @ 15,15,15 @ str @ Width of kernels of each layer, the numbers must be odd. Note the number of layers should be the same as the nkernel option.  @ 
e2tomoseg_convnet.py @ ['--poolsz'] @ 2,1,1 @ str @ Pooling size for each layer. Note the number of layers should be the same as the nkernel option.  @ 
e2tomoseg_convnet.py @ ['--trainout'] @ False @ None @ Output the result of the training set @ 
e2tomoseg_convnet.py @ ['--training'] @ False @ None @ Doing training @ 
e2tomoseg_convnet.py @ ['--tomograms'] @ None @ str @ Tomograms input. @ 
e2tomoseg_convnet.py @ ['--applying'] @ False @ None @ Applying the neural network on tomograms @ 
e2tomoseg_convnet.py @ ['--outtag'] @  @ str @ Tag of the segmentation output. When left empty, the segmentation will be saved to 'segmentations/<tomogram name>__<neural network tag>_seg.hdf'. When set, the output will be written to 'segmentations/<tomogram name>__<outtag>.hdf' @ 
e2tomoseg_convnet.py @ ['--threads'] @ 12 @ int @ Number of thread to use when applying neural net on test images. Not used during trainning @ 
e2tomoseg_convnet.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tomoseg_convnet.py @ ['--device'] @ cpu @ str @ For Convnet training only. Pick a device to use. chose from cpu, gpu, or gpuX (X=0,1,...) when multiple gpus are available. default is cpu @ 
e2tomoseg_preproc.py @ ['--invert'] @ False @ None @ Invert the contrast of the tomograms in output files (default false). If specified _proctag tomograms will be generated. @ 
e2tomoseg_preproc.py @ ['--proctag'] @ preproc @ None @ Tag added to the name of each tomogram when using the proc options. Default is 'preproc'. @ 
e2tomoseg_preproc.py @ ['--proc1'] @ filter.lowpass.gauss:cutoff_abs=.25 @ None @ If specified _proctag files will be generated. Typical = filter.lowpass.gauss:cutoff_abs=.25 @ 
e2tomoseg_preproc.py @ ['--proc2'] @ filter.highpass.gauss:cutoff_pixels=5 @ None @ If specified _proctag tomograms will be generated. Typical = filter.highpass.gauss:cutoff_pixels=5 @ 
e2tomoseg_preproc.py @ ['--proc3'] @ normalize @ None @ If specified _proctag tomograms will be generated. @ 
e2tomoseg_preproc.py @ ['--proc4'] @ threshold.clampminmax.nsigma:nsigma=3 @ None @ If specified _proctag tomograms will be generated. Typical = threshold.clampminmax.nsigma:nsigma=3 @ 
e2tomoseg_preproc.py @ ['--proc5'] @  @ None @ If specified _proctag tomograms will be generated. @ 
e2tomoseg_preproc.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process, used for cross platform PPID @ 
e2tomoseg_preproc.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2tomoseg_preproc.py @ ['--verbose', '-v'] @ 0 @ int @ verbose level [0-9], higner number means higher level of verboseness @ 
e2tvrecon.py @ ['--tiltseries'] @ None @ None @ The input projections.    Project should usually have the xform.projection header attribute, which is    used for slice insertion @ 
e2tvrecon.py @ ['--tltfile'] @ None @ str @ An IMOD-like .tlt file containing    alignment angles. If specified slices will be inserted using these angles in the    IMOD convention @ 
e2tvrecon.py @ ['--output'] @ threed.hdf @ None @ Output reconstructed    tomogram file name. @ 
e2tvrecon.py @ ['--path'] @ tvrecon_3d @ str @ Directory in which    results will be stored. @ 
e2tvrecon.py @ ['--iter'] @ 10 @ int @ Specify the number of    iterative reconstructions to complete before returning the final reconstructed volume.     The default number is 50. @ 
e2tvrecon.py @ ['--beta'] @ 1.0 @ float @ Specify the total-variation    penalization/regularization weight parameter 'beta'. The default is 5.0. @ 
e2tvrecon.py @ ['--subpix'] @ 1 @ int @ Specify the number of linear    subdivisions used to compute the projection of one image pixel onto a detector pixel. @ 
e2tvrecon.py @ ['--savesinograms'] @ False @ None @ If provided,   this option will save the sinogram for each 2-D slice (along Y) in the reconstruction    to disk. @ 
e2tvrecon.py @ ['--inmemory'] @ False @ None @ If provided,   this option will keep certain files open in memory instead of writing them and   reading from disk every time. While this can be faster, it is very memory-intensive. @ 
e2tvrecon.py @ ['--saveslices'] @ False @ None @ If provided,   this option will save each reconstructed 2-D slice (along Y) to disk. @ 
e2tvrecon.py @ ['--verbose', '-v'] @ 0 @ int @    verbose level [0-9], higher number means higher level of verboseness. @ 
e2tvrecon.py @ ['--verbose', '-v'] @ 0 @ int @    verbose level [0-9], higher number means higher level of verboseness. @ 
e2tvrecon.py @ ['--parallel'] @ thread:1 @ str @ Default=thread:1.    See http://blake.bcm.edu/emanwiki/EMAN2/Parallel @ 
e2tvrecon.py @ ['--ppid'] @ -1 @ int @ Set the PID of the parent process,    used for cross platform PPID. @ 
