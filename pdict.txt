'--ppid' : {'default': -1, 'type': int, 'help': 'Set the PID of the parent process, used for cross platform PPID', },
'--verbose' : {'default': 0, 'type': int, 'help': 'verbose level [0-9], higher number means higher level of verboseness', },
'--path' : {'default': None, 'type': str, 'help': 'Path to a folder where results should be stored. Creates a new folder if none specified (default = m2d_XX)', },
'--sym' : {'default': c1, 'type': str, 'help': 'model symmetry (using sym, if present, speeds thing up a lot), default='c1'', },
'--threads' : {'default': 4, 'type': int, 'help': 'Number of alignment threads to run in parallel on a single computer', },
'--parallel' : {'default': None, 'type': None, 'help': 'parallelism argument', },
'--mask' : {'default': -2, 'type': int, 'help': 'Mask radius', },
'--apix' : {'default': -1, 'type': float, 'help': 'Angstroms per pixel for all images', },
'--input' : {'default': None, 'type': str, 'help': 'The name of the input particle stack', },
'--iter' : {'default': 0, 'type': int, 'help': 'Iteration number within path. Default = start a new iteration', },
'--shrink' : {'default': 0, 'type': int, 'help': 'Shrink the images by an integer, uses math.meanshrink', },
'--output' : {'default': None, 'type': str, 'help': 'The name of the output class stack', },
'--maxres' : {'default': 0, 'type': float, 'help': 'The highest resolution to be fitted (Angstroms)', },
'--align' : {'default': rotate_translate_tree, 'type': str, 'help': 'This is the aligner used to align particles to the previous class average. Default is None.', },
'--keep' : {'default': 1, 'type': float, 'help': 'The fraction of particles to keep in each class.', },
'--debug' : {'default': False, 'type': None, 'help': 'debug mode', },
'--preprocess' : {'default': None, 'type': str, 'help': 'preprocess maps before alignment', },
'--ref' : {'default': None, 'type': str, 'help': 'A reference image to be used in conjunction with --cmp and --multicmp', },
'--compressbits' : {'default': 6, 'type': int, 'help': 'Bits to keep when writing images with compression. 0->lossless floating point. Default 6', },
'--clip' : {'default': None, 'type': str, 'help': 'Specify the output size in pixels xsize,ysize[,xcenter,ycenter], images can be made larger or smaller.', },
'--invert' : {'default': False, 'type': None, 'help': 'If writing outputt inverts pixel intensities', },
'--normproc' : {'default': normalize.edgemean, 'type': str, 'help': 'Normalization processor applied to particles before alignment. Default is normalize.edgemean. If you want to turn this option off specify 'None'', },
'--cmp' : {'default': ccc, 'type': str, 'help': 'The comparitor used to generate quality scores for the purpose of particle exclusion in classes, strongly linked to the keep argument.', },
'--cs' : {'default': -1, 'type': float, 'help': 'Microscope Cs (spherical aberation)', },
'--lowpass' : {'default': 1.11, 'type': float, 'help': 'Multiply lowpass filter frequency by this constant when filtering noise image. Default is 1.11.', },
'--maxshift' : {'default': 2, 'type': int, 'help': 'Maximun amount to shift the images during alignment', },
'--voltage' : {'default': -1, 'type': float, 'help': 'Microscope voltage in KV', },
'--aligncmp' : {'default': ccc, 'type': str, 'help': 'The comparitor used for the --align aligner. Default is dot.', },
'--boxsize' : {'default': -1, 'type': int, 'help': 'Box size in pixels', },
'--breaksym' : {'default': False, 'type': None, 'help': 'If selected, reconstruction will be asymmetric with sym= specifying a known pseudosymmetry, not an imposed symmetry.', },
'--gui' : {'default': False, 'type': None, 'help': 'If set will open an interactive plot with the results', },
'--minres' : {'default': 0, 'type': float, 'help': 'The lowest resolution to be fitted (Angstroms)', },
'--niter' : {'default': 10, 'type': int, 'help': 'number of iterations', },
'--saveali' : {'default': False, 'type': None, 'help': 'Save a stack file (aliptcls_XX.hdf) containing the aligned particles.', },
'--threshold' : {'default': , 'type': str, 'help': 'EMAN2 processor to be used   to threshold the img2process. See available thresholds by typing    e2help.py processors --verbose=10   at the command line.', },
'--averager' : {'default': mean, 'type': str, 'help': 'The type of averager used to produce the class average.', },
'--highpass' : {'default': , 'type': str, 'help': 'A highpass filtering processor (as in e2proc3d.py) to be applied to the edited img2process.', },
'--setsf' : {'default': , 'type': str, 'help': '', },
'--subset' : {'default': 0, 'type': int, 'help': 'Default=0 (not used). Apply algorithm to only a subset of images in each stack file.', },
'--ac' : {'default': 10, 'type': float, 'help': 'Amplitude contrast (percentage, default=10)', },
'--exclude' : {'default': None, 'type': str, 'help': 'The name of a database containing a list of exclusion keys', },
'--force' : {'default': False, 'type': None, 'help': 'This will force an action that would normally fail due to failed checks.', },
'--ralign' : {'default': None, 'type': str, 'help': 'This is the second stage aligner used to refine the first alignment. This is usually the 'refine' aligner.', },
'--maskfile' : {'default': None, 'type': str, 'help': 'File containing a mask to apply to the particles before normalization', },
'--pad' : {'default': None, 'type': str, 'help': 'Will zero-pad images to the specifed size (x,y) or (x,x) prior to reconstruction. If not specified no padding occurs.', },
'--raligncmp' : {'default': ccc, 'type': str, 'help': 'The comparitor used by the second stage aligner.', },
'--check' : {'default': False, 'type': None, 'help': 'Check for self-consistency and errors in the structure of specified databases', },
'--mass' : {'default': 0, 'type': float, 'help': 'The ~mass of the particle in kilodaltons, used to run normalize.bymass. Due to resolution effects, not always the true mass.', },
'--mode' : {'default': score, 'type': str, 'help': 'Which variable to histogram, score, coverage, alpha, tx, ty. default=score', },
'--ncls' : {'default': -1, 'type': int, 'help': 'Number of classes to generate', },
'--postprocess' : {'default': None, 'type': str, 'help': 'postprocessor to be applied to the 3D volume once the reconstruction is completed. There can be more than one postprocessor, and they are applied in the order in which they are specified. See e2help.py processors for a complete list of available processors.', },
'--process' : {'default': None, 'type': str, 'help': 'A processor to apply to the particle data before classifying', },
'--simcmp' : {'default': optsub:maxres=12, 'type': str, 'help': 'Default=auto. The name of a 'cmp' to be used in comparing the aligned images', },
'--tltfile' : {'default': , 'type': str, 'help': 'File containing a list of    tilt angles corresponding to the tilt angles of images 0 to n of an aligned   tilt series', },
'--tophat' : {'default': False, 'type': None, 'help': 'If set, the local filter is a tophat filter, otherwise a local Wiener filter is applied', },
'--center' : {'default': xform.center, 'type': str, 'help': 'If the default centering algorithm (xform.center) doesn't work well, you can specify one of the others here (e2help.py processor center), or the word 'nocenter' for no centering', },
'--keepsig' : {'default': False, 'type': None, 'help': 'Causes the keep argument to be interpreted in standard deviations.', },
'--label' : {'default': tomobox, 'type': str, 'help': 'Load previous contour segmentation.', },
'--mirror' : {'default': False, 'type': None, 'help': 'Will generate a mirrored copy of the edited img2process.', },
'--nbasis' : {'default': -1, 'type': int, 'help': 'Will use the first n basis images from the input, excluding the mean if present', },
'--phaseplate' : {'default': False, 'type': None, 'help': 'Include phase/amplitude contrast in CTF estimation. For use with hole-less phase plates.', },
'--plots' : {'default': False, 'type': None, 'help': 'Default=False. Turn this option on to generatea plot of the ccc scores during each iteration. Running on a cluster or via ssh remotely might not support plotting.', },
'--prefilt' : {'default': False, 'type': None, 'help': 'Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison', },
'--radius' : {'default': 0, 'type': float, 'help': 'Default=0 (which means it's not used by default). Hydrodynamic radius of the particle in Angstroms. This will be used to automatically calculate the angular steps to use in search of the best alignment. Make sure the apix is correct on the particles' headers, sine the radius will be converted from Angstroms to pixels. Then, the fine angular step is equal to 360/(2*pi*radius), and the coarse angular step 4 times that.', },
'--simalign' : {'default': rotate_translate_flip, 'type': str, 'help': 'Default=auto. The name of an 'aligner' to use prior to comparing the images', },
'--step' : {'default': 0,1, 'type': str, 'help': 'Specify <init>,<step>[,<max>]. Processes only a subset of the input data. For example, 0,2 would process only the even numbered particles', },
'--classalign' : {'default': rotate_translate_tree, 'type': str, 'help': 'If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average.', },
'--classaligncmp' : {'default': ccc, 'type': str, 'help': 'This is the name and parameters of the comparitor used by the fist stage aligner  Default is dot.', },
'--classaverager' : {'default': ctf.weight.autofilt, 'type': str, 'help': 'The averager used to generate the class averages. Default is 'mean'.', },
'--classcmp' : {'default': ccc, 'type': str, 'help': 'The name and parameters of the comparitor used to generate similarity scores, when class averaging. Default is ccc'', },
'--classiter' : {'default': 5, 'type': int, 'help': 'Number of iterations to use when making class-averages (default=5)', },
'--classkeep' : {'default': 0.85, 'type': float, 'help': 'The fraction of particles to keep in each class, based on the similarity score generated by the --cmp argument (default=0.85).', },
'--classkeepsig' : {'default': False, 'type': None, 'help': 'Change the keep ('--keep') criterion from fraction-based to sigma-based.', },
'--classmx' : {'default': None, 'type': str, 'help': 'The name of the classification matrix specifying how particles in 'input' should be grouped. If omitted, all particles will be averaged.', },
'--classnormproc' : {'default': normalize.edgemean, 'type': str, 'help': 'Normalization applied during class averaging', },
'--classralign' : {'default': None, 'type': str, 'help': 'The second stage aligner which refines the results of the first alignment in class averaging. Default is None.', },
'--classraligncmp' : {'default': ccc, 'type': str, 'help': 'The comparitor used by the second stage aligner in class averageing. Default is dot:normalize=1.', },
'--defocus' : {'default': 10000, 'type': float, 'help': '(Expert Option) Defocus in A', },
'--defocusmax' : {'default': 4, 'type': float, 'help': 'Maximum autofit defocus', },
'--defocusmin' : {'default': 0.6, 'type': float, 'help': 'Minimum autofit defocus', },
'--goldcontinue' : {'default': False, 'type': None, 'help': 'Will use even/odd refs corresponding to specified reference to continue refining without phase randomizing again', },
'--learnrate' : {'default': 0.0001, 'type': float, 'help': 'learning rate for model training only. Default is 1e-4.', },
'--maskalign' : {'default': None, 'type': str, 'help': 'Mask file applied to 3D alignment reference in each iteration. Not applied to the average, which will follow normal masking routine.', },
'--maxang' : {'default': 30, 'type': float, 'help': 'Maximum angular difference for the refine mode. default is 30', },
'--maxtilt' : {'default': 90, 'type': float, 'help': 'Explicitly zeroes data beyond specified tilt angle. Assumes tilt axis exactly on Y and zero tilt in X-Y plane. Default 90 (no limit).', },
'--model' : {'default': , 'type': str, 'help': 'load from an existing model file', },
'--mult' : {'default': None, 'type': float, 'help': 'Multiply image by a constant. mult=-1 to invert contrast.', },
'--nofilecheck' : {'default': False, 'type': None, 'help': 'Turns file checking off in the check functionality - used by e2refine.py.', },
'--orientgen' : {'default': eman:delta=9.0:inc_mirror=0:perturb=1, 'type': str, 'help': 'The type of orientation generator. Default is eman:delta=9.0:inc_mirror=0:perturb=1. See e2help.py orientgens', },
'--outmode' : {'default': float, 'type': str, 'help': 'All EMAN2 programs write images with 4-byte floating point values when possible by default. This allows specifying an alternate format when supported (float, int8, int16, int32, uint8, uint16, uint32). Values are rescaled to fill MIN-MAX range.', },
'--preavgproc1' : {'default': , 'type': str, 'help': 'Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.)', },
'--preavgproc2' : {'default': , 'type': str, 'help': 'Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.)', },
'--ptclin' : {'default': None, 'type': str, 'help': 'particle input', },
'--refine' : {'default': None, 'type': None, 'help': 'Specify a refinement directory as an alternative to providing classmx files. Even and odd subsets will be interleaved based on input set.', },
'--res' : {'default': 2.8, 'type': float, 'help': 'Resolution in A, equivalent to Gaussian lowpass with 1/e width at 1/res', },
'--savesteps' : {'default': False, 'type': None, 'help': 'Default=False. If set, will save the average after each iteration to class_#.hdf. Each class in a separate file. Appends to existing files.', },
'--scale' : {'default': None, 'type': float, 'help': 'Scale by specified scaling factor. Clip must also be specified to change the dimensions of the output map.', },
'--search' : {'default': 10, 'type': int, 'help': 'maximum extent of the translational search, default=10', },
'--simaligncmp' : {'default': ccc, 'type': str, 'help': 'Default=auto. Name of the aligner along with its construction arguments', },
'--simralign' : {'default': None, 'type': str, 'help': 'Default=auto. The name and parameters of the second stage aligner which refines the results of the first alignment', },
'--simraligncmp' : {'default': ccc, 'type': str, 'help': 'Default=auto. The name and parameters of the comparitor used by the second stage aligner.', },
'--smooth' : {'default': 40, 'type': float, 'help': 'smoothing factor for subtlt.', },
'--tiltrange' : {'default': 60, 'type': float, 'help': 'Maximum angular value at which the highest tilt picture will be simulated. Projections will be simulated from -tiltrange to +titlrange. For example, if simulating a tilt series collected from -60 to 60 degrees, enter a --tiltrange value of 60. Note that this parameter will determine the size of the missing wedge.', },
'--tiltseries' : {'default': , 'type': str, 'help': 'Aligned tilt series. File format must be MRC and must have .mrc or .st or .ali extension.', },
'--tomo' : {'default': False, 'type': None, 'help': 'If checked, aligned frames will be placed in a tiltseries located in the 'tiltseries' directory. Otherwise, aligned sums will populate the 'micrographs_mrc' directory.', },
'--transonly' : {'default': False, 'type': None, 'help': 'translational alignment only, for prealigned particles', },
'--tweak' : {'default': False, 'type': None, 'help': 'WARNING: BUGGY. This will perform a final alignment with no downsampling [without using --shrink or --shrinkfine] if --shrinkfine > 1.', },
'--verbose' : {'default': 0, 'type': int, 'help': 'verbose level [0-9], higher number means higher level of verboseness', },
'--weighbyscore' : {'default': False, 'type': None, 'help': 'Default=False. This option will weigh the contribution of each subtomogram to the average by score/bestscore.', },
'--weighbytiltaxis' : {'default': , 'type': str, 'help': 'Default=None. A,B, where A is an integer number and B a decimal. A represents the location of the tilt axis in the tomogram in pixels (eg.g, for a 4096x4096xZ tomogram, this value should be 2048), and B is the weight of the particles furthest from the tomogram. For example, --weighbytiltaxis=2048,0.5 means that praticles at the tilt axis (with an x coordinate of 2048) will have a weight of 1.0 during averaging, while the distance in the x coordinates of particles not-on the tilt axis will be used to weigh their contribution to the average, with particles at the edge(0+radius or 4096-radius) weighing 0.5, as specified by the value provided for B.', },
'--allparticles' : {'default': False, 'type': None, 'help': 'Will process all particle stacks stored in the particles subdirectory (if specified, list of files will be ignored)', },
'--ampcont' : {'default': 0.1, 'type': float, 'help': '(Expert Option) Amplitude Constrast. 10%% = .1', },
'--astigmatism' : {'default': False, 'type': None, 'help': 'Includes astigmatism in automatic fitting', },
'--autocenter' : {'default': , 'type': str, 'help': 'Default=None. Autocenters each averaged pair during initial average generation with --btref and --hacref. Will also autocenter the average of all particles after each iteration of iterative refinement. Options are --autocenter=xform.centerofmass (self descriptive), or --autocenter=xform.centeracf, which applies auto-convolution on the average.', },
'--automask3d' : {'default': None, 'type': str, 'help': 'Default=auto. Specify as a processor, eg - mask.auto3d:threshold=1.1:radius=30:nshells=5:nshellsgauss=5.', },
'--automaskexpand' : {'default': -1, 'type': int, 'help': 'Number of voxels of post-threshold expansion in the mask, for use when peripheral features are truncated. (default=shrunk boxsize/20)', },
'--average' : {'default': False, 'type': None, 'help': 'Average the particles within each class', },
'--box' : {'default': 0, 'type': int, 'help': 'Box size in pixels', },
'--boxsz' : {'default': 32, 'type': int, 'help': 'Box size', },
'--classes' : {'default': None, 'type': str, 'help': 'Generate class-averages directly. No bad particle exclusion or iteration. Specify filename.', },
'--classrefsf' : {'default': False, 'type': None, 'help': 'Use the setsfref option in class averaging to produce better filtered averages.', },
'--cutoff' : {'default': 0.143, 'type': float, 'help': 'fsc cutoff. default is 0.143', },
'--even' : {'default': False, 'type': None, 'help': 'Used by EMAN2 when running eotests. Includes only even numbered particles in class averages.', },
'--falign' : {'default': None, 'type': str, 'help': 'Default=None. This is the second stage aligner used to fine-tune the first alignment.', },
'--faligncmp' : {'default': ccc.tomo.thresh, 'type': str, 'help': 'Default=ccc.tomo.thresh. The comparator used by the second stage aligner.', },
'--fromscratch' : {'default': False, 'type': None, 'help': 'Force refitting of CTF from scratch, ignoring any previous fits.', },
'--highpassfine' : {'default': , 'type': str, 'help': 'Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging.', },
'--last' : {'default': -1, 'type': int, 'help': 'Last image to include in the plot.', },
'--lowmem' : {'default': False, 'type': None, 'help': 'Causes images to be loaded as needed to reduce memory usage at the cost of time.', },
'--lowpassfine' : {'default': , 'type': str, 'help': 'Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging.', },
'--m3dpostprocess' : {'default': None, 'type': str, 'help': 'Default=none. An arbitrary post-processor to run after all other automatic processing. Maps are autofiltered, so a low-pass filter should not normally be used here.', },
'--maxalt' : {'default': 180, 'type': float, 'help': 'Maximum alignment altitude to include. Deafult=180', },
'--multfile' : {'default': None, 'type': str, 'help': 'Multiplies the volume by another volume of identical size. This can be used to apply masks, etc.', },
'--no_wt' : {'default': False, 'type': None, 'help': 'This argument turns automatic weighting off causing all images to be weighted by 1. If this argument is not specified images inserted into the reconstructed volume are weighted by the number of particles that contributed to them (i.e. as in class averages), which is extracted from the image header (as the ptcl_repr attribute).', },
'--normproj' : {'default': False, 'type': None, 'help': 'Normalize the projections resulting from 'project', such that the length of each vector is 1', },
'--npeakstorefine' : {'default': 4, 'type': int, 'help': 'Default=1. The number of best coarse alignments to refine in search of the best final alignment. Default=1.', },
'--outsize' : {'default': None, 'type': str, 'help': 'Defines the dimensions (x,y,z) or (x,x,x) of the final volume written to disk, if ommitted, size will be based on unpadded input size', },
'--pad2d' : {'default': 0, 'type': float, 'help': 'Padding factor to zero-pad   the 2d images in the tilt series prior to reconstruction.   (The final reconstructed subvolumes will be cropped to the original size).', },
'--pad3d' : {'default': 0, 'type': float, 'help': 'Padding factor to zero-pad   the reconstruction volume. (The final reconstructed subvolumes will be cropped to    the original size).', },
'--precision' : {'default': 1, 'type': float, 'help': 'Default=1.0. Precision in pixels to use when figuring out alignment parameters automatically using --radius. Precision would be the number of pixels that the the edge of the specimen is moved (rotationally) during the finest sampling, --falign. If precision is 1, then the precision of alignment will be that of the sampling (apix of your images) times the --shrinkfine factor specified.', },
'--prectf' : {'default': False, 'type': None, 'help': 'Apply particle CTF to each reference before alignment', },
'--preprocessfine' : {'default': , 'type': str, 'help': 'Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging.', },
'--procfinelikecoarse' : {'default': False, 'type': None, 'help': 'If you supply this parameters, particles for fine alignment will be preprocessed identically to particles for coarse alignment by default. If you supply this, but want specific parameters for preprocessing particles for also supply: fine alignment, nd supply fine alignment parameters, such as --lowpassfine, --highpassfine, etc; to preprocess the particles for FINE alignment differently than for COARSE alignment.', },
'--ptclout' : {'default': None, 'type': str, 'help': 'particle output', },
'--randomizewedge' : {'default': False, 'type': None, 'help': 'Default=False. This parameter is EXPERIMENTAL. It randomizes the position of the particles BEFORE alignment, to minimize missing wedge bias and artifacts during symmetric alignment where only a fraction of space is scanned', },
'--recon' : {'default': fourier, 'type': None, 'help': 'Reconstructor to use see e2help.py reconstructors -v. Default is fourier:mode=gauss_2', },
'--reconstructor' : {'default': fourier:mode=gauss_2, 'type': str, 'help': 'Default=fourier:mode=gauss_2. The reconstructor to use to reconstruct the tilt series into a tomogram. Type 'e2help.py reconstructors' at the command line to see all options and parameters available. To specify the interpolation scheme for the fourier reconstruction, specify 'mode'. Options are 'nearest_neighbor', 'gauss_2', 'gauss_3', 'gauss_5', 'gauss_5_slow', 'gypergeom_5', 'experimental'. For example --reconstructor=fourier:mode=gauss_5', },
'--refinentry' : {'default': 8, 'type': int, 'help': 'number of tests for refine mode. default is 8', },
'--restarget' : {'default': -1, 'type': float, 'help': 'The specified target resolution to avoid underfiltering artifacts.', },
'--resume' : {'default': False, 'type': None, 'help': 'This will cause a check of the files in the current directory, and the refinement will resume after the last completed iteration. It's ok to alter other parameters.', },
'--saveallalign' : {'default': False, 'type': None, 'help': 'Default=False. If set, will save the alignment parameters after each iteration', },
'--searchfine' : {'default': 2, 'type': int, 'help': '"Default=2. During FINE alignment translational search in X, Y and Z, in pixels. Default=2. This WILL overwrite any search: provided through --falign, EXCEPT if you provide --searchfine=2, which is the default. In general, just avoid providing search twice (through here and through the fine aligner --falign). If you do, just be careful to make them consistent to minimize misinterpretation and error.', },
'--sep' : {'default': 1, 'type': int, 'help': 'The number of classes a particle can contribute towards (default is 1)', },
'--shrinkfine' : {'default': 1, 'type': int, 'help': 'Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for refine alignment.', },
'--suffix' : {'default': _ptcls, 'type': str, 'help': 'suffix which is appended to the names of output particle and coordinate files', },
'--tilesize' : {'default': 512, 'type': int, 'help': 'Tile size to use for strips   when --autofit is provided.', },
'--tiltaxis' : {'default': False, 'type': None, 'help': 'Do a tiltaxis correction(Takes into account variations in tilt axis from micrograph to micrograph. Only possible if e2RCTboxer was used for particle picking', },
'--add' : {'default': None, 'type': float, 'help': 'Adds a constant 'f' to the densities', },
'--applysym' : {'default': c1, 'type': str, 'help': 'Symmetry to apply to the structure after classification.', },
'--autocentermask' : {'default': , 'type': str, 'help': 'Default=None. Masking processor to apply before autocentering. See 'e2help.py processors -v 10' at the command line.', },
'--autocenterpreprocess' : {'default': False, 'type': None, 'help': 'Default=False. This will apply a highpass filter at a frequency of half the box size times the apix, shrink by 2, and apply a low pass filter at half nyquist frequency to any computed average for autocentering purposes if --autocenter is provided. Default=False.', },
'--automask' : {'default': False, 'type': None, 'help': 'Applies a 2-D automask before centering. Can help with negative stain data, and other cases where centering is poor.', },
'--bfactor' : {'default': 1000, 'type': int, 'help': 'Default=1000. Bfactor or   temperature factor to use. Supply it to replace the value   in ctfparamsfile(s), or if ctfparamsfile(s) are lacking altogether.', },
'--cmpdiff' : {'default': False, 'type': None, 'help': 'Compare using the difference of the two children', },
'--constbfactor' : {'default': -1, 'type': float, 'help': 'Set B-factor to fixed specified value, negative value autofits', },
'--coords' : {'default': , 'type': str, 'help': 'Specify box file with x and y gold coordinates. Must follow standard box file format (x<tab>y<tab>xsize<ysize>) although box sizes are ignored.', },
'--cshrink' : {'default': 0, 'type': int, 'help': 'If the tomogram was PREVIOUSLY shrunk, --cshrink is the factor by which the tomogram supplied through --tomogram was shrunk with respect to                the raw (unshrunk) tomogram. This CAN work in conjuction with --shrinktomo, so be careful. If both parameters are specified,               the coordinates found by the autoboxer will be multiplied by BOTH factors.', },
'--cuda' : {'default': False, 'type': None, 'help': 'Use CUDA for the alignment step.', },
'--curdefocusfix' : {'default': False, 'type': None, 'help': 'Fixes the defocus at the current determined value (if any) (+-.001 um), but recomputes SSNR, etc.', },
'--delta' : {'default': 30, 'type': float, 'help': 'step size for the orientation generator, default=30.0', },
'--device' : {'default': cpu, 'type': str, 'help': 'For Convnet training only. Pick a device to use. chose from cpu, gpu, or gpuX (X=0,1,...) when multiple gpus are available. default is cpu', },
'--extract' : {'default': False, 'type': None, 'help': 'If set, will also produce a .txt file for plotting with all of the per-particle statistics', },
'--extrapad' : {'default': False, 'type': None, 'help': 'If particles were boxed more tightly than EMAN requires, this will add some extra padding, but only to processed output particles', },
'--filterbyfsc' : {'default': False, 'type': None, 'help': 'Default=False. If on, this parameter will use dynamic FSC filtering. --lowpass will be used to build initial references if no --ref supplied, then, the FSC between the even and odd initial references will be used to filter the data during preprocessing. If --ref is supplied, --lowpass will be used during the first iteration to align the particles against the reference. Thereafter, the FSC between the most current particle average and the original reference (--ref) will be used in the next iteration.', },
'--first' : {'default': -1, 'type': int, 'help': 'First image to include in the plot.', },
'--fp' : {'default': None, 'type': int, 'help': 'This generates rotational/translational 'footprints' for each input particle, the number indicates which algorithm to use (0-6)', },
'--goldstandard' : {'default': 0, 'type': float, 'help': 'If specified, will phase randomize the even and odd references past the specified resolution (in A, not 1/A)', },
'--gpuid' : {'default': , 'type': str, 'help': 'Specify the gpu to use', },
'--include' : {'default': None, 'type': str, 'help': 'only works if --create is supplied. comma-separated list of indexes to take from the input file(s) to INCLUDE in the created .lst file. if you have the list of indexes to include in a .txt file, you can provide it through --list.', },
'--input_model' : {'default': None, 'type': None, 'help': 'If the class-averages have the model_id parameter (produced by e2refinemulti.py), this will use only class-averages with the specified model_id for the reconstruction.', },
'--invartype' : {'default': auto, 'type': None, 'help': 'Which type of invariants to generate: (bispec,harmonic)', },
'--list' : {'default': None, 'type': str, 'help': 'Specify the name of a file with a list of images to use in creation of virtual stacks. Please see source for details.', },
'--load' : {'default': None, 'type': str, 'help': 'Load previous contour segmentation.', },
'--loadali3d' : {'default': None, 'type': str, 'help': 'previous 3d alignment', },
'--localrefine' : {'default': False, 'type': None, 'help': 'local refinement', },
'--m3dkeep' : {'default': 0.8, 'type': float, 'help': 'The fraction of slices to keep in e2make3d.py. Default=0.8 -> 80%%', },
'--m3dkeepsig' : {'default': False, 'type': None, 'help': 'Default=auto. The standard deviation alternative to the --m3dkeep argument', },
'--m3dpreprocess' : {'default': None, 'type': str, 'help': 'Default=auto. Normalization processor applied before 3D reconstruction', },
'--matchimgs' : {'default': False, 'type': None, 'help': 'Default=False. Applies filter.matchto to one image so that it matches the other's spectral profile during preprocessing for pair-wise alignment purposes.', },
'--meanshrink' : {'default': None, 'type': float, 'help': 'Reduce an image size by an integral (1.5 also allowed) scaling factor using average. eg - 2 will reduce image size to 1/2. Clip is not required.', },
'--medianshrink' : {'default': None, 'type': int, 'help': 'Reduce an image size by an integral scaling factor, uses median filter. eg - 2 will reduce image size to 1/2. Clip is not required.', },
'--merge' : {'default': False, 'type': None, 'help': 'This will merge the contents of BDB 2-N into BDB 1 (including BDB 1's contents)', },
'--minalt' : {'default': 0, 'type': float, 'help': 'Minimum alignment altitude to include. Default=0', },
'--minptcl' : {'default': 0, 'type': int, 'help': 'Files with fewer than the specified number of particles will be skipped', },
'--minqual' : {'default': 0, 'type': int, 'help': 'Files with a quality value lower than specified will be skipped', },
'--nbasisfp' : {'default': 12, 'type': int, 'help': 'Only used in MSA mode. Number of MSA basis vectors to use when classifying particles, default=12', },
'--nkeep' : {'default': 0, 'type': int, 'help': 'Default=0 (not used). Total number of particles to keep right before writing the coordinates file and output stack. Supersedes --keep', },
'--noali' : {'default': False, 'type': None, 'help': 'Average of non-aligned frames.', },
'--nolog' : {'default': False, 'type': None, 'help': 'Default=False. Turn off recording of the command ran for this program onto the .eman2log.txt file', },
'--norm' : {'default': normalize.edgemean, 'type': str, 'help': 'Normalization processor to apply to written particle images. Should be normalize, normalize.edgemean,etc.Specifc "None" to turn this off', },
'--nref' : {'default': -1, 'type': int, 'help': 'duplicate the first ref N times with phase randomization at 2xres', },
'--odd' : {'default': False, 'type': None, 'help': 'Used by EMAN2 when running eotests. Includes only odd numbered particles in class averages.', },
'--prethreshold' : {'default': False, 'type': None, 'help': 'Applies an automatic threshold to the volume before projecting', },
'--projector' : {'default': standard, 'type': None, 'help': 'Projector to use', },
'--ptcls' : {'default': None, 'type': str, 'help': 'Class average or particles input.', },
'--rand180' : {'default': False, 'type': None, 'help': 'randomly add a 180 degree rotation during refine alignment', },
'--randomize' : {'default': None, 'type': str, 'help': 'Randomly rotate/translate the image. Specify: da,dxy,flip  da is a uniform distribution over +-da degrees, dxy is a uniform distribution on x/y, if flip is 1, random handedness changes will occur', },
'--randphi' : {'default': False, 'type': None, 'help': 'randomize phi during refine alignment', },
'--range' : {'default': None, 'type': str, 'help': 'Specify <minval>,<maxval> representing the largest and smallest values to be saved in the output file. Automatic if unspecified.', },
'--rawtlt' : {'default': None, 'type': None, 'help': 'Specify an imod/serialem rawtlt file, and imported tilt series will be sorted in tilt sequence instead of collection sequence, 'auto' will attempt to find a .tlt file automatically', },
'--replace' : {'default': None, 'type': str, 'help': 'Replace the input subtomograms used for alignment with the specified file (used when the aligned particles were masked or filtered)', },
'--rotate' : {'default': None, 'type': float, 'help': 'Rotate clockwise (in degrees)', },
'--savepreproc' : {'default': False, 'type': None, 'help': 'Default=False. Will save stacks of preprocessed particles (one for coarse alignment and one for fine alignment if preprocessing options are different).', },
'--selfcl' : {'default': None, 'type': int, 'help': 'Output file will be a 180x180 self-common lines map for each image.', },
'--shrinks1' : {'default': 0, 'type': int, 'help': 'The level of shrinking to apply in the first stage of the two-stage classification process. Default=0 (autoselect)', },
'--simmask' : {'default': None, 'type': str, 'help': 'Default=auto. A file containing a single 0/1 image to apply as a mask before comparison but after alignment', },
'--simthr' : {'default': -0.1, 'type': float, 'help': 'Similarity is smaller for better 'quality' particles. Specify the highest value to include from e2spt_hist.py. Default -0.1', },
'--skipali' : {'default': False, 'type': None, 'help': 'skip alignment. the program will do nothing. mostly for testing...', },
'--symcopy' : {'default': False, 'type': None, 'help': 'symcopy', },
'--targetres' : {'default': 20, 'type': float, 'help': 'Target resolution', },
'--tiltangles' : {'default': , 'type': str, 'help': 'File in .tlt or .txt format containing the tilt angle of each tilt image in the tiltseries.', },
'--translate' : {'default': None, 'type': str, 'help': 'Translate by x,y pixels', },
'--use3d' : {'default': False, 'type': None, 'help': 'use projection of 3d particles instead of 2d sub tilt series', },
'--write_ptcls' : {'default': False, 'type': None, 'help': 'Write particles to disk', },
'--allmicrographs' : {'default': False, 'type': None, 'help': 'Add all images from micrographs folder', },
'--alltiltseries' : {'default': False, 'type': None, 'help': 'Use all tilt series in the folder. Acceptable file extensions include hdf, mrc, mrcs, st.', },
'--ampcorrect' : {'default': auto, 'type': None, 'help': 'Will perform amplitude correction via the specified method.  'flatten' requires a target resolution better than 8 angstroms (experimental). 'none' will disable amplitude correction (experimental).', },
'--anglesindxinfilename' : {'default': None, 'type': int, 'help': 'Default=None. The filename of the images will be split at any occurence of the following delimiters: '_', '-', '+', '[' , ']' , ',' , ' ' (the two last ones are a comma and a blank space). Provide the index (position) of the angle in the split filename. For example, if the filename of an image is "my_specimen-oct-10-2015_-50_deg-from_k2 camera.mrc", it will be split into ['my','specimen','oct','10','2015','','50','deg','from','k2','camera','mrc']. The angle '-50', is at position 6 (starting from 0). Therefore, you would provide --anglesindxinfilename=6, assuming all images to be stacked/processed are similarly named. No worries about the minus sign disappearing. The program will look at whether there's a minus sign immediately preceeding the position where the angle info is.', },
'--anisotropic' : {'default': None, 'type': str, 'help': 'Anisotropic scaling, stretches on one axis and compresses the orthogonal axis. Specify amount,angle. See e2evalrefine', },
'--append' : {'default': False, 'type': None, 'help': 'Append to the output file', },
'--autofit' : {'default': False, 'type': None, 'help': 'Runs automated CTF fitting on the input images', },
'--automask3d2' : {'default': None, 'type': str, 'help': 'Default=none. If specified, this mask will be multiplied by the result of the first mask, eg - using mask.soft to mask out the center of a virus.', },
'--batchsize' : {'default': 10, 'type': int, 'help': 'Batch size of stochastic gradient desent. N particles are randomly selected to generate an initial model at each step.', },
'--beta' : {'default': 0, 'type': float, 'help': 'beta in imagic convention.', },
'--bins' : {'default': 100, 'type': int, 'help': 'Number of bins to use in the histogram', },
'--breaksymsym' : {'default': None, 'type': str, 'help': 'the symmetry to use for breaksym. setting sym to c6 and this to c2 results in a c3 structure. default is the same as sym', },
'--chains' : {'default': None, 'type': str, 'help': 'String list of chain identifiers to include, eg 'ABEFG'', },
'--classautomask' : {'default': False, 'type': None, 'help': 'This will apply an automask to the class-average during iterative alignment for better accuracy. The final class averages are unmasked.', },
'--colmasks' : {'default': None, 'type': str, 'help': 'File containing one mask for each column (projection) image, to be used when refining row (particle) image alignments.', },
'--ctfcorrect' : {'default': False, 'type': None, 'help': '(T/F)Do CTF Correction?', },
'--curdefocushint' : {'default': False, 'type': None, 'help': 'Rather than doing the defocus from scratch, use existing values in the project as a starting point', },
'--curve' : {'default': False, 'type': None, 'help': '.', },
'--dark' : {'default': None, 'type': str, 'help': 'Use this dark reference.', },
'--dataphaseflipped' : {'default': False, 'type': None, 'help': '(T/F)Has the data been phase flipped already?', },
'--dfmax' : {'default': 5, 'type': float, 'help': 'Set maximum possible defocus value (positive is underfocus).', },
'--dfmin' : {'default': 0.5, 'type': float, 'help': 'Set minimum possible defocus value (positive is underfocus).', },
'--dotest' : {'default': False, 'type': None, 'help': 'only make 1 batch of subtomograms for testing', },
'--dump' : {'default': False, 'type': None, 'help': 'List contents of an entire database, eg 'e2bdb.py -D refine_01#register', },
'--edgefile' : {'default': None, 'type': str, 'help': 'Load fixed fragment file; one sequence of forced connections per line, separated by space.', },
'--excludebad' : {'default': False, 'type': None, 'help': 'Exclude bad particles.', },
'--extension' : {'default': dm3, 'type': str, 'help': 'Extension of the micrographs that the boxes match', },
'--fastseed' : {'default': False, 'type': None, 'help': 'Will seed the k-means loop quickly, but may produce lest consistent results.', },
'--filterto' : {'default': 0.02, 'type': float, 'help': 'Fiter map to frequency after each iteration. Default is 0.02', },
'--fixintscaling' : {'default': None, 'type': str, 'help': 'When writing to an 8 or 16 bit integer format the data must be scaled. 'noscale' will assume the pixel values are already correct, 'full' will insure the full range of values are included in the output, 'sane' will pick a good range, a number will set the range to mean+=sigma*number', },
'--focused' : {'default': None, 'type': str, 'help': 'Name of a reference projection file to read 1st iteration refine alignment references from.', },
'--format' : {'default': hdf, 'type': None, 'help': 'Format of the output particles images, should be hdf', },
'--fouriershrink' : {'default': None, 'type': float, 'help': 'Reduce an image size by an arbitrary scaling factor by clipping in Fourier space. eg - 2 will reduce image size to 1/2.', },
'--gain' : {'default': None, 'type': str, 'help': 'Use this gain reference.', },
'--gauss' : {'default': False, 'type': None, 'help': 'use gaussian filter instead of tophat', },
'--groupby' : {'default': None, 'type': int, 'help': 'Before alignment, sum raw frames in groups of X to increase signal to noise ratio.', },
'--highdensity' : {'default': False, 'type': None, 'help': 'If particles are very close together, this will interfere with SSNR estimation. If set uses an alternative strategy, but may over-estimate SSNR.', },
'--highesttilt' : {'default': 0, 'type': float, 'help': 'Highest tilt angle. If not supplied, it will be assumed to be 1* --tiltrange.', },
'--icethickness' : {'default': 0, 'type': int, 'help': 'This corresponds   to the Z dimension in pixels of the reconstructed raw tomogram (uncropped), at the same binning   (sampling) as the provided tiltseries, images or subtiltseries.   This value MUST be provided, only if --subtiltsdir is given.', },
'--icethicknessauto' : {'default': False, 'type': None, 'help': 'If --subtiltsdir is provided (and if --icethickness is *not* provided), the thickness of the    specimen in Z will be calculated by computing the difference between the largest    and the smallest Z coordinate found in the header of the subtiltseries, plus the size of the specimen, calculated from --radius.', },
'--ignoretofirstpeak' : {'default': False, 'type': None, 'help': '(T/F)Ignore CTF's until the first peak?', },
'--inmemory' : {'default': False, 'type': None, 'help': 'Default=False. If on, this option will read the entire tomogram into memory. Much faster than reading 'from disk', but you must have enough RAM!', },
'--inplace' : {'default': False, 'type': None, 'help': 'Output overwrites input, USE SAME FILENAME, DO NOT 'clip' images.', },
'--inputstem' : {'default': , 'type': str, 'help': 'Default=None. Aligned tilt series. String common to all files to be processed, in the current folder. For example, if you have many subtiltseries named subt00.hdf, subt01.hdf, ...subt99.hdf, you would supply --stem=subt to have all these processed.', },
'--invar' : {'default': False, 'type': None, 'help': 'Will use invariants for orientation determination, set invariant type in project (EXPERIMENTAL).', },
'--iteration' : {'default': 0, 'type': int, 'help': 'Refinement iteration to plot', },
'--iterative' : {'default': False, 'type': None, 'help': 'Uses iterative interpolation in Fourier space instead of single step gridding or interpolation. --mode and --usessnr are ignored with this option.', },
'--iterstop' : {'default': 0, 'type': int, 'help': 'Default=0. (Not used). The program is called to convergence by default (all particles merge into one final average). To stop at an intermediate iteration, provide this parameter. For example, --iterstop=1, will only allow the algorithm to complete 1 iteration; --iterstop=2 will allow it to go through 2, etc.', },
'--keepabs' : {'default': False, 'type': None, 'help': 'If set, keep will refer to the absolute quality of the class-average, not a local quality relative to other similar sized classes.', },
'--listfile' : {'default': None, 'type': str, 'help': 'Specify a filename containing a list of integer particle numbers to include in the average, one per line, first is 0. Additional exclusions may apply.', },
'--loadali2d' : {'default': None, 'type': str, 'help': 'previous 2d alignment', },
'--localfilter' : {'default': False, 'type': None, 'help': 'use tophat local', },
'--localsize' : {'default': -1, 'type': int, 'help': 'Size in pixels of the local region to compute the resolution in', },
'--lowesttilt' : {'default': 0, 'type': float, 'help': 'Lowest tilt angle. If not supplied, it will be assumed to be -1* --tiltrange.', },
'--m3dsetsf' : {'default': None, 'type': str, 'help': 'Default=auto. Name of a file containing a structure factor to apply after refinement', },
'--maskclass' : {'default': None, 'type': str, 'help': 'Mask each reference before classification', },
'--maxdf' : {'default': 20, 'type': float, 'help': 'Files with a defocus higher than specified will be skipped', },
'--mdoc' : {'default': None, 'type': str, 'help': 'When an mdoc or idoc is provided, the raw files are automatically found within the input directory', },
'--minchange' : {'default': -1, 'type': int, 'help': 'Minimum number of particles that change group before deicding to terminate. Default = len(data)/(#cls*25)', },
'--mindf' : {'default': 0, 'type': float, 'help': 'Files with a defocus lower than specified will be skipped', },
'--minhisnr' : {'default': 0, 'type': float, 'help': 'Integrated SNR from 1/10-1/4 1/A must be larger than this', },
'--minlosnr' : {'default': 0, 'type': float, 'help': 'Integrated SNR from 1/200-1/20 1/A must be larger than this', },
'--msamode' : {'default': None, 'type': str, 'help': 'Enable MSA based classification, default=disabled, typically 'pca', see e2msa.py --mode option for full list', },
'--ncopy' : {'default': 10, 'type': int, 'help': 'Number of copies for NEGATIVE samples. (number of copies of particles is calculated accordingly)', },
'--nmodels' : {'default': 2, 'type': int, 'help': 'The total number of different maps to generate. Specify with --model, but not with --models', },
'--noalign' : {'default': False, 'type': None, 'help': 'Ignore the alignments', },
'--nopath' : {'default': False, 'type': None, 'help': 'If supplied, this option will save results in the directory where the command is run. A directory to store the results will not be made.', },
'--norefs' : {'default': False, 'type': None, 'help': 'Skip any input images which are marked as references (usually used with classes.*)', },
'--normalize' : {'default': normalize.unitlen, 'type': str, 'help': 'Normalize the input images using the named processor. Specify 'tomean' for mean-based scaling. Specify None to disable.', },
'--normalizeimod' : {'default': False, 'type': None, 'help': 'Default=False. This will apply 'newstack -float 2' to the input stack. Requires IMOD. Does not apply to --unstack or --restack.', },
'--notmatchimgs' : {'default': False, 'type': None, 'help': 'Default=True. This option prevents applying filter.match.to to one image so that it matches the other's spectral profile during preprocessing for alignment purposes.', },
'--nptcl' : {'default': 500, 'type': int, 'help': 'maximum number of particles', },
'--nslices' : {'default': 61, 'type': int, 'help': 'This will determine the tilt step between slices, depending on tiltrange. For example, to simulate a 2 deg tilt step supply --nslices=61 --tiltrange=60. Recall that --tiltrange goes from - to + the supplied value, and that there is a central slice or projection at 0 deg, for symmetrical tilt series.', },
'--offsetrange' : {'default': 10, 'type': float, 'help': 'Offset search range (pix)', },
'--offsetstep' : {'default': 2, 'type': float, 'help': 'Offset search step (pix)', },
'--outfile' : {'default': e2proj.hdf, 'type': None, 'help': 'Output file. Default is 'e2proj.img'', },
'--outfilt' : {'default': res143_filtered.hdf, 'type': str, 'help': 'Output locally filtered average volume', },
'--outfilte' : {'default': None, 'type': str, 'help': 'Apply the local filter to the even map as well and write to specified file', },
'--outfilto' : {'default': None, 'type': str, 'help': 'Apply the local filter to the odd map as well and write to specified file', },
'--outputstem' : {'default': , 'type': str, 'help': 'Stem common to all   output image stacks. For example, if --outputstem=myvirus and --save2d is provided,    the phase-flipped images for each subtiltseries wille be saved to myvirus_subtiltptclXXXX.hdf.   If --save3d is provided, the stack of reconstructed subvolumes will be saved to myvirus_stack3d.hdf', },
'--outtype' : {'default': None, 'type': str, 'help': 'output image format, 'mrc', 'imagic', 'hdf', etc. if specify spidersingle will output single 2D image rather than 2D stack.', },
'--overwrite' : {'default': False, 'type': None, 'help': 'overwrite even/odd input', },
'--padby' : {'default': 1.5, 'type': float, 'help': 'pad by factor. default is 1.5', },
'--padvol' : {'default': None, 'type': str, 'help': 'Defines the dimensions (x,y,z) or (x,x,x) of the reconstructed volume. If ommitted, implied value based on padded 2D images is used.', },
'--particle_mask_diameter' : {'default': -1, 'type': float, 'help': 'Diameter of the soft circular image mask (in Angstroms)', },
'--postfix' : {'default': , 'type': str, 'help': 'This string will be appended to each set name to help differentiate the results from multiple runs', },
'--postxf' : {'default': None, 'type': str, 'help': 'a file listing post transforms (see http://eman2.org/e2tomo_more), or for simple symmetry, <sym>,<cx>,<cy>,<cz> where the coordinates specify the center of a single subunit', },
'--proctag' : {'default': proc, 'type': None, 'help': 'Tag added to the name of each particle when using the phaseflipproc options', },
'--ptcl' : {'default': , 'type': str, 'help': 'particle input', },
'--radon' : {'default': False, 'type': None, 'help': 'Do Radon transform', },
'--randomizemodel' : {'default': 0, 'type': None, 'help': 'Optionally randomize the phases of the initial model to this resolution (in Angstroms)', },
'--realign' : {'default': False, 'type': None, 'help': 'Align frames using previous alignment parameters.', },
'--reference' : {'default': , 'type': None, 'help': '3D reference for iterative alignment/averaging. No reference is used by default. <name> or <name>,#', },
'--reference' : {'default': None, 'type': str, 'help': 'Reference used to align RCT recons to, needs to be aligned to symetry axis is --sym is specified', },
'--refineastep' : {'default': 1, 'type': float, 'help': 'Mean angular variation for refine alignment', },
'--refpreprocess' : {'default': False, 'type': None, 'help': 'Default=False. This will preprocess the reference identically to the particles. It is off by default, but it is internally turned on when no reference is supplied. It should probably be off when using a crystal structure (with all positive densities) turned to EM density as an initial model, but it should be on when using an EM map.', },
'--refrandphase' : {'default': 0, 'type': float, 'help': 'Default=0 (off). Resolution to phase randomize the reference to (or the two copies of the reference if --goldstandardoff is NOT supplied [gold standard refinement is on by default].', },
'--resolution_all' : {'default': False, 'type': None, 'help': 'generates resolution plot with the last iteration of all refine_xx directories', },
'--resolution_vsref' : {'default': None, 'type': str, 'help': 'Computes the FSC between the last iteration of each refine_xx directory and a specified reference map. Map must be aligned, but will be rescaled if necessary.', },
'--resultmx' : {'default': None, 'type': str, 'help': 'Specify an output image to store the result matrix. This contains 5 images where row is particle number. Rows in the first image contain the class numbers and in the second image consist of 1s or 0s indicating whether or not the particle was included in the class. The corresponding rows in the third, fourth and fifth images are the refined x, y and angle (respectively) used in the final alignment, these are updated and accurate, even if the particle was excluded from the class.', },
'--retype' : {'default': None, 'type': str, 'help': 'For JSON files where the keys are image name,# pairs, will change the __type value in the image name in all keys', },
'--rfp' : {'default': False, 'type': None, 'help': 'this is an experimental option', },
'--rmbeadthr' : {'default': -1, 'type': float, 'help': 'remove 2d particles with high contrast object beyond N sigma at 100A. Note that this may result in generating fewer particles than selected. Default is -1 (include all particles). 0.5 might be a good choice for removing gold beads but may need some testing...', },
'--scipy' : {'default': False, 'type': None, 'help': 'test scipy refinement', },
'--seedmap' : {'default': None, 'type': str, 'help': 'If specified this volume will be used as a starting point for the reconstruction, filling any missing values in Fourier space. experimental.', },
'--setname' : {'default': all, 'type': str, 'help': 'Name of the stack to build', },
'--sf' : {'default': auto, 'type': str, 'help': 'The name of a file containing a structure factor curve. Specify 'none' to use the built in generic structure factor. Default=auto', },
'--short' : {'default': False, 'type': None, 'help': 'Dense listing of names only', },
'--smoothN' : {'default': 15, 'type': int, 'help': 'number of neighboring particles used for smoothing. default 15', },
'--snrfilt' : {'default': False, 'type': None, 'help': 'Apply SNR filter as part of phase flipping.', },
'--solventmask' : {'default': , 'type': str, 'help': 'Location of the mask to be used', },
'--sort' : {'default': False, 'type': None, 'help': 'If set, output .lst file will be sorted. The default is to leave the output grouped by class-average. If (and only if) sorted, duplicate entries will be removed.', },
'--speed' : {'default': 5, 'type': int, 'help': '(1-7) Balances speed vs precision. Larger values sacrifice a bit of potential resolution for significant speed increases. Set to 1 when really pushing resolution. Set to 7 for initial refinements. default=5', },
'--stackregardless' : {'default': False, 'type': None, 'help': '"Stack images found with the common string provided through --stem2stack, even if the number of images does not match the predicted number of tilt angles.', },
'--start' : {'default': None, 'type': str, 'help': 'This is a starting model for FFT reconstruction', },
'--symalimasked' : {'default': None, 'type': str, 'help': 'This will translationally realign each asymmetric unit to the specified (usually masked) reference', },
'--test180' : {'default': False, 'type': None, 'help': 'Test for improved alignment with 180 degree rotations even during refine alignment', },
'--thresh' : {'default': 0, 'type': float, 'help': 'Phase Residual cutoff. Particles with a higher phase residual will not be included in the refinement', },
'--tiltdata' : {'default': None, 'type': str, 'help': 'Name of the tilted dataset', },
'--tilts' : {'default': False, 'type': None, 'help': 'Write results to 'tiltseries' directory in current project.', },
'--tiltseries_name' : {'default': , 'type': str, 'help': 'Specify the name of the output tiltseries. A .mrc extension will be appended to the filename provided.', },
'--tiltstep' : {'default': 0, 'type': float, 'help': 'Step between tilts. Required if using --stem2stack.', },
'--timing' : {'default': False, 'type': None, 'help': 'Report on the time required for each step of each refinement run', },
'--timingbypath' : {'default': False, 'type': None, 'help': 'Report on the CPU time required in each refine_xx folder', },
'--tlt' : {'default': None, 'type': str, 'help': 'An imod tlt file containing alignment angles. If specified slices will be inserted using these angles in the IMOD convention', },
'--tltkeep' : {'default': 1, 'type': float, 'help': 'keep a fraction of tilt images with good score determined from tomogram reconstruction', },
'--tomogram' : {'default': , 'type': str, 'help': 'Name of the tomogram.', },
'--tomograms' : {'default': , 'type': str, 'help': 'Comma separated list of tomograms with REC extension from which all particles in --stacks came from.', },
'--trans' : {'default': 0, 'type': str, 'help': 'Translate map by dx,dy,dz', },
'--treeclassify' : {'default': False, 'type': None, 'help': 'Classify using a binary tree.', },
'--treeincomplete' : {'default': 0, 'type': int, 'help': 'Used only in binary tree classification. Incompleteness of the tree on each level.Default=0', },
'--txtout' : {'default': False, 'type': None, 'help': 'Output will be a multicolumn text file suitable for plotting', },
'--untiltdata' : {'default': None, 'type': str, 'help': 'Name of the tilted dataset', },
'--usefilt' : {'default': None, 'type': None, 'help': 'Specify a particle data file that has been low pass or Wiener filtered. Has a one to one correspondence with your particle data. If specified will be used to align particles to the running class average, however the original particle will be used to generate the actual final class average', },
'--usefoldername' : {'default': False, 'type': None, 'help': 'If you have the same image filename in multiple folders, and need to import into the same project, this will prepend the folder name on each image name', },
'--wedgesigma' : {'default': 3, 'type': float, 'help': 'Threshold for identifying missing data in Fourier space in terms of standard deviation of each Fourier shell. Default 3.0', },
'--wiener' : {'default': False, 'type': None, 'help': 'Wiener filter (optionally phaseflipped) particles.', },
'--write_dbbox' : {'default': False, 'type': None, 'help': 'Export EMAN1 .box files', },
'--writejunk' : {'default': False, 'type': None, 'help': 'Writes the image even if its sigma is 0.', },
'--addfile' : {'default': None, 'type': str, 'help': 'Adds the volume to another volume of identical size', },
'--addfilename' : {'default': False, 'type': None, 'help': 'Adds the original filename of a file or stack to the header of each particle. This only works for .hdf files.', },
'--addnoise' : {'default': 3, 'type': float, 'help': 'Add noise on particles at each iteration. Stablize convergence for some reason.', },
'--addpdbbfactor' : {'default': False, 'type': None, 'help': 'Use the bfactor/temperature factor as the atom blurring radius, equivalent to Gaussian lowpass with 1/e width at 1/bfactor', },
'--ali2d' : {'default': None, 'type': str, 'help': '', },
'--ali3dnew' : {'default': None, 'type': str, 'help': '', },
'--ali3dold' : {'default': None, 'type': str, 'help': '', },
'--align_frames' : {'default': False, 'type': None, 'help': 'Perform whole-frame alignment of the input stacks', },
'--aligngran' : {'default': 10, 'type': float, 'help': 'Fineness of global search in e2align3d.py, default=10.0', },
'--alignsort' : {'default': False, 'type': None, 'help': 'This will align and sort the final class-averages based on mutual similarity.', },
'--aliptcls2d' : {'default': , 'type': str, 'help': 'optional aliptcls input. the program can start search from the position from last run.', },
'--aliptcls3d' : {'default': , 'type': str, 'help': 'optional aliptcls input.', },
'--alistacks' : {'default': -10000000000, 'type': float, 'help': 'If sum of cmp results is less than the spefified value, will save the aligned particle to a per-class stack', },
'--all' : {'default': False, 'type': None, 'help': 'List per-particle info', },
'--allali' : {'default': False, 'type': None, 'help': 'Average of all aligned frames.', },
'--allinfo' : {'default': False, 'type': None, 'help': 'Uses all of the .json files in info/ rather than specifying a list on the command line', },
'--alltomograms' : {'default': False, 'type': None, 'help': 'use all tomograms.', },
'--alpha' : {'default': 0, 'type': float, 'help': 'alpha in imagic convention.', },
'--alt' : {'default': 0, 'type': float, 'help': 'alt in eman convention.', },
'--altedgemask' : {'default': False, 'type': None, 'help': 'If set, assumes tomographic data with a thin specimen, and masks out the +-X edges based on the alt Euler angle.', },
'--amplitudecontrast' : {'default': 0.07, 'type': float, 'help': 'Amplitude Contrast value for the micrographs', },
'--ampreg' : {'default': 0, 'type': float, 'help': 'regularizer for the Gaussian amplitudes in the first 1/2 of the iterations. Large values will encourage all Gaussians to have similar amplitudes. default = 0', },
'--ang' : {'default': 10, 'type': float, 'help': 'Angle between projections if 3Dmap provided', },
'--angstep' : {'default': 9, 'type': float, 'help': 'Angular separation of projections. Default 9.0 degrees.', },
'--animorph' : {'default': None, 'type': str, 'help': 'This will use a morph vector file (segment3d) to morph atom positions,#P [animorph=<n>,<apix>,<vecfile>]', },
'--anisotropy' : {'default': -1, 'type': int, 'help': 'Specify a class-number (more particles better). Will use that class to evaluate magnification anisotropy in the data.', },
'--appendvstack' : {'default': None, 'type': str, 'help': 'Appends to/creates a 'virtual' BDB stack with its own metadata, but the binary data taken from the (filtered) list of stacks', },
'--apply' : {'default': None, 'type': str, 'help': 'A 2-D image file which the CTF will be applied to in real-time', },
'--applyctf' : {'default': False, 'type': None, 'help': 'Default=False (off). If on, it applies ctf to the projections in the simulated tilt series based on defocus, cs, and voltage parameters.', },
'--applyfocusdepth' : {'default': False, 'type': None, 'help': 'Default=False (off). If on, this will assign different 'z-height' values to different particles', },
'--applying' : {'default': False, 'type': None, 'help': 'Applying the neural network on tomograms', },
'--applyto' : {'default': None, 'type': str, 'help': 'apply to tomo', },
'--asymunit' : {'default': False, 'type': None, 'help': 'Write points of only one asymmetrical unit.', },
'--atoms' : {'default': none, 'type': str, 'help': 'pseudoatoms file', },
'--atomswt' : {'default': 1, 'type': float, 'help': 'pseudoatom weight', },
'--atomtype' : {'default': CA, 'type': str, 'help': 'Load Atom Type. Default: 'CA'. Options: 'C' or 'all'', },
'--auto_healpix' : {'default': 1.8, 'type': str, 'help': 'Local angular search value', },
'--autoboxer' : {'default': None, 'type': str, 'help': 'A key of the swarm_boxers dict in the local directory, used by the workflow.', },
'--autoclipxy' : {'default': False, 'type': None, 'help': 'Optimize the x-y shape of the tomogram to fit in the tilt images. only works in bytile reconstruction. useful for non square cameras.', },
'--autohp' : {'default': False, 'type': None, 'help': 'Automatic high pass filter of the SNR only to remove initial sharp peak, phase-flipped data is not directly affected (default false)', },
'--autoinvert' : {'default': False, 'type': None, 'help': 'Automatically decides whether to invert each stack of images to make particles white (EMAN2 convention). Decision is made for an entire stack. Non-inverted images will NOT BET PROCESSED AT ALL !', },
'--autopick' : {'default': None, 'type': str, 'help': 'Perform automatic particle picking. Provide mode and parameter string, eg - auto_local:threshold=5.5', },
'--averagefscs' : {'default': False, 'type': None, 'help': 'Default=False. Averages FSC curves if --input contains multiple images.', },
'--averagehalves' : {'default': False, 'type': None, 'help': 'Default=False. This will average the even and odd volumes.', },
'--averagestats' : {'default': False, 'type': None, 'help': 'Do not launch the GUI and set the average of the missing wedge statistics on all the volumes.', },
'--avg' : {'default': , 'type': str, 'help': '3D volume to insert. spt_xx/threed_xx if unspecified', },
'--avgiter' : {'default': 1, 'type': int, 'help': 'Default=1. If --keep is different from 1.0 and --average is on, the initial average will include all the particles, but then the percent specified byoptions.keep will be kept (the rest thrown away) and a new average will be computed. If --avgiter > 1, this new average will be compared again against all the particles. The procedure will be repeated for however many iterations --avgiter is given, or the process will stop automatically if in two consecutive rounds exactly the same particles are kept', },
'--avgrcts' : {'default': False, 'type': None, 'help': 'If set recons from each CA will be alinged and averaged.', },
'--avgseq' : {'default': 0, 'type': int, 'help': 'Averages sets of N sequential frames. eg - if N=4 and the input contains 100 images, the output would be 25 images', },
'--axes' : {'default': None, 'type': str, 'help': 'Works only for 1-D input images. Specify a range, eg 0-5 to indicate which components to use from each vector. Inclusive. default=all', },
'--az' : {'default': 0, 'type': float, 'help': 'az in eman convention.', },
'--backgroundstack' : {'default': None, 'type': str, 'help': 'Name of the stack containing a few boxes picked from regions of the tomogram where there where no particles,                 no gold, and no carbon.', },
'--bad_columns' : {'default': , 'type': str, 'help': 'Comma separated list of camera defect columns', },
'--bad_rows' : {'default': , 'type': str, 'help': 'Comma separated list of camera defect rows', },
'--badgroup' : {'default': False, 'type': None, 'help': 'Split the data into 4 groups rather than 2. The extra two groups contain particles more likely to be bad.', },
'--badone' : {'default': False, 'type': None, 'help': 'Remove one bad tilt during coarse alignment. seem to work better with smaller maxshift...', },
'--badqualsig' : {'default': 0.5, 'type': float, 'help': 'When identifying 'bad' particles, particles with similarities >mean+sigma*badqualsig will be considered bad. Default 0.5', },
'--badsepsig' : {'default': 0.25, 'type': float, 'help': 'When identifying 'bad' particles, if s1/s2 are the similarities to reference 1/2, then those where |s1-s2| < sigma*badsepsig will be excluded. Default 0.25', },
'--basislist' : {'default': None, 'type': str, 'help': 'List of basis vectors to use, comma delimited.', },
'--basisrefs' : {'default': None, 'type': str, 'help': 'Will use a set of existing class-averages/projections to generate the Eigenbasis for classification. This must be an image stack with the same dimensions as the particle data.', },
'--batch' : {'default': 20, 'type': int, 'help': 'Batch size for the stochastic gradient descent. Default is 20.', },
'--batchsz' : {'default': 32, 'type': int, 'help': 'batch size', },
'--best' : {'default': False, 'type': None, 'help': 'rtf_best alignment', },
'--bestali' : {'default': False, 'type': None, 'help': 'Average of best aligned frames.', },
'--bf' : {'default': 0, 'type': float, 'help': 'Set constant B-factor (as defined in EMAN1) for all images.', },
'--bgcurve' : {'default': None, 'type': str, 'help': 'load a curve of background power spectrum to substract for ctf estimation.', },
'--bgmask' : {'default': 0, 'type': int, 'help': 'Background is computed using a soft mask of the center/edge of each particle with the specified radius. Default radius is boxsize/2.6.', },
'--bidirectional' : {'default': False, 'type': None, 'help': 'This will assume the first image is at 0 degrees and will stack images from --lowerend through 0, and then will stack the rest from 0+tiltstep throgh --upperend. If --negativetiltseries is supplied, images will be stacked from --upperend through 0, then from 0-tiltstep through --lowerend.', },
'--binby' : {'default': None, 'type': int, 'help': 'The degree of binning for final image. Default is 1, i.e. no binning. Note that this option takes only integer values.', },
'--bispec' : {'default': False, 'type': None, 'help': 'new rtf with usebispec', },
'--bits' : {'default': 10, 'type': int, 'help': 'Bits to retain in the output file, 0 or 2-16. 0 is lossless floating point compression. <0 will store completely uncompressed', },
'--bootstrap' : {'default': False, 'type': None, 'help': 'Ignored. Present for historical reasons only.', },
'--box_type' : {'default': boxes, 'type': None, 'help': 'Type of boxes to import, normally boxes, but for tilted data use tiltedboxes, and untiltedboxes for the tilted  particle partner', },
'--box2d' : {'default': False, 'type': None, 'help': 'Boxing 2D particls from tomograms.', },
'--box3d' : {'default': False, 'type': None, 'help': 'Boxing 3D particls from tomograms (default).', },
'--boxes_negative' : {'default': None, 'type': str, 'help': 'Input boxes of negative samples', },
'--boxing' : {'default': False, 'type': None, 'help': 'Boxing particles.', },
'--boxsz_unbin' : {'default': -1, 'type': int, 'help': 'box size in unbinned tomogram', },
'--bruteaverage' : {'default': False, 'type': None, 'help': 'Default=False. If specified, this will generate an "as is" average of all the subvolumes (no alignment performed). This can be useful to see if, on average, particles correspond to the desired specimen and are reasonably centered.', },
'--btref' : {'default': 0, 'type': int, 'help': 'WARNING: MIGHT BE BUGGY OR NOT WORKING. Mulst supply references through --ref. Default=0 (internally turned on and set to 64). Size of the SUBSET of particles to use to build an initial reference by calling e2spt_binarytree.py. By default, the largest power of two smaller than the number of particles in --input will be used. For example, if you supply a stack with 150 subtomograms, the program will automatically select 128 as the limit to use because it's the largest power of 2 that is smaller than 150. But if you provide, say --btref=100, then the number of particles used will be 64, because it's the largest power of 2 that is still smaller than 100.', },
'--build' : {'default': None, 'type': str, 'help': 'Build a new tile file from the specified image', },
'--buildpspec' : {'default': None, 'type': float, 'help': 'Builds 1D and 2D power spectra for the images when building, Value is A/pix for image.', },
'--buildset' : {'default': False, 'type': None, 'help': 'Segment particles.', },
'--buildsetonly' : {'default': False, 'type': None, 'help': 'will only prepare particle set for the refinement but skip the actual refinement process.', },
'--bxsz' : {'default': 32, 'type': int, 'help': 'Box size of the particles for tracking. Default is 32. Maybe helpful to use a larger one for fiducial-less cases..', },
'--byheader' : {'default': None, 'type': str, 'help': 'Uses the named header parameter to sort the images', },
'--bykurtosis' : {'default': False, 'type': None, 'help': 'Sort by image Kurtosis. No alignment, shrinking, etc. is performed', },
'--byptcl' : {'default': False, 'type': None, 'help': 'Sort in order of number of particles represented in each class-average. No alignment, shrinking, etc. is performed', },
'--bytile' : {'default': False, 'type': None, 'help': 'make final tomogram by tiles..', },
'--calccont' : {'default': False, 'type': None, 'help': 'Compute the low resolution azimuthal contrast of each image and put it in the header as eval_contrast_lowres. Larger values imply more 'interesting' images.', },
'--calcsf' : {'default': None, 'type': str, 'help': 'calculate a radial structure factor for the image and write it to the output file, must specify apix. divide into <n> angular bins', },
'--carbonstack' : {'default': None, 'type': str, 'help': 'Name of the stack containing a few boxes picked from the grid hole (or carbon).', },
'--careject' : {'default': None, 'type': str, 'help': 'class averages to reject, default=None', },
'--centeracf' : {'default': False, 'type': None, 'help': 'This option has been removed in favor of a new centering algorithm', },
'--centerzerotilt' : {'default': False, 'type': None, 'help': 'Default=False. If specified, this option will center the zerotilt (or least tilted image) for each particle by using as a reference a sharp-circle of radius=box/2 or the value specified through --radius.', },
'--chain' : {'default': None, 'type': str, 'help': 'Load Chain. Default: load all chains', },
'--checkctf' : {'default': False, 'type': None, 'help': 'Verifies that all images in the file contain CTF information, and gives some basic statistics', },
'--checkhand' : {'default': False, 'type': None, 'help': 'Check the handedness of tomogram.', },
'--chimeraout' : {'default': None, 'type': str, 'help': 'Name of file to write center of segments in UCSF Chimera marker format.', },
'--chunk' : {'default': None, 'type': str, 'help': '<chunksize>,<nchunk>. Will process files in groups of chunksize, and process the <nchunk>th group. eg - 100,3 will read files 300-399', },
'--classavg' : {'default': None, 'type': str, 'help': 'Name of classavg file created by e2refine2d.py', },
'--classify' : {'default': 0, 'type': int, 'help': 'Highly experimental ! Subclassify particles (hopefully by defocus) into n groups.', },
'--classinfo' : {'default': None, 'type': str, 'help': 'Store results in a classinfo_xx.json style file', },
'--classlist' : {'default': None, 'type': str, 'help': 'Filename of a text file containing a (comma or whitespace separated) list of class average numbers to operate on.', },
'--clean' : {'default': False, 'type': None, 'help': 'remove outliers before PCA.', },
'--cleanup' : {'default': False, 'type': None, 'help': 'This option will clean up the database cache so files can safely be moved or accessed on another computer via NFS.', },
'--clipz' : {'default': -1, 'type': int, 'help': 'Z thickness of the final tomogram output. default is -1, (5/16 of tomogram length)', },
'--clsfiles' : {'default': False, 'type': None, 'help': 'Write EMAN 1 style cls files with members of each class', },
'--clsid' : {'default': None, 'type': str, 'help': 'only reconstruct a class of particles', },
'--clsmx' : {'default': None, 'type': str, 'help': 'Standard EMAN2 output suitable for use with e2classaverage, etc.', },
'--clusters' : {'default': 1, 'type': int, 'help': 'Number of clusters to group the data in after the 1st iteration, based on correlation.', },
'--coeff' : {'default': none, 'type': str, 'help': 'helix correlation file', },
'--coeffwt' : {'default': 1, 'type': float, 'help': 'helix correlation weight', },
'--colorzaxis' : {'default': False, 'type': None, 'help': 'Color scatter dots by Z axis', },
'--compresslevel' : {'default': None, 'type': int, 'help': 'Compression level to use when writing. No impact on image quality, but large impact on speed. Default = 1', },
'--computesf' : {'default': False, 'type': None, 'help': 'Will determine the structure factor*envelope for the aggregate set of images', },
'--contrast' : {'default': 1, 'type': float, 'help': 'Relative setting. Try 0.75 if images too bright. Default 1.0', },
'--conv' : {'default': False, 'type': None, 'help': 'use convolutional network for heterogeneity analysis.', },
'--coords2d' : {'default': , 'type': str, 'help': 'File in .txt format containing the coordinates of particles determined from the aligned 0 tilt image in the supplied tiltseries.', },
'--coords3d' : {'default': , 'type': str, 'help': 'File in .txt format containing the coordinates of particles determined from the reconstructed tomogram of the supplied tiltseries.', },
'--correctrot' : {'default': False, 'type': None, 'help': 'correct for global rotation and position sample flat in tomogram.', },
'--create' : {'default': None, 'type': str, 'help': 'to use this option, the input files should be image files. Specify an .lst or .lsx file to create here (e.g., --create mylst.lst) with references to all of the images in the inputs.', },
'--cter' : {'default': False, 'type': None, 'help': 'CTF estimation using cter', },
'--ctfcoverage' : {'default': False, 'type': None, 'help': 'Create a map showing the integrated SNR for the combined data.', },
'--ctfest' : {'default': False, 'type': None, 'help': 'Perform CTF fitting on the (tiled) frame', },
'--ctffile' : {'default': None, 'type': str, 'help': 'Estimated CTF', },
'--ctfparamsfile' : {'default': , 'type': str, 'help': 'This should be a text file   with ctf parameters in the following format;   defocus=value voltage=value cs=value apix=value bfactor=value ampcont=value   A single space should separate each parameter from the next.   Do not write any unit symbols for the values; just the numerical value.   Defocus should be in microns, voltage in kV, apix in angstroms per pixel, and ampcont (amplitude contrast)   should be a decimal; for example, 0.1 for 10 percent amplitude contrast.   IF you want to use DIFFERENT PARAMETERS PER IMAGE, then the file must contain   multiple rows with the different values.   The first row will be used to phase flip the first image,   the second row to phase flip the second, etc.', },
'--ctfweight' : {'default': False, 'type': None, 'help': 'weight by ctf', },
'--curves_overlap' : {'default': 0.5, 'type': float, 'help': 'fraction of overlap when generating particle along curves. default is 0.5', },
'--curves' : {'default': -1, 'type': int, 'help': 'specify curve id to extract particles from saved curves.', },
'--cut' : {'default': 0.2, 'type': float, 'help': '', },
'--da' : {'default': 5, 'type': float, 'help': 'helix angular search step', },
'--darkrefs' : {'default': , 'type': None, 'help': 'Specify a comma separated list of dark refereence stacks/images to import. Files will be placed in movierefs_raw. See --importation for additional options.', },
'--datalabels' : {'default': False, 'type': None, 'help': 'Add data labels to the plot', },
'--datalabelscolor' : {'default': #00ff00, 'type': str, 'help': 'Set the color of the data labels. Any vaild matplotlib color is ok', },
'--db-add-hcoords' : {'default': None, 'type': str, 'help': 'Append any unique helix coordinates to the database from the specified file (in EMAN1 *.box format). Use --helix-width to specify a width for all boxes.', },
'--db-set-hcoords' : {'default': None, 'type': str, 'help': 'Replaces the helix coordinates in the database with the coordinates from the specified file (in EMAN1 *.box format). Use --helix-width to specify a width for all boxes.', },
'--dbls' : {'default': None, 'type': str, 'help': 'data base list storage, used by the workflow. You can ignore this argument.', },
'--dbpath' : {'default': ., 'type': None, 'help': 'Ignored. Present for historical reasons.', },
'--de64' : {'default': False, 'type': None, 'help': 'Perform gain image correction on DE64 data. Note, these should not be normalized.', },
'--decayedge' : {'default': False, 'type': None, 'help': 'Applies an edge decay to zero on the output class-averages. A very good idea if you plan on 3-D reconstruction.', },
'--decoder' : {'default': None, 'type': str, 'help': 'decoder input', },
'--decoderout' : {'default': None, 'type': str, 'help': 'Save the trained decoder model. Filename should be .h5 or .tf', },
'--defcol' : {'default': 2, 'type': int, 'help': 'Which column of ctf file is the defocus', },
'--defect_file' : {'default': None, 'type': str, 'help': 'Specify the camera defects file.', },
'--defocilist' : {'default': , 'type': str, 'help': 'Text file containing   a single column of defocus values in microns. The file should have as many   defocus values as images in the tiltseries or subtiltseries supplied.', },
'--defocusbottom' : {'default': False, 'type': None, 'help': 'Assumes the signal for defocus measurement (e.g., carbon film) is at the top layer of the tomogram.', },
'--defocusstep' : {'default': 0, 'type': float, 'help': 'The step width for grid search (microns)', },
'--defocustop' : {'default': False, 'type': None, 'help': 'Assumes the signal for defocus measurement (e.g., carbon film) is at the top layer of the tomogram.', },
'--defocusvariationlimit' : {'default': 0.1, 'type': float, 'help': 'default=0.1. total variation in defocus (in micrometers) tolerated within a strip and still consider it a region of 'constant defocus'.', },
'--delete' : {'default': False, 'type': None, 'help': 'This will delete (or at least empty) the named database(s)', },
'--dereforig' : {'default': None, 'type': str, 'help': 'Extract the data_source and data_n parameters from each image in the file and create a new .lst file referencing the original image(s)', },
'--device_num' : {'default': 0, 'type': str, 'help': 'When possible, use this device to process movie frames. Default is GPU.', },
'--df' : {'default': False, 'type': None, 'help': 'Calculate defocus from entire CCD frame.', },
'--dfrange' : {'default': 2.0,7.0,0.02, 'type': str, 'help': 'Search range of defocus (start, end, step). default is 2., 7, 0.02', },
'--dfval' : {'default': 0, 'type': float, 'help': 'Set constant defocus for all images (positive is underfocus).', },
'--dilutionfactor' : {'default': 4, 'type': int, 'help': 'Default=4. Determines how many particles will be pre-picked as putative particles. For example, if                 if the tomogram is broken up into subregions of volume V to look for particles in each                 and --dilutionfactor=1, then, the number of best-correlating subvolumes from the subregion                 that will be initially selected as potential particles will be n=V/(pv*D) where 'pv' is the volume of one particle                 calculated based on --particleradius or --boxsize, or the template's boxsize ['nx']; 'D' is the dilution factor;                 therefore, the larger D is, the fewer locations that will be initially picked as potential particles (before any pruning).', },
'--display' : {'default': , 'type': str, 'help': 'Displays a specific tile (level,x,y))', },
'--dmax' : {'default': 10, 'type': float, 'help': 'Maximum Ca-Ca length', },
'--dmin' : {'default': 2, 'type': float, 'help': 'Mininum Ca-Ca length', },
'--do_ctf' : {'default': None, 'type': str, 'help': 'Name of file whose ctf estimation parameters (obtained via some previous run of Gauss autoboxer via the GUI) should be used for automatic ctf estimation.', },
'--docontourplot' : {'default': False, 'type': None, 'help': 'Compute a contour plot', },
'--donotaverage' : {'default': False, 'type': None, 'help': 'Default=False. If e2spt_refinemulti.py is calling e2spt_classaverage.py, the latter need not average any particles, but rather only yield the alignment results.', },
'--dontcleanup' : {'default': False, 'type': None, 'help': 'If specified, intermediate files will be kept.', },
'--dotrans' : {'default': 1, 'type': int, 'help': 'Do translational search, default=1', },
'--dphi' : {'default': 30, 'type': float, 'help': 'step size for the inplane angle phi, default=30.0', },
'--dryrun' : {'default': False, 'type': None, 'help': 'skip final reconstruction', },
'--dthr' : {'default': -1, 'type': float, 'help': 'distance threshold', },
'--dualaxis' : {'default': False, 'type': None, 'help': 'Default=False. Simulate subtomograms made of two independent and orthogonal tilt series.', },
'--e0' : {'default': 0, 'type': float, 'help': 'e0 in quaternion convention.', },
'--e1' : {'default': 0, 'type': float, 'help': 'e1 in quaternion convention.', },
'--e2' : {'default': 0, 'type': float, 'help': 'e2 in quaternion convention.', },
'--e3' : {'default': 0, 'type': float, 'help': 'e3 in quaternion convention.', },
'--echo' : {'default': False, 'type': None, 'help': 'Echo Relion Command to terminal only', },
'--edf' : {'default': , 'type': str, 'help': 'IMOD .edf file name.', },
'--edge' : {'default': 4, 'type': int, 'help': 'mininmum distance to the edge of tomogram', },
'--edgenorm' : {'default': False, 'type': None, 'help': 'Edge normalize', },
'--eer2x' : {'default': False, 'type': None, 'help': 'Render EER file on 8k grid.', },
'--eer4x' : {'default': False, 'type': None, 'help': 'Render EER file on 16k grid.', },
'--end' : {'default': None, 'type': int, 'help': 'End ATOM', },
'--eosplit' : {'default': False, 'type': None, 'help': 'Will generate _even and _odd .lst files for each specified input .lst file', },
'--erasegold' : {'default': , 'type': None, 'help': 'Default=False. Runs erase_gold.py on the stack.', },
'--eulerdata' : {'default': None, 'type': str, 'help': 'File for Eulerdata, Ryan style, if none is given, data is read from the DB.', },
'--eulerfile' : {'default': None, 'type': str, 'help': 'Euler angles file, to create tiltdistance from pre-aligned particles. Format is: imgnum, name, az, alt, phi', },
'--eulerrefine' : {'default': False, 'type': None, 'help': 'Refines Euler angles of class-averages before reconstruction', },
'--evalclassdetail' : {'default': False, 'type': None, 'help': 'If specified with evalclassqual, will generate individual FRC curves for each class average in the even subset', },
'--evalclassqual' : {'default': False, 'type': None, 'help': 'Evaluates the class-average-projection agreement using the refine_xx folder name.', },
'--evalmodel' : {'default': , 'type': str, 'help': 'generate model projection images to the given file name', },
'--evalptclqual' : {'default': False, 'type': None, 'help': 'Evaluates the particle-map agreement using the refine_xx folder name. This may be used to identify bad particles.', },
'--evalsize' : {'default': -1, 'type': int, 'help': 'Box size for the projections for evaluation.', },
'--evenoddmerge' : {'default': False, 'type': None, 'help': 'with --orientedparticles, if cls_result_xx is specified, will include both _even and _odd particles in the output.', },
'--exclude_bad' : {'default': False, 'type': None, 'help': 'Don't generate output for any particles marked as exclude', },
'--exclude_edges' : {'default': False, 'type': None, 'help': 'Don't generate output for any particles extending outside the micrograph', },
'--exclude_extremes' : {'default': False, 'type': None, 'help': 'Default=False. Will exclude images with a mean value 3 standard deviations away from the "mean of means" of all images.', },
'--excludeedge' : {'default': 0, 'type': float, 'help': 'Integer number of pixels away from the edge of each image in the tilt series to not extract particles from. For example, if you specify 100, and the images are 4096x4096 pixels, any particle with its center lying between 0 and 200 or 3896 and 4096 will nto be extracted.', },
'--excludeedges' : {'default': False, 'type': None, 'help': 'Ignore 'excedent' (smaller than the width of a strip) at the edge of micrographs after dividing them into strips.', },
'--exclusive_class_min' : {'default': 0, 'type': int, 'help': 'Default=0.0 (not used). The minimum multiplicity (number of particles that went into an average) to look for mutually exclusive classes/averages. Two classes are mutually exclusive when non of the members in one are present in the other. In HAC (hierarchical ascendant classification or "all vs all" alignments, classes MERGE, so a class from a later round will be composed of classes from earlier rounds. Some classes remain un-merged for many rounds. If set, this parameter will extract classes with a minimum number of particles (from whatever round/iteration they were generated in) whose members are not present in any other of the extracted classes. The mutually exclusive classes will be put into a separate sub-directory starting with the character 'me_classes'.', },
'--exlist' : {'default': None, 'type': str, 'help': 'Specify the name of a file with a list of images to exclude in creation of virtual stacks. Please see source for details.', },
'--export_whole_project' : {'default': False, 'type': None, 'help': 'This option will create an emx directory, where it will export the eman2 project into EMX format', },
'--ext' : {'default': hdf, 'type': str, 'help': 'Save frames with this extension. Default is 'hdf'.', },
'--extractboxes' : {'default': False, 'type': None, 'help': 'Extracts box locations from the image header to produce a set of .box files for only the particles in the .lst files', },
'--extractkey' : {'default': None, 'type': str, 'help': 'This will extract a single named value from each specified file. Output will be multicolumn if the referenced label is an object, such as CTF.', },
'--extractorientptcl' : {'default': None, 'type': str, 'help': 'Extracts the particles from a refinement with per-particle orientation information. If HDF output, will store as xform_align3d in header.', },
'--extractplots' : {'default': False, 'type': None, 'help': 'If a database contains sets of plots, such as bdb:refine_xx#convergence.results, this will extract the plots as text files.', },
'--extractspt' : {'default': False, 'type': None, 'help': 'This will extract the parameters from a particle_parms JSON file in SPT projects as a multicolumn text file.', },
'--famps' : {'default': 1, 'type': float, 'help': 'fraction of Fourier amps to exclude from recons. 0 means that this option is not used, default=0.0', },
'--fbeaut' : {'default': False, 'type': None, 'help': '(T/F)Apply extra real space symmetry averaging and masking to beautify final map prior to output', },
'--featurename' : {'default': , 'type': str, 'help': 'name of the current feature to extract', },
'--ffilt' : {'default': False, 'type': None, 'help': '(T/F)Apply Single Particle Wiener filter to final reconstruction', },
'--fftavg' : {'default': None, 'type': str, 'help': 'Incoherent Fourier average of all images and write a single power spectrum image', },
'--filefilt' : {'default': None, 'type': str, 'help': 'Only processes image stacks where the filename contains the specified string. Mostly used for debugging.', },
'--fillangle' : {'default': 0, 'type': float, 'help': 'An angular range used for both alt & az over which the projection should be averaged. Generally the angular step used when making projections.', },
'--fillimage' : {'default': , 'type': str, 'help': 'the iamge to use to fill in the missing wedge of the images in --input. Ideally, this is the average of the aligned images in --input, or the reference the images in --input were aligned to.', },
'--fillwithnoise' : {'default': False, 'type': None, 'help': 'this will fill the missing wedge with gaussian noise. --matchto will be turned on by default if this option is supplied.', },
'--fillzero' : {'default': False, 'type': None, 'help': 'Checks the existing output file, and fills only matrix elements which are exactly zero.', },
'--filt' : {'default': None, 'type': str, 'help': 'Only include dictionary names containing the specified string', },
'--filter' : {'default': 0, 'type': int, 'help': 'Resolution (integer, in Angstroms) at which you want to apply a gaussian lowpass filter to the tomogram prior to loading it for boxing', },
'--filterout' : {'default': False, 'type': None, 'help': 'Filters output particles to match projections', },
'--filtexclude' : {'default': None, 'type': str, 'help': 'Exclude dictionary names containing the specified string', },
'--finalstage' : {'default': False, 'type': None, 'help': 'Assume that existing preliminary particle classifications are correct, and only recompute final local orientations', },
'--firstfitglobal' : {'default': False, 'type': None, 'help': 'Default=False.   Supplying this option will tile the entire image first (for each tilt angle) and find the average   defocus. Then it will use that value to provide an educated 'guess' during stripe-by-stripe    fitting for each image.', },
'--fixbadpixels' : {'default': False, 'type': None, 'help': 'Tries to identify bad pixels in the dark/gain reference, and fills images in with sane values instead', },
'--fixed' : {'default': None, 'type': str, 'help': 'Same as --edgefile.', },
'--fixnegbg' : {'default': False, 'type': None, 'help': 'Will perform a final background correction to avoid slight negative values near zeroes', },
'--flcf' : {'default': False, 'type': None, 'help': 'use slower aligner (experimental)', },
'--flip' : {'default': False, 'type': None, 'help': 'Flip the tomogram by rotating the tilt axis. need --load existing alignment', },
'--fourier' : {'default': False, 'type': None, 'help': 'gradient descent in fourier space', },
'--frac' : {'default': None, 'type': str, 'help': 'Processes a fraction of the data, used automatically by --threads. <n>,<ntot>', },
'--frames' : {'default': False, 'type': None, 'help': 'Write corrected stack of frames.', },
'--framexsize' : {'default': 0, 'type': int, 'help': 'This correspond to the X   size in pixes of the images/frames in the raw tilt series; that is, the size of the entire frame   along the X axis (perpendicular to the direction of the tilt axis in the aligned tilt series).   It is used to calculate the distance of each particle (subtiltseries) to the tilt axis, since   this will induce different shifts in defocus in 3-D for the actual particles. Particles   right at the tilt axis don't move "up" or "down" as they are tilted.   This MUST be provided if --subtiltsdir is provided.   Othwerwise, it will be read from the header of the images provided.', },
'--from_trained' : {'default': None, 'type': str, 'help': 'Train from an existing network', },
'--fsctxt2xml' : {'default': FSC Plot, 'type': str, 'help': 'Convert the input text FSC file into an xml file. The value provided is the title of the graph. For example: --fsctxt2xml="My Graph Title"', },
'--fscxml2txt' : {'default': False, 'type': None, 'help': 'Convert the input XML FSC file into a text file', },
'--fstat' : {'default': False, 'type': None, 'help': '(T/F)Calculate additional statistics in resolution table at end (QFACT, SSNR, CC, etc.). T Uses more than 50 percent more memory.', },
'--full' : {'default': False, 'type': None, 'help': 'Apply non-crystallographic symmetry to obtain 'full' structure.', },
'--fullcov' : {'default': False, 'type': None, 'help': 'Assume the input particles covers most of the orientation of the model. This gives better performance when the model is relatively feature-less, but is more likely to fail when there are incorrect particles in the input.', },
'--fullrange' : {'default': False, 'type': None, 'help': 'A specialized flag that disables auto contrast for the display of particles stacks and 2D images only.', },
'--gain_darkcorrected' : {'default': False, 'type': None, 'help': 'Do not dark correct gain image. False by default.', },
'--gainrefs' : {'default': , 'type': None, 'help': 'Specify a comma separated list of gain refereence stacks/images to import. Files will be placed in movierefs_raw. See --importation for additional options.', },
'--gamma' : {'default': 0, 'type': float, 'help': 'gamma in imagic convention.', },
'--gauss_autoboxer' : {'default': None, 'type': str, 'help': 'Name of autoboxed file whose autoboxing parameters (obtained via some previous run of Gauss autoboxer via the GUI) should be used for automatic boxing.', },
'--goldsize' : {'default': 30, 'type': float, 'help': 'Diameter (in pixels) of gold fiducials to erase.', },
'--goldstack' : {'default': , 'type': str, 'help': 'Name of the stack containing a few gold particles picked from the tomogram.', },
'--goldstandardoff' : {'default': False, 'type': None, 'help': 'Default=False. This will PREVENT splitting the dataset provided through --input into two groups, and the entire dataset will be refined together. If this parameter is NOT supplied (and thus the refinement is 'gold standard') and --ref is supplied, two copies of the reference will be generated and randomphase-lowpass filtered to the resolution specified through --refrandphase.', },
'--goldthreshtomo' : {'default': False, 'type': None, 'help': 'Zero out all densities above mean of max and min.', },
'--goodali' : {'default': False, 'type': None, 'help': 'Average of good aligned frames.', },
'--gpus' : {'default': -1, 'type': str, 'help': 'default=-1 (all available GPUs will be used). To select specific GPUs to use, provide them as a comma-separated list of integers.', },
'--gradin' : {'default': , 'type': str, 'help': 'reading from gradient output instead of recomputing', },
'--gradout' : {'default': , 'type': str, 'help': 'gradient output', },
'--greyscale' : {'default': False, 'type': None, 'help': 'Is the reference map in greyscale?', },
'--gridding' : {'default': False, 'type': None, 'help': 'Use a gridding method for rotation operations on particles. Requires particles to be square.', },
'--gridholesize' : {'default': 1, 'type': float, 'help': 'Default=1.0. Size of the carbon hole in micrometers for the simulated grid (this will determine the shifts in defocus for each particle at each tilt angle, depending on the position of the particle respect to the tilt axis; the tilt axis by convention goes parallel to Y through the middle of the tomogram.', },
'--gridoffset' : {'default': , 'type': str, 'help': 'x,y amount of pixels to translate the cylindrical mask if the carbon hole in your tomogram is off center.          The left bottom corner would be 0,0. Supply this parameter only if also supplying          --mask and the grid hole is not centered in the tomogram.', },
'--gridradius' : {'default': 0, 'type': int, 'help': 'Radius of the grid in pixels. Supply this parameter only if also supplying --mask.', },
'--groups' : {'default': 1, 'type': int, 'help': 'Default=0 (not used; data not split). This parameter will split the data into a user defined number of groups. For purposes of gold-standard FSC computation later, select --group=2.', },
'--guess' : {'default': False, 'type': None, 'help': 'Guess how to split micrographs into tilt series and the order of images in each tilt series from file names. Tilt angles must be incuded in file names. May and may not work depending on the file name format...', },
'--hacref' : {'default': 0, 'type': int, 'help': 'WARNING: MIGHT BE BUGGY OR NOT WORKING. Mulst supply references through --ref. Default=0 (not used by default). Size of the SUBSET of particles to use to build an initial reference by calling e2spt_hac.py which does Hierarchical Ascendant Classification (HAC) or 'all vs all' alignments.', },
'--headertransform' : {'default': None, 'type': int, 'help': 'This will take the xform.align2d header value from each particle, and apply it. Pass 0 to perform the transform or 1 to perform the inverse.', },
'--healpix' : {'default': 7.5, 'type': str, 'help': 'Angular Sampling Interval (Degrees)', },
'--helix-coords' : {'default': None, 'type': str, 'help': 'Save coordinates for helices to the file specified, which will have the EMAN1 *.box format:   x1-w/2        y1-w/2        w        w        -1                    x2-w/2        y2-w/2        w        w        -2', },
'--helix-images' : {'default': None, 'type': str, 'help': 'Save images of the helices. The file name specified will have helix numbers added to it.', },
'--helix-length' : {'default': -1, 'type': int, 'help': 'Helix length in pixels. Normally each filament can be an arbitrary length. This forces all new helices to a fixed size.', },
'--helix-width' : {'default': -1, 'type': int, 'help': 'Helix width in pixels. Overrides widths saved in the database or in an input file.', },
'--helixfile' : {'default': None, 'type': str, 'help': 'Start with existing secondary structure.', },
'--helixlength' : {'default': 16.2, 'type': float, 'help': 'helix length om angstroms', },
'--het' : {'default': False, 'type': None, 'help': 'Include HET atoms in the map', },
'--heter' : {'default': False, 'type': None, 'help': 'heterogeneity analysis.', },
'--highpasspix' : {'default': 0, 'type': int, 'help': 'Default=0 (not used). Number of Fourier pixels to apply highpass filter at. The processor used is filter.highpass.gauss.', },
'--highpasspixels' : {'default': 4, 'type': int, 'help': 'Default=4. Number of Fourier pixels to zero out during highpass filtering AFTER reconstruction (postprocessing). Provide 'None' or '0' to disactivate.', },
'--hires' : {'default': False, 'type': None, 'help': 'Perform CTF processing for projects targeting 2-6 A resolution', },
'--hist' : {'default': False, 'type': None, 'help': 'Data file(s) should be plotted as a histogram rather than displayed in 2-D.', },
'--hp' : {'default': -1, 'type': float, 'help': 'Apply a high-pass filter at the specified resolution when generating projections. Specify as resolution in A, eg - 100', },
'--iconpreproc' : {'default': False, 'type': None, 'help': 'default=False. If on, this will trigger a call to ICONPreProcess on the .st file supplied through --tiltseries.', },
'--icosahedral_symmetry' : {'default': False, 'type': None, 'help': 'Does it have icosahedral symmetry?', },
'--idx' : {'default': -1, 'type': int, 'help': 'index for an image in a stack', },
'--idxcache' : {'default': False, 'type': None, 'help': 'Ignored. Present for historical reasons.', },
'--imagestem' : {'default': , 'type': str, 'help': 'Default=None. If the images to apply ctf correction on are already unstacked and are individual mrc files, supply a common string to all of them.', },
'--imask' : {'default': None, 'type': int, 'help': 'Inside mask radius', },
'--imem' : {'default': 1, 'type': str, 'help': 'Memory Usage: 0 - Least Memory, 3 - Most memory', },
'--img2match' : {'default': , 'type': str, 'help': 'Path to the image or stack of images which --img2process will match after processing. Not compulsory if --apix is provided.', },
'--img2process' : {'default': , 'type': str, 'help': 'Path to the stack    that needs to be processed to match img2match. If you want to process multiple stacks    or files, just separate them by commas --imgs2process=vo1.mrc,vol2.hdf,file.pdb', },
'--imod_rotflipgain' : {'default': 0, 'type': int, 'help': 'Rotates the gain 90 degress counter clockwise X times. If value is greater than 3, gain image is flipped about the y axis before rotation.', },
'--import_boxes' : {'default': False, 'type': None, 'help': 'Import boxes', },
'--import_eman1' : {'default': False, 'type': None, 'help': 'This will import a phase-flipped particle stack from EMAN1', },
'--import_emx' : {'default': None, 'type': str, 'help': 'Import emx information and corresponding micrographs', },
'--import_movies' : {'default': False, 'type': None, 'help': 'Import DDD movies', },
'--import_particles' : {'default': False, 'type': None, 'help': 'Import particles', },
'--import_tiltseries' : {'default': False, 'type': None, 'help': 'Import tiltseries', },
'--import_tomos' : {'default': False, 'type': None, 'help': 'Import tomograms for segmentation and/or subtomogram averaging', },
'--importation' : {'default': copy, 'type': None, 'help': 'Specify import mode: move, copy or link', },
'--importctffind3' : {'default': False, 'type': None, 'help': 'Import ctffind3 data?', },
'--importctffind4' : {'default': False, 'type': None, 'help': 'Import ctffind4 data?', },
'--importrelionstar' : {'default': False, 'type': None, 'help': 'Import CTFFIND3 data in Relion STAR format. Put STAR files in 'ctffind3' folder', },
'--includeprojs' : {'default': False, 'type': None, 'help': 'If specified with --evalptclqual, projections will be written to disk for easy comparison.', },
'--incomplete' : {'default': 0, 'type': int, 'help': 'The degree of incomplete allowed in the tree on each level', },
'--indir' : {'default': ., 'type': str, 'help': 'Directory containing micrographs to be processed.', },
'--info' : {'default': False, 'type': None, 'help': 'If this is specified, information on the PDB file is displayed, no conversion is performed.', },
'--infodir' : {'default': , 'type': str, 'help': 'Folder typically produced by e2evalimage.py or previous runs of this program containing info.json files, one per tilt image in a tilt series. Each .json file should contain the fitted ctf and all associated parameters for each tilt image.', },
'--init' : {'default': False, 'type': None, 'help': 'Initialize the output matrix file before performing 'range' calculations', },
'--initial' : {'default': None, 'type': str, 'help': 'File containing starting class-averages. If not specified, will generate starting averages automatically', },
'--inixforms' : {'default': , 'type': str, 'help': 'Default=None. .json file containing a dict of transform to apply before reference generation', },
'--inplaneang' : {'default': None, 'type': float, 'help': 'In-plane angular sampling', },
'--input_set' : {'default': None, 'type': str, 'help': 'Normally the set used to create the class-averages is used as input. Use this with another version of the same set of particles, for example '__ctf_flip_proc' instead of '__ctf_flip'', },
'--inputaliparams' : {'default': , 'type': str, 'help': 'Default=None. .json file containing a dict of transforms to apply to 'pre-align' the particles.', },
'--inputavg' : {'default': None, 'type': str, 'help': 'Optional file containing alternate version of the particles to use for reconstruction after alignment', },
'--inputdir' : {'default': , 'type': str, 'help': 'Alternative to --input and --inputstem. Path to a directory containing individual subtiltseries stacks.', },
'--inputstring' : {'default': .mrc, 'type': str, 'help': 'default=.mrc. String common to all images to be processed. E.g., with '.mrc' as the default, all files in the directory ending in '.mrc' (or containing this as part of the filename) will be analyzed.', },
'--intensitycorrection' : {'default': False, 'type': None, 'help': '(T/F)Perform intensity-scale corrections on image groups?', },
'--interlv' : {'default': None, 'type': str, 'help': 'Specifies a 2nd input file. Output will be 2 files interleaved.', },
'--interp' : {'default': 0, 'type': str, 'help': 'Type of interpolation: 0 - Nearest Neighbor, 1 - Trilinear Interpolation (More Time-Consuming)', },
'--invert_gain' : {'default': False, 'type': None, 'help': 'Use reciprocal of input gain image', },
'--invertangles' : {'default': False, 'type': None, 'help': 'Default=False. If True, this will multiple all angles by -1, in case the directionality is messed up.', },
'--inverttemplate' : {'default': False, 'type': None, 'help': 'Multiply --template subsections by -1 to invert the contrast BEFORE looking for particles.', },
'--inverttomo' : {'default': False, 'type': None, 'help': 'Multiply --tomogram subsections by -1 to invert the contrast BEFORE looking for particles.', },
'--iterations' : {'default': 1, 'type': int, 'help': 'Iterations', },
'--itermask' : {'default': None, 'type': str, 'help': 'Used in iterative mode to define a mask to apply between iterations. The resulting reconstruction won't be masked per-se, but will be biased towards lower densities outside the mask.', },
'--iters' : {'default': p,p,p,t,r,p,r,d, 'type': str, 'help': 'iterations. Types of refinement separated by comma. p - 3d particle translation-rotation. t - subtilt translation. r - subtilt translation-rotation. d - subtilt defocus. Default is p,p,p,t,r,p,r,d', },
'--json' : {'default': 1, 'type': int, 'help': 'If writing output pdb, also write JSON metadata. Default: 1. Options: 0, 1', },
'--jsonali' : {'default': , 'type': str, 'help': 're-extract particles using a particle_param_xx json file from a spt alignment', },
'--jsonortcmp' : {'default': False, 'type': None, 'help': 'Compare the particle orientations from two .json files. Provide the path to 2 json files as arguments to the command.', },
'--k2' : {'default': False, 'type': None, 'help': 'Perform gain image correction on gain images from a Gatan K2. Note, these are the reciprocal of typical DDD gain images.', },
'--kboot' : {'default': 16, 'type': int, 'help': 'kboot', },
'--keep3d' : {'default': False, 'type': None, 'help': 'Keep all of the individual 3-D models used to make the variance map. This make take substantial disk space.', },
'--keepdust' : {'default': False, 'type': None, 'help': 'Do not remove 'dust' from mask (include objects smaller than gold fiducials).', },
'--ksize' : {'default': 15,15,15, 'type': str, 'help': 'Width of kernels of each layer, the numbers must be odd. Note the number of layers should be the same as the nkernel option.', },
'--layers' : {'default': 2, 'type': int, 'help': 'number of 1 pixel layers about the center to use for the projection in each direction (size in reduced image if --shrink used), ie 0->1, 1->3, 2->5. Default=2', },
'--limit_tilt' : {'default': -91, 'type': int, 'help': 'Limited tilt angle: positive for keeping side views, negative for keeping top views', },
'--listkeys' : {'default': False, 'type': None, 'help': 'Lists all of the keys in all of the specified info files', },
'--listoptions' : {'default': False, 'type': None, 'help': 'List all currently set user application preferences', },
'--listsel' : {'default': None, 'type': str, 'help': 'only reconstruct particles of indices from the given list', },
'--loadmodule' : {'default': , 'type': str, 'help': 'load module', },
'--localnorm' : {'default': False, 'type': None, 'help': 'local normalization. do not use yet....', },
'--localsizea' : {'default': 50, 'type': int, 'help': 'Size in Angstroms of the local region to compute the resolution in', },
'--long' : {'default': False, 'type': None, 'help': 'Long listing', },
'--lores' : {'default': False, 'type': None, 'help': 'Perform CTF processing for projects targeting 15-30 A resolution', },
'--low' : {'default': False, 'type': None, 'help': 'low level test', },
'--lowpassfrac' : {'default': 0, 'type': float, 'help': 'Default=0.0 (not used). Fraction of Nyquist to lowpass at. The processor used is filter.lowpass.tanh', },
'--lowpassresolution' : {'default': 100, 'type': float, 'help': 'Default=100. Resolution in angstroms to lowpass filter the tomogram AFTER reconstruction (postprocessing). Type 'None' or '0' to disactivate.', },
'--lp' : {'default': -1, 'type': float, 'help': 'Apply a low-pass filter at the specified resolution when generating projections. Specify the resolution in A, eg - 25', },
'--lrdecay' : {'default': 1, 'type': float, 'help': 'Learning rate multiplier after each iteration.', },
'--m3diter' : {'default': 4, 'type': int, 'help': 'The number of times the 3D reconstruction should be iterated', },
'--m3dold' : {'default': False, 'type': None, 'help': 'Use the traditional e2make3d program instead of the new e2make3dpar program', },
'--makevstack' : {'default': None, 'type': str, 'help': 'Creates a 'virtual' BDB stack with its own metadata, but the binary data taken from the (filtered) list of stacks', },
'--mapfile' : {'default': None, 'type': str, 'help': 'Density map file', },
'--mapfragment' : {'default': False, 'type': None, 'help': 'Generate initial maps by randomly removing portions of the input map rather than by phase randomizing.', },
'--mapthresh' : {'default': 0, 'type': float, 'help': 'Density threshold, bonds on density lower than threshold is not prefered', },
'--mapweight' : {'default': 1000, 'type': float, 'help': 'Weight of density, to balance between geometry and density score', },
'--maskbyangle' : {'default': False, 'type': None, 'help': 'Default=False. Requires --tltfile. This will mask out from tilted images the info that isn't present at the 0 tilt angle. It uses the tomo.tiltedgemask processor (type 'e2help.py processors' at the commandline to read a description of the processor and its parameters). Provide --maskbyanglefalloff and --maskbyanglesigma to modify the default parameters.', },
'--maskbyanglefalloff' : {'default': 4, 'type': int, 'help': 'Default=4. Number of pixels over which --maskbyangle will fall off to zero.', },
'--maskbyanglesigma' : {'default': 2, 'type': float, 'help': 'Default=2.0. Number of sigmas for the width of the gaussian fall off in --maskbyangle and --maskbyanglefalloff', },
'--masked' : {'default': False, 'type': None, 'help': 'If specified, each output subparticle will be masked based on the projection mask. Recommended.', },
'--maskfoff' : {'default': 0.1, 'type': float, 'help': 'Fall offf of the Gaussian mask, default=0.1', },
'--maskproc' : {'default': None, 'type': str, 'help': 'Default=none. If specified, this mask will be performed after the built-in automask, eg - mask.soft to remove the core of a virus', },
'--maskrad' : {'default': -1, 'type': int, 'help': 'Mask the recon using a spherical Gaussian mask (-1 = None), default=-1.0', },
'--maskref' : {'default': None, 'type': str, 'help': 'File containing the reference to compare the masked volumes with (required with --mask)', },
'--maskzeroes' : {'default': False, 'type': None, 'help': '(T/F) For individual particles, the area outside a circle with the radius of the particle will be set to zeros prior to taking the Fourier transform', },
'--massthresh' : {'default': 20, 'type': float, 'help': 'Threshold of total mass of each continous object to be considered a particle.', },
'--match' : {'default': None, 'type': str, 'help': 'Only include dictionaries matching the provided Python regular expression', },
'--matchto' : {'default': False, 'type': None, 'help': 'this will match the power spectrum of each image in --input to that --fillimage so that things are properly normalized.', },
'--matrix' : {'default': 0,0,0,0,0,0,0,0,0,0,0,0, 'type': str, 'help': 'transform matrix.', },
'--maxbad' : {'default': 2, 'type': int, 'help': 'Maximumum number of unassigned helices', },
'--maxbfactor' : {'default': 5000, 'type': float, 'help': 'Files with a B-factor higher than specified will be skipped', },
'--maxboxsz' : {'default': 64, 'type': int, 'help': 'maximum fourier box size to use. 2 x target Fourier radius.', },
'--maxmemory' : {'default': None, 'type': float, 'help': 'Maximum memory (in GB) available for each thread', },
'--maxmergenum' : {'default': 0, 'type': int, 'help': 'Default=0 (which means this option is off by default and not used). This is the maximum number of particles ('multiplicity') that any two given averages can have to be allowed to merge. For example, if at some point (some given iteration in the algorithm) a particular average "A" is an average of 10 particles, and --maxmergenum=8, this average "A" will only be allowed to merge with other averages that have 8 particles or less in them. This maintains "big classes" in a mutually exclusive state. For example, if --maxmergenum=1, particles will merge pair-wise in the first round; but after that averages with more than one particle will NOT merge each other, because they will contain 2 or more particles, which exceeds 'maxmergenum'. So in subsequent iterations, the averages formed in the first iteration will continue to take up raw particles or new averages (between single raw particles) might emerge; but "large averages" never inter-merge', },
'--maxpairerr' : {'default': 10, 'type': float, 'help': 'Maximum error match between pairs of helices, default=50', },
'--maxtiltangle' : {'default': 180, 'type': float, 'help': 'Maximum tiltangle permitted when finding tilt distances', },
'--mc2_flipgain' : {'default': 0, 'type': int, 'help': 'A value of 1 flips gain image vertically, 2 flips gain image horizontally. Default is 0.', },
'--mc2_patchX' : {'default': None, 'type': int, 'help': 'Use this many patches along X with MotionCor2. Default is 1, i.e. whole-frame alignment.', },
'--mc2_patchY' : {'default': None, 'type': int, 'help': 'Use this many patches along Y with MotionCor2. Default is 1, i.e. whole-frame alignment.', },
'--mc2_rotgain' : {'default': 0, 'type': int, 'help': 'Rotates the gain 90 degress counter clockwise X times. Rotation is applied before flipping.', },
'--mean1' : {'default': False, 'type': None, 'help': 'Indicates that the first image in the basis set is actually the mean image, which should be subtracted prior to projection. Output from e2msa requires this flag.', },
'--mergeeo' : {'default': False, 'type': None, 'help': 'Merge even odd lst.', },
'--mergelowres' : {'default': -1, 'type': float, 'help': 'merge low resolution information of the two subset.', },
'--mergesort' : {'default': None, 'type': str, 'help': 'Specify the output name here. This will merge all of the input .lst files into a single (resorted) output', },
'--micsuffix' : {'default': , 'type': str, 'help': 'A string denoting micrograph type. For example 'mrc', 'hdf', 'ser' ...', },
'--midinput' : {'default': None, 'type': str, 'help': 'middle layer input', },
'--midout' : {'default': , 'type': str, 'help': 'middle layer output', },
'--midres' : {'default': False, 'type': None, 'help': 'Perform CTF processing for projects targeting 7-15 A resolution', },
'--minbfactor' : {'default': 0, 'type': float, 'help': 'Files with a B-factor lower than specified will be skipped', },
'--mindist' : {'default': 10, 'type': float, 'help': 'minimum distance between particles in A. for reextraction only', },
'--minhelix' : {'default': 6, 'type': int, 'help': 'Minimum residues in a helix', },
'--mininclass' : {'default': 2, 'type': int, 'help': 'Try to eliminate classes with fewer than specified members. Default=2', },
'--minproj' : {'default': 1, 'type': int, 'help': 'Minimum number of projections/images in a class average, for a class average to be used for a reconstruction, default=auto', },
'--minrespx' : {'default': 4, 'type': int, 'help': 'skip the first x pixel in fourier space', },
'--minscore' : {'default': 0, 'type': float, 'help': 'Default=0.0 (which means this option is off by default and not used). Percent of the maximum score to use as a threshold for the minimum score to allow. For example, if the best pair in the first iteration yielded a score of -15.0, and you supply --minscore=0.9, any pair-wise alignments with a score worse than -15*0.9 = -13.5 will be forbidden. Remember that 'more negative' is 'better' in EMAN2.', },
'--mintiles' : {'default': 0, 'type': int, 'help': 'Minimum number of 'good tiles' in strip to consider it.', },
'--mirroraxis' : {'default': , 'type': str, 'help': 'Options are x or y, and the mirrored copy of the 2-D images will be generated before being put into the tilt series.', },
'--missingonly' : {'default': False, 'type': None, 'help': 'Operates only on images with missing __ctf_flip_invar files, for cases where a previous run failed before completion', },
'--modelout' : {'default': , 'type': str, 'help': 'output trained model file. only used when --projs is provided', },
'--models' : {'default': None, 'type': str, 'help': 'Comma separated list of reference maps used for classification. If a single map is provided, data will be split into two groups based on similarity to the single map.', },
'--models' : {'default': None, 'type': str, 'help': 'The map to use as a starting point for refinement', },
'--moretile' : {'default': False, 'type': None, 'help': 'Sample more tiles during reconstruction. Slower, but reduce boundary artifacts when the sample is thick', },
'--moverawdata' : {'default': False, 'type': None, 'help': 'Move raw data to directory ./raw_micrographs after filtration', },
'--MPI' : {'default': False, 'type': None, 'help': 'use MPI version', },
'--mraprep' : {'default': False, 'type': None, 'help': 'this is an experimental option', },
'--mrc16bit' : {'default': False, 'type': None, 'help': '(deprecated, use --outmode instead) output as 16 bit MRC file', },
'--mrc8bit' : {'default': False, 'type': None, 'help': '(deprecated, use --outmode instead) output as 8 bit MRC file', },
'--multicmp' : {'default': False, 'type': None, 'help': 'If set will apply a range of different comparators to the aligned particle data and generate a multicolumn text file', },
'--n1' : {'default': 0, 'type': float, 'help': 'n1.', },
'--n2' : {'default': 0, 'type': float, 'help': 'n2.', },
'--n3' : {'default': 0, 'type': float, 'help': 'n3.', },
'--naliref' : {'default': 5, 'type': int, 'help': 'Number of alignment references to when determining particle orientations', },
'--nameonly' : {'default': False, 'type': None, 'help': 'Only display the matching filenames. No other info.', },
'--nameroot' : {'default': , 'type': str, 'help': 'Prefix of micrographs to be processed.', },
'--nbatch' : {'default': 10, 'type': int, 'help': 'Number of batches per iteration', },
'--nbins' : {'default': 0, 'type': int, 'help': 'Used for histogram plot. Default=0 (not used). Number of bins for histogram. If not provided, the optimal bin number will be automatically calculated based on bin-width, computed using Scott's normal reference rule, width = (3.5*std)/cuberoot(n), where 'std' is the standard deviation of the distribution of scores and n is the number of values considered. Then, bins will be nbins = (max(scores) - min(scores)) / width.', },
'--nclass' : {'default': 2, 'type': int, 'help': 'Number of classes. Default is 2.', },
'--ncmult' : {'default': 1.05, 'type': float, 'help': 'Specify how much to multiply noise cutoff during flattening amplitude correction. Default is 1.05.', },
'--nearest_neighbor' : {'default': False, 'type': None, 'help': 'Perform nearest-neighbor instead of linear Fourier-space interpolation', },
'--negativetiltseries' : {'default': False, 'type': None, 'help': 'This indicates that the tilt series goes from -tiltrange to +tiltrange, or 0 to -tiltrange, then +tiltstep to +tiltrange if --bidirectional is specified.', },
'--nenrich' : {'default': 54, 'type': int, 'help': 'Number of additional particles to average with each particle. Default=5', },
'--nettag' : {'default': , 'type': str, 'help': 'Tag of the output neural net file. Will use the tag of good particles in training set by default.', },
'--new' : {'default': False, 'type': None, 'help': 'new pipeline format', },
'--newbox' : {'default': -1, 'type': int, 'help': 'New box size for extracted regions', },
'--newlabel' : {'default': , 'type': str, 'help': 'Label of output particles. Same as original particle label by default.', },
'--newwidget' : {'default': False, 'type': None, 'help': 'Use the new 3D widgetD. Highly recommended!!!!', },
'--nframe' : {'default': 5, 'type': int, 'help': 'number of frames in the trajectory', },
'--nframes' : {'default': 0, 'type': int, 'help': 'default=0 (not used). Number of expected frames per tilt angle, used to check whether errors occur in the stacking of images.', },
'--ninput' : {'default': 0, 'type': int, 'help': 'Number of input particles to read (first n in the file)', },
'--niters' : {'default': 4, 'type': int, 'help': 'Run this many iterations. Default is 4.', },
'--nkernel' : {'default': 40,40,1, 'type': str, 'help': 'Number of kernels for each layer, from input to output. The number of kernels in the last layer must be 1.', },
'--nmid' : {'default': 4, 'type': int, 'help': 'size of the middle layer', },
'--nnet' : {'default': None, 'type': str, 'help': 'Trained network input (nnet_save_xx.hdf)', },
'--no_ctf' : {'default': False, 'type': None, 'help': 'Disable CTF determination', },
'--nocache' : {'default': False, 'type': None, 'help': 'Don't use the database cache for this operation', },
'--nocolor' : {'default': False, 'type': None, 'help': 'Turns the ouput png(s) into grey scale figures. Instead of using different colors to distinguish between various curves on the same plot, this option will have the program automatically use different markers in black and white for each curve.', },
'--nocomments' : {'default': False, 'type': None, 'help': 'Removes the comments from each line of the lst file.', },
'--noctf' : {'default': False, 'type': None, 'help': 'skip ctf correction.', },
'--noderef' : {'default': False, 'type': None, 'help': 'If particle file was .lst, normally the output .lst will reference the original image file. With this option, the output will reference the .lst file instead, creating a lst pointing to another lst.', },
'--nodes' : {'default': nodes.hdf, 'type': str, 'help': '', },
'--nofullresok' : {'default': False, 'type': None, 'help': 'Overrides the requirement that the class-averages be made from _fullres particle images.', },
'--nogoldfinal' : {'default': False, 'type': None, 'help': 'If selected, the final iteration will turn off gold-standard behavior and both halves will be refined from the same model. Normally used with --tophat=local.', },
'--nogs' : {'default': False, 'type': None, 'help': 'Skip gold standard. This is not a great idea...', },
'--nogui' : {'default': False, 'type': None, 'help': 'Do not launch the GUI and set the average of the missing wedge statistics on all the volumes.', },
'--noise' : {'default': 0, 'type': float, 'help': 'Add Gaussian Noise', },
'--noisemax' : {'default': -1, 'type': float, 'help': 'Maximum resolution to examine for determining the noise parameters.', },
'--noisemin' : {'default': -1, 'type': float, 'help': 'Minimum resolution to examine for determining the noise parameters.', },
'--nolstout' : {'default': False, 'type': None, 'help': 'Skip writting lst output.', },
'--nomask' : {'default': False, 'type': None, 'help': 'no mask', },
'--nomean' : {'default': False, 'type': None, 'help': 'Suppress writing the average image as the first output image', },
'--nomeansub' : {'default': False, 'type': None, 'help': 'Suppress subtracting the mean from each input image, also implies --nomean', },
'--nonewpath' : {'default': False, 'type': None, 'help': 'Default=False. If True, a new --path directory will not be made. Therefore, whatever is sepcified in --path will be used as the output directory. Note that this poses the risk of overwriting data.', },
'--nonorm' : {'default': False, 'type': None, 'help': 'Suppress per image real-space normalization', },
'--nooutliers' : {'default': False, 'type': None, 'help': 'will set --range to eliminate a few of the most extreme values from both ends of the histogram', },
'--nopad' : {'default': False, 'type': None, 'help': 'No padding between boxes', },
'--nopreprocprefft' : {'default': False, 'type': None, 'help': 'Turns off all preprocessing that happens only once before alignment (--normproc, --mask, --maskfile, --clip, --threshold; i.e., all preprocessing excepting filters --highpass, --lowpass, --preprocess, and --shrink.', },
'--noradcor' : {'default': False, 'type': None, 'help': 'Normally a radial correction will be applied based on the --mode used. This option disables that correction.', },
'--norandomphase' : {'default': False, 'type': None, 'help': 'Suppress independent phase randomization of input map. Only appropriate if input map has been preprocessed in some suitable fashion.', },
'--norewrite' : {'default': False, 'type': None, 'help': 'skip existing files. do not rewrite.', },
'--normavg' : {'default': False, 'type': None, 'help': 'Normalize averages', },
'--normcomponent' : {'default': False, 'type': None, 'help': 'Normalize the dot product for each component of the output vector. If the basis spans the input vector, then the projected vector length will be 1, otherwise it will be less than 1.', },
'--normin' : {'default': normalize.edgemean, 'type': str, 'help': 'Apply a real space normalization to each input before FSC. Default normalize.edgemean. Use 'none' to disable.', },
'--norticklabels' : {'default': False, 'type': None, 'help': 'Disable radius tick labels', },
'--nosim' : {'default': False, 'type': None, 'help': 'Default=False. If on, the program will generate stacks of "perfect particles" in different random orientations, but with no missing wedge, no noise, no ctf parameters, etc. The output randstack.hdf will be identical to simptcls.hdf', },
'--nosingle' : {'default': False, 'type': None, 'help': 'Normally the multi-model refinement will be followed by N single model refinements automatically. If this is set the job will finish after making the split data sets.', },
'--nosmooth' : {'default': False, 'type': None, 'help': 'Disable smoothing of the background (running-average of the log with adjustment at the zeroes of the CTF)', },
'--nothetaticklabels' : {'default': False, 'type': None, 'help': 'Disable Theta tick labels', },
'--notmp' : {'default': False, 'type': None, 'help': 'Do not write temporary files.', },
'--notrandomize' : {'default': False, 'type': None, 'help': 'Default=False. This will prevent the simulated particles from being rotated and translated into random orientations.', },
'--nowedgefill' : {'default': False, 'type': None, 'help': 'Do not fill the missing wedge before classification.', },
'--nozcorrection' : {'default': False, 'type': None, 'help': 'If you    turn on this option and --subtiltsdir is provided, the position in Z of each subtomogram   will not be considered for CTF correction', },
'--npk' : {'default': 20, 'type': int, 'help': 'Number of landmarks to use (such as gold fiducials). Default is 20.', },
'--nptcls' : {'default': 10, 'type': int, 'help': 'Default=10. Number of simulated subtomograms to generate per reference model supplied.', },
'--npts' : {'default': -1, 'type': int, 'help': 'number of points to initialize.', },
'--nsample' : {'default': 2000, 'type': int, 'help': 'number of samples', },
'--nseedlimit' : {'default': 0, 'type': int, 'help': 'Maximum number of particles   to use. For example, if you supply a stack with 150 subtomograms, the program will   automatically select 128 as the limit to use because it's the largest power of 2 that is   smaller than 150. But if you provide, say --nseedlimit=100, then the number of particles   used will be 64, because it's the largest power of 2 that is still smaller than 100.', },
'--nsigmas' : {'default': 3, 'type': float, 'help': 'Default=3.0. Number of standard deviations above the mean to determine pixels to mask out (erase).', },
'--nsoln' : {'default': 1, 'type': int, 'help': 'number of solutions to keep at low resolution for the aligner', },
'--nsolns' : {'default': 1, 'type': int, 'help': 'number of peaks in the global search to refine, default=1.0', },
'--nsort' : {'default': 0, 'type': int, 'help': 'Number of output particles to generate (mainly for reverse mode)', },
'--nstd' : {'default': 2, 'type': float, 'help': 'build trajectories from -n x std to n x std of eigenvalues. default is 2', },
'--ntiltslow' : {'default': 0, 'type': int, 'help': 'Default=0 (not used). If you supply an even number 1 will be added to it (for example, 4 will be turned into 5). If --ntiltslow>0, it specifies the number of tiltimages to keep in each subtiltseries, starting from the zero-tilt image and incorporating particles from right and left, one at a time. For example, in a tiltseries from -60 to 60 degress with a step size of 2 degrees, --ntiltslow=5 would keep tiltimages at angles 0,2,-2,-4,-4.', },
'--ntiltslowneg' : {'default': 0, 'type': int, 'help': 'Default=0 (not used). If --ntiltslowneg>0, it specifies the number of tiltimages to keep in each subtiltseries, starting from the zero-tilt image and progressively incorporating particles from negatively tilted images only. For example, in a tiltseries from -60 to 60 degress with a step size of 2 degrees, --ntiltslowneg=5 would keep tiltimages at angles 0,-2,-4,-6,-8.', },
'--ntiltslowpos' : {'default': 0, 'type': int, 'help': 'Default=0 (not used). If --ntiltslowpos>0, it specifies the number of tiltimages to keep in each subtiltseries, starting from the zero-tilt image and progressively incorporating particles from positively tilted images only. For example, in a tiltseries from -60 to 60 degress with a step size of 2 degrees, --ntiltslowpos=5 would keep tiltimages at angles 0,+2,+4,+6,+8.', },
'--ntry' : {'default': 10, 'type': int, 'help': 'The number of different initial models to generate in search of a good one', },
'--numaslist' : {'default': None, 'type': str, 'help': 'extract the particle indexes (numbers) only from an lst file into a text file (one number per line).', },
'--numclasses' : {'default': 8, 'type': int, 'help': '# of classes', },
'--numiter' : {'default': 25, 'type': int, 'help': '# of iterations to refine', },
'--old' : {'default': False, 'type': None, 'help': 'old rtf+refine aligner', },
'--oldpath' : {'default': None, 'type': str, 'help': 'Path to the original refinement (input, required)', },
'--omega' : {'default': 0, 'type': float, 'help': 'omega.', },
'--omit' : {'default': 0, 'type': float, 'help': 'Randomly omit this percentage of atoms in the output map.', },
'--oneclass' : {'default': None, 'type': int, 'help': 'Create only a single class-average. Specify the number.', },
'--onein' : {'default': False, 'type': None, 'help': 'Read 1-d input images from a single 2-D image (oneout in e2basis.py, default out e2msa.py)', },
'--oneinali' : {'default': False, 'type': None, 'help': 'Read 1-d input images from a single 2-D image where the first 4 elements on each row are da,dx,dy,flip', },
'--oneout' : {'default': False, 'type': None, 'help': 'Output is a single 2-D image rather than a set of 1-D images', },
'--onlyflipphase' : {'default': False, 'type': None, 'help': '(T/F)Only flip phases?', },
'--onlynew' : {'default': False, 'type': None, 'help': 'Will skip any files for which __ctf_flip files already exist.', },
'--onlynoinvar' : {'default': False, 'type': None, 'help': 'Will skip any files for which __ctf_flip_invar files already exist.', },
'--optalpha' : {'default': 0.1, 'type': float, 'help': 'Penalization to apply during robust regression. Default is 0.1. If 0.0, unpenalized least squares will be performed (i.e., no trajectory smoothing).', },
'--optbox' : {'default': 512, 'type': int, 'help': 'Box size to use during alignment optimization. Default is 512.', },
'--optccf' : {'default': robust, 'type': str, 'help': 'Use this approach to determine relative frame translations. Note: 'robust' utilizes a bimodal Gaussian to robustly determine CCF peaks between pairs of frames in the presence of a fixed background.', },
'--optstep' : {'default': 448, 'type': int, 'help': 'Step size to use during alignment optimization. Default is 448.', },
'--orientclassn' : {'default': None, 'type': str, 'help': 'Specify a comma separated list of class numbers to extract in oriented particles mode.', },
'--orientcls' : {'default': None, 'type': str, 'help': 'Filename of a cls_result_xx or classmx_xx file.', },
'--orientedparticles' : {'default': None, 'type': str, 'help': 'Filename of the set (.lst file) with the particles used for the --orientcls file', },
'--original' : {'default': None, 'type': str, 'help': 'If the input stack was derived from another stack, you can provide the name of the original stack here', },
'--origname' : {'default': False, 'type': None, 'help': 'Adds the original STAR name as a comment on each image', },
'--outermask' : {'default': None, 'type': str, 'help': 'Optional. If specified, this mask is projected into 2-D and used to mask out noise outside the subunit. If not specified a thresholded subunitmask is used. Only useful with --masked.', },
'--outlierclass' : {'default': False, 'type': None, 'help': 'If selected, classes with fewer than mininclass particles will move permanently to an outlier class (the last class)', },
'--outnorescale' : {'default': False, 'type': None, 'help': 'If specified, floating point values will not be rescaled when writing data as integers. Values outside of range are truncated.', },
'--outpath' : {'default': None, 'type': str, 'help': 'Specify a destination folder for the compressed files. This will avoid overwriting existing files.', },
'--outputonly' : {'default': False, 'type': None, 'help': 'Skips all of the initial steps, and just generates the final output, assuming previous steps completed successfully', },
'--outtag' : {'default': , 'type': str, 'help': 'Tag of the segmentation output. When left empty, the segmentation will be saved to 'segmentations/<tomogram name>__<neural network tag>_seg.hdf'. When set, the output will be written to 'segmentations/<tomogram name>__<outtag>.hdf'', },
'--outxsize' : {'default': 0, 'type': int, 'help': 'Clip the output volume in x to this size. The default size is the nx size of the input images.', },
'--outysize' : {'default': 0, 'type': int, 'help': 'Clip the output volume in y to this size. The default size is the ny size of the input images.', },
'--outzsize' : {'default': 0, 'type': int, 'help': 'Clip the output volume in z to this size. The default size is the nx size of the input images.', },
'--overlap' : {'default': 4, 'type': int, 'help': 'Amount of oversampling to use in local resolution windows. Larger value -> larger output map', },
'--oversamp' : {'default': 1, 'type': int, 'help': 'Oversampling factor', },
'--oversample' : {'default': 4, 'type': int, 'help': 'Oversample noise image to smooth transitions from regions with different noise.', },
'--padtwod' : {'default': 2, 'type': float, 'help': 'padding factor', },
'--pairmask' : {'default': False, 'type': None, 'help': 'Will use the ref1/ref2 pair to generate a mask which is applied after subtracting ref1 from the particle', },
'--parallel' : {'default': thread:4, 'type': str, 'help': 'Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel', },
'--params' : {'default': None, 'type': str, 'help': 'Comma separated pairs of parameter:value. The parameter will be changed to the value specified.', },
'--parm' : {'default': , 'type': str, 'help': 'particle_parms_xx.json file from spt_refine, this provides both the input particles and alignment parameters', },
'--particles_label' : {'default': None, 'type': str, 'help': 'Input labels for particle file', },
'--particles_raw' : {'default': None, 'type': str, 'help': 'Input raw particle file', },
'--pas' : {'default': 110, 'type': str, 'help': 'choose whether to adjust position, amplitude, sigma. use 3 digit 0/1 input. default is 110, i.e. only adjusting position and amplitude', },
'--patchtrack' : {'default': -1, 'type': int, 'help': 'use patch tracking before landmark based alignment. input 0/1/2 as the number of patch tracking iterations.', },
'--path' : {'default': None, 'type': str, 'help': 'Path to the classified results (output). Default = multinoali_XX', },
'--pdb' : {'default': None, 'type': str, 'help': '<pdb file> Show PDB structure.', },
'--pdbfiles' : {'default': None, 'type': str, 'help': 'Specify one or mode pdb files you   wish to view', },
'--pdbout' : {'default': None, 'type': str, 'help': 'Name of file to write center of segments in PDB format.', },
'--phaseflip' : {'default': False, 'type': None, 'help': 'Perform phase flipping after CTF determination and writes to specified file.', },
'--phasefliphp' : {'default': False, 'type': None, 'help': 'Perform phase flipping with auto-high pass filter (deprecated)', },
'--phaseflipproc' : {'default': None, 'type': None, 'help': 'If specified _proc particles will be generated. Typical = filter.lowpass.gauss:cutoff_freq=.07', },
'--phaseflipproc2' : {'default': None, 'type': None, 'help': 'If specified _proc particles will be generated. Typical = filter.highpass.gauss:cutoff_freq=.005', },
'--phaseflipproc3' : {'default': None, 'type': None, 'help': 'If specified _proc particles will be generated. Typical = math.meanshrink:n=2', },
'--phaseflipproc4' : {'default': None, 'type': None, 'help': 'If specified _proc particles will be generated.', },
'--phaseflipproc5' : {'default': None, 'type': None, 'help': 'If specified _proc particles will be generated.', },
'--phaseflipsmall' : {'default': False, 'type': None, 'help': 'Produce an output set with 1/2 size particles for faster initial model work (deprecated)', },
'--phaseflipstrips' : {'default': False, 'type': None, 'help': 'This will   perform phase flipping on images of an aligned tilt series on a strip-by-strip basis,   assuming the supplied ctf parameters correspond to the proper values at the tilt axis,   either the same values for all images (--defocus,--ampcont,--cs,--apix,--voltage,--bfactor)   or a different set for each (--ctfparamsfile), taking into account the tilt angle for    each image (--tltfile), which should be supplied through an IMOD-like .tlt file.', },
'--phaseflipwhole' : {'default': False, 'type': None, 'help': 'This    will perform phase flipping on the entire image for each image in an aligned tilt    series using the CTF parameters supplied.', },
'--phi' : {'default': 0, 'type': float, 'help': 'phi.', },
'--phi0' : {'default': 0, 'type': float, 'help': 'lower bound for the inplane angle phi, default=0.0', },
'--phi1' : {'default': 359, 'type': float, 'help': 'Upper bound for the inplane angle phi, default=359.0', },
'--pingpong' : {'default': False, 'type': None, 'help': 'Cycle through the sequence forwards then backwards', },
'--pk_maxval' : {'default': -5, 'type': float, 'help': 'Maximum Density value of landmarks (n sigma). Default is -5', },
'--pk_mindist' : {'default': 0.125, 'type': float, 'help': 'Minimum distance between landmarks, as fraction of micrograph length. Default is 0.125', },
'--pkeep' : {'default': 0.8, 'type': float, 'help': 'fraction of particles to keep', },
'--pkkeep' : {'default': 0.9, 'type': float, 'help': 'Fraction of landmarks to keep in the tracking.', },
'--plane' : {'default': xy, 'type': str, 'help': 'Change the plane of image processing, useful for processing 3D mrcs as 2D images.', },
'--planethres' : {'default': 360, 'type': float, 'help': 'Maximum out of plane threshold for the tiltaxis. 0 = perfectly in plane, 1 = normal to plane', },
'--plot' : {'default': False, 'type': None, 'help': 'Data file(s) should be plotted rather than displayed in 2-D', },
'--plot3d' : {'default': False, 'type': None, 'help': 'Data file(s) should be plotted rather than displayed in 3-D', },
'--plotonly' : {'default': None, 'type': str, 'help': 'FSC curves to plot in separate plots. Skips fsc curve generation. Provide .txt. files separated by commas --plotonly=file1.txt,file2.txt,file3.txt etc...', },
'--plotout' : {'default': plot_ligand.txt, 'type': str, 'help': 'Name of a text file for the classification plot.', },
'--plst' : {'default': None, 'type': str, 'help': 'list of 2d particle with alignment parameters. will reconstruct before alignment.', },
'--pointwidth' : {'default': 1, 'type': float, 'help': 'The relative scale of the points plotted. The absoule size is dpenedent on particle count', },
'--polydegree' : {'default': None, 'type': int, 'help': 'Degree of the polynomial to fit.', },
'--poolsz' : {'default': 2,1,1, 'type': str, 'help': 'Pooling size for each layer. Note the number of layers should be the same as the nkernel option.', },
'--postmask' : {'default': , 'type': str, 'help': 'masking after 3d particle reconstruction. The mask is transformed if json', },
'--postproc' : {'default': , 'type': str, 'help': 'processor after 3d particle reconstruction', },
'--posz' : {'default': False, 'type': None, 'help': 'auto positioning along z axis', },
'--prec' : {'default': 0.01, 'type': float, 'help': 'Precision to determine what solutions are the 'same' used only statistics output, default=0.01', },
'--precheckfiles' : {'default': False, 'type': None, 'help': '"Make sure that only valid images found by --input=* are processed -if unreadable or bad images are fed to the program, it might crash.', },
'--preferredside' : {'default': None, 'type': float, 'help': 'Default=None. Standard deviation in degrees to use to generate a set of orientations with a mean altitude equal to 90 degrees. Works in conjuction with --preferredtop, in which case half of the particles will be biased towards 'top' view orientations and half towards 'side' view orientations.', },
'--preferredtop' : {'default': None, 'type': float, 'help': 'Default=None. Standard deviation in degrees to use to generate a set of orientations with a mean altitude equal to 180 and 0 degrees (half of the particles will be oriented around mean alt=0, half around mean alat=180). Works in conjuction with --preferredside, in which case half of the particles will be biased towards 'top' view orientations and half towards 'side' view orientations.', },
'--prenadmaxite' : {'default': 0, 'type': int, 'help': 'Default=0. Requires IMOD to be installed. Used to apply prenad filtering to a tiltseries. This is the --maxite parameter in IMOD's preNAD program (maximum number of iterations).', },
'--prenadminite' : {'default': 0, 'type': int, 'help': 'Default=0. Requires IMOD to be installed. Used to apply prenad filtering to a tiltseries. This is the --minite parameter in IMOD's preNAD program (minimum number of iterations).', },
'--prenadsigma' : {'default': 0, 'type': int, 'help': 'Default=0. Requires IMOD to be installed. Used to apply prenad filtering to a tiltseries. This is the --sigma parameter in IMOD's preNAD program (initial sigma for 'smoothing structure tensor').', },
'--print_symmetry' : {'default': False, 'type': None, 'help': 'Print all symmetry transformation matrices, and exit', },
'--printbad' : {'default': 180, 'type': float, 'help': 'Print the particle number if the orientation mismatch is larger than the specified angle in the last pair of files', },
'--proc1' : {'default': filter.lowpass.gauss:cutoff_abs=.25, 'type': None, 'help': 'If specified _proctag files will be generated. Typical = filter.lowpass.gauss:cutoff_abs=.25', },
'--proc2' : {'default': filter.highpass.gauss:cutoff_pixels=5, 'type': None, 'help': 'If specified _proctag tomograms will be generated. Typical = filter.highpass.gauss:cutoff_pixels=5', },
'--proc3' : {'default': normalize, 'type': None, 'help': 'If specified _proctag tomograms will be generated.', },
'--proc4' : {'default': threshold.clampminmax.nsigma:nsigma=3, 'type': None, 'help': 'If specified _proctag tomograms will be generated. Typical = threshold.clampminmax.nsigma:nsigma=3', },
'--proc5' : {'default': , 'type': None, 'help': 'If specified _proctag tomograms will be generated.', },
'--program' : {'default': imod_alignframes, 'type': str, 'help': 'Use this external program to align frames. Choose between imod_alignframes and ucsf_motioncor2. Note, programs must be accessible from your PATH environment variable.', },
'--projin' : {'default': None, 'type': str, 'help': 'When generating subspace projections, use this file instead of the input used for the MSA', },
'--projs' : {'default': , 'type': str, 'help': 'projections with orientations (in hdf header or comment column of lst file) to train model', },
'--pruneccc' : {'default': False, 'type': None, 'help': 'Pruned based on ccc mean and sigma.', },
'--pruneprj' : {'default': False, 'type': None, 'help': 'Generate a projection along the z-axis of potential particles, and compare to a projection of the template.', },
'--prunetest' : {'default': 0.1, 'type': float, 'help': 'Default=0.1.   Decimal number that indicates the percentage of --tilesize (in terms of side length)    to tolerate of 'bad' values (i.e., empty regions of constant density) at the corners,    and still include the tile for CTF fitting. For example, if --tilesize=256, and   --prunetest=0.1, a box of ~25-26 pixels each corner of every tile will be analyzed   and if the standard deviation of any of the corners is 0, the tile will be excluded.   To turn off this option supply --prunetest=-1.0. The program automatically adjusts    things so that the minimum size of regions at the corners to check will be 4x4 pixels.', },
'--psi' : {'default': 0, 'type': float, 'help': 'psi in spider convention.', },
'--psrange' : {'default': 10,15,5, 'type': str, 'help': 'phase shift range (start, end, step). default is 10, 15, 5', },
'--ptcl-coords' : {'default': None, 'type': str, 'help': 'Save coordinates of the centers of particles to the specified formatted text file', },
'--ptcl-images-stack-mode' : {'default': multiple, 'type': str, 'help': 'Options for saving particle images to stack files. 'single' uses one stack file, 'multiple' (default) uses one stack file per helix, 'none' uses a file for each particle and is always used when the output file format does not support image stacks.', },
'--ptcl-images' : {'default': None, 'type': str, 'help': 'Save images of the particles. The file name specified will have helix numbers (and particle numbers if the file type does not support image stacks) added to it.', },
'--ptcl-length' : {'default': -1, 'type': int, 'help': 'Particle length in pixels', },
'--ptcl-norm-edge-mean' : {'default': False, 'type': None, 'help': 'Apply the normalize.edgemean processor to each particle.', },
'--ptcl-not-rotated' : {'default': False, 'type': None, 'help': 'Particles are oriented as on the micrograph. They are square with length max(ptcl_length, ptcl_width).', },
'--ptcl-overlap' : {'default': -1, 'type': int, 'help': 'Particle overlap in pixels', },
'--ptcl-width' : {'default': -1, 'type': int, 'help': 'Particle width in pixels', },
'--ptclradius' : {'default': 0, 'type': int, 'help': 'The estimated radius of the particle in pixels.', },
'--ptclsin' : {'default': , 'type': str, 'help': 'particles input for alignment', },
'--ptclsize' : {'default': -1, 'type': int, 'help': 'Longest axis of particle in pixels (diameter, not radius)', },
'--ptclsout' : {'default': , 'type': str, 'help': 'aligned particle output', },
'--ptclstack' : {'default': , 'type': str, 'help': 'Name of the stack containing a few sample particles picked from the tomogram, used to create an initial template.                with which to search for particles throughout the tomogram.', },
'--q' : {'default': 0, 'type': float, 'help': 'q in sgirot convention.', },
'--quaternion' : {'default': False, 'type': None, 'help': 'Use Quaterions for tilt distance computation', },
'--quick' : {'default': False, 'type': None, 'help': 'Use a slight approximation to the Gaussian during insertion. Does not support B-factors.', },
'--quiet' : {'default': False, 'type': None, 'help': 'Verbose is the default', },
'--radcut' : {'default': -1, 'type': float, 'help': 'For use in the GUI, truncate the polar plot after R. -1 = no truncation', },
'--randclassify' : {'default': False, 'type': None, 'help': 'Generate initial maps by randomly assigning the particles in each class to each model after the first iteration.', },
'--randnclass' : {'default': -1, 'type': int, 'help': 'split into N random classes. ignore refs', },
'--random' : {'default': -1, 'type': int, 'help': 'Specifying N will randomly seed N particles on density above threshold. default is -1, means only choosing peaks. Useful for non-globular particles', },
'--randomn' : {'default': 0, 'type': int, 'help': 'Selects a random subset of N particles from the file to operate on.', },
'--randomphase' : {'default': 0, 'type': float, 'help': 'Randomize initial model to certain frequency.', },
'--randorient' : {'default': False, 'type': None, 'help': 'Instead of seeding with a random volume, seeds by randomizing input orientations', },
'--randphase' : {'default': False, 'type': None, 'help': 'Generate initial maps by randomizing the phase of the given model.', },
'--randstack' : {'default': , 'type': str, 'help': 'Default=None. If you already have a stack of particles (presumably in random orientations) you can supply it here.', },
'--randsym' : {'default': False, 'type': None, 'help': 'randomize symmetry unit assignment at the begining. seems to be helpful for high symmetry without obvious asymetrical features..', },
'--rangeali' : {'default': , 'type': str, 'help': 'Average frames 'n1-n2'', },
'--rclas' : {'default': 10, 'type': float, 'help': 'High resloution limit used for classification', },
'--rcmp' : {'default': ccc, 'type': str, 'help': 'comparitor and params to use for the 3D refiner, default='ccc'', },
'--recalcmean' : {'default': False, 'type': None, 'help': 'This will recompute the mean from the input set and subtract before projection. Useful if a different normalization is used than in the original basis file.', },
'--recompute' : {'default': False, 'type': None, 'help': 'default=False. This parameter requires --classmx and will recompute averages (for example, even and odd) based on the classmx file and the alignment parameters specified therein for each particle. No refinements will follow. This is exclusively for recomputing averages.', },
'--reconmode' : {'default': trilinear, 'type': str, 'help': 'Intepolation mode for reconstruction. default is trilinear. check e2help.py for details. Not recommended to change.', },
'--redobispec' : {'default': False, 'type': None, 'help': 'Recomputes bispectra from masked particles', },
'--redoharmonic' : {'default': False, 'type': None, 'help': 'Recomputes harmonic power from masked particles', },
'--redoinvar' : {'default': None, 'type': None, 'help': 'Recomputes invariants', },
'--ref_label' : {'default': , 'type': str, 'help': 'Optional: Specify a label for the averaged dark and gain references when using multiple, individual frames. A labeled will be written as movierefs/dark_<label>.hdf and movierefs/gain_<label>.hdf. Note: This option is ignored when using a single reference image/stack.', },
'--ref_volume' : {'default': None, 'type': None, 'help': 'The reference volume for orientation determination.', },
'--ref1' : {'default': None, 'type': str, 'help': 'Rather than using a mask, ref1/ref2 permit using a pair of volumes for classification.', },
'--ref2' : {'default': None, 'type': str, 'help': 'Rather than using a mask, ref1/ref2 permit using a pair of volumes for classification.', },
'--refgenmethod' : {'default': bt, 'type': str, 'help': 'Method for generating the initial reference(s). Options are 'bt', for binary tree (see e2spt_binarytree.py), 'hac', for hierarchical ascendant classification (see e2spt_hac.py), or 'ssa' for self-symmetry alignment (see e2symsearch3d.py). Default=bt', },
'--refheader' : {'default': None, 'type': str, 'help': 'If supplied, the header of this image will be copied to the header of all images in --input.', },
'--refile' : {'default': None, 'type': str, 'help': 'similar to retype, but replaces the full filename of the source image file with the provided string', },
'--refine_defocus' : {'default': False, 'type': None, 'help': 'do defocus refinement. need aliptcls input. doesn't work with refine_trans or rot yet..', },
'--refine_rot' : {'default': False, 'type': None, 'help': 'do translational-rotational alignment. better to start from an existing translational alignment.', },
'--refine_trans' : {'default': False, 'type': None, 'help': 'do translational alignment.', },
'--refinebysnr' : {'default': False, 'type': None, 'help': 'Refines the defocus value by looking at the high resolution smoothed SNR. Requires good starting defocus. Important: also replaces the SNR with a smoothed version.', },
'--refinedefocus' : {'default': False, 'type': None, 'help': 'Will use EMAN2 CTF fitting to refine the defocus by SNR optimization (+-0.1 micron from the current values, no astigmatism adjustment)', },
'--refinemulti' : {'default': False, 'type': None, 'help': 'Extracts particles based on the model_id header value in each class-average, normally produced by e2refinemulti', },
'--refinemultireftag' : {'default': , 'type': str, 'help': 'Default=''. DO NOT USE THIS PARAMETER. It is passed on from e2spt_refinemulti.py if needed.', },
'--refitdefocus' : {'default': False, 'type': None, 'help': 'Will use EMAN2 CTF fitting to refit the defocus values (+-0.1 micron, astigmatism unchanged)', },
'--refn' : {'default': 0, 'type': int, 'help': 'Number of the reference image in 'ref'. Default=0', },
'--refs' : {'default': None, 'type': str, 'help': '3D reference volumes', },
'--regparam' : {'default': 1, 'type': float, 'help': 'Regularization Parameter T (weights experimental data vs. prior', },
'--remaplstkeys' : {'default': False, 'type': None, 'help': 'For JSON files where the keys are image name,# pairs referencing a .lst file, will replace each key with the original image', },
'--removekey' : {'default': None, 'type': str, 'help': 'DANGER! This will remove all data associated with the named key from all listed .json files.', },
'--removesub' : {'default': None, 'type': str, 'help': 'If set will exclude the specified string from imported filenames', },
'--replacestring' : {'default': , 'type': str, 'help': 'default=None. Comma separated strings to replace in the input filenames with an underscore. For example, if --stem2stack=data, and this triggers the program to find images named 'data[1].mrc', 'data[2].mrc', etc., supplying --replacestring=[,] will first change the filename of the images to 'data_1_.mrc, data_2_.mrc, etc.', },
'--reprj_clip' : {'default': -1, 'type': int, 'help': 'clip after reprojection', },
'--reprj_offset' : {'default': , 'type': str, 'help': 'Offset translation before reprojection', },
'--reproject' : {'default': False, 'type': None, 'help': 'Reproject 3D particles into 2D particles.', },
'--resample' : {'default': False, 'type': None, 'help': 'If set, will perform bootstrap resampling on the particle data for use in making variance maps.', },
'--reshigh' : {'default': 25, 'type': float, 'help': 'Resolution of the data included in the alignment. This is the high resolution value. ex:25', },
'--reslimit' : {'default': 10, 'type': float, 'help': 'Low-pass filter the individual maps to target the variance to the specified resolution in A. Variance maps cannot be filtered as a post-processing operation. Default = 10', },
'--reslow' : {'default': 200, 'type': float, 'help': 'Resolution of the data included in the alignment. This is the low resolution value. ex:200', },
'--resolution' : {'default': False, 'type': None, 'help': 'generates a resolution and convergence plot for a single refinement run.', },
'--restack' : {'default': , 'type': str, 'help': '.hdf, or 3D .st, .mrc, .ali, or .mrcs stack file to restack. This option can be used with --include or --exclude to unstack only specific images. Recall that the FIRST image INDEX is 0 (but unstacked image will be numbered from 1). --exclude=1,5-7,10,12,15-19 will exclude images 1,5,6,7,10,12,15,16,17,18,19', },
'--restore' : {'default': None, 'type': str, 'help': 'Write changes in the derived virtual stack back to the original stack', },
'--reverse_dark' : {'default': False, 'type': None, 'help': 'Flip dark reference along y axis. Default is False. Transformation order is rotate then reverse.', },
'--reverse_gain' : {'default': False, 'type': None, 'help': 'Flip gain reference along y axis (about x axis). Default is False. Transformation order is rotate then reverse.', },
'--reverse' : {'default': False, 'type': None, 'help': 'Sort in order of least mutual similarity', },
'--rmedge' : {'default': False, 'type': None, 'help': 'Remove particles on the edge.', },
'--rmgold' : {'default': False, 'type': None, 'help': 'Remove particles near gold fiducial.', },
'--rot' : {'default': None, 'type': str, 'help': 'Rotate map. Specify az,alt,phi or convention:par=val:par=val:...  eg - mrc:psi=22:theta=15:omega=7', },
'--rotate_dark' : {'default': 0, 'type': str, 'help': 'Rotate dark reference by 0, 90, 180, or 270 degrees. Default is 0. Transformation order is rotate then reverse.', },
'--rotate_gain' : {'default': 0, 'type': str, 'help': 'Rotate gain reference by 0, 90, 180, or 270 degrees. Default is 0. Transformation order is rotate then reverse.', },
'--rotavg' : {'default': False, 'type': None, 'help': 'Compute the 1-D rotational average of each image as a final step before writing the output', },
'--rotsearch' : {'default': False, 'type': None, 'help': 'At each translation position, vary euler angles as well when searching for particles.', },
'--round' : {'default': float, 'type': None, 'help': 'If float (default), apply subpixel frame shifts. If integer, use integer shifts.', },
'--rrec' : {'default': 10, 'type': float, 'help': 'Resolution of reconstruction in angstroms. It is the resolution to which the reconstruction is calculated.', },
'--rtp' : {'default': False, 'type': None, 'help': 'make a rotational footprint', },
'--runctffind3' : {'default': False, 'type': None, 'help': 'Run ctffind3 on the selected micrographs?', },
'--runctffind4' : {'default': False, 'type': None, 'help': 'Run ctffind4 on the selected micrographs?', },
'--safemode' : {'default': False, 'type': None, 'help': 'Safe mode without the timer...', },
'--sampfscs' : {'default': False, 'type': None, 'help': 'If set, full fsc curves are stored for a range of specific locations within the volume', },
'--sample' : {'default': -1, 'type': int, 'help': 'use only N samples.', },
'--samples' : {'default': 256, 'type': int, 'help': 'Number of samples in the plotted curve', },
'--save-ext' : {'default': hdf, 'type': str, 'help': 'The default file extension to use when saving 'particle' images. This is simply a convenience for improved workflow. If a format other than HDF is used, metadata will be lost when saving.', },
'--save2d' : {'default': False, 'type': None, 'help': 'If on, the CTF   corrected subtiltseries will be saved as 2-D imag stacks [one per particle].', },
'--save3d' : {'default': False, 'type': None, 'help': 'If on, the CTF   corrected subtiltseries will be reconstrcuted into subvolumes and save into a stack.   Options --reconstructor, --pad2d, --pad3d are used if --save3d is on.', },
'--saveallpeaks' : {'default': False, 'type': None, 'help': 'Default=False. If set, this will save the alignment information and score for all examined peaks --npeakstorefine during coarse alignment.', },
'--saveanglestacks' : {'default': , 'type': str, 'help': 'Default=None. Comma separated values of tilt angle indexes for which you want to save all particles as a stack. For example, if you want all particles from the 0 tilt image, you would provide the index for that image in the tilt series. In a tilt series with 61 images (1-61), the 0 tilt image is probably image number 31, so you would say --saveanglestakcs=31, and all the particles from the 0 tilt image would be put into a single HDF stack.', },
'--savefft' : {'default': False, 'type': None, 'help': 'Default=False. Saves the average of the ffts of the tiles for an image or its strips.', },
'--saveffts' : {'default': False, 'type': None, 'help': 'Saves   ffts of each average of tiles per strip, for all images.', },
'--savehalftiltseries' : {'default': False, 'type': None, 'help': 'Default=False. If this parameter is on, the odd and even subtiltseries will be saved.', },
'--savehalfvolumes' : {'default': False, 'type': None, 'help': 'Default=False. If this parameter is on, the odd and even volumes will be saved.', },
'--savemissingtilts' : {'default': False, 'type': None, 'help': 'Default=False. Save tilt images corresponding to the missing wedge region.', },
'--savenoise' : {'default': False, 'type': None, 'help': 'Default=False. If on, it saves the noise stack for each particle. This can be useful for testing alignment under varying SNR, so that the same noise (just at a different ratio/level) is tested.', },
'--savenorm' : {'default': None, 'type': str, 'help': 'If set, will save the normalization volume showing Fourier space filling to the specified file', },
'--saveorthostack' : {'default': False, 'type': None, 'help': 'Default=False. If on, --nptcls is ignored and you get 3 subtomograms (simulated from the model supplied) which are orthogonal to each other.', },
'--savepath' : {'default': False, 'type': None, 'help': 'save alignment path in a json file for testing.', },
'--savepreprocessed' : {'default': False, 'type': None, 'help': 'Default=False. Will save the intermediate steps of preprocessing of the tomogram.', },
'--saveprjs' : {'default': False, 'type': None, 'help': 'Default=False. Save the projections (the 'tilt series') for each simulated subtomogram.', },
'--saverandstack' : {'default': True, 'type': None, 'help': 'Default=True. DEPREPCATED. [This option is on by default and there's no way to turn it off. The stack of randomly oriented particles before simulating the missing wedge WILL be saved]. Save the stack of randomly oriented particles, before subtomogram simulation (before the missing wedge and noise are added).', },
'--savesim' : {'default': None, 'type': str, 'help': 'Save all of the similarity results to a text file. (ptcl#,proj#,alt,az,sim)', },
'--savesinograms' : {'default': False, 'type': None, 'help': 'If provided,   this option will save the sinogram for each 2-D slice (along Y) in the reconstruction    to disk.', },
'--saveslices' : {'default': False, 'type': None, 'help': 'If provided,   this option will save each reconstructed 2-D slice (along Y) to disk.', },
'--savestriptiles' : {'default': False, 'type': None, 'help': 'Saves   all tiles for all strips, for all images, in one stack per strip.', },
'--savetlt' : {'default': False, 'type': None, 'help': 'Default=False. Save a text file with .tlt extension (as in IMOD) containing the tilt angles for the simulated tomogram and/or subtomograms.', },
'--savevols' : {'default': False, 'type': None, 'help': 'This option will save the reconstructed volumes at each iteration.', },
'--scipytest' : {'default': False, 'type': None, 'help': 'test scipy optimizer.', },
'--scorebands' : {'default': 0, 'type': int, 'help': 'If specified will generate averages over N bands of 'score' values, including only particles in each band.', },
'--scorebandsali' : {'default': 0, 'type': int, 'help': 'If specified will generate averages over N bands of 'score' values, including only particles in each band, and iteratively realigning in each band.', },
'--scorebestset' : {'default': 0, 'type': int, 'help': 'Will extract the N particles with the best scores to make a new set', },
'--scoreprogressive' : {'default': 0, 'type': int, 'help': 'If specified will generate progressive averages over N bands of 'score' values, including all particles starting with the best through the progressive bands.', },
'--scratchdir' : {'default': /tmp, 'type': str, 'help': 'Internal use only. Used by the MPI client', },
'--seedweight' : {'default': 1, 'type': float, 'help': 'If seedmap specified, this is how strongly the seedmap will bias existing values. 1 is default, and is equivalent to a one particle weight.', },
'--seedweightmap' : {'default': None, 'type': str, 'help': 'Specify a full map of weights for the seed. This must be in the same format as the --savenorm output map.', },
'--segment' : {'default': False, 'type': None, 'help': 'Segment particles.', },
'--segout' : {'default': None, 'type': str, 'help': 'Output stack for individual segmented volumes', },
'--select' : {'default': None, 'type': str, 'help': 'Works only on the images in named selection set from bdb:select', },
'--seqali' : {'default': False, 'type': None, 'help': 'Align each particle to the previous particle before saving with rotate_translate_tree. No flip in alignment. Aligns stack #2 instead if provided.', },
'--seqalicen' : {'default': False, 'type': None, 'help': 'Align each particle to the previous particle before saving, with a postalignment recentering. No flip in alignment. Aligns stack #2 instead if provided.', },
'--server' : {'default': False, 'type': None, 'help': 'Launch a display server which can communicate with other EMAN3 programs', },
'--serverport' : {'default': 31980, 'type': int, 'help': 'Specify the port to listen to, needed for multiple users on one machine, default=31980', },
'--set2tiltaxis' : {'default': False, 'type': None, 'help': 'Default=False. Simulate particles along the tilt axis only.', },
'--setoption' : {'default': None, 'type': str, 'help': 'Set a single option in application preferences, eg - display2d.autocontrast:true', },
'--setsfpairs' : {'default': False, 'type': None, 'help': 'Applies the radial structure factor of the 1st image to the 2nd, the 3rd to the 4th, etc', },
'--setsfref' : {'default': False, 'type': None, 'help': 'This will impose the 1-D structure factor of the reference on the class-average (recommended when a reference is available)', },
'--sfout' : {'default': sf.txt, 'type': str, 'help': 'output', },
'--sharpfiltres' : {'default': 0, 'type': float, 'help': 'If specified, the edited img2process will be sharply filtered to this resolution.', },
'--shifttocenter' : {'default': False, 'type': None, 'help': 'Shift the output pdb to center of the density map', },
'--shrink3d' : {'default': 0, 'type': int, 'help': 'Shrink the class-averages and make a downsampled variance map', },
'--shrinkcompare' : {'default': 0, 'type': int, 'help': 'Shrink factor for classification only (for speed)', },
'--shrinktomo' : {'default': 0, 'type': int, 'help': 'Requires IMOD. Default=0 (no shrinking). Integer factor by which the tomogram will be shrunk.', },
'--sigma' : {'default': False, 'type': None, 'help': 'with --average, this will also produce standard deviation images for each average', },
'--sigmareg' : {'default': 0.5, 'type': float, 'help': 'regularizer for the sigma of gaussian width. Larger value means all Gaussian functions will have essentially the same width. Smaller value may help compensating local resolution difference.', },
'--sigrange' : {'default': None, 'type': str, 'help': 'Specify <minsig>,<maxsig>, eg- 4,4 Number of standard deviations below and above the mean to retain in the output. Default is not to truncate. 4-5 is usually safe.', },
'--simmx' : {'default': None, 'type': str, 'help': 'Will use transformations from simmx on each particle prior to analysis', },
'--simpleout' : {'default': False, 'type': None, 'help': 'Simpler 2 column output file (appends)', },
'--simref' : {'default': False, 'type': None, 'help': 'Default=False. This will make a simulated particle in the same orientation as the original --input, saved to its own separate file.', },
'--simtemplatesn' : {'default': 0, 'type': int, 'help': 'Number of orientations to simulate templates (that is, --template will be put into --simtemplatesn different orientations, and a 'subtomogram' will be simulated for each through projections by calling e2spt_simulation.py using the information in --angles or --tiltrange and --nslices.', },
'--simthr2' : {'default': 0, 'type': float, 'help': 'Simlarity score for the best matching final alignment. Scaling may be different due to resolution limit. Default 0', },
'--simvec' : {'default': False, 'type': None, 'help': 'Instead of using the class for the peak value, uses the pattern of similarities for each orientation for assignment.', },
'--singleimage' : {'default': False, 'type': None, 'help': 'Display a stack in a single image view', },
'--singleplot' : {'default': False, 'type': None, 'help': 'It --plotonly provided, all FSC curves will be on the same plot/figure', },
'--size' : {'default': 192, 'type': int, 'help': 'Size of particles, 192 default for comparisons', },
'--sizez' : {'default': 0, 'type': int, 'help': 'Default=0 (not used). Output size in Z for the reconstructed tomogram. This should be the same as the --thickness value provided during tiltseries preprocessing, or larger (it's good to make sure the entire reconstruction will fit in the reconstruction volume without being too tight). If running a reconstruction of the .ali file and both --thickness and --sizez are provided, the latter will supersede the former.', },
'--skeleton' : {'default': none, 'type': str, 'help': 'skeleton file', },
'--skeletonwt' : {'default': 1, 'type': float, 'help': 'skeleton weight', },
'--skelpath' : {'default': None, 'type': str, 'help': 'Optional (recommended) output from the e2skelpath.py program', },
'--skip3d' : {'default': False, 'type': None, 'help': 'do not make 3d particles. only generate 2d particles and 3d header.', },
'--skipgolderasing' : {'default': False, 'type': None, 'help': 'default=False. If on, this will call IMOD to generate a new aligned tiltseries after ICONPreProcess, and then ICON-GPU will be automatically called to perform the reconstruction. Typically, one would NOT use this option as it is useful to delete the gold fiducials prior to reconstruction.', },
'--skipm3d' : {'default': False, 'type': None, 'help': 'skip make3d. only output aligned list', },
'--skippostp' : {'default': False, 'type': None, 'help': 'Skip post process steps (fsc, mask and filters)', },
'--skipstripping' : {'default': , 'type': str, 'help': 'Default=None. Comma-separated list of image indexes to exclude from strip-based fitting (in this case, only global defocus tiling the entire image wil be measured).', },
'--slow' : {'default': False, 'type': None, 'help': 'rtf_slow alignment', },
'--smalldump' : {'default': False, 'type': None, 'help': 'Lists contents of an entire database, but only list 2 items per dictionary to better see headers', },
'--smear' : {'default': 0, 'type': int, 'help': 'Used in conjunction with --phitoo, this will rotationally smear between phi steps. The user must specify the amount of smearing (typically 2-10)', },
'--smooththresh' : {'default': 100, 'type': float, 'help': 'If --smooth is provided the curve will be smoothed only up to this resolution. Default is 100.', },
'--snr' : {'default': None, 'type': float, 'help': 'Default=None. Number smaller than 1.0 to make the final SNR in each tilt image. This will be calculated as SNR=sgima_signal/sigma_noise. 0.5 might be a good number assuming typical cryoEM-SPA images have SNR of 0.1 or less, and cryoET tilt series are collected with 4-6x the dose as cryoEM-SPA images.', },
'--solver' : {'default': None, 'type': str, 'help': 'Run TSP Solver: concorde or lkh', },
'--sortcomment' : {'default': False, 'type': None, 'help': 'Sorts rows based on per-row comment (after #) before merging', },
'--sortdefocus' : {'default': False, 'type': None, 'help': 'Sorts the micrographs in order by defocus', },
'--split' : {'default': None, 'type': int, 'help': 'Splits the input file into a set of n output files', },
'--spliteo' : {'default': False, 'type': None, 'help': 'split even/odd set so there is no overlap of particles from the two sets.', },
'--splitparticles' : {'default': False, 'type': None, 'help': 'Specify this to write new files containing the classified particles', },
'--sqrt_wt' : {'default': False, 'type': None, 'help': 'Normally class-averages are weighted into the reconstruction based on the number of particles in the average. This option causes the sqrt of the number of particles to be used instead.', },
'--ssaref' : {'default': 0, 'type': int, 'help': 'WARNING: MIGHT BE BUGGY OR NOT WORKING. Mulst supply references through --ref. Default=0 (not used by default). Size of the SUBSET of particles to use to build an initial reference by calling e2symsearch3d.py, which does self-symmetry alignments. You must provide --sym different than c1 for this to make any sense.', },
'--ssnrwt' : {'default': False, 'type': None, 'help': 'weight particles by SSNR accroding to references', },
'--stacks' : {'default': , 'type': str, 'help': 'Comma separated list of HDF image stacks to process.', },
'--stagetilt' : {'default': 0, 'type': float, 'help': 'Amount of tiliting of the cryo stage, default=0, get the stage tilt from particle attributes. Only possible if e2RCTboxer was used for particle picking', },
'--startfrom' : {'default': None, 'type': str, 'help': 'Path to an existing refine_xx directory to continue refining from. Alternative to --input and --model.', },
'--startiter' : {'default': 0, 'type': int, 'help': 'iter', },
'--startres' : {'default': -1, 'type': float, 'help': 'starting maximum resolution. required when goldstandard is not specified', },
'--startweight' : {'default': 1, 'type': float, 'help': 'This is the starting model weight', },
'--stem' : {'default': None, 'type': str, 'help': 'Some parameters have common stems. For example, 'origin_x', 'origin_y', 'origin"x'. Supply the stem and all parameters containing it will be modified.', },
'--stem2stack' : {'default': , 'type': str, 'help': 'String common to all the files to put into an .st stack, which is in .MRC format; for example, --stem2stack=.hdf will process all .hdf files in the current directory. If not specified, all valid EM imagefiles in the current directory will be put into an .st stack.', },
'--stemval' : {'default': None, 'type': str, 'help': 'New value for all parameters containing --stem.', },
'--steps' : {'default': 10, 'type': int, 'help': 'Number of steps (for the MC). Default=10.', },
'--stepx' : {'default': 20, 'type': int, 'help': 'Number of tiles to generate on x-axis (different defocus)', },
'--stepy' : {'default': 40, 'type': int, 'help': 'Number of tiles to generate on y-axis (same defocus)', },
'--storebad' : {'default': False, 'type': None, 'help': 'Even if a class-average fails, write to the output. Forces 1->1 numbering in output', },
'--storeparm' : {'default': False, 'type': None, 'help': 'Output files will include CTF info. CTF parameters are used from the database, rather than values that may be present in the input image header. Critical to use this when generating output !', },
'--streaksubtract' : {'default': None, 'type': str, 'help': 'This will subtract the histogram peak value along a single axis in the volume.', },
'--stripstep' : {'default': 0, 'type': int, 'help': 'This will determine the   amount of strips and the overlap between them for defocus estimation. The default    is half the tilesize. For example, for a 4000x4000 pixels image, a tile size of   400 would yield 20, not 10 strips, by default. If --stripstep=1 were provided, the   image would be devided into 4000-400=3600 strips. The first strip would go from pixel   0 to pixel 400, the second strip from pixel 1 to pixel 401, the third from pixel 2   to 402, etc... up to the las strip going from pixel 3600 to 4000.', },
'--strucfac' : {'default': None, 'type': str, 'help': 'Structure factor file', },
'--subpix' : {'default': 1, 'type': int, 'help': 'Specify the number of linear    subdivisions used to compute the projection of one image pixel onto a detector pixel.', },
'--subset4ref' : {'default': None, 'type': int, 'help': 'Size of the subset of particles to use for generating each reference. Default=0, which means all particles in each subgroup will be used (for example, if --input has 100 particles and --nref is 10, 10 references will be generated using 10 particles for each). If --ref not provided, the program generates an --nref number of references from --input.', },
'--subsettrans' : {'default': 0, 'type': int, 'help': 'Default=0 (not used). Subset of particles to keep/consider after translational alignment.', },
'--subtiltsdir' : {'default': , 'type': str, 'help': 'Provide a directory containing individual stacks, where each stack is a 'mini tilt series' or a 'subtilt series' for single particles. Then, each image for each particle in the dir will be phase-phlipped using the ctf parameters you provide. If each image in the subtilt series is at a different defocus, then the parameters should be provided through --ctfparamsfile, whith a different defocus value per row. (There should be as many rows as images in each subtiltseries).', },
'--subtractbackground' : {'default': False, 'type': None, 'help': '(Experimental. Not working yet). This will extract a box from the tomogram much larger than the subtomogram. Projections will be generated. You MUST provide --tomogram for this.', },
'--subunit' : {'default': 1, 'type': int, 'help': 'Number of subunits.', },
'--subunitmask' : {'default': None, 'type': str, 'help': 'Required. When applied to the 3-D volume, this mask contains the subunit being extracted. 'soft' edges are permitted', },
'--swap' : {'default': False, 'type': None, 'help': 'Swap the byte order', },
'--symalimask' : {'default': None, 'type': str, 'help': 'This will translationally realign each asymmetric unit to the previous map masked by the specified mask. While this invokes symalimasked in e2spt_average, this isn't the same, it is a mask, not a masked reference.', },
'--symmetrize' : {'default': False, 'type': None, 'help': 'Symmetrize volume after alignment.', },
'--symmgroup' : {'default': C, 'type': None, 'help': 'Symmetry group', },
'--symmnumber' : {'default': 1, 'type': int, 'help': 'Symmetry number', },
'--syms' : {'default': , 'type': str, 'help': 'List comma-separated symmetries to apply separately on the different references. For example, if you provide --syms=d8,d7 and provide 2 references via --nref=2 or supply two references via --refs=r1.hdf,r2.hdf, d8 symmetry will be applied to the first reference and d7 to the second after each iteration of refinement (the final average in one iteration becomes a reference for the next).', },
'--tag' : {'default': None, 'type': str, 'help': '"String to append to the beginning of the tiltseries output filename. The default is filename is 'stack.st'; if tag=xxx, the output will be 'xxx_stack.st'', },
'--tarres' : {'default': 20, 'type': float, 'help': 'target resolution', },
'--taskin' : {'default': None, 'type': str, 'help': 'Internal use only. Used when executing local threaded tasks.', },
'--taskout' : {'default': None, 'type': str, 'help': 'Internal use only. Used when executing local threaded tasks.', },
'--template' : {'default': None, 'type': str, 'help': 'Default=None. Path to file containing the template    to search for particles throughout the tomogram. Alternatively, provide --template=sphere    to generate a spherical template from scratch. This requires also setting --boxsize and --ptclradius.   You can also provide --template=cylinder, which generates a solid or hollow cylinder,   depending on which of the following options you specify:   --template=cylinder:radius=r:height=h:radiusinner=ri:heightinner=hi.   radiusinner and heightinner MUST be specified together, and must be smaller   than radius and height; otherwise they will be defaulted to radius/2 and height/2.', },
'--templatethreshold' : {'default': 0, 'type': float, 'help': 'A binary threshold will be applied to the template which will zero out all the densities below the supplied value,              and will make the densities above the supplied value equal to one.', },
'--terror' : {'default': None, 'type': int, 'help': 'Default=None. Range of random translation error in pixels to perturb individual 2-D images in each subtiltseries by along x, y and z. The random translation perturbation will be picked between -terror and +terror. If set, this will overwrite --txerror, --tyerror and --tzerror.', },
'--test' : {'default': False, 'type': None, 'help': 'N.A.', },
'--theta' : {'default': 0, 'type': float, 'help': 'theta.', },
'--thickness' : {'default': 0, 'type': int, 'help': 'default=0. Thickness of the specimen as seen in a preliminary weighted back projection reconstruction from IMOD (through how many slices in Z are there specimen densities?).', },
'--threed2threed' : {'default': False, 'type': None, 'help': 'Process 3D image as a stack of 2D slices, then output as a 3D image', },
'--threed2twod' : {'default': False, 'type': None, 'help': 'Process 3D image as a stack of 2D slices, then output as a 2D stack', },
'--threedout' : {'default': None, 'type': str, 'help': 'map output', },
'--tidrange' : {'default': -1,-1, 'type': str, 'help': 'range of tilt id to include', },
'--tiltangle' : {'default': None, 'type': float, 'help': 'Default=None. Single 2D image or image stack to calculate CTF for.', },
'--tiltaxislocation' : {'default': -1, 'type': int, 'help': 'By default, the tilt axis will be assumed to run through the middle of the tomogram in X, parallel to the Y axis. For example, if the dimensions of the tomogram are 4096x3000x500, the tilt axis will be assumed to be at X=2048. Provide a different integer number to change the location of the tilt axis (it will still be assumed to be parallel to Y though).', },
'--tiltaxisptcls' : {'default': -1, 'type': int, 'help': 'Specifies the distance from the tilt axis to consider particles for extraction. By default, all particles will be extracted. However, if you provide, for example, --tiltaxisptls=10, only particles with centers -10 to 10 pixels away from the tilt axis will be extracted.', },
'--tltax' : {'default': None, 'type': float, 'help': 'Angle of the tilt axis. Note the angle stored internally will have an opposite sign. The program will calculate one if this option is not provided.', },
'--tltrange' : {'default': None, 'type': str, 'help': 'Include only tilts between 'START' and 'STOP', i.e. -40.0,40.0. Default behavior is to include all tilts.', },
'--tltstep' : {'default': 2, 'type': float, 'help': 'Step between tilts. Ignored when rawtlt is provided. Default is 2.0.', },
'--tmppath' : {'default': None, 'type': str, 'help': 'Temporary path', },
'--tomosides' : {'default': , 'type': str, 'help': 'Comma separated values for the tomogram dimensions. Alternatively, provide the path to the tomogram itself through --tomogram.', },
'--track' : {'default': False, 'type': None, 'help': 'Default=False (not used). If supplied, this option will track particles from one tilt image to another.', },
'--trackytoo' : {'default': False, 'type': None, 'help': 'Default=False (not used). In theory, particles should not drift in Y with tilt angle. Still, this option can turn Y tracking on.', },
'--train' : {'default': None, 'type': str, 'help': 'train on tomo', },
'--training' : {'default': False, 'type': None, 'help': 'Doing training', },
'--trainout' : {'default': False, 'type': None, 'help': 'Output the result of the training set', },
'--trainset_output' : {'default': None, 'type': str, 'help': 'output file name of the training set.Default is the input particle file name plus _trainset.hdf', },
'--trainset' : {'default': None, 'type': None, 'help': 'Training set.', },
'--trange' : {'default': None, 'type': int, 'help': 'Default=None. Maximum number of pixels to randomly translate each subtomogram in all X, Y and Z. The random translation will be picked between -transrage and +trange; --txrange, --tyrange and --tzrange overwrite --trange for each specified direction.', },
'--translateonly' : {'default': False, 'type': None, 'help': 'Default=False. This will force the aligner to not do any rotations and thus serves for translational centering. Specify search values through --search, otherwise its default value will be used.', },
'--tries' : {'default': 10, 'type': int, 'help': 'The number of different initial models to generate in search of a good one', },
'--tstcls' : {'default': -1, 'type': int, 'help': 'Will generate tst.hdf containing test images for a specified class-number', },
'--twod2threed' : {'default': False, 'type': None, 'help': 'Process a stack of 2D images, then output as a 3D image.', },
'--twodstack' : {'default': False, 'type': None, 'help': 'default=False (not used). Produces a stack of 2D images (Z number of images of X,Y size under the same "virutal stack" file name). By default, the output stack will be a 3D stack (a single image of size X,Y,Z, where Z is equal to the number of stacked frames).', },
'--txerror' : {'default': None, 'type': int, 'help': 'Default=None. Range of random translation error in pixels to perturb individual 2-D images in each subtiltseries by along x. The random translation perturbation will be picked between -txerror and +txerror. Default value is set by --terror, but --txerror will overwrite it if specified.', },
'--txrange' : {'default': None, 'type': int, 'help': 'Default=None. Maximum number of pixels to randomly translate each subtomogram in X. The random translation will be picked between -txrange and +txrange. Default value is set by --trange, but --txrange will overwrite it if specified.', },
'--tyerror' : {'default': None, 'type': int, 'help': 'Default=None. Range of random translation error in pixels to perturb individual 2-D images in each subtiltseries by along y. The random translation perturbation will be picked between -tyerror and +tyerror. Default value is set by --terror, but --tyerror will overwrite it if specified.', },
'--type' : {'default': eman, 'type': str, 'help': 'convention type', },
'--tyrange' : {'default': None, 'type': int, 'help': 'Default=None. Maximum number of pixels to randomly translate each subtomogram in Y. The random translation will be picked between -tyrange and +tyrange. Default value is set by --trange, but --txrange will overwrite it if specified.', },
'--tzrange' : {'default': None, 'type': int, 'help': 'Default=None. Maximum number of pixels to randomly translate each subtomogram in Z. The random translation will be picked between -tzrange and +tzrange. Default value is set by --trange, but --txrange will overwrite it if specified.', },
'--unbin' : {'default': -1, 'type': float, 'help': 'Unbin factor from input particles/tomogram to raw tilt. If unspecified, the program will calculate from the Apix of the header.', },
'--unboxedonly' : {'default': False, 'type': None, 'help': 'Only include image files without existing box locations', },
'--underfilter' : {'default': False, 'type': None, 'help': 'This will shift the computed Wiener filter to be about 10%% more resolution than has been achieved.', },
'--unstack' : {'default': , 'type': str, 'help': '.hdf, or 3D .st, .mrc, .ali, or .mrcs stack file to unstack. This option can be used with --include or --exclude to unstack only specific images. Recall that the FIRST image INDEX is 0 (but unstacked image will be numbered from 1). --exclude=1,5-7,10,12,15-19 will exclude images 1,5,6,7,10,12,15,16,17,18,19', },
'--unstacking' : {'default': False, 'type': None, 'help': 'Process a stack of 2D images, then output as a series of numbered single image files', },
'--useali' : {'default': False, 'type': None, 'help': 'Save aligned particles to the output file, note that if used with shrink= this will store the reduced aligned particles', },
'--usebasis' : {'default': 0, 'type': int, 'help': 'Select which Eigenimage to use for separation. With novarimax, n=0 is highest energy.', },
'--useframedf' : {'default': False, 'type': None, 'help': 'Use defocus/astig from whole frame even if particle-based value is present', },
'--useinverseali' : {'default': False, 'type': None, 'help': '"Use the inverse of the value stored in xform.align3d in the header of each particle.', },
'--useseedasref' : {'default': False, 'type': None, 'help': 'use seed map as reference to weight the particles.', },
'--usessnr' : {'default': False, 'type': None, 'help': 'Makes use of the class_ssnr header data to weight each slice during insertion, instead of the default behavior of just using the number of particles in the average as a global weight.', },
'--usethreads' : {'default': -1, 'type': int, 'help': 'max thread to use. only used for producing occupancy in mpi mode. default is the same as threads/mpi option given', },
'--usetomograms' : {'default': False, 'type': None, 'help': '"Re-extract particles from the original tomogram.', },
'--validset' : {'default': 0, 'type': float, 'help': 'Propotion of particles in validation set. Default is 0.2', },
'--valtype' : {'default': str, 'type': str, 'help': 'Type of the value to enforce. It can be: str, float, int, list, or transform.', },
'--verbosity' : {'default': 1, 'type': int, 'help': 'Set the level of verbosity for the code', },
'--volfiles' : {'default': False, 'type': None, 'help': 'This will bypass the construction of the individual resampled models, and use files previously generated with the --keep3d options', },
'--volume' : {'default': None, 'type': str, 'help': '3D volume to validate', },
'--vstack' : {'default': False, 'type': None, 'help': 'Will output to a bdb virtual stack instead of copying the image data. Input images must have been BDB for this to work.', },
'--vthr' : {'default': 2, 'type': float, 'help': 'value threshold (n sigma)', },
'--wedgeangle' : {'default': 60, 'type': float, 'help': 'Missing wedge angle', },
'--wedgef' : {'default': 0.5, 'type': float, 'help': 'Missingwedge ending', },
'--wedgei' : {'default': 0.05, 'type': float, 'help': 'Missingwedge begining', },
'--weight' : {'default': False, 'type': None, 'help': 'Weight the particles by the variance of defocus.', },
'--weightrecons' : {'default': False, 'type': None, 'help': 'Weight the reconstruction by particle numbers.', },
'--wholeimage' : {'default': False, 'type': None, 'help': 'Display an additional curve using the whole micrograph, not just particles.', },
'--windowsize' : {'default': 0, 'type': int, 'help': 'The amplitude contrast of the micrographs', },
'--winsize' : {'default': 17, 'type': int, 'help': '', },
'--withflipped' : {'default': False, 'type': None, 'help': 'Only include images with phase-flipped counterparts!', },
'--withinvar' : {'default': False, 'type': None, 'help': 'Only include images with _invar counterparts!', },
'--wn' : {'default': 256, 'type': int, 'help': 'Size of window to use (should be slightly larger than particle box size)', },
'--write_boxes' : {'default': False, 'type': None, 'help': 'Write coordinate file (eman1 dbbox) files', },
'--writeimages' : {'default': False, 'type': None, 'help': 'If specified, micrographs and particles will be written to the emx directory.', },
'--writemovie' : {'default': False, 'type': None, 'help': 'write all temporary files as a stack', },
'--writetmp' : {'default': False, 'type': None, 'help': 'Write output for each iteration', },
'--xdrift' : {'default': False, 'type': None, 'help': 'apply extra correction for drifting along x axis', },
'--xmax' : {'default': -1, 'type': int, 'help': 'Generate tiles in x-direction until this many pixels. If -1, will tile the entire image.', },
'--xmin' : {'default': -1, 'type': int, 'help': 'Start tiling on this x-pixel. If -1, will start one boxsize inward.', },
'--xraypixel' : {'default': False, 'type': None, 'help': 'Filter X-ray pixels', },
'--xstep' : {'default': 256, 'type': int, 'help': 'Step length in x-direction. If less than --boxsize, tiles will overlap. Default is 256.', },
'--xtilt' : {'default': 0, 'type': float, 'help': 'xtilt in xyz convention.', },
'--yes' : {'default': False, 'type': None, 'help': 'This will skip the 'are you sure' question, and proceed with the conversion', },
'--ymax' : {'default': -1, 'type': int, 'help': 'Generate tiles in y-direction until this many pixels. If -1, will tile the entire image.', },
'--ymin' : {'default': -1, 'type': int, 'help': 'Start tiling on this y-pixel. If -1, will start one boxsize inward.', },
'--ystep' : {'default': 256, 'type': int, 'help': 'Step length in y-direction. If less than --boxsize, tiles will overlap. Default is 256.', },
'--ytilt' : {'default': 0, 'type': float, 'help': 'ytilt in xyz convention.', },
'--zeroid' : {'default': -1, 'type': int, 'help': 'Index of the center tilt. Ignored when rawtlt is provided.', },
'--zerook' : {'default': False, 'type': None, 'help': 'Normally particles with zero value on the edge are considered to be bad. This overrides that behavior, primarily for simulated data.', },
'--zerotiltindx' : {'default': -1, 'type': int, 'help': 'The default is the image at the middle of the stack. Since the stack might have more images to the left or the right of the actual 0-tilt (or lowest tilt) image, you can explicitly provide the index of the lowest tilt image here. This is used for tracking images.', },
'--zshift' : {'default': half, 'type': str, 'help': 'By default, the tomogram will be shifted -half the ice thickness so that the middle of the tomogram is at z=0. Provide a positive or negative integer to shift the z position by a different amount', },
'--ztilt' : {'default': 0, 'type': float, 'help': 'ztilt in xyz convention.', },
'-a' : {'default': False, 'type': None, 'help': 'Show info for all images in file', },
'-C' : {'default': False, 'type': None, 'help': 'Checks to make sure all image numbers are populated with images, and that all images have valid CTF parameters', },
'-c' : {'default': False, 'type': None, 'help': 'Just show a count of the number of particles in each file', },
'-e' : {'default': None, 'type': None, 'help': 'Forced edge: e.g. -e1,3', },
'-E' : {'default': False, 'type': None, 'help': 'Show Euler angles from header', },
'-H' : {'default': False, 'type': None, 'help': 'Show all header information', },
'-N' : {'default': -1, 'type': int, 'help': 'Image number for single image info', },
'-O' : {'default': False, 'type': None, 'help': 'Statistics on number of outlier values, must be used with --stat', },
'-Q' : {'default': -1, 'type': int, 'help': 'Include only images with a single quality value (integer 0-9)', },
'-s' : {'default': False, 'type': None, 'help': 'Show statistical information about the image(s).', },
