[
 {
   "count": 140,
   "prog": "e2RCTboxer.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2a2d_align.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2a2d_average.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "1",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2a2d_masks.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "1",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2a2d_stat.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2align2d.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2align3d.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " Level of verboseness, default=0 "
 },
 {
   "count": 140,
   "prog": "e2basis.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2bdb.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2boxadjust.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2boxer.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2boxer_old.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2buildsets.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2buildstacks.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "1",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2classaverage.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2classesbyref.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2classextract.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2classify.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2classifykmeans.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2classifyligand.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2classifytree.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2classvsproj.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2compress.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2ctf_auto.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2ctffind3util.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2ctfsim.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2ddd_external.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higner number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2ddd_movie.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "4",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2ddd_particles.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2display.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2emx.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2enrich.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higner number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2erasefiducials.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2euler_refine.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2eulerxplor.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2evalimage.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2evalparticles.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2evalrefine.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2extractsubparticles.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2filtertool.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2fsc.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbosity [0-9]. Larger values produce more output. "
 },
 {
   "count": 140,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbosity [0-9]. Larger values produce more output. "
 },
 {
   "count": 140,
   "prog": "e2help.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2iminfo.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2import.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2initialmodel.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2initialmodel_hisym.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " Verbose "
 },
 {
   "count": 140,
   "prog": "e2make3d.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2make3dpar.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2maskbyclass.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2match.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2msa.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2parallel.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higner number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2pathwalker.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2pdbviewer.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher   number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2proc2d.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "1",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2proc2dpar.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "1",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2proc3d_huge.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2procheader.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness. "
 },
 {
   "count": 140,
   "prog": "e2procjson.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "1",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2proclst.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "1",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2proctxt.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "1",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2procxml.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "1",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2project3d.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2projectupdate21.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2ptcltrace.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2rawdata.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbosity [0-9] "
 },
 {
   "count": 140,
   "prog": "e2refine2d.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2refine_easy.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2refine_split.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2refinemulti.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2refinevariance.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2relionsubsettoset.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2reliontoeman.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2scannereval.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2segment3d.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2simmx.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2simmx2stage.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2simmxxplor.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2skelpath.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spa_align.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " Verbose "
 },
 {
   "count": 140,
   "prog": "e2spa_classify.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " Verbose "
 },
 {
   "count": 140,
   "prog": "e2spa_make3d.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2sparxtoeman.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2speedtest.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_align.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_average.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0. Verbose level [0-9], higher number means higher level of verboseness; 10-11 will trigger many messages that might make little sense since this level of verboseness corresponds to 'debugging mode' "
 },
 {
   "count": 140,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higner number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0. Verbose level [0-9], higher number means higher level of verboseness; 10-11 will trigger many messages that might make little sense since this level of verboseness corresponds to 'debugging mode' "
 },
 {
   "count": 140,
   "prog": "e2spt_classify.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness. "
 },
 {
   "count": 140,
   "prog": "e2spt_evalrefine.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_fftamp.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_hac.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0. Verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_isr.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " Default 0. Verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higner number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_preproc.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0. Verbose level [0-9], higher number means higher level of verboseness; 10-11 will trigger many messages that might make little sense since this level of verboseness corresponds to 'debugging mode' "
 },
 {
   "count": 140,
   "prog": "e2spt_project.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_recompute.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness. "
 },
 {
   "count": 140,
   "prog": "e2spt_refine.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_refinemsa.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_scramblestack.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_sgd.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higner number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_simulation.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_stat.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " Verbose "
 },
 {
   "count": 140,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness. "
 },
 {
   "count": 140,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "1",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2spt_wedgefill.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2ssematch.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2stackanim.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2stacksort.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2symbest.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2symsearch3d.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level ofoptions.verboseness. "
 },
 {
   "count": 140,
   "prog": "e2tilefile.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2tileimage.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2tiltseries.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "1",
   "type": " int ",
   "help": " verbose level [0-9], higner number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higner number means higher level of verboseness. "
 },
 {
   "count": 140,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness. "
 },
 {
   "count": 140,
   "prog": "e2tomo_stackframes.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness. "
 },
 {
   "count": 140,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness. "
 },
 {
   "count": 140,
   "prog": "e2tomogram.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " Verbose "
 },
 {
   "count": 140,
   "prog": "e2tomopreproc.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness. "
 },
 {
   "count": 140,
   "prog": "e2tomoseg_preproc.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higner number means higher level of verboseness "
 },
 {
   "count": 140,
   "prog": "e2tvrecon.py ",
   "option": " ['--verbose', '-v'] ",
   "default": "0",
   "type": " int ",
   "help": "    verbose level [0-9], higher number means higher level of verboseness. "
 },
 {
   "count": 169,
   "prog": "e2RCTboxer.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2a2d_align.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2a2d_average.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2a2d_masks.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2a2d_stat.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2align2d.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2align3d.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2basis.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2bdb.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2boxadjust.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2boxer.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2boxer_old.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2buildsets.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2buildstacks.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2classaverage.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2classesbyref.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2classextract.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2classify.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2classifykmeans.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2classifyligand.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2classifytree.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2classptcl.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2classvsproj.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2cmmtomrc.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2cmpxplor.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2compress.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2ctf_auto.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2ctffind3util.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2ddd_external.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2ddd_movie.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2ddd_particles.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2display.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2emx.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2enrich.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2erasefiducials.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2euler_refine.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2eulerxplor.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2evalimage.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2evalparticles.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2evalrefine.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2extractsubparticles.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2filtertool.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2fsc.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2fsc_local.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": "  "
 },
 {
   "count": 169,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2gmm.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2gmm_refine.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2helixboxer.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2help.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2iminfo.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2import.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2initialmodel.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2initialmodel_hisym.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2make3d.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2make3dpar.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2maskbyclass.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2match.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2motion.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2msa.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2pathwalker.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2pdbviewer.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent   process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2plotEulers.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2proc2d.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2proc2dpar.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2proc3d_huge.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2procheader.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2procjson.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2proclst.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2proctxt.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2project3d.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2ptcltrace.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2rawdata.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2rct.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2refine2d.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2refine_easy.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2refine_split.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2refinefromfrealign.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2refinemulti.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2refinevariance.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2relionsubsettoset.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2reliontoeman.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2runfrealign.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2scannereval.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2segment3d.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2simmx.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2simmx2stage.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2simmxxplor.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2skelpath.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spa_align.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " ppid... "
 },
 {
   "count": 169,
   "prog": "e2spa_classify.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " ppid... "
 },
 {
   "count": 169,
   "prog": "e2spa_make3d.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2sparxtoeman.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2speedtest.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_align.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_average.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=-1. Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_boxer.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " ppid "
 },
 {
   "count": 169,
   "prog": "e2spt_boxer_convnet.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_buildsets.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=-1. Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_classify.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_eval.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_evalrefine.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_extract.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_extractfromseg.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " ppid "
 },
 {
   "count": 169,
   "prog": "e2spt_fftamp.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=-1. Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_hac.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=-1. Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " default=-1. Set the PID of the parent process, used for cross platform PPID. "
 },
 {
   "count": 169,
   "prog": "e2spt_isr.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=1. Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_mapptclstotomo.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " ppid... "
 },
 {
   "count": 169,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_preproc.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=-1. Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_project.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_recompute.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_refine.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID. "
 },
 {
   "count": 169,
   "prog": "e2spt_sgd.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " ppid "
 },
 {
   "count": 169,
   "prog": "e2spt_simulation.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=-1. Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_stat.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " ppid "
 },
 {
   "count": 169,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " ppid... "
 },
 {
   "count": 169,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " ppid... "
 },
 {
   "count": 169,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_wedge.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2spt_wedgefill.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2ssehunter.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2ssematch.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2stackanim.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2stacksort.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2symbest.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2symsearch3d.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID. "
 },
 {
   "count": 169,
   "prog": "e2tilefile.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tiltseries.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tomo_drawcontour.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tomo_drawcurve.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tomo_eval.py ",
   "option": " ['--ppid'] ",
   "default": " None ",
   "type": " int ",
   "help": "  "
 },
 {
   "count": 169,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=-1. Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tomo_showali.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " ppid "
 },
 {
   "count": 169,
   "prog": "e2tomo_stackframes.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tomogram.py ",
   "option": " ['--ppid'] ",
   "default": "-2",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tomopreproc.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tomoresolution.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tomoseg_buildtrainset.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tomoseg_preproc.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process, used for cross platform PPID "
 },
 {
   "count": 169,
   "prog": "e2tvrecon.py ",
   "option": " ['--ppid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Set the PID of the parent process,    used for cross platform PPID. "
 },
 {
   "count": 60,
   "prog": "e2a2d_align.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to a folder where results should be stored. Creates a new folder if none specified (default = m2d_XX) "
 },
 {
   "count": 60,
   "prog": "e2a2d_average.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to a folder with existing e2a2d_align results (default = 2da_XX) "
 },
 {
   "count": 60,
   "prog": "e2a2d_masks.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to a folder with existing e2a2d_align results (default = 2da_XX) "
 },
 {
   "count": 60,
   "prog": "e2a2d_stat.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to a folder containing current results (default = highest spt_XX) "
 },
 {
   "count": 60,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to write initial model output. Default is initmodel_XX "
 },
 {
   "count": 60,
   "prog": "e2motion.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path for the refinement, default=auto "
 },
 {
   "count": 60,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of a directory where results are placed. Default = create new ptclmap_xx "
 },
 {
   "count": 60,
   "prog": "e2rct.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path for the rct reconstruction, default=auto "
 },
 {
   "count": 60,
   "prog": "e2refine2d.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path for the refinement, default=auto "
 },
 {
   "count": 60,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path for the refinement, default=auto "
 },
 {
   "count": 60,
   "prog": "e2refine_easy.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of a directory where results are placed. Default = create new refine_xx "
 },
 {
   "count": 60,
   "prog": "e2refine_split.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of an existing refine_xx folder, where e2refine_easy ran to completion "
 },
 {
   "count": 60,
   "prog": "e2refinemulti.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of a directory where results are placed. Default = create new multi_xx "
 },
 {
   "count": 60,
   "prog": "e2refinevariance.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of an existing refine_XX folder to use for input and output "
 },
 {
   "count": 60,
   "prog": "e2spa_refine.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " path. default is r3d_00 "
 },
 {
   "count": 60,
   "prog": "e2spa_refine_multi.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " path "
 },
 {
   "count": 60,
   "prog": "e2spt_align.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to a folder where results should be stored, following standard naming conventions (default = spt_XX) "
 },
 {
   "count": 60,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to a folder where results should be stored, following standard naming conventions (default = spt_XX) "
 },
 {
   "count": 60,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Directory to store results in. The default is a numbered series of directories containing the prefix 'sptautobox';                 for example, sptautobox_01 will be the directory by default if 'sptautobox' already exists. "
 },
 {
   "count": 60,
   "prog": "e2spt_average.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to a folder containing current results (default = highest spt_XX) "
 },
 {
   "count": 60,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to a folder containing current results (default = highest spt_XX) "
 },
 {
   "count": 60,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--path'] ",
   "default": " spt_bt ",
   "type": " str ",
   "help": " Default=spt. Directory to store results in. The default is a numbered series of directories containing the prefix 'spt'; for example, spt_02 will be the directory by default if 'spt_01' already exists. "
 },
 {
   "count": 60,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--path'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=none (not used). Used to extract particles without the GUI. Requires --coords. Name of directory to save data to. "
 },
 {
   "count": 60,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--path'] ",
   "default": " spt ",
   "type": " str ",
   "help": " Default=spt. Directory to store results in. The default is a numbered series of directories containing the prefix 'spt'; for example, spt_02 will be the directory by default if 'spt_01' already exists. "
 },
 {
   "count": 60,
   "prog": "e2spt_classify.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " path "
 },
 {
   "count": 60,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to an existing spt_XX folder with the alignment results to use, defualt = highest spt_XX "
 },
 {
   "count": 60,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--path'] ",
   "default": " sptctf ",
   "type": " str ",
   "help": " Directory to store results in. The default is a numbered series of directories containing the prefix 'sptctf'; for example, sptctf_02 will be the directory by default if 'sptctf_01' already exists. "
 },
 {
   "count": 60,
   "prog": "e2spt_evalsubtlt.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " path "
 },
 {
   "count": 60,
   "prog": "e2spt_hac.py ",
   "option": " ['--path'] ",
   "default": " spt_hac ",
   "type": " str ",
   "help": " Default=spt. Directory to store results in. The default is a numbered series of directories containing the prefix 'spt'; for example, spt_02 will be the directory by default if 'spt_01' already exists. "
 },
 {
   "count": 60,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--path'] ",
   "default": " spt_intrafsc ",
   "type": " str ",
   "help": " Default=sptintrafsc. Directory to save the results. "
 },
 {
   "count": 60,
   "prog": "e2spt_isr.py ",
   "option": " ['--path'] ",
   "default": "  ",
   "type": " str ",
   "help": " Directory to store results in. The default is a numbered series of directories containing the prefix 'sptisr'; for example, sptisr02 will be the directory by default if 'sptisr_01' already exists. "
 },
 {
   "count": 60,
   "prog": "e2spt_mapptclstotomo.py ",
   "option": " ['--path'] ",
   "default": "  ",
   "type": " str ",
   "help": " spt_xx path "
 },
 {
   "count": 60,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to a folder where results should be stored, following standard naming conventions (default = spt_XX) "
 },
 {
   "count": 60,
   "prog": "e2spt_preproc.py ",
   "option": " ['--path'] ",
   "default": " spt_preproc ",
   "type": " str ",
   "help": " Default=spt. Directory to store results in. The default is a numbered series of directories containing the prefix 'sptpreproc'; for example, sptpreproc_02 will be the directory by default if 'sptpreproc_01' already exists. "
 },
 {
   "count": 60,
   "prog": "e2spt_project.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to a folder containing current results (default = highest spt_XX) "
 },
 {
   "count": 60,
   "prog": "e2spt_recompute.py ",
   "option": " ['--path'] ",
   "default": "  ",
   "type": " str ",
   "help": " Name of directory where to save the output file. "
 },
 {
   "count": 60,
   "prog": "e2spt_refine.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify name of refinement folder. Default is spt_XX. "
 },
 {
   "count": 60,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " path "
 },
 {
   "count": 60,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify name of refinement folder. Default is spt_XX. "
 },
 {
   "count": 60,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " path "
 },
 {
   "count": 60,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Output path, default=sptcls_XX "
 },
 {
   "count": 60,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--path'] ",
   "default": "  ",
   "type": " str ",
   "help": " Directory to store results in. The default is a numbered series of directories containing the prefix 'spt_refinemulti'; for example, spt_refinemulti02 will be the directory by default if 'spt_refinemulti01' already exists. "
 },
 {
   "count": 60,
   "prog": "e2spt_remake3dptcl.py ",
   "option": " ['--path'] ",
   "default": " subtlt_00 ",
   "type": " str ",
   "help": " path to subtilt refinement "
 },
 {
   "count": 60,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--path'] ",
   "default": " e2sptfscs ",
   "type": " str ",
   "help": " Results directory. If not specified, defaults to e2sptfscs/ "
 },
 {
   "count": 60,
   "prog": "e2spt_sgd.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " path of output "
 },
 {
   "count": 60,
   "prog": "e2spt_simulation.py ",
   "option": " ['--path'] ",
   "default": " sptsim ",
   "type": " str ",
   "help": " Defautl=sptsim. Directory to store results in. The default is a numbered series of directories containing the prefix 'sptsim'; for example, sptsim_02 will be the directory by default if 'sptsim_01' already exists. "
 },
 {
   "count": 60,
   "prog": "e2spt_stat.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to a folder containing current results (default = highest spt_XX) "
 },
 {
   "count": 60,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--path'] ",
   "default": " spt_subtilt ",
   "type": " str ",
   "help": " Directory to save the results. "
 },
 {
   "count": 60,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--path'] ",
   "default": " subtlt_00 ",
   "type": " str ",
   "help": " Path to a folder where results should be stored, following standard naming conventions "
 },
 {
   "count": 60,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to the previous spt/subtlt refinement (required) "
 },
 {
   "count": 60,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--path'] ",
   "default": " sptstacker ",
   "type": " str ",
   "help": " Directory to store results in. The default is a numbered series of directories containing the prefix 'sptstacker'; for example, sptstacker_02 will be the directory by default if 'sptstacker_01' already exists. "
 },
 {
   "count": 60,
   "prog": "e2spt_trajfromrefine.py ",
   "option": " ['--path'] ",
   "default": " None ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 60,
   "prog": "e2symsearch3d.py ",
   "option": " ['--path'] ",
   "default": "  ",
   "type": " str ",
   "help": " Name of path for output file "
 },
 {
   "count": 60,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--path'] ",
   "default": "  ",
   "type": " str ",
   "help": " The folder the results are placed "
 },
 {
   "count": 60,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--path'] ",
   "default": " tomoctfraw ",
   "type": " str ",
   "help": " Directory to store results in. The default is a numbered series of directories containing the prefix 'tomoctfraw'; for example, sptctf_02 will be the directory by default if 'sptctf_01' already exists. "
 },
 {
   "count": 60,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--path'] ",
   "default": " icongpu ",
   "type": " str ",
   "help": " Default=icongpu. Name of the directory where to store the output results. Only works when reconstructing the .ali file (preprocessing of the .st file will output the preprocessed tiltseries to the current directory). A numbered series of 'icongpu' directories will be created (i.e., if the program is run more than once, results will be stored in iconpu_01, icongpu_02, etc., directories, to avoid overwriting data). "
 },
 {
   "count": 60,
   "prog": "e2tomo_showali.py ",
   "option": " ['--path'] ",
   "default": "  ",
   "type": " str ",
   "help": " path to tomorecon_xx directory to examine fiducial error. "
 },
 {
   "count": 60,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--path'] ",
   "default": " tomostacker ",
   "type": " str ",
   "help": " Directory to store results in. The default is a numbered series of directories containing the prefix 'sptstacker'; for example, sptstacker_02 will be the directory by default if 'sptstacker_01' already exists. "
 },
 {
   "count": 60,
   "prog": "e2tomopreproc.py ",
   "option": " ['--path'] ",
   "default": "  ",
   "type": " str ",
   "help": " Directory to store results in.    The default is a numbered series of directories containing the prefix 'tomopreproc';   for example, tomopreproc_02 will be the directory by default if 'tomopreproc_01'    already exists. "
 },
 {
   "count": 60,
   "prog": "e2tvrecon.py ",
   "option": " ['--path'] ",
   "default": " tvrecon_3d ",
   "type": " str ",
   "help": " Directory in which    results will be stored. "
 },
 {
   "count": 55,
   "prog": "e2a2d_align.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of alignment threads to run in parallel on a single computer "
 },
 {
   "count": 55,
   "prog": "e2align3d.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " model symmetry (using sym, if present, speeds thing up a lot), default='c1' "
 },
 {
   "count": 55,
   "prog": "e2boxer.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2classesbyref.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on the local computer "
 },
 {
   "count": 55,
   "prog": "e2classifytree.py ",
   "option": " ['--threads'] ",
   "default": "12",
   "type": " int ",
   "help": "  "
 },
 {
   "count": 55,
   "prog": "e2classvsproj.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Set the symmetry; if no value is given then the model is assumed to have no symmetry. Choices are: i, c, d, tet, icos, or oct. "
 },
 {
   "count": 55,
   "prog": "e2classvsproj.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by this program at present. "
 },
 {
   "count": 55,
   "prog": "e2compress.py ",
   "option": " ['--threads'] ",
   "default": "1",
   "type": " int ",
   "help": " Compression requires significant CPU, this can significantly improve speed "
 },
 {
   "count": 55,
   "prog": "e2ctf.py ",
   "option": " ['--threads'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2ctf_auto.py ",
   "option": " ['--threads'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of threads to run in parallel on the local computer "
 },
 {
   "count": 55,
   "prog": "e2ddd_movie.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel. The default is 4, and our alignment routine requires 2+ threads. Using more threads will result in faster processing times. "
 },
 {
   "count": 55,
   "prog": "e2ddd_particles.py ",
   "option": " ['--threads'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2enrich.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of alignment threads to run in parallel on a single computer. "
 },
 {
   "count": 55,
   "prog": "e2euler_refine.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer. This is the only parallelism supported by e2make3dpar "
 },
 {
   "count": 55,
   "prog": "e2evalrefine.py ",
   "option": " ['--sym'] ",
   "default": " None ",
   "type": " str ",
   "help": " Symmetry to be used in searching adjacent unit cells, default from refine_xx parms "
 },
 {
   "count": 55,
   "prog": "e2evalrefine.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2extractsubparticles.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Specify symmetry - choices are: c<n>, d<n>, tet, oct, icos. If specified each input 'particle' will become N extracted subparticles. "
 },
 {
   "count": 55,
   "prog": "e2extractsubparticles.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer "
 },
 {
   "count": 55,
   "prog": "e2fsc.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on the local computer "
 },
 {
   "count": 55,
   "prog": "e2fsc_local.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 55,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on the local computer "
 },
 {
   "count": 55,
   "prog": "e2gmm.py ",
   "option": " ['--threads'] ",
   "default": "-1",
   "type": " int ",
   "help": " Number of alignment threads to run in parallel on a single computer. "
 },
 {
   "count": 55,
   "prog": "e2gmm_refine.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " symmetry. currently only support c and d "
 },
 {
   "count": 55,
   "prog": "e2import.py ",
   "option": " ['--threads'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2initialmodel.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Specify symmetry - choices are: c<n>, d<n>, h<n>, tet, oct, icos "
 },
 {
   "count": 55,
   "prog": "e2initialmodel_hisym.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Specify symmetry - choices are: c<n>, d<n>, h<n>, tet, oct, icos "
 },
 {
   "count": 55,
   "prog": "e2initialmodel_hisym.py ",
   "option": " ['--threads'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Specify symmetry - choices are: c<n>, d<n>, h<n>, tet, oct, icos "
 },
 {
   "count": 55,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--threads'] ",
   "default": "10",
   "type": " int ",
   "help": " threads "
 },
 {
   "count": 55,
   "prog": "e2make3d.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Set the symmetry; if no value is given then the model is assumed to have no symmetry. Choices are: i, c, d, tet, icos, or oct. "
 },
 {
   "count": 55,
   "prog": "e2make3dpar.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Set the symmetry; if no value is given then the model is assumed to have no symmetry. Choices are: i, c, d, tet, icos, or oct. "
 },
 {
   "count": 55,
   "prog": "e2make3dpar.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer. This is the only parallelism supported by e2make3dpar "
 },
 {
   "count": 55,
   "prog": "e2maskbyclass.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of alignment threads to run in parallel on a single computer. "
 },
 {
   "count": 55,
   "prog": "e2match.py ",
   "option": " ['--sym'] ",
   "default": "  ",
   "type": " str ",
   "help": " Will apply the specified symmetry to the edited img2process. "
 },
 {
   "count": 55,
   "prog": "e2motion.py ",
   "option": " ['--threads'] ",
   "default": "0",
   "type": " int ",
   "help": " Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by e2spt_align at present. "
 },
 {
   "count": 55,
   "prog": "e2plotEulers.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Set the symmetry; if no value is given then the model is assumed to have no symmetry. Choices are: i, c, d, tet, icos, or oct. "
 },
 {
   "count": 55,
   "prog": "e2proc2dpar.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2project3d.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Specify symmetry - choices are: c<n>, d<n>, h<n>, tet, oct, icos. If multiple input models are specified, multiple comma-separated symmetries may also be specified. "
 },
 {
   "count": 55,
   "prog": "e2ptcltrace.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Symmetry to be used in searching adjacent unit cells "
 },
 {
   "count": 55,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Specify symmetry - choices are: c<n>, d<n>, tet, oct, icos. "
 },
 {
   "count": 55,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--threads'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2rawdata.py ",
   "option": " ['--threads'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2rct.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Set the symmetry; if no value is given then the model is assumed to have no symmetry. Choices are: i, c, d, tet, icos, or oct. "
 },
 {
   "count": 55,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2refine_easy.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Specify symmetry - choices are: c<n>, d<n>, tet, oct, icos. "
 },
 {
   "count": 55,
   "prog": "e2refine_easy.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Symmetry so we can decide how to align the particle. "
 },
 {
   "count": 55,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--threads'] ",
   "default": "2",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2refinemulti.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Specify symmetry - choices are: c<n>, d<n>, tet, oct, icos. You can specify either a single value or one for each model. "
 },
 {
   "count": 55,
   "prog": "e2refinemulti.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads. "
 },
 {
   "count": 55,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--threads'] ",
   "default": "1",
   "type": " int ",
   "help": " # of threads "
 },
 {
   "count": 55,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--threads'] ",
   "default": "1",
   "type": " int ",
   "help": " # of threads "
 },
 {
   "count": 55,
   "prog": "e2refinevariance.py ",
   "option": " ['--threads'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2refinevariance.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Specify symmetry - choices are: c<n>, d<n>, h<n>, tet, oct, icos "
 },
 {
   "count": 55,
   "prog": "e2segment3d.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Symmetry of the target complex. Note the number of segment is per unit. "
 },
 {
   "count": 55,
   "prog": "e2spa_align.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " symmetry.  "
 },
 {
   "count": 55,
   "prog": "e2spa_make3d.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Set the symmetry; if no value is given then the model is assumed to have no symmetry. Choices are: i, c, d, tet, icos, or oct. "
 },
 {
   "count": 55,
   "prog": "e2spa_refine.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " sym "
 },
 {
   "count": 55,
   "prog": "e2spa_refine.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " threads to use during postprocessing of 3d volumes "
 },
 {
   "count": 55,
   "prog": "e2spa_refine_multi.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " sym "
 },
 {
   "count": 55,
   "prog": "e2spt_align.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by e2spt_align at present. "
 },
 {
   "count": 55,
   "prog": "e2spt_align.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Symmetry of the input. Must be aligned in standard orientation to work properly. "
 },
 {
   "count": 55,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Symmetry of the input. Must be aligned in standard orientation to work properly. "
 },
 {
   "count": 55,
   "prog": "e2spt_average.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by e2spt_align at present. "
 },
 {
   "count": 55,
   "prog": "e2spt_average.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Symmetry of the input. Must be aligned in standard orientation to work properly. "
 },
 {
   "count": 55,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Symmetry of the input. Must be aligned in standard orientation to work properly. The structure will be expanded from this symmetry to c1. "
 },
 {
   "count": 55,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by e2spt_align at present. "
 },
 {
   "count": 55,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--sym'] ",
   "default": "  ",
   "type": " None ",
   "help": " Default=None (equivalent to c1). Symmetry to impose -choices are: c<n>, d<n>, h<n>, tet, oct, icos "
 },
 {
   "count": 55,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--sym'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None (equivalent to c1). Symmetry to impose -choices are: c<n>, d<n>, h<n>, tet, oct, icos "
 },
 {
   "count": 55,
   "prog": "e2spt_classify.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " sym "
 },
 {
   "count": 55,
   "prog": "e2spt_classify.py ",
   "option": " ['--threads'] ",
   "default": "12",
   "type": " int ",
   "help": " threads "
 },
 {
   "count": 55,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Symmetry of the input. Must be aligned in standard orientation to work properly. "
 },
 {
   "count": 55,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by e2spt_align at present. "
 },
 {
   "count": 55,
   "prog": "e2spt_evalrefine.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Symmetry to be used in searching adjacent unit cells "
 },
 {
   "count": 55,
   "prog": "e2spt_evalrefine.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of threads to run in parallel on a single computer when multi-computer parallelism isn't useful "
 },
 {
   "count": 55,
   "prog": "e2spt_extract.py ",
   "option": " ['--threads'] ",
   "default": "12",
   "type": " int ",
   "help": " threads "
 },
 {
   "count": 55,
   "prog": "e2spt_hac.py ",
   "option": " ['--sym'] ",
   "default": " None ",
   "type": " None ",
   "help": " Default=None (equivalent to c1). Symmetry to impose -choices are: c<n>, d<n>, h<n>, tet, oct, icos "
 },
 {
   "count": 55,
   "prog": "e2spt_make3d.py ",
   "option": " ['--threads'] ",
   "default": "5",
   "type": " int ",
   "help": " Number of threads to use. "
 },
 {
   "count": 55,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Apply this symmetry. "
 },
 {
   "count": 55,
   "prog": "e2spt_project.py ",
   "option": " ['--threads'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of alignment threads to run in parallel on a single computer. This is the only parallelism supported by e2spt_align at present. "
 },
 {
   "count": 55,
   "prog": "e2spt_project.py ",
   "option": " ['--sym'] ",
   "default": " None ",
   "type": " str ",
   "help": " Symmetry of the input. Must be aligned in standard orientation to work properly. "
 },
 {
   "count": 55,
   "prog": "e2spt_recompute.py ",
   "option": " ['--sym'] ",
   "default": "  ",
   "type": " str ",
   "help": " Symmetry to impose - choices are: c<n>, d<n>, h<n>, tet, oct, icos "
 },
 {
   "count": 55,
   "prog": "e2spt_refine.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " symmetry "
 },
 {
   "count": 55,
   "prog": "e2spt_refine.py ",
   "option": " ['--threads'] ",
   "default": "12",
   "type": " int ",
   "help": " threads "
 },
 {
   "count": 55,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " symmetry "
 },
 {
   "count": 55,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--threads'] ",
   "default": "10",
   "type": " int ",
   "help": " threads for post-processing "
 },
 {
   "count": 55,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " symmetry "
 },
 {
   "count": 55,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--threads'] ",
   "default": "12",
   "type": " int ",
   "help": " threads "
 },
 {
   "count": 55,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--threads'] ",
   "default": "12",
   "type": " int ",
   "help": "  "
 },
 {
   "count": 55,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " symmetry to apply to the average structure "
 },
 {
   "count": 55,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 55,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--sym'] ",
   "default": " None ",
   "type": " None ",
   "help": " Symmetry to impose -choices are: c<n>, d<n>, h<n>, tet, oct, icos "
 },
 {
   "count": 55,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Will symmetrize --ref and --input prior to FSC computation. "
 },
 {
   "count": 55,
   "prog": "e2spt_sgd.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " symmetry "
 },
 {
   "count": 55,
   "prog": "e2spt_simulation.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Default=c1. If your particle is symmetrical, it is only necessary to randomize orientations within the asymmetric unit. "
 },
 {
   "count": 55,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " symmetry "
 },
 {
   "count": 55,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--threads'] ",
   "default": "12",
   "type": " int ",
   "help": " number of threads to use "
 },
 {
   "count": 55,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--threads'] ",
   "default": "12",
   "type": " int ",
   "help": " Number of CPU threads to use. Default is 12. "
 },
 {
   "count": 55,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--sym'] ",
   "default": "  ",
   "type": " str ",
   "help": " symmetry. will use symmetry from spt refinement by default "
 },
 {
   "count": 55,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--threads'] ",
   "default": "12",
   "type": " int ",
   "help": " Number of CPU threads to use. Default is 12. "
 },
 {
   "count": 55,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " symmetry. will use symmetry from spt refinement by default "
 },
 {
   "count": 55,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--threads'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of threads to run in parallel on the local computer "
 },
 {
   "count": 55,
   "prog": "e2spt_trajfromrefine.py ",
   "option": " ['--threads'] ",
   "default": "12",
   "type": " int ",
   "help": " threads "
 },
 {
   "count": 55,
   "prog": "e2symbest.py ",
   "option": " ['--sym'] ",
   "default": " None ",
   "type": " str ",
   "help": " Symmetry to search for "
 },
 {
   "count": 55,
   "prog": "e2symsearch3d.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " None ",
   "help": " Specify symmetry -choices are: c<n>, d<n>, h<n>, tet, oct, icos. For asymmetric reconstruction ommit this option or specify c1. "
 },
 {
   "count": 55,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " The recon symmetry "
 },
 {
   "count": 55,
   "prog": "e2tomogram.py ",
   "option": " ['--threads'] ",
   "default": "12",
   "type": " int ",
   "help": " Number of threads "
 },
 {
   "count": 55,
   "prog": "e2tomoresolution.py ",
   "option": " ['--sym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " The recon symmetry "
 },
 {
   "count": 55,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--threads'] ",
   "default": "12",
   "type": " int ",
   "help": " Number of thread to use when applying neural net on test images. Not used during trainning "
 },
 {
   "count": 49,
   "prog": "e2classaverage.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " None ",
   "help": " parallelism argument "
 },
 {
   "count": 49,
   "prog": "e2classifytree.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " None ",
   "help": " parallelism argument "
 },
 {
   "count": 49,
   "prog": "e2ctf.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " None ",
   "help": " parallelism argument. This program supports only thread:<n> "
 },
 {
   "count": 49,
   "prog": "e2ddd_particles.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " None ",
   "help": " parallelism argument. This program supports only thread:<n> "
 },
 {
   "count": 49,
   "prog": "e2erasefiducials.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=None (not used). Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 49,
   "prog": "e2initialmodel.py ",
   "option": " ['--parallel'] ",
   "default": " thread:1 ",
   "type": " str ",
   "help": " Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 49,
   "prog": "e2make3dpar.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Thread/mpi parallelism to use "
 },
 {
   "count": 49,
   "prog": "e2proc2d.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Run in parallel, specify type:n=<proc>:option:option "
 },
 {
   "count": 49,
   "prog": "e2proc2dpar.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Run in parallel, only thread:n supported "
 },
 {
   "count": 49,
   "prog": "e2project3d.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Parallelism string "
 },
 {
   "count": 49,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 49,
   "prog": "e2refine2d.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Run in parallel, specify type:<option>=<value>:<option>:<value> "
 },
 {
   "count": 49,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--parallel'] ",
   "default": " thread:4 ",
   "type": " str ",
   "help": " Run in parallel, specify type:<option>=<value>:<option>:<value> "
 },
 {
   "count": 49,
   "prog": "e2refine_easy.py ",
   "option": " ['--parallel'] ",
   "default": " thread:4 ",
   "type": " str ",
   "help": " Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 49,
   "prog": "e2refine_split.py ",
   "option": " ['--parallel'] ",
   "default": " thread:2 ",
   "type": " None ",
   "help": " Standard parallelism option. Default=thread:2 "
 },
 {
   "count": 49,
   "prog": "e2refinemulti.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 49,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--parallel'] ",
   "default": " thread:4 ",
   "type": " str ",
   "help": " Parallel option. "
 },
 {
   "count": 49,
   "prog": "e2refinevariance.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Run in parallel, specify type:<option>=<value>:<option>:<value> "
 },
 {
   "count": 49,
   "prog": "e2simmx.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Parallelism string "
 },
 {
   "count": 49,
   "prog": "e2simmx2stage.py ",
   "option": " ['--parallel'] ",
   "default": " thread:1 ",
   "type": " str ",
   "help": " Parallelism string "
 },
 {
   "count": 49,
   "prog": "e2spa_align.py ",
   "option": " ['--parallel'] ",
   "default": " thread:12 ",
   "type": " str ",
   "help": " Thread/mpi parallelism to use. Default is thread:12 "
 },
 {
   "count": 49,
   "prog": "e2spa_classify.py ",
   "option": " ['--parallel'] ",
   "default": " thread:12 ",
   "type": " str ",
   "help": " Thread/mpi parallelism to use. Default is thread:12 "
 },
 {
   "count": 49,
   "prog": "e2spa_make3d.py ",
   "option": " ['--parallel'] ",
   "default": " thread:1 ",
   "type": " str ",
   "help": " Thread/mpi parallelism to use "
 },
 {
   "count": 49,
   "prog": "e2spa_refine.py ",
   "option": " ['--parallel'] ",
   "default": " thread:1 ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 49,
   "prog": "e2spa_refine_multi.py ",
   "option": " ['--parallel'] ",
   "default": " thread:1 ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 49,
   "prog": "e2spt_align.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Thread/mpi parallelism to use "
 },
 {
   "count": 49,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--parallel'] ",
   "default": " thread:4 ",
   "type": " str ",
   "help": " Thread/mpi parallelism to use "
 },
 {
   "count": 49,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Standard EMAN2 parallelism option. See http://eman2.org/Parallel "
 },
 {
   "count": 49,
   "prog": "e2spt_average.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Thread/mpi parallelism to use "
 },
 {
   "count": 49,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " parallel mode. Not all functions are implemented yet.. "
 },
 {
   "count": 49,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " None ",
   "help": " Parallelism. See http://eman2.org/Parallel "
 },
 {
   "count": 49,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " None ",
   "help": " default=thread:1. Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 49,
   "prog": "e2spt_extract.py ",
   "option": " ['--parallel'] ",
   "default": "  ",
   "type": " str ",
   "help": " parallel "
 },
 {
   "count": 49,
   "prog": "e2spt_hac.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " None ",
   "help": " default=thread:2. Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 49,
   "prog": "e2spt_preproc.py ",
   "option": " ['--parallel'] ",
   "default": "  ",
   "type": " str ",
   "help": " default=None. Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 49,
   "prog": "e2spt_refine.py ",
   "option": " ['--parallel'] ",
   "default": "  ",
   "type": " str ",
   "help": " Thread/mpi parallelism to use "
 },
 {
   "count": 49,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--parallel'] ",
   "default": "  ",
   "type": " str ",
   "help": " Thread/mpi parallelism to use "
 },
 {
   "count": 49,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--parallel'] ",
   "default": " thread:12 ",
   "type": " str ",
   "help": " parallel "
 },
 {
   "count": 49,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--parallel'] ",
   "default": " thread:1 ",
   "type": " str ",
   "help": " parallel "
 },
 {
   "count": 49,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--parallel'] ",
   "default": " thread:1 ",
   "type": " None ",
   "help": " Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 49,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--parallel'] ",
   "default": " thread:2 ",
   "type": " None ",
   "help": " Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 49,
   "prog": "e2spt_simulation.py ",
   "option": " ['--parallel'] ",
   "default": " thread:1 ",
   "type": " str ",
   "help": " Default=thread:1. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 49,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--parallel'] ",
   "default": " thread:4 ",
   "type": " str ",
   "help": " Thread/mpi parallelism to use "
 },
 {
   "count": 49,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--parallel'] ",
   "default": " thread:12 ",
   "type": " str ",
   "help": " Thread/mpi parallelism to use. Default is thread:12 "
 },
 {
   "count": 49,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--parallel'] ",
   "default": " thread:12 ",
   "type": " str ",
   "help": " Thread/mpi parallelism to use. Default is thread:12 "
 },
 {
   "count": 49,
   "prog": "e2symsearch3d.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=thread:2. Run in parallel, see http://eman2.org/Parallel "
 },
 {
   "count": 49,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--parallel'] ",
   "default": " None ",
   "type": " str ",
   "help": " Parallelism string "
 },
 {
   "count": 49,
   "prog": "e2tomopreproc.py ",
   "option": " ['--parallel'] ",
   "default": " thread:1 ",
   "type": " str ",
   "help": " default=thread:1. Parallelism. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 49,
   "prog": "e2tvrecon.py ",
   "option": " ['--parallel'] ",
   "default": " thread:1 ",
   "type": " str ",
   "help": " Default=thread:1.    See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 42,
   "prog": "e2basis.py ",
   "option": " ['--mask'] ",
   "default": "-2",
   "type": " int ",
   "help": " Mask radius "
 },
 {
   "count": 42,
   "prog": "e2evalrefine.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask to be used to focus --evalptclqual and other options. May be useful for separating heterogeneous data. "
 },
 {
   "count": 42,
   "prog": "e2fsc.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask to apply to both input images before calculation "
 },
 {
   "count": 42,
   "prog": "e2fsc_local.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 42,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Optional mask to produce masked overall FSC curve. Must have the same dimensions as the input volumes. "
 },
 {
   "count": 42,
   "prog": "e2gmm_refine.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " remove points outside mask "
 },
 {
   "count": 42,
   "prog": "e2match.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Mask processor applied to particles before alignment. Default is None "
 },
 {
   "count": 42,
   "prog": "e2msa.py ",
   "option": " ['--mask'] ",
   "default": "0",
   "type": " int ",
   "help": " Mask radius, negative values imply ny/2+1+mask, --mask=0 disables, --maskfile overrides "
 },
 {
   "count": 42,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " specify a density map file to use as mask. overwrites automask3d "
 },
 {
   "count": 42,
   "prog": "e2refine_split.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " None ",
   "help": " Optional 3D mask to focus the classification "
 },
 {
   "count": 42,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of an optional mask file. The mask is applied to the input models to focus the classification on a particular region of the map. Consider e2classifyligand.py instead. "
 },
 {
   "count": 42,
   "prog": "e2segment3d.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " A mask to be used in segmentaion, specific use varies with segmentation method "
 },
 {
   "count": 42,
   "prog": "e2simmx.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " File containing a single mask image to apply after alignment, but before similarity comparison "
 },
 {
   "count": 42,
   "prog": "e2simmx2stage.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " File containing a single mask image to apply before similarity comparison "
 },
 {
   "count": 42,
   "prog": "e2spa_classify.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " mask.  "
 },
 {
   "count": 42,
   "prog": "e2spa_refine_multi.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " mask file "
 },
 {
   "count": 42,
   "prog": "e2spt_align.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask file aligned to the input reference. Alignment occurs under this mask. "
 },
 {
   "count": 42,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--mask'] ",
   "default": " False ",
   "type": " None ",
   "help": " If provided, a cylindrical mask will be created to mask out the carbon and keep only the grid hole.                --gridradius and --gridoffest must be specified. "
 },
 {
   "count": 42,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask applied to final averages "
 },
 {
   "count": 42,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Masking processor applied to particles before alignment. IF using --clip, make sure to express outer mask radii as negative pixels from the edge. "
 },
 {
   "count": 42,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Masking processor applied to particles before alignment. IF using --clip, make sure to express outer mask radii as negative pixels from the edge. "
 },
 {
   "count": 42,
   "prog": "e2spt_classify.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " mask "
 },
 {
   "count": 42,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " A 3D mask file or a single mask processor specification to apply prior to local projection generation "
 },
 {
   "count": 42,
   "prog": "e2spt_hac.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Masking processor applied to particles before alignment. IF using --clip, make sure to express outer mask radii as negative pixels from the edge. "
 },
 {
   "count": 42,
   "prog": "e2spt_isr.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=None. Masking processor (see e2help.py --verbose=10) applied to the images to aid alignment. Default=None. "
 },
 {
   "count": 42,
   "prog": "e2spt_make3d.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask on the final output. "
 },
 {
   "count": 42,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Apply this mask. Default is 'mask_tight.hdf' from <--path>_<--iter>. Specify 'none' for no masking "
 },
 {
   "count": 42,
   "prog": "e2spt_preproc.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Masking processor applied to particles before alignment. IF using --clip, make sure to express outer mask radii as negative pixels from the edge. "
 },
 {
   "count": 42,
   "prog": "e2spt_refine.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Mask file to be applied to initial model "
 },
 {
   "count": 42,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask applied to the results (instead of automasking) "
 },
 {
   "count": 42,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask file to be applied to initial model "
 },
 {
   "count": 42,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " mask file "
 },
 {
   "count": 42,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Mask processor applied to particles before alignment. Default=None. "
 },
 {
   "count": 42,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask processor applied to particles before fsc computation. Default is mask.sharp:outer_radius=-2 "
 },
 {
   "count": 42,
   "prog": "e2spt_sgd.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask file to be applied to initial model "
 },
 {
   "count": 42,
   "prog": "e2spt_stat.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask file to use for remask score calculation. If not specified, remask must have been previously computed "
 },
 {
   "count": 42,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Requires --track. Masking processor (see e2help.py processors at the command line), part of preprocessing to facilitate particle tracking. "
 },
 {
   "count": 42,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--mask'] ",
   "default": " auto ",
   "type": " str ",
   "help": " Refinement and reprojection masking. Default uses mask from source "
 },
 {
   "count": 42,
   "prog": "e2symbest.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " int ",
   "help": " Mask radius "
 },
 {
   "count": 42,
   "prog": "e2symsearch3d.py ",
   "option": " ['--mask'] ",
   "default": " mask.sharp:outer_radius=-2 ",
   "type": " str ",
   "help": " Mask processor applied to particles before alignment. Default is mask.sharp:outer_radius=-2. IF using --clip, make sure to express outer mask radii as negative pixels from the edge. "
 },
 {
   "count": 42,
   "prog": "e2tomopreproc.py ",
   "option": " ['--mask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Masking processor applied to each image. "
 },
 {
   "count": 42,
   "prog": "e2tomoresolution.py ",
   "option": " ['--mask'] ",
   "default": " None ",
   "type": " str ",
   "help": " The mask to apply before FSC calculation "
 },
 {
   "count": 41,
   "prog": "e2boxer.py ",
   "option": " ['--apix'] ",
   "default": "-1",
   "type": " float ",
   "help": " Angstroms per pixel for all images "
 },
 {
   "count": 41,
   "prog": "e2boxer_old.py ",
   "option": " ['--apix'] ",
   "default": "-1",
   "type": " float ",
   "help": " pixel size in Angstroms "
 },
 {
   "count": 41,
   "prog": "e2cmmtomrc.py ",
   "option": " ['--apix'] ",
   "default": "1",
   "type": " float ",
   "help": " A/voxel "
 },
 {
   "count": 41,
   "prog": "e2ctf.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " Angstroms per pixel for all images "
 },
 {
   "count": 41,
   "prog": "e2ctf_auto.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " Angstroms per pixel for all images "
 },
 {
   "count": 41,
   "prog": "e2ctffind3util.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " The angstrom per pixel of the micrographs "
 },
 {
   "count": 41,
   "prog": "e2ctfsim.py ",
   "option": " ['--apix'] ",
   "default": "1",
   "type": " float ",
   "help": " Angstroms per pixel for all images "
 },
 {
   "count": 41,
   "prog": "e2ddd_external.py ",
   "option": " ['--apix'] ",
   "default": "-1",
   "type": " float ",
   "help": " Specify the Apix of the movies to be processed. "
 },
 {
   "count": 41,
   "prog": "e2erasefiducials.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " Override Apix in image header. "
 },
 {
   "count": 41,
   "prog": "e2evalimage.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " Angstroms per pixel for all images "
 },
 {
   "count": 41,
   "prog": "e2filtertool.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " Override the A/pix value stored in the file header "
 },
 {
   "count": 41,
   "prog": "e2fsc.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " A/pix to use for the comparison (default uses Vol1 apix) "
 },
 {
   "count": 41,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " A/pix to use for the comparison (default uses Vol1 apix) "
 },
 {
   "count": 41,
   "prog": "e2import.py ",
   "option": " ['--apix'] ",
   "default": "-1",
   "type": " float ",
   "help": " Specify the apix of the tiltseries you are importing. If -1 (default), the apix in the header will not be changed. "
 },
 {
   "count": 41,
   "prog": "e2make3d.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " A/pix value for output, overrides automatic values "
 },
 {
   "count": 41,
   "prog": "e2make3dpar.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " A/pix value for output, overrides automatic values "
 },
 {
   "count": 41,
   "prog": "e2match.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " If specified, the program    will assume this is the correct apix for --img2match if --img2match is provided,   so the current value will be overwritten if --img2match is in .hdf format.    This value will also be used to scale the images in --img2process. "
 },
 {
   "count": 41,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--apix'] ",
   "default": "1",
   "type": " float ",
   "help": " A/voxel "
 },
 {
   "count": 41,
   "prog": "e2proc2d.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " A/pixel for S scaling "
 },
 {
   "count": 41,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " A/pixel for S scaling "
 },
 {
   "count": 41,
   "prog": "e2proc2dpar.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " A/pixel for S scaling "
 },
 {
   "count": 41,
   "prog": "e2rawdata.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " Angstroms per pixel for all images "
 },
 {
   "count": 41,
   "prog": "e2refine_easy.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " The angstrom per pixel of the input particles. Normally set to 0, which will read the value from the header of the input file "
 },
 {
   "count": 41,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " (Expert Option) Angstrom per pixel "
 },
 {
   "count": 41,
   "prog": "e2refinevariance.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " The angstrom per pixel of the input particles. This argument is required if you specify the --mass argument. If unspecified, the convergence plot is generated using either the project apix, or if not an apix of 1. "
 },
 {
   "count": 41,
   "prog": "e2reliontoeman.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " The angstrom per pixel of the input particles. "
 },
 {
   "count": 41,
   "prog": "e2skelpath.py ",
   "option": " ['--apix'] ",
   "default": "1",
   "type": " float ",
   "help": " A/Pixel "
 },
 {
   "count": 41,
   "prog": "e2spa_make3d.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " A/pix value for output, overrides automatic values "
 },
 {
   "count": 41,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " The actual apix of the tomogram if for some reason it is wrong on the header. "
 },
 {
   "count": 41,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " apix "
 },
 {
   "count": 41,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0 (not used). Use this apix value where relevant instead of whatever is in the header of the reference and the particles. "
 },
 {
   "count": 41,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=whatever is on the header   of the images. Sampling of the images in angstroms/pixel.    Supply --apix here to replace the value in ctfparamsfile(s), or if ctfparamsfile(s)    are lacking altogether. "
 },
 {
   "count": 41,
   "prog": "e2spt_preproc.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0 (not used). Use this apix value where relevant instead of whatever is in the header of the reference and the particles. Will overwrite particle header as well. "
 },
 {
   "count": 41,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0 (not used). Use this apix value where relevant instead of whatever is in the header of the reference and the particles. "
 },
 {
   "count": 41,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--apix'] ",
   "default": "1",
   "type": " float ",
   "help": " Provide --apix for automatic FSC calculation if you supply --plotonly and no volumes for --input and --ref, or if the apix of these is wrong. "
 },
 {
   "count": 41,
   "prog": "e2spt_simulation.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " Default=None. Provide accurate apix in case the header of --input has the wrong apix info. "
 },
 {
   "count": 41,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " If provided, this value will be used for apix instead of the one read from the header of --tiltseries "
 },
 {
   "count": 41,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " True apix of images to be written on final stack. "
 },
 {
   "count": 41,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--apix'] ",
   "default": " None ",
   "type": " float ",
   "help": " Default=whatever is on the header of the images. Sampling of the images in angstroms/pixel. "
 },
 {
   "count": 41,
   "prog": "e2tomo_stackframes.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " default=0.0 (not used). Reset the apix on the header of each image to this value. "
 },
 {
   "count": 41,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--apix'] ",
   "default": "0",
   "type": " float ",
   "help": " True apix of images to be written on final stack. "
 },
 {
   "count": 31,
   "prog": "e2a2d_align.py ",
   "option": " ['--iter'] ",
   "default": "0",
   "type": " int ",
   "help": " Iteration number within path. Default = start a new iteration "
 },
 {
   "count": 31,
   "prog": "e2a2d_average.py ",
   "option": " ['--iter'] ",
   "default": "0",
   "type": " int ",
   "help": " Iteration number within path. Default = highest existing iteration "
 },
 {
   "count": 31,
   "prog": "e2a2d_masks.py ",
   "option": " ['--iter'] ",
   "default": "0",
   "type": " int ",
   "help": " Iteration number within path. Default = highest existing iteration "
 },
 {
   "count": 31,
   "prog": "e2a2d_stat.py ",
   "option": " ['--iter'] ",
   "default": "0",
   "type": " int ",
   "help": " Iteration number within path. Default = auto "
 },
 {
   "count": 31,
   "prog": "e2classaverage.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the input particle stack "
 },
 {
   "count": 31,
   "prog": "e2classaverage.py ",
   "option": " ['--iter'] ",
   "default": "1",
   "type": " int ",
   "help": " The number of iterations to perform. Default is 1. "
 },
 {
   "count": 31,
   "prog": "e2euler_refine.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " None ",
   "help": " The input projections. Project should usually have the xform.projection header attribute, which is used for slice insertion "
 },
 {
   "count": 31,
   "prog": "e2evalrefine.py ",
   "option": " ['--iter'] ",
   "default": " None ",
   "type": " int ",
   "help": " If a refine_XX folder is being used, this selects a particular refinement iteration. Otherwise the last complete iteration is used. "
 },
 {
   "count": 31,
   "prog": "e2initialmodel.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " This file should contain good class-averages to use in constructing the initial model "
 },
 {
   "count": 31,
   "prog": "e2initialmodel.py ",
   "option": " ['--iter'] ",
   "default": "8",
   "type": " int ",
   "help": " The total number of refinement iterations to perform, typically 5-10 "
 },
 {
   "count": 31,
   "prog": "e2initialmodel_hisym.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " This file should contain good class-averages to use in constructing the initial model "
 },
 {
   "count": 31,
   "prog": "e2make3d.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " None ",
   "help": " The input projections. Project should usually have the xform.projection header attribute, which is used for slice insertion "
 },
 {
   "count": 31,
   "prog": "e2make3d.py ",
   "option": " ['--iter'] ",
   "default": "2",
   "type": " int ",
   "help": " Set the number of iterations (default is 2). Iterative reconstruction improves the overall normalization of the 2D images as they are inserted into the reconstructed volume, and allows for the exclusion of the poorer quality images. "
 },
 {
   "count": 31,
   "prog": "e2make3dpar.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " None ",
   "help": " The input projections. Project should usually have the xform.projection header attribute, which is used for slice insertion "
 },
 {
   "count": 31,
   "prog": "e2motion.py ",
   "option": " ['--iter'] ",
   "default": "0",
   "type": " int ",
   "help": " Iteration number within path. Default = start a new iteration "
 },
 {
   "count": 31,
   "prog": "e2procheader.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " File or stack for which to fix header parameters. To indicate multiple files, do not use --input. Simply provide the program name followed by the string common to all files to process and *, followed by all parameters of interest. For example, to process all .mrc files in a directory, you would run e2fixheader.py *.mrc <parameters>. "
 },
 {
   "count": 31,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the image file containing the particle data "
 },
 {
   "count": 31,
   "prog": "e2refine2d.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the file containing the particle data "
 },
 {
   "count": 31,
   "prog": "e2refine2d.py ",
   "option": " ['--iter'] ",
   "default": "8",
   "type": " int ",
   "help": " The total number of refinement iterations to perform "
 },
 {
   "count": 31,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the file containing the particle data "
 },
 {
   "count": 31,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--iter'] ",
   "default": "0",
   "type": " int ",
   "help": " The total number of refinement iterations to perform "
 },
 {
   "count": 31,
   "prog": "e2refine_easy.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " Image stack containing phase-flipped particles used for alignment "
 },
 {
   "count": 31,
   "prog": "e2refine_easy.py ",
   "option": " ['--iter'] ",
   "default": "6",
   "type": " int ",
   "help": " The total number of refinement iterations to perform. Default=auto "
 },
 {
   "count": 31,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--iter'] ",
   "default": "-1",
   "type": " int ",
   "help": " Iteration number to generate FSC filenames "
 },
 {
   "count": 31,
   "prog": "e2refinemulti.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the image file containing the particle data "
 },
 {
   "count": 31,
   "prog": "e2refinemulti.py ",
   "option": " ['--iter'] ",
   "default": "6",
   "type": " int ",
   "help": " The total number of refinement iterations to perform. Default=auto "
 },
 {
   "count": 31,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--iter'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of iterations. "
 },
 {
   "count": 31,
   "prog": "e2refinevariance.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the image containing the particle data "
 },
 {
   "count": 31,
   "prog": "e2spa_make3d.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " None ",
   "help": " The input projections. Project should usually have the xform.projection header attribute, which is used for slice insertion "
 },
 {
   "count": 31,
   "prog": "e2spt_align.py ",
   "option": " ['--iter'] ",
   "default": "0",
   "type": " int ",
   "help": " Iteration number within path. Default = start a new iteration "
 },
 {
   "count": 31,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--iter'] ",
   "default": "0",
   "type": " int ",
   "help": " Iteration number within path. Default = start a new iteration "
 },
 {
   "count": 31,
   "prog": "e2spt_average.py ",
   "option": " ['--iter'] ",
   "default": "-1",
   "type": " int ",
   "help": " Iteration number within path. Default = start a new iteration "
 },
 {
   "count": 31,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--iter'] ",
   "default": "0",
   "type": " int ",
   "help": " Iteration number within path. Default = start a new iteration "
 },
 {
   "count": 31,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--input'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. The name of the input volume stack. MUST be HDF since volume stack support is required. "
 },
 {
   "count": 31,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--input'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. The name of the input volume stack. MUST be HDF since volume stack support is required. "
 },
 {
   "count": 31,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--iter'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=1. The number of iterations to perform. "
 },
 {
   "count": 31,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--iter'] ",
   "default": "-1",
   "type": " int ",
   "help": " Iteration number within path, default = last iteration "
 },
 {
   "count": 31,
   "prog": "e2spt_fftamp.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " default=None. Filename of 3-D image or stack of 3-D images whose FFT amplitudes you want to see. "
 },
 {
   "count": 31,
   "prog": "e2spt_hac.py ",
   "option": " ['--input'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. The name of the input volume stack. MUST be HDF since volume stack support is required. "
 },
 {
   "count": 31,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--input'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Subtiltseries file to process. If processing a single file, --inputstem will work too, but you can also just provide the entire filename here --input=subt00.hdf "
 },
 {
   "count": 31,
   "prog": "e2spt_isr.py ",
   "option": " ['--input'] ",
   "default": "  ",
   "type": " str ",
   "help": " Comma separated files in .ali, .st .hdf format of the aligned subtiltseries. "
 },
 {
   "count": 31,
   "prog": "e2spt_isr.py ",
   "option": " ['--iter'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of iterations to run algorithm for. "
 },
 {
   "count": 31,
   "prog": "e2spt_mapptclstotomo.py ",
   "option": " ['--iter'] ",
   "default": "1",
   "type": " int ",
   "help": " iteration number "
 },
 {
   "count": 31,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--iter'] ",
   "default": "-2",
   "type": " int ",
   "help": " Iteration number within path. Default is the second to last iteration (-2). "
 },
 {
   "count": 31,
   "prog": "e2spt_preproc.py ",
   "option": " ['--input'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. The name of the input volume stack. MUST be HDF since volume stack support is required. "
 },
 {
   "count": 31,
   "prog": "e2spt_project.py ",
   "option": " ['--iter'] ",
   "default": "0",
   "type": " int ",
   "help": " Iteration number within path. Default = start a new iteration "
 },
 {
   "count": 31,
   "prog": "e2spt_refinemsa.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the volumes stack that HAVE BEEN ALIGNED to a common reference "
 },
 {
   "count": 31,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the input volume stack. MUST be HDF since volume stack support is required. "
 },
 {
   "count": 31,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--iter'] ",
   "default": "1",
   "type": " int ",
   "help": " The number of iterations to perform. Default is 1. "
 },
 {
   "count": 31,
   "prog": "e2spt_remake3dptcl.py ",
   "option": " ['--iter'] ",
   "default": "1",
   "type": " int ",
   "help": " iteration number "
 },
 {
   "count": 31,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " Volume or stack of volumes to be compared to --ref "
 },
 {
   "count": 31,
   "prog": "e2spt_scramblestack.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the volumes stack that HAVE BEEN ALIGNED to a common reference "
 },
 {
   "count": 31,
   "prog": "e2spt_simulation.py ",
   "option": " ['--input'] ",
   "default": "  ",
   "type": " str ",
   "help": " The name of the input volume from which simulated subtomograms will be generated. The output will be in HDF format, since volume stack support is required. The input CAN be PDB, MRC or and HDF stack. If the input file is PDB or MRC, a version of the supplied model will be written out in HDF format. If the input file is a stack, simulatd subvolumes will be generated from each model in the stack and written to different output stacks. For example, if the input file contains models A and B, two output stacks with simulated subvolumes will be generated. "
 },
 {
   "count": 31,
   "prog": "e2spt_stat.py ",
   "option": " ['--iter'] ",
   "default": "0",
   "type": " int ",
   "help": " Iteration number within path. Default = auto "
 },
 {
   "count": 31,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--iter'] ",
   "default": "0",
   "type": " int ",
   "help": " Iteration number within path. Default = start a new iteration "
 },
 {
   "count": 31,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--iter'] ",
   "default": "-1",
   "type": " int ",
   "help": " Start from iteration X of previous refinement "
 },
 {
   "count": 31,
   "prog": "e2spt_wedgefill.py ",
   "option": " ['--input'] ",
   "default": "  ",
   "type": " str ",
   "help": " this is redundant with supplying the image stack directly after the program name. "
 },
 {
   "count": 31,
   "prog": "e2symsearch3d.py ",
   "option": " ['--input'] ",
   "default": "  ",
   "type": " str ",
   "help": " The name of input volume or hdf stack of volumes "
 },
 {
   "count": 31,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=None. Single 2D image or image stack to calculate CTF for. "
 },
 {
   "count": 31,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--input'] ",
   "default": " None ",
   "type": " str ",
   "help": " String common all files to process. For example, to process all .mrc files in a directory, you would run e2tomo_tiltstacker.py --input=.mrc <parameters>. "
 },
 {
   "count": 31,
   "prog": "e2tomopreproc.py ",
   "option": " ['--input'] ",
   "default": "  ",
   "type": " str ",
   "help": " \"tiltseries to process. redundant with --tiltseries, or with providing images as arguments (separated by a space: e2tomopreproc.py stack1.hdf stack2.hdf), but --input takes precedence. "
 },
 {
   "count": 31,
   "prog": "e2tvrecon.py ",
   "option": " ['--iter'] ",
   "default": "10",
   "type": " int ",
   "help": " Specify the number of    iterative reconstructions to complete before returning the final reconstructed volume.     The default number is 50. "
 },
 {
   "count": 30,
   "prog": "e2RCTboxer.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " int ",
   "help": " Shrink the images by an integer, uses math.meanshrink "
 },
 {
   "count": 30,
   "prog": "e2align3d.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " int ",
   "help": " Fractional amount to shrink the maps by, default=1 "
 },
 {
   "count": 30,
   "prog": "e2import.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " int ",
   "help": " Shrink tomograms before importing. Does not work while not copying. "
 },
 {
   "count": 30,
   "prog": "e2initialmodel.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " int ",
   "help": " Optionally shrink the input particles by an integer factor prior to reconstruction. Default=0, no shrinking "
 },
 {
   "count": 30,
   "prog": "e2initialmodel_hisym.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " int ",
   "help": " Optionally shrink the input particles by an integer factor prior to reconstruction. Default=0, no shrinking "
 },
 {
   "count": 30,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " int ",
   "help": " shrinking factor "
 },
 {
   "count": 30,
   "prog": "e2match.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " float ",
   "help": " This will scale the img2process   by the factor specified. This does NOT need to be an integer. You can enter 1.5, 2.7, etc.   any decimal number > 1.0 is valid. "
 },
 {
   "count": 30,
   "prog": "e2refine2d.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " int ",
   "help": " Optionally shrink the input particles by an integer amount prior to computing similarity scores. For speed purposes. default=0, no shrinking "
 },
 {
   "count": 30,
   "prog": "e2refine_easy.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=auto. Optionally shrink the input particles by an integer amount prior to computing similarity scores. For speed purposes. 0 -> no shrinking "
 },
 {
   "count": 30,
   "prog": "e2refinemulti.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=auto. Optionally shrink the input particles by an integer amount prior to computing similarity scores. For speed purposes. 0 -> no shrinking "
 },
 {
   "count": 30,
   "prog": "e2simmx.py ",
   "option": " ['--shrink'] ",
   "default": " None ",
   "type": " float ",
   "help": " Optionally shrink the input particles by an integer amount prior to computing similarity scores. This will speed the process up. "
 },
 {
   "count": 30,
   "prog": "e2simmx2stage.py ",
   "option": " ['--shrink'] ",
   "default": " None ",
   "type": " float ",
   "help": " Optionally shrink the input particles by an integer amount prior to computing similarity scores. This will speed the process up but may change classifications. "
 },
 {
   "count": 30,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for coarse alignment. "
 },
 {
   "count": 30,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for coarse alignment. "
 },
 {
   "count": 30,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " int ",
   "help": " shrink the particles before processing "
 },
 {
   "count": 30,
   "prog": "e2spt_extract.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " float ",
   "help": " Shrinking factor for output particles. 1.5 or integers allowed. Default is 1 (no shrink). "
 },
 {
   "count": 30,
   "prog": "e2spt_hac.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for coarse alignment. "
 },
 {
   "count": 30,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " int ",
   "help": " Shrink particles before classification "
 },
 {
   "count": 30,
   "prog": "e2spt_preproc.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (no shrinking). Optionally shrink the input volumes by an integer amount for coarse alignment. "
 },
 {
   "count": 30,
   "prog": "e2spt_recompute.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " int ",
   "help": " Shrink factor to shrink particles before averaging. Default=1, which means no shrinking. "
 },
 {
   "count": 30,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " int ",
   "help": " Optionally shrink the input volumes by an integer amount for coarse alignment. "
 },
 {
   "count": 30,
   "prog": "e2spt_sgd.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " int ",
   "help": " Shrink factor for particles "
 },
 {
   "count": 30,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=1 (no shrinking). Integer shrinking factor, part of preprocessing to facilitate particle tracking. "
 },
 {
   "count": 30,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--shrink'] ",
   "default": "-1",
   "type": " int ",
   "help": " binning factor. Default (-1) will downsample to ~500 "
 },
 {
   "count": 30,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0 (not used). Shrinking factor to do Fourier cropping of the images in a titlseries; can be a fractional number (for example, 1.5) "
 },
 {
   "count": 30,
   "prog": "e2stacksort.py ",
   "option": " ['--shrink'] ",
   "default": "1",
   "type": " int ",
   "help": " Reduce the particles for comparisons "
 },
 {
   "count": 30,
   "prog": "e2symsearch3d.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " int ",
   "help": " Optionally shrink the input particles by an integer amount prior to computing similarity scores. For speed purposes. Default=0, no shrinking "
 },
 {
   "count": 30,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " int ",
   "help": " Optionally shrink the input particles by an integer amount prior to computing similarity scores. For speed purposes. Defulat = 0, no shrinking "
 },
 {
   "count": 30,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Shrink factor to provide IMOD's binvol program with to bin/shrink the output tomogram after rotation about the x axis. "
 },
 {
   "count": 30,
   "prog": "e2tomopreproc.py ",
   "option": " ['--shrink'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0 (no shrinking). Can use decimal numbers, larger than 1.0. Optionally shrink the images by this factor. Uses processor math.fft.resample. "
 },
 {
   "count": 28,
   "prog": "e2align2d.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the output class stack "
 },
 {
   "count": 28,
   "prog": "e2buildstacks.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of the output stack to build (Extension will be .hdf unless specified). Note, all tiltseries will be stored in the 'tiltseries' directory. "
 },
 {
   "count": 28,
   "prog": "e2classaverage.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the output class-average stack "
 },
 {
   "count": 28,
   "prog": "e2classifytree.py ",
   "option": " ['--output'] ",
   "default": " clsmx.hdf ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 28,
   "prog": "e2fsc.py ",
   "option": " ['--output'] ",
   "default": " resvol143.hdf ",
   "type": " str ",
   "help": " Output .143 resolution volume "
 },
 {
   "count": 28,
   "prog": "e2fsc_local.py ",
   "option": " ['--output'] ",
   "default": "  ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 28,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--output'] ",
   "default": " resvol143.hdf ",
   "type": " str ",
   "help": " Output .143 resolution volume "
 },
 {
   "count": 28,
   "prog": "e2make3d.py ",
   "option": " ['--output'] ",
   "default": " threed.hdf ",
   "type": " None ",
   "help": " Output reconstructed volume file name. "
 },
 {
   "count": 28,
   "prog": "e2make3dpar.py ",
   "option": " ['--output'] ",
   "default": " threed.hdf ",
   "type": " None ",
   "help": " Output reconstructed volume file name. "
 },
 {
   "count": 28,
   "prog": "e2match.py ",
   "option": " ['--output'] ",
   "default": "  ",
   "type": " str ",
   "help": " Specify the name of the file to which the edited img2process will be written. "
 },
 {
   "count": 28,
   "prog": "e2pathwalker.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " Output file "
 },
 {
   "count": 28,
   "prog": "e2procheader.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " File to write the fixed stack to. If not provided, the stack in --input will be overwritten. "
 },
 {
   "count": 28,
   "prog": "e2procjson.py ",
   "option": " ['--output'] ",
   "default": " jsoninfo.txt ",
   "type": " str ",
   "help": " Output for text operations (not JSON) filename. default = jsoninfo.txt "
 },
 {
   "count": 28,
   "prog": "e2ptcltrace.py ",
   "option": " ['--output'] ",
   "default": " ptcltrace.txt ",
   "type": " str ",
   "help": " Name of output file. "
 },
 {
   "count": 28,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " Filename for the final averaged/filtered result. "
 },
 {
   "count": 28,
   "prog": "e2refinevariance.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of a directory where the variance calculated should be placed. If unspecified will generate one automatically of type refinevar_??. "
 },
 {
   "count": 28,
   "prog": "e2segment3d.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of output file for segmentation map "
 },
 {
   "count": 28,
   "prog": "e2spa_classify.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " score output "
 },
 {
   "count": 28,
   "prog": "e2spa_make3d.py ",
   "option": " ['--output'] ",
   "default": " threed.hdf ",
   "type": " None ",
   "help": " Output reconstructed volume file name. "
 },
 {
   "count": 28,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--output'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Used to extract particles without the GUI. Requires --coords. If not specified, the suffix '_ptlcs' will be attached to the name of the input tomogram. Otherwise, specify here the name of the stack file where to write the extracted subvolumes. "
 },
 {
   "count": 28,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--output'] ",
   "default": "  ",
   "type": " str ",
   "help": " Filename for the output CTF-corrected tilt series. "
 },
 {
   "count": 28,
   "prog": "e2spt_preproc.py ",
   "option": " ['--output'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Specific name of HDF file to write processed particles to. "
 },
 {
   "count": 28,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the output class-average stack. MUST be in  .hdf format, since volume stack support is required. "
 },
 {
   "count": 28,
   "prog": "e2spt_scramblestack.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the volumes stack that HAVE BEEN ALIGNED to a common reference "
 },
 {
   "count": 28,
   "prog": "e2spt_wedgefill.py ",
   "option": " ['--output'] ",
   "default": "  ",
   "type": " str ",
   "help": " optional file name to save the stack with a filled wedge. "
 },
 {
   "count": 28,
   "prog": "e2tiltseries.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of the output stack to build (including file extension). "
 },
 {
   "count": 28,
   "prog": "e2tomoseg_buildtrainset.py ",
   "option": " ['--output'] ",
   "default": " None ",
   "type": " str ",
   "help": " output file name. Default is the input particle file name plus _seg.hdf "
 },
 {
   "count": 28,
   "prog": "e2tvrecon.py ",
   "option": " ['--output'] ",
   "default": " threed.hdf ",
   "type": " None ",
   "help": " Output reconstructed    tomogram file name. "
 },
 {
   "count": 18,
   "prog": "e2ctffind3util.py ",
   "option": " ['--maxres'] ",
   "default": "0",
   "type": " float ",
   "help": " The highest resolution to be fitted (Angstroms) "
 },
 {
   "count": 18,
   "prog": "e2gmm_refine.py ",
   "option": " ['--maxres'] ",
   "default": "-1",
   "type": " float ",
   "help": " maximum resolution. will overwrite maxboxsz.  "
 },
 {
   "count": 18,
   "prog": "e2spa_align.py ",
   "option": " ['--maxres'] ",
   "default": "-1",
   "type": " float ",
   "help": " max resolution for cmp "
 },
 {
   "count": 18,
   "prog": "e2spa_classify.py ",
   "option": " ['--maxres'] ",
   "default": "15",
   "type": " float ",
   "help": " max resolution for cmp "
 },
 {
   "count": 18,
   "prog": "e2spa_make3d.py ",
   "option": " ['--maxres'] ",
   "default": "-1",
   "type": " float ",
   "help": "  "
 },
 {
   "count": 18,
   "prog": "e2spa_refine_multi.py ",
   "option": " ['--maxres'] ",
   "default": "10",
   "type": " float ",
   "help": " max resolution "
 },
 {
   "count": 18,
   "prog": "e2spt_align.py ",
   "option": " ['--maxres'] ",
   "default": "0",
   "type": " float ",
   "help": " Maximum resolution (the smaller number) to consider in alignment (in A, not 1/A) "
 },
 {
   "count": 18,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--maxres'] ",
   "default": "0",
   "type": " float ",
   "help": " Maximum resolution to consider in alignment (in A, not 1/A) "
 },
 {
   "count": 18,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--maxres'] ",
   "default": "-1",
   "type": " float ",
   "help": " Lowpass filter applied to particles prior to alignment/averaging, resolution in A. Default disabled "
 },
 {
   "count": 18,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--maxres'] ",
   "default": "30",
   "type": " float ",
   "help": " Filter particles to this resolution (in Angstroms) before classification "
 },
 {
   "count": 18,
   "prog": "e2spt_refine.py ",
   "option": " ['--maxres'] ",
   "default": "0",
   "type": " float ",
   "help": " Maximum resolution (the smaller number) to consider in alignment (in A, not 1/A) "
 },
 {
   "count": 18,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--maxres'] ",
   "default": "0",
   "type": " float ",
   "help": " Maximum resolution to consider in alignment (in A, not 1/A) "
 },
 {
   "count": 18,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--maxres'] ",
   "default": "0",
   "type": " float ",
   "help": " Maximum resolution (the smaller number) to consider in alignment (in A, not 1/A) "
 },
 {
   "count": 18,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--maxres'] ",
   "default": "15",
   "type": " float ",
   "help": " max resolution in A "
 },
 {
   "count": 18,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--maxres'] ",
   "default": "1",
   "type": " float ",
   "help": " How far in resolution to extend the FSC curve on the x axis; for example, to see up to 20anstroms, provide --maxres=1.0. Default=15 "
 },
 {
   "count": 18,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--maxres'] ",
   "default": "0",
   "type": " float ",
   "help": " Maximum resolution to consider in alignment (in A, not 1/A) "
 },
 {
   "count": 18,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--maxres'] ",
   "default": "-1",
   "type": " float ",
   "help": " max resolution for fsc "
 },
 {
   "count": 18,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--maxres'] ",
   "default": "-1",
   "type": " float ",
   "help": " max resolution for cmp "
 },
 {
   "count": 17,
   "prog": "e2a2d_align.py ",
   "option": " ['--align'] ",
   "default": " rotate_translate_tree ",
   "type": " str ",
   "help": " This is the aligner used to align particles to the previous class average. Default is None. "
 },
 {
   "count": 17,
   "prog": "e2align2d.py ",
   "option": " ['--align'] ",
   "default": " rotate_translate_flip ",
   "type": " str ",
   "help": " This is the aligner used to align particles to the previous class average. Default is None. "
 },
 {
   "count": 17,
   "prog": "e2classaverage.py ",
   "option": " ['--align'] ",
   "default": " None ",
   "type": " str ",
   "help": " This is the aligner used to align particles to the previous class average. Default is None. "
 },
 {
   "count": 17,
   "prog": "e2classaverage.py ",
   "option": " ['--keep'] ",
   "default": "1",
   "type": " float ",
   "help": " The fraction of particles to keep in each class. "
 },
 {
   "count": 17,
   "prog": "e2classesbyref.py ",
   "option": " ['--align'] ",
   "default": " rotate_translate_tree ",
   "type": " str ",
   "help": " specify an aligner to use after classification. Default rotate_translate_tree "
 },
 {
   "count": 17,
   "prog": "e2classifytree.py ",
   "option": " ['--align'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of an 'aligner' to use prior to comparing the images "
 },
 {
   "count": 17,
   "prog": "e2classvsproj.py ",
   "option": " ['--align'] ",
   "default": " rotate_translate_flip ",
   "type": " str ",
   "help": " The name of an 'aligner' to use prior to comparing the images "
 },
 {
   "count": 17,
   "prog": "e2gmm_refine.py ",
   "option": " ['--align'] ",
   "default": " False ",
   "type": " None ",
   "help": " align particles. "
 },
 {
   "count": 17,
   "prog": "e2make3d.py ",
   "option": " ['--keep'] ",
   "default": "1",
   "type": " float ",
   "help": " The fraction of slices to keep, based on quality scores (1.0 = use all slices). See keepsig. "
 },
 {
   "count": 17,
   "prog": "e2make3dpar.py ",
   "option": " ['--keep'] ",
   "default": "1",
   "type": " float ",
   "help": " The fraction of slices to keep, based on quality scores (1.0 = use all slices). See keepsig. "
 },
 {
   "count": 17,
   "prog": "e2rct.py ",
   "option": " ['--align'] ",
   "default": " False ",
   "type": " None ",
   "help": " Switch on image alignment. This is only translational alignment for the tilted images, and uses a iterative method similar to EMAN1 centalignint "
 },
 {
   "count": 17,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--align'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will do o to e alignment and test for handedness flips. Should not be repeated as it overwrites the odd file with the aligned result. "
 },
 {
   "count": 17,
   "prog": "e2simmx.py ",
   "option": " ['--align'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of an 'aligner' to use prior to comparing the images "
 },
 {
   "count": 17,
   "prog": "e2simmx2stage.py ",
   "option": " ['--align'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of an 'aligner' to use prior to comparing the images "
 },
 {
   "count": 17,
   "prog": "e2spa_align.py ",
   "option": " ['--keep'] ",
   "default": "0.8",
   "type": " float ",
   "help": " propotion of tilts to keep. default is 0.8 "
 },
 {
   "count": 17,
   "prog": "e2spa_make3d.py ",
   "option": " ['--keep'] ",
   "default": "0.9",
   "type": " float ",
   "help": " The fraction of slices to keep, based on quality scores (1.0 = use all slices). See keepsig. "
 },
 {
   "count": 17,
   "prog": "e2spa_refine.py ",
   "option": " ['--keep'] ",
   "default": "0.9",
   "type": " float ",
   "help": " keep "
 },
 {
   "count": 17,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--keep'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0 (not used). Percentage of particles, expressed as a fraction, to keep right before writing the coordinates file and output stack. "
 },
 {
   "count": 17,
   "prog": "e2spt_average.py ",
   "option": " ['--keep'] ",
   "default": "-1",
   "type": " float ",
   "help": " fraction of particles to keep. will overwrite simthr if set. "
 },
 {
   "count": 17,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--align'] ",
   "default": " rotate_translate_3d_tree ",
   "type": " str ",
   "help": " Default is rotate_translate_3d_tree. See e2help.py aligners to see the list of parameters the aligner takes (for example, if there's symmetry, supply --align rotate_translate_3d_tree:sym=icos). This is the aligner used to align particles to the previous class average. Specify 'None' (with capital N) to disable. "
 },
 {
   "count": 17,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--align'] ",
   "default": " rotate_translate_3d_tree ",
   "type": " str ",
   "help": " Default is rotate_translate_3d_tree. See e2help.py aligners to see the list of parameters the aligner takes (for example, if there's symmetry, supply --align rotate_translate_3d_tree:sym=icos). This is the aligner used to align particles to the previous class average. Specify 'None' (with capital N) to disable. "
 },
 {
   "count": 17,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--keep'] ",
   "default": "1",
   "type": " float ",
   "help": " Default=1.0 (all particles kept). The fraction of particles to keep in each class. "
 },
 {
   "count": 17,
   "prog": "e2spt_extract.py ",
   "option": " ['--keep'] ",
   "default": "0.9",
   "type": " float ",
   "help": " fraction of particles to keep fron previous alignment. for reextraction only. "
 },
 {
   "count": 17,
   "prog": "e2spt_hac.py ",
   "option": " ['--align'] ",
   "default": " rotate_translate_3d_tree ",
   "type": " str ",
   "help": " This is the aligner used to align particles to the previous class average. Default is rotate_translate_3d:search=8:delta=12:dphi=12, specify 'None' (with capital N) to disable. "
 },
 {
   "count": 17,
   "prog": "e2spt_mapptclstotomo.py ",
   "option": " ['--keep'] ",
   "default": "1",
   "type": " float ",
   "help": " propotion to keep. will exclude bad particles if this is smaller than 1.0 "
 },
 {
   "count": 17,
   "prog": "e2spt_recompute.py ",
   "option": " ['--keep'] ",
   "default": "1",
   "type": " float ",
   "help": " The fraction of particles to keep in each class. Default=1.0 "
 },
 {
   "count": 17,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--keep'] ",
   "default": "0.95",
   "type": " float ",
   "help": " fraction to keep "
 },
 {
   "count": 17,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--align'] ",
   "default": " rotate_translate_3d_tree ",
   "type": " str ",
   "help": " This is the aligner used to align particles to the previous class average. Default is rotate_translate_3d:search=8:delta=12:dphi=12, specify 'None' (with capital N) to disable. "
 },
 {
   "count": 17,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--keep'] ",
   "default": "1",
   "type": " float ",
   "help": " Default=1.0. The fraction of particles to keep in each class. "
 },
 {
   "count": 17,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--keep'] ",
   "default": "0.8",
   "type": " float ",
   "help": " propotion of tilts to keep. default is 0.8 "
 },
 {
   "count": 17,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--keep'] ",
   "default": "0.5",
   "type": " float ",
   "help": " propotion of tilts to keep. default is 0.5 "
 },
 {
   "count": 17,
   "prog": "e2symsearch3d.py ",
   "option": " ['--align'] ",
   "default": " symalignquat ",
   "type": " str ",
   "help": " Default=symalignquat. WARNING: The aligner cannot be changed for this program currently. Option ignored. "
 },
 {
   "count": 17,
   "prog": "e2symsearch3d.py ",
   "option": " ['--keep'] ",
   "default": "1",
   "type": " float ",
   "help": " Fraction of particles to include if --average is on, after correlating the particles with the average. "
 },
 {
   "count": 17,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--align'] ",
   "default": " translational ",
   "type": " str ",
   "help": " The name of a aligner to be used in comparing the aligned images "
 },
 {
   "count": 16,
   "prog": "e2a2d_stat.py ",
   "option": " ['--ref'] ",
   "default": " None ",
   "type": " str ",
   "help": " A reference image to be used in conjunction with --cmp and --multicmp "
 },
 {
   "count": 16,
   "prog": "e2align2d.py ",
   "option": " ['--ref'] ",
   "default": " None ",
   "type": " str ",
   "help": " Reference image to use for alignment. Required "
 },
 {
   "count": 16,
   "prog": "e2align3d.py ",
   "option": " ['--preprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " preprocess maps before alignment "
 },
 {
   "count": 16,
   "prog": "e2boxer_old.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " debug mode "
 },
 {
   "count": 16,
   "prog": "e2classaverage.py ",
   "option": " ['--ref'] ",
   "default": " None ",
   "type": " str ",
   "help": " Reference image(s). Used as an initial alignment reference and for final orientation adjustment if present. Also used to assign euler angles to the generated classes. This is typically the projections that were used for classification. "
 },
 {
   "count": 16,
   "prog": "e2classaverage.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " Print debugging information while the program is running. Default is off. "
 },
 {
   "count": 16,
   "prog": "e2classifyligand.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " Enable debugging mode with verbose output and image display. Not suitable for real runs. "
 },
 {
   "count": 16,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " Show debugging messages. "
 },
 {
   "count": 16,
   "prog": "e2ddd_movie.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " run with debugging output "
 },
 {
   "count": 16,
   "prog": "e2erasefiducials.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " Save noise and mask/masked image(s). "
 },
 {
   "count": 16,
   "prog": "e2extractsubparticles.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " Enable debugging mode with verbose output and image display. Not suitable for real runs. "
 },
 {
   "count": 16,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--ref'] ",
   "default": " None ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 16,
   "prog": "e2make3d.py ",
   "option": " ['--preprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " preprocessor to be applied to the projections prior to 3D insertion. There can be more than one preprocessor and they are applied in the order in which they are specifed. Applied before padding occurs. See e2help.py processors for a complete list of available processors. "
 },
 {
   "count": 16,
   "prog": "e2make3dpar.py ",
   "option": " ['--preprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " preprocessor to be applied to the projections prior to 3D insertion. There can be more than one preprocessor and they are applied in the order in which they are specifed. Applied before padding occurs. See e2help.py processors for a complete list of available processors. "
 },
 {
   "count": 16,
   "prog": "e2match.py ",
   "option": " ['--preprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " Any processor (as in e2proc3d.py) to be applied to the edited img2process. "
 },
 {
   "count": 16,
   "prog": "e2spa_align.py ",
   "option": " ['--ref'] ",
   "default": " None ",
   "type": " str ",
   "help": " reference input "
 },
 {
   "count": 16,
   "prog": "e2spa_align.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " Turn on debug mode. This will only process a small subset of the data "
 },
 {
   "count": 16,
   "prog": "e2spa_classify.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " Turn on debug mode. This will only process a small subset of the data (threads * 8 particles) "
 },
 {
   "count": 16,
   "prog": "e2spa_make3d.py ",
   "option": " ['--ref'] ",
   "default": " None ",
   "type": " str ",
   "help": " ref "
 },
 {
   "count": 16,
   "prog": "e2spa_make3d.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": "  "
 },
 {
   "count": 16,
   "prog": "e2spa_refine.py ",
   "option": " ['--ref'] ",
   "default": "  ",
   "type": " str ",
   "help": " reference "
 },
 {
   "count": 16,
   "prog": "e2spt_align.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " . "
 },
 {
   "count": 16,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " . "
 },
 {
   "count": 16,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--preprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " Any processor (as in e2proc3d.py) to be applied to the tomogram "
 },
 {
   "count": 16,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--preprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 16,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--ref'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Reference image. Used as an initial alignment reference. The refinements are 'gold standard' by default, and therefore two independent copies of the reference will be generated and randomphase-lowpass filtered to the resolution specified through --refrandphase. To turn dataset splitting and gold standard refinement off, supply --goldstandardoff. "
 },
 {
   "count": 16,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--preprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 16,
   "prog": "e2spt_hac.py ",
   "option": " ['--preprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 16,
   "prog": "e2spt_isr.py ",
   "option": " ['--preprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=None. Any processor (see e2help.py --verbose=10) applied to the images to aid alignment. "
 },
 {
   "count": 16,
   "prog": "e2spt_preproc.py ",
   "option": " ['--preprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 16,
   "prog": "e2spt_recompute.py ",
   "option": " ['--preprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " A processor (as in e2proc3d.py) to be applied to the tomogram before opening it.  For example, a specific filter with specific parameters you might like.  Type 'e2proc3d.py --processors' at the commandline to see a list of the available processors and their usage "
 },
 {
   "count": 16,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--ref'] ",
   "default": " None ",
   "type": " str ",
   "help": " reference map "
 },
 {
   "count": 16,
   "prog": "e2spt_refinemsa.py ",
   "option": " ['--preprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " A processor (as in e2proc3d.py) to be applied to the tomogram before opening it.  For example, a specific filter with specific parameters you might like.  Type 'e2proc3d.py --processors' at the commandline to see a list of the available processors and their usage "
 },
 {
   "count": 16,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--ref'] ",
   "default": " None ",
   "type": " None ",
   "help": " 3D reference for iterative alignment/averaging. <name> or <name>,#. For multiple references use this option multiple times. The first reference will be used for alignment. "
 },
 {
   "count": 16,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--ref'] ",
   "default": " None ",
   "type": " None ",
   "help": " 3D reference for iterative alignment/averaging. <name> or <name>,#. For multiple references use this option multiple times. Refs autogenerated if this is not specified. "
 },
 {
   "count": 16,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--ref'] ",
   "default": "  ",
   "type": " str ",
   "help": " Comma separated list of individual images; e.g. --refs=ref1.hdf,ref2.hdf,ref3.hdf. If a single image is provided, several copies will be made based on the number of references specified through --nref. "
 },
 {
   "count": 16,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--preprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=''. Any processor (as in e2proc3d.py) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 16,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--ref'] ",
   "default": " None ",
   "type": " str ",
   "help": " Volume that will be 'static' (the 'reference' to which volumes in --input will be aligned to). The format MUST be '.hdf' or '.mrc'  "
 },
 {
   "count": 16,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--preprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None (no additional preprocessing). Requires --track. Any additional preprocessing processor (see e2help.py processors at the command line), part of preprocessing to facilitate particle tracking. "
 },
 {
   "count": 16,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--ref'] ",
   "default": " None ",
   "type": " str ",
   "help": " reference map "
 },
 {
   "count": 16,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " for testing. "
 },
 {
   "count": 16,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " Turn on debug mode. This will only process a small subset of the data (threads * 8 particles) "
 },
 {
   "count": 16,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--ref'] ",
   "default": " None ",
   "type": " str ",
   "help": " reference input "
 },
 {
   "count": 16,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " Turn on debug mode. This will only process a small subset of the data (threads * 8 particles) "
 },
 {
   "count": 16,
   "prog": "e2symsearch3d.py ",
   "option": " ['--preprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " Any processor (as in e2proc3d.py) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 16,
   "prog": "e2symsearch3d.py ",
   "option": " ['--ref'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. If provided and --average is also provided and --keep < 1.0 or --keepsig is specified, 'good particles' will be determined by correlation to --ref. "
 },
 {
   "count": 16,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--debug'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Shows plots as they are being produced -requires user feedback to proceed. "
 },
 {
   "count": 16,
   "prog": "e2tomopreproc.py ",
   "option": " ['--preprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each image. "
 },
 {
   "count": 15,
   "prog": "e2boxer.py ",
   "option": " ['--compressbits'] ",
   "default": "6",
   "type": " int ",
   "help": " Bits to keep when writing images with compression. 0->lossless floating point. Default 6 "
 },
 {
   "count": 15,
   "prog": "e2classaverage.py ",
   "option": " ['--compressbits'] ",
   "default": "10",
   "type": " int ",
   "help": " Bits to keep when writing class-averages with compression. 0->lossless floating point. Default 10 (3 significant figures) "
 },
 {
   "count": 15,
   "prog": "e2classesbyref.py ",
   "option": " ['--compressbits'] ",
   "default": "10",
   "type": " int ",
   "help": " Bits to keep when writing class-averages with compression. 0->lossless floating point. Default 10 (3 significant figures) "
 },
 {
   "count": 15,
   "prog": "e2ctf.py ",
   "option": " ['--compressbits'] ",
   "default": "6",
   "type": " int ",
   "help": " Bits to keep when writing images with compression. 0->lossless floating point. Default 6 "
 },
 {
   "count": 15,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--compressbits'] ",
   "default": "10",
   "type": " int ",
   "help": " Bits to keep when writing volumes with compression. 0->lossless floating point. Default 10 (3 significant figures) "
 },
 {
   "count": 15,
   "prog": "e2import.py ",
   "option": " ['--compressbits'] ",
   "default": "8",
   "type": " int ",
   "help": " Bits to keep for compression. default is 8 bits. Use 0 for lossless compression. Currently used only on tiltseries, eman1 and particles "
 },
 {
   "count": 15,
   "prog": "e2make3dpar.py ",
   "option": " ['--compressbits'] ",
   "default": "10",
   "type": " int ",
   "help": " Bits to keep when writing volumes with compression. 0->lossless floating point. Default 10 (3 significant figures) "
 },
 {
   "count": 15,
   "prog": "e2proc2d.py ",
   "option": " ['--compressbits'] ",
   "default": "-1",
   "type": " int ",
   "help": " HDF only. Bits to keep for compression. -1 for no compression "
 },
 {
   "count": 15,
   "prog": "e2project3d.py ",
   "option": " ['--compressbits'] ",
   "default": "10",
   "type": " int ",
   "help": " Bits to keep when writing projections with compression. 0->lossless floating point. Default 10 (3 significant figures) "
 },
 {
   "count": 15,
   "prog": "e2rawdata.py ",
   "option": " ['--compressbits'] ",
   "default": "6",
   "type": " int ",
   "help": " Bits to keep when writing images. 4 generally safe for raw data. 0-> true lossless (floating point). Default 6 "
 },
 {
   "count": 15,
   "prog": "e2refine_easy.py ",
   "option": " ['--compressbits'] ",
   "default": "10",
   "type": " int ",
   "help": " Bits of precision to keep in class-averages and 3-D volumes, 0->losless, default=10 (3 decimal digits of precision) "
 },
 {
   "count": 15,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--compressbits'] ",
   "default": "12",
   "type": " int ",
   "help": " Bits to keep when writing (most) volumes with compression. 0->lossless floating point. Default 12 (3 significant figures) "
 },
 {
   "count": 15,
   "prog": "e2spa_refine.py ",
   "option": " ['--compressbits'] ",
   "default": "6",
   "type": " int ",
   "help": " Bits to keep when writing images. 4 generally safe for raw data. 0-> true lossless (floating point). Default 6 "
 },
 {
   "count": 15,
   "prog": "e2spt_extract.py ",
   "option": " ['--compressbits'] ",
   "default": "-1",
   "type": " int ",
   "help": " Bits to keep for compression. default is -1 meaning uncompressed floating point. 8 bit seems fine... "
 },
 {
   "count": 15,
   "prog": "e2tomogram.py ",
   "option": " ['--compressbits'] ",
   "default": "-1",
   "type": " int ",
   "help": " Number of bits of precision in output tomogram with lossless compression. -1 -> uncompressed float "
 },
 {
   "count": 14,
   "prog": "e2RCTboxer.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " If writing outputt inverts pixel intensities "
 },
 {
   "count": 14,
   "prog": "e2boxer.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " If specified, inverts input contrast. Particles MUST be white on a darker background. "
 },
 {
   "count": 14,
   "prog": "e2boxer_old.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " If writing outputt inverts pixel intensities "
 },
 {
   "count": 14,
   "prog": "e2classaverage.py ",
   "option": " ['--normproc'] ",
   "default": " normalize.edgemean ",
   "type": " str ",
   "help": " Normalization processor applied to particles before alignment. Default is normalize.edgemean. If you want to turn this option off specify 'None' "
 },
 {
   "count": 14,
   "prog": "e2ctf.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " Invert the contrast of the particles in output files (default false) "
 },
 {
   "count": 14,
   "prog": "e2ctf_auto.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " Invert the contrast of the particles in output files (default false) "
 },
 {
   "count": 14,
   "prog": "e2ddd_particles.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " Invert the contrast of the particles in output files (default false) "
 },
 {
   "count": 14,
   "prog": "e2import.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " Invert the contrast before importing tomograms "
 },
 {
   "count": 14,
   "prog": "e2match.py ",
   "option": " ['--normproc'] ",
   "default": "  ",
   "type": " str ",
   "help": " Normalization processor applied to    particles before alignment. Default is None. If normalize.mask is used,    results of the mask option will be passed in automatically. "
 },
 {
   "count": 14,
   "prog": "e2proc2d.py ",
   "option": " ['--clip'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify the output size in pixels xsize,ysize[,xcenter,ycenter], images can be made larger or smaller. "
 },
 {
   "count": 14,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--clip'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify the output size in pixels xsize,ysize[,xcenter,ycenter], images can be made larger or smaller. "
 },
 {
   "count": 14,
   "prog": "e2proc2dpar.py ",
   "option": " ['--clip'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify the output size in pixels xsize,ysize[,xcenter,ycenter], images can be made larger or smaller. "
 },
 {
   "count": 14,
   "prog": "e2rawdata.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " Invert contrast "
 },
 {
   "count": 14,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--normproc'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Normalization processor (e2help.py processors, applied through e2proc3d.py) applied to the tomogram before looking for particles. "
 },
 {
   "count": 14,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--clip'] ",
   "default": "  ",
   "type": " str ",
   "help": " IMOD required for this option. Default=None. Provide x,y,z sizes to clip about the center of the tomogram. For example, specify --clip=2048,2048,250 to clip a tomogram originally sized 4096x4096x500 in half, around the center of the tomogram. To clip only in x and y but keep the full thickness in z, you would say --clip=2048,2048. If one variable is omitted, the default size from the tomogram will be used for that axis. "
 },
 {
   "count": 14,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--normproc'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None (see 'e2help.py processors -v 10' at the command line). Normalization processor applied to particles before alignment. If normalize.mask is used, results of the mask option will be passed in automatically. If you want to turn this option off specify 'None' "
 },
 {
   "count": 14,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--clip'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (which means it's not used). Boxsize to clip particles as part of preprocessing to speed up alignment. For example, the boxsize of the particles might be 100 pixels, but the particles are only 50 pixels in diameter. Aliasing effects are not always as deleterious for all specimens, and sometimes 2x padding isn't necessary; still, there are some benefits from 'oversampling' the data during averaging; so you might still want an average of size 2x, but perhaps particles in a box of 1.5x are sufficiently good for alignment. In this case, you would supply --clip=75 "
 },
 {
   "count": 14,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If on, this option means you want the contrast to me inverted while boxing, AND for the extracted sub-volumes. Remember that EMAN2 **MUST** work with \"white\" protein. You can very easily figure out what the original color of the protein is in your data by looking at the gold fiducials or the edge of the carbon hole in your tomogram. If they look black you MUST specify this option "
 },
 {
   "count": 14,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--normproc'] ",
   "default": " normalize ",
   "type": " str ",
   "help": " Default=normalize. Used to extract particles without the GUI. Requires --coords. Normalization processor applied to particles before extraction. Use --normproc=normalize.edgemean if the particles have a clear solvent background (i.e., they're not part of a larger complex or embeded in a membrane. "
 },
 {
   "count": 14,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--clip'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (which means it's not used). Boxsize to clip particles as part of preprocessing to speed up alignment. For example, the boxsize of the particles might be 100 pixels, but the particles are only 50 pixels in diameter. Aliasing effects are not always as deleterious for all specimens, and sometimes 2x padding isn't necessary; still, there are some benefits from 'oversampling' the data during averaging; so you might still want an average of size 2x, but perhaps particles in a box of 1.5x are sufficiently good for alignment. In this case, you would supply --clip=75 "
 },
 {
   "count": 14,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--normproc'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None (see 'e2help.py processors -v 10' at the command line). Normalization processor applied to particles before alignment. If normalize.mask is used, results of the mask option will be passed in automatically. If you want to turn this option off specify 'None' "
 },
 {
   "count": 14,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " Invert the contrast of the output data, compared to the input data. "
 },
 {
   "count": 14,
   "prog": "e2spt_hac.py ",
   "option": " ['--normproc'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=None. See 'e2help.py processors -v 10' at the command line for other available normalization processors. Normalization processor applied to particles before alignment. If normalize.mask is used, results of the mask option will be passed in automatically. If you want to turn this option off specify 'None' "
 },
 {
   "count": 14,
   "prog": "e2spt_hac.py ",
   "option": " ['--clip'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (which means it's not used). Boxsize to clip particles as part of preprocessing to speed up alignment. For example, the boxsize of the particles might be 100 pixels, but the particles are only 50 pixels in diameter. Aliasing effects are not always as deleterious for all specimens, and sometimes 2x padding isn't necessary; still, there are some benefits from 'oversampling' the data during averaging; so you might still want an average of size 2x, but perhaps particles in a box of 1.5x are sufficiently good for alignment. In this case, you would supply --clip=75 "
 },
 {
   "count": 14,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--normproc'] ",
   "default": " None ",
   "type": " str ",
   "help": " default=None. Normalization processor to apply to the reconstructed halves; e.g., --normproc=normalize.edgemean. "
 },
 {
   "count": 14,
   "prog": "e2spt_make3d.py ",
   "option": " ['--clip'] ",
   "default": "-1",
   "type": " int ",
   "help": " Final output size. "
 },
 {
   "count": 14,
   "prog": "e2spt_preproc.py ",
   "option": " ['--clip'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (which means it's not used). Boxsize to clip particles. For example, the boxsize of the particles might be 100 pixels, but the particles are only 50 pixels in diameter. Aliasing effects are not always as deleterious for all specimens, and sometimes 2x padding isn't necessary. "
 },
 {
   "count": 14,
   "prog": "e2spt_preproc.py ",
   "option": " ['--normproc'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None (see 'e2help.py processors -v 10' at the command line). Normalization processor applied to particles before alignment. If normalize.mask is used, results of the mask option will be passed in automatically. If you want to turn this option off specify 'None' "
 },
 {
   "count": 14,
   "prog": "e2spt_recompute.py ",
   "option": " ['--normproc'] ",
   "default": " normalize.edgemean ",
   "type": " str ",
   "help": " Normalization processor applied to particles before extraction. Default=normalize.edgemean. If using the latter, you must provide --masknorm, otherwise, a default --masknorm=mask.sharp:outer_radius=-2 will be used. "
 },
 {
   "count": 14,
   "prog": "e2spt_recompute.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This parameer indicates you want the contrast to me inverted while boxing, AND for the extracted sub-volumes. Remember that EMAN2 **MUST** work with \"white\" protein. You can very easily figure out what the original color of the protein is in your data by looking at the gold fiducials or the edge of the carbon hole in your tomogram. If they look black you MUST specify this option "
 },
 {
   "count": 14,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--normproc'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Normalization processor applied to particles before alignment. Default is to use normalize. If normalize.mask is used, results of the mask option will be passed in automatically. If you want to turn this option off specify 'None' "
 },
 {
   "count": 14,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--clip'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (which means it's not used). Boxsize to clip particles as part of preprocessing to speed up alignment. For example, the boxsize of the particles might be 100 pixels, but the particles are only 50 pixels in diameter. Aliasing effects are not always as deleterious for all specimens, and sometimes 2x padding isn't necessary; still, there are some benefits from 'oversampling' the data during averaging; so you might still want an average of size 2x, but perhaps particles in a box of 1.5x are sufficiently good for alignment. In this case, you would supply --clip=75 "
 },
 {
   "count": 14,
   "prog": "e2spt_simulation.py ",
   "option": " ['--clip'] ",
   "default": " None ",
   "type": " int ",
   "help": " Default=None. The final box size to clip the output subtomograms to. "
 },
 {
   "count": 14,
   "prog": "e2spt_simulation.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " \"Default=False. This will multiply the pixel values by -1. This is intended to make the simulated particles be like real EM data before contrast reversal (black, negative contrast), assuming that they're being generated from a model/image where the protein has positive values. It not supplied, 'white protein' (positive density values) will be used by default (or whatever the original contrast is of the image supplied as a model). "
 },
 {
   "count": 14,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--normproc'] ",
   "default": "  ",
   "type": " str ",
   "help": " WARNING: Not used anywhere yet. Default=None "
 },
 {
   "count": 14,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--clip'] ",
   "default": "  ",
   "type": " str ",
   "help": " Resize the 2-D images in the tilt series. If one number is provided, then x and y dimensions will be made the same. To specify both dimensions, supply two numbers, --clip=x,y. Clipping will be about the center of the image. "
 },
 {
   "count": 14,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " \"This will multiply the pixel values by -1. "
 },
 {
   "count": 14,
   "prog": "e2symsearch3d.py ",
   "option": " ['--clip'] ",
   "default": "0",
   "type": " int ",
   "help": " Boxsize to clip particles as part of preprocessing to speed up alignment. For example, the boxsize of the particles might be 100 pixels, but the particles are only 50 pixels in diameter. Aliasing effects are not always as deleterious for all specimens, and sometimes 2x padding isn't necessary; still, there are some benefits from 'oversampling' the data during averaging; so you might still want an average of size 2x, but perhaps particles in a box of 1.5x are sufficiently good for alignment. In this case, you would supply --clip=75 "
 },
 {
   "count": 14,
   "prog": "e2symsearch3d.py ",
   "option": " ['--normproc'] ",
   "default": "  ",
   "type": " str ",
   "help": " Normalization processor applied to particles before alignment. Default is to use normalize. If normalize.mask is used, results of the mask option will be passed in automatically. If you want to turn this option off specify 'None' "
 },
 {
   "count": 14,
   "prog": "e2tomopreproc.py ",
   "option": " ['--clip'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. This resizes the 2-D images in the tilt series. If one number is provided, then x and y dimensions will be made the same. To specify both dimensions, supply two numbers, --clip=x,y. Clipping will be about the center of the image. "
 },
 {
   "count": 14,
   "prog": "e2tomopreproc.py ",
   "option": " ['--normproc'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None (see 'e2help.py processors -v 10' at the command line). Normalization processor applied to each image. "
 },
 {
   "count": 14,
   "prog": "e2tomoseg_preproc.py ",
   "option": " ['--invert'] ",
   "default": " False ",
   "type": " None ",
   "help": " Invert the contrast of the tomograms in output files (default false). If specified _proctag tomograms will be generated. "
 },
 {
   "count": 13,
   "prog": "e2a2d_align.py ",
   "option": " ['--cmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The comparitor used to generate quality scores for the purpose of particle exclusion in classes, strongly linked to the keep argument. "
 },
 {
   "count": 13,
   "prog": "e2a2d_stat.py ",
   "option": " ['--cmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " A comparitor used to generate new quality scores. Will add an additional column with --extract, otherwise replaces score for this run. "
 },
 {
   "count": 13,
   "prog": "e2align2d.py ",
   "option": " ['--cmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " The comparitor used to generate quality scores for the purpose of particle exclusion in classes, strongly linked to the keep argument. "
 },
 {
   "count": 13,
   "prog": "e2align3d.py ",
   "option": " ['--cmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " comparitor and params to use for the 3D refiner, default='ccc' "
 },
 {
   "count": 13,
   "prog": "e2boxer.py ",
   "option": " ['--voltage'] ",
   "default": "-1",
   "type": " float ",
   "help": " Microscope voltage in KV "
 },
 {
   "count": 13,
   "prog": "e2boxer.py ",
   "option": " ['--cs'] ",
   "default": "-1",
   "type": " float ",
   "help": " Microscope Cs (spherical aberation) "
 },
 {
   "count": 13,
   "prog": "e2boxer_old.py ",
   "option": " ['--Cs'] ",
   "default": "2",
   "type": " float ",
   "help": " Microscope Cs (spherical aberation) "
 },
 {
   "count": 13,
   "prog": "e2boxer_old.py ",
   "option": " ['--voltage'] ",
   "default": "300",
   "type": " float ",
   "help": " Microscope voltage in KV "
 },
 {
   "count": 13,
   "prog": "e2classaverage.py ",
   "option": " ['--cmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The comparitor used to generate quality scores for the purpose of particle exclusion in classes, strongly linked to the keep argument. "
 },
 {
   "count": 13,
   "prog": "e2classesbyref.py ",
   "option": " ['--cmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " Default=auto. The name of a 'cmp' to be used in assessing the aligned images "
 },
 {
   "count": 13,
   "prog": "e2classifyligand.py ",
   "option": " ['--cmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The name of a 'cmp' to be used when pairmask is not specified "
 },
 {
   "count": 13,
   "prog": "e2classifytree.py ",
   "option": " ['--cmp'] ",
   "default": " dot:normalize=1 ",
   "type": " str ",
   "help": " The name of a 'cmp' to be used in comparing the aligned images "
 },
 {
   "count": 13,
   "prog": "e2classvsproj.py ",
   "option": " ['--cmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The name of a 'cmp' to be used in comparing the aligned images "
 },
 {
   "count": 13,
   "prog": "e2ctf.py ",
   "option": " ['--voltage'] ",
   "default": "0",
   "type": " float ",
   "help": " Microscope voltage in KV "
 },
 {
   "count": 13,
   "prog": "e2ctf.py ",
   "option": " ['--cs'] ",
   "default": "0",
   "type": " float ",
   "help": " Microscope Cs (spherical aberation) "
 },
 {
   "count": 13,
   "prog": "e2ctf_auto.py ",
   "option": " ['--voltage'] ",
   "default": "0",
   "type": " float ",
   "help": " Microscope voltage in KV "
 },
 {
   "count": 13,
   "prog": "e2ctf_auto.py ",
   "option": " ['--cs'] ",
   "default": "0",
   "type": " float ",
   "help": " Microscope Cs (spherical aberation) "
 },
 {
   "count": 13,
   "prog": "e2ctffind3util.py ",
   "option": " ['--cs'] ",
   "default": "0",
   "type": " float ",
   "help": " The spherical aberration of the microscope "
 },
 {
   "count": 13,
   "prog": "e2ctffind3util.py ",
   "option": " ['--voltage'] ",
   "default": "0",
   "type": " float ",
   "help": " The voltage (in kV) of the microscope "
 },
 {
   "count": 13,
   "prog": "e2ctfsim.py ",
   "option": " ['--voltage'] ",
   "default": "300",
   "type": " float ",
   "help": " Microscope voltage in KV "
 },
 {
   "count": 13,
   "prog": "e2ctfsim.py ",
   "option": " ['--cs'] ",
   "default": "4.1",
   "type": " float ",
   "help": " Microscope Cs (spherical aberation) "
 },
 {
   "count": 13,
   "prog": "e2erasefiducials.py ",
   "option": " ['--lowpass'] ",
   "default": "1.11",
   "type": " float ",
   "help": " Multiply lowpass filter frequency by this constant when filtering noise image. Default is 1.11. "
 },
 {
   "count": 13,
   "prog": "e2evalimage.py ",
   "option": " ['--voltage'] ",
   "default": " None ",
   "type": " float ",
   "help": " Microscope voltage in KV "
 },
 {
   "count": 13,
   "prog": "e2evalimage.py ",
   "option": " ['--cs'] ",
   "default": " None ",
   "type": " float ",
   "help": " Microscope Cs (spherical aberation) "
 },
 {
   "count": 13,
   "prog": "e2match.py ",
   "option": " ['--lowpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " A lowpass filtering processor (as in e2proc3d.py) be applied to the edited img2process. "
 },
 {
   "count": 13,
   "prog": "e2rawdata.py ",
   "option": " ['--voltage'] ",
   "default": " None ",
   "type": " float ",
   "help": " Microscope voltage in KV "
 },
 {
   "count": 13,
   "prog": "e2rawdata.py ",
   "option": " ['--cs'] ",
   "default": " None ",
   "type": " float ",
   "help": " Microscope Cs (spherical aberation) "
 },
 {
   "count": 13,
   "prog": "e2rct.py ",
   "option": " ['--maxshift'] ",
   "default": "2",
   "type": " int ",
   "help": " Maximun amount to shift the images during alignment "
 },
 {
   "count": 13,
   "prog": "e2refine2d.py ",
   "option": " ['--maxshift'] ",
   "default": "-1",
   "type": " int ",
   "help": " Maximum particle translation in x and y "
 },
 {
   "count": 13,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--voltage'] ",
   "default": " None ",
   "type": " int ",
   "help": " (Expert Option) Voltage of the Microscope (kV) "
 },
 {
   "count": 13,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--cs'] ",
   "default": " None ",
   "type": " float ",
   "help": " (Expert Option) Spherical Aberration "
 },
 {
   "count": 13,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--lowpass'] ",
   "default": "60",
   "type": " float ",
   "help": " Initial low-pass filter for the reference map (Ang) "
 },
 {
   "count": 13,
   "prog": "e2simmx.py ",
   "option": " ['--cmp'] ",
   "default": " dot:normalize=1 ",
   "type": " str ",
   "help": " The name of a 'cmp' to be used in comparing the aligned images "
 },
 {
   "count": 13,
   "prog": "e2simmx2stage.py ",
   "option": " ['--cmp'] ",
   "default": " dot:normalize=1 ",
   "type": " str ",
   "help": " The name of a 'cmp' to be used in comparing the aligned images "
 },
 {
   "count": 13,
   "prog": "e2spa_align.py ",
   "option": " ['--maxshift'] ",
   "default": "-1",
   "type": " int ",
   "help": " maximum shift allowed "
 },
 {
   "count": 13,
   "prog": "e2spt_align.py ",
   "option": " ['--maxshift'] ",
   "default": "-1",
   "type": " float ",
   "help": " Maximum shift for the refine mode. default is 16 "
 },
 {
   "count": 13,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--maxshift'] ",
   "default": "-1",
   "type": " int ",
   "help": " maximum shift. default box size/6 "
 },
 {
   "count": 13,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--lowpass'] ",
   "default": " None ",
   "type": " str ",
   "help": " A lowpass filtering processor (as in e2proc3d.py) be applied to the tomogram "
 },
 {
   "count": 13,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--lowpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 13,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--lowpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 13,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--voltage'] ",
   "default": "200",
   "type": " int ",
   "help": " Default=200. Voltage of   the microscope with which the images where collected. Supply it to replace the value   in ctfparamsfile(s), or if ctfparamsfile(s) are lacking altogether. "
 },
 {
   "count": 13,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--cs'] ",
   "default": "2.1",
   "type": " float ",
   "help": " Default=2.1. Cs of the microscope   with which the images were collected. Supply it to replace the value in ctfparamsfile(s),    or if ctfparamsfile(s) are lacking altogether. "
 },
 {
   "count": 13,
   "prog": "e2spt_hac.py ",
   "option": " ['--lowpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 13,
   "prog": "e2spt_isr.py ",
   "option": " ['--lowpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A lowpass filtering processor (see e2help.py --verbose=10) applied to each volume prior to reprojection generation.. "
 },
 {
   "count": 13,
   "prog": "e2spt_preproc.py ",
   "option": " ['--lowpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 13,
   "prog": "e2spt_recompute.py ",
   "option": " ['--lowpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Lowpass filtering processor to apply to particles before averaging. Default=None. "
 },
 {
   "count": 13,
   "prog": "e2spt_refine.py ",
   "option": " ['--maxshift'] ",
   "default": "-1",
   "type": " float ",
   "help": " maximum shift in pixel. "
 },
 {
   "count": 13,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--maxshift'] ",
   "default": "-1",
   "type": " int ",
   "help": " maximum shift. default box size/6 "
 },
 {
   "count": 13,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--maxshift'] ",
   "default": "-1",
   "type": " float ",
   "help": " maximum shift in pixel. "
 },
 {
   "count": 13,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--lowpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A lowpass filtering processor (as in e2proc3d.py) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 13,
   "prog": "e2spt_simulation.py ",
   "option": " ['--voltage'] ",
   "default": "200",
   "type": " int ",
   "help": " Default=200 KV. Voltage of the microscope, used to simulate the ctf added to the subtomograms. "
 },
 {
   "count": 13,
   "prog": "e2spt_simulation.py ",
   "option": " ['--cs'] ",
   "default": "2.1",
   "type": " float ",
   "help": " Default is 2.1. Cs of the microscope, used to simulate the ctf added to the subtomograms. "
 },
 {
   "count": 13,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--lowpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Requires --track. Low pass filtering processor (see e2help.py processors at the command line), part of preprocessing to facilitate particle tracking. "
 },
 {
   "count": 13,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--maxshift'] ",
   "default": "-1",
   "type": " float ",
   "help": " max shift in pixel. default default box size/6 "
 },
 {
   "count": 13,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--maxshift'] ",
   "default": "8",
   "type": " int ",
   "help": " maximum shift allowed "
 },
 {
   "count": 13,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--maxshift'] ",
   "default": "8",
   "type": " int ",
   "help": " maximum shift allowed "
 },
 {
   "count": 13,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--voltage'] ",
   "default": "300",
   "type": " int ",
   "help": " Voltage of microscope in kV "
 },
 {
   "count": 13,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--cs'] ",
   "default": "2.7",
   "type": " float ",
   "help": " Cs of microscope "
 },
 {
   "count": 13,
   "prog": "e2spt_trajfromrefine.py ",
   "option": " ['--maxshift'] ",
   "default": "7",
   "type": " float ",
   "help": " ignore particles with drift/rotation (pixel/degree) larger than this. default 7 "
 },
 {
   "count": 13,
   "prog": "e2symsearch3d.py ",
   "option": " ['--cmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The name of a 'cmp' to be used in comparing the symmtrized object to unsymmetrized "
 },
 {
   "count": 13,
   "prog": "e2symsearch3d.py ",
   "option": " ['--lowpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " A lowpass filtering processor (from e2proc3d.py; see e2help.py processors) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 13,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--cmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The name of a 'cmp' to be used in comparing the aligned images "
 },
 {
   "count": 13,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--cs'] ",
   "default": "2.7",
   "type": " float ",
   "help": " Default=2.7. Cs of the microscope with which the images were collected. "
 },
 {
   "count": 13,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--voltage'] ",
   "default": "300",
   "type": " int ",
   "help": " Default=300. Voltage of the microscope with which the images where collected. "
 },
 {
   "count": 13,
   "prog": "e2tomogram.py ",
   "option": " ['--maxshift'] ",
   "default": "0.35",
   "type": " float ",
   "help": " Maximum shift between tilt(/image size). default is 0.35 "
 },
 {
   "count": 12,
   "prog": "e2RCTboxer.py ",
   "option": " ['--boxsize'] ",
   "default": "-1",
   "type": " int ",
   "help": " Box size in pixels "
 },
 {
   "count": 12,
   "prog": "e2a2d_align.py ",
   "option": " ['--saveali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Save a stack file (aliptcls_XX.hdf) containing the aligned particles. "
 },
 {
   "count": 12,
   "prog": "e2a2d_align.py ",
   "option": " ['--aligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The comparitor used for the --align aligner. Default is dot. "
 },
 {
   "count": 12,
   "prog": "e2a2d_average.py ",
   "option": " ['--saveali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Save a stack file (aliptcls_XX.hdf) containing the aligned particles. "
 },
 {
   "count": 12,
   "prog": "e2a2d_stat.py ",
   "option": " ['--gui'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set will open an interactive plot with the results "
 },
 {
   "count": 12,
   "prog": "e2align2d.py ",
   "option": " ['--aligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The comparitor used for the --align aligner. Default is dot. "
 },
 {
   "count": 12,
   "prog": "e2boxer.py ",
   "option": " ['--boxsize'] ",
   "default": "-1",
   "type": " int ",
   "help": " Box size in pixels "
 },
 {
   "count": 12,
   "prog": "e2boxer.py ",
   "option": " ['--gui'] ",
   "default": " False ",
   "type": " None ",
   "help": " Interactive GUI mode "
 },
 {
   "count": 12,
   "prog": "e2boxer_old.py ",
   "option": " ['--boxsize'] ",
   "default": "-1",
   "type": " int ",
   "help": " Box size in pixels "
 },
 {
   "count": 12,
   "prog": "e2boxer_old.py ",
   "option": " ['--gui'] ",
   "default": " True ",
   "type": " None ",
   "help": " Dummy option; used in older version of e2boxer "
 },
 {
   "count": 12,
   "prog": "e2classaverage.py ",
   "option": " ['--aligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The comparitor used for the --align aligner. Default is ccc. "
 },
 {
   "count": 12,
   "prog": "e2classaverage.py ",
   "option": " ['--saveali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Writes aligned particle images to aligned.hdf. Normally resultmx produces more useful information. This can be used for debugging. "
 },
 {
   "count": 12,
   "prog": "e2classesbyref.py ",
   "option": " ['--aligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " Similarity metric for the aligner "
 },
 {
   "count": 12,
   "prog": "e2classifytree.py ",
   "option": " ['--aligncmp'] ",
   "default": " dot ",
   "type": " str ",
   "help": " Name of the aligner along with its construction arguments "
 },
 {
   "count": 12,
   "prog": "e2classvsproj.py ",
   "option": " ['--aligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " Name of the aligner along with its construction arguments "
 },
 {
   "count": 12,
   "prog": "e2ctf.py ",
   "option": " ['--gui'] ",
   "default": " False ",
   "type": " None ",
   "help": " Start the GUI for interactive fitting "
 },
 {
   "count": 12,
   "prog": "e2ctffind3util.py ",
   "option": " ['--minres'] ",
   "default": "0",
   "type": " float ",
   "help": " The lowest resolution to be fitted (Angstroms) "
 },
 {
   "count": 12,
   "prog": "e2erasefiducials.py ",
   "option": " ['--boxsize'] ",
   "default": "128",
   "type": " int ",
   "help": " Box size to use when computing local noise. "
 },
 {
   "count": 12,
   "prog": "e2evalimage.py ",
   "option": " ['--gui'] ",
   "default": " True ",
   "type": " None ",
   "help": " This is a GUI-only program. This option is provided for self-consistency "
 },
 {
   "count": 12,
   "prog": "e2evalparticles.py ",
   "option": " ['--gui'] ",
   "default": " True ",
   "type": " None ",
   "help": " Start the GUI for interactive use (default=True) "
 },
 {
   "count": 12,
   "prog": "e2gmm_refine.py ",
   "option": " ['--niter'] ",
   "default": "10",
   "type": " int ",
   "help": " number of iterations "
 },
 {
   "count": 12,
   "prog": "e2helixboxer.py ",
   "option": " ['--gui'] ",
   "default": " False ",
   "type": " None ",
   "help": " Start the graphic user interface for boxing helices. "
 },
 {
   "count": 12,
   "prog": "e2help.py ",
   "option": " ['--gui'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use the GUI for display help "
 },
 {
   "count": 12,
   "prog": "e2import.py ",
   "option": " ['--boxsize'] ",
   "default": "256",
   "type": " int ",
   "help": " Specify the boxsize for each particle. "
 },
 {
   "count": 12,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--niter'] ",
   "default": "20",
   "type": " int ",
   "help": " Number of iterations "
 },
 {
   "count": 12,
   "prog": "e2maskbyclass.py ",
   "option": " ['--gui'] ",
   "default": " False ",
   "type": " None ",
   "help": " Permits interactive adjustment of mask parameters "
 },
 {
   "count": 12,
   "prog": "e2match.py ",
   "option": " ['--boxsize'] ",
   "default": "0",
   "type": " int ",
   "help": " If NOT specified, the reference's box size will match that of the data. If specified, both the reference and the data will be resized. "
 },
 {
   "count": 12,
   "prog": "e2match.py ",
   "option": " ['--threshold'] ",
   "default": "  ",
   "type": " str ",
   "help": " EMAN2 processor to be used   to threshold the img2process. See available thresholds by typing    e2help.py processors --verbose=10   at the command line. "
 },
 {
   "count": 12,
   "prog": "e2refine_easy.py ",
   "option": " ['--breaksym'] ",
   "default": " False ",
   "type": " None ",
   "help": " If selected, reconstruction will be asymmetric with sym= specifying a known pseudosymmetry, not an imposed symmetry. "
 },
 {
   "count": 12,
   "prog": "e2refinemulti.py ",
   "option": " ['--breaksym'] ",
   "default": " False ",
   "type": " None ",
   "help": " If selected, reconstruction will be asymmetric with sym= specifying a known pseudosymmetry, not an imposed symmetry. "
 },
 {
   "count": 12,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--breaksym'] ",
   "default": " False ",
   "type": " None ",
   "help": " breaksym "
 },
 {
   "count": 12,
   "prog": "e2simmx.py ",
   "option": " ['--aligncmp'] ",
   "default": " dot ",
   "type": " str ",
   "help": " Name of the aligner along with its construction arguments "
 },
 {
   "count": 12,
   "prog": "e2simmx.py ",
   "option": " ['--saveali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Save alignment values, output is 5, c x r images instead of 1. Images are (score,dx,dy,da,flip).  "
 },
 {
   "count": 12,
   "prog": "e2simmx2stage.py ",
   "option": " ['--aligncmp'] ",
   "default": " dot ",
   "type": " str ",
   "help": " Name of the aligner along with its construction arguments "
 },
 {
   "count": 12,
   "prog": "e2simmx2stage.py ",
   "option": " ['--saveali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Save alignment values, output is c x r x 4 instead of c x r x 1 "
 },
 {
   "count": 12,
   "prog": "e2spa_classify.py ",
   "option": " ['--minres'] ",
   "default": "300",
   "type": " float ",
   "help": " min resolution for cmp "
 },
 {
   "count": 12,
   "prog": "e2spa_make3d.py ",
   "option": " ['--minres'] ",
   "default": "50",
   "type": " float ",
   "help": "  "
 },
 {
   "count": 12,
   "prog": "e2spa_refine.py ",
   "option": " ['--niter'] ",
   "default": "10",
   "type": " int ",
   "help": " iter "
 },
 {
   "count": 12,
   "prog": "e2spa_refine_multi.py ",
   "option": " ['--minres'] ",
   "default": "100",
   "type": " float ",
   "help": " min resolution "
 },
 {
   "count": 12,
   "prog": "e2spa_refine_multi.py ",
   "option": " ['--niter'] ",
   "default": "10",
   "type": " int ",
   "help": " iter "
 },
 {
   "count": 12,
   "prog": "e2spt_align.py ",
   "option": " ['--minres'] ",
   "default": "0",
   "type": " float ",
   "help": " Minimum resolution (the larger number) to consider in alignment (in A, not 1/A) "
 },
 {
   "count": 12,
   "prog": "e2spt_align.py ",
   "option": " ['--breaksym'] ",
   "default": " False ",
   "type": " None ",
   "help": " symmetry breaking. "
 },
 {
   "count": 12,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--minres'] ",
   "default": "0",
   "type": " float ",
   "help": " Minimum resolution to consider in alignment (in A, not 1/A) "
 },
 {
   "count": 12,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--breaksym'] ",
   "default": " None ",
   "type": " str ",
   "help": " specify symmetry to break. only in localsearch mode "
 },
 {
   "count": 12,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--threshold'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Thresholding processor (e2help.py processors, applied through e2proc3d.py) applied to the tomogram before looking for particles. "
 },
 {
   "count": 12,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--boxsize'] ",
   "default": "0",
   "type": " int ",
   "help": " Size of the box to put the extracted particles in, and amount by which the subregions will overlap, when searching for particles in the tomogram. "
 },
 {
   "count": 12,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--aligncmp'] ",
   "default": " ccc.tomo.thresh ",
   "type": " str ",
   "help": " Default=ccc.tomo.thresh. The comparator used for the --align aligner. Do not specify unless you need to use anotherspecific aligner. "
 },
 {
   "count": 12,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--threshold'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A threshold applied to the subvolumes after normalization. For example, --threshold=threshold.belowtozero:minval=0 makes all negative pixels equal 0, so that they do not contribute to the correlation score. "
 },
 {
   "count": 12,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--saveali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, will save the aligned particle volumes in class_ptcl.hdf. Overwrites existing file. "
 },
 {
   "count": 12,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--breaksym'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Break symmetry. Do not apply symmetrization after averaging, even if searching the asymmetric unit provided through --sym only for alignment. Default=False "
 },
 {
   "count": 12,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--boxsize'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0. Used to extract particles without the GUI. Requires --coords. Box size in pixels "
 },
 {
   "count": 12,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--aligncmp'] ",
   "default": " ccc.tomo.thresh ",
   "type": " str ",
   "help": " Default=ccc.tomo.thresh. The comparator used for the --align aligner. Do not specify unless you need to use another specific aligner. "
 },
 {
   "count": 12,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--saveali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, this will save the aligned particle volumes in class_ptcl.hdf. Overwrites existing file. "
 },
 {
   "count": 12,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--threshold'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A threshold applied to the subvolumes after normalization. For example, --threshold=threshold.belowtozero:minval=0 makes all negative pixels equal 0, so that they do not contribute to the correlation score. "
 },
 {
   "count": 12,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--breaksym'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Break symmetry. Do not apply symmetrization after averaging, even if searching the asymmetric unit provided through --sym only for alignment. Default=False "
 },
 {
   "count": 12,
   "prog": "e2spt_classify.py ",
   "option": " ['--niter'] ",
   "default": "3",
   "type": " int ",
   "help": " iterations "
 },
 {
   "count": 12,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--saveali'] ",
   "default": " False ",
   "type": " None ",
   "help": " In addition to the unaligned sets/ for each class, generate aligned particle stacks per class "
 },
 {
   "count": 12,
   "prog": "e2spt_hac.py ",
   "option": " ['--aligncmp'] ",
   "default": " ccc.tomo.thresh ",
   "type": " str ",
   "help": " Default=ccc.tomo.thresh. The comparator used for the --align aligner. Do not specify unless you need to use anotherspecific aligner. "
 },
 {
   "count": 12,
   "prog": "e2spt_hac.py ",
   "option": " ['--threshold'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A threshold applied to the subvolumes after normalization. For example, --threshold=threshold.belowtozero:minval=0 makes all negative pixels equal 0, so that they do not contribute to the correlation score. "
 },
 {
   "count": 12,
   "prog": "e2spt_hac.py ",
   "option": " ['--saveali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, will save the aligned particle volumes in class_ptcl.hdf. Overwrites existing file. "
 },
 {
   "count": 12,
   "prog": "e2spt_hac.py ",
   "option": " ['--breaksym'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Break symmetry. Do not apply symmetrization after averaging, even if searching the asymmetric unit provided through --sym only for alignment. Default=False "
 },
 {
   "count": 12,
   "prog": "e2spt_isr.py ",
   "option": " ['--threshold'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A threshold  processor (see e2help.py --verbose=10) applied to each volume prior to reprojection generation. "
 },
 {
   "count": 12,
   "prog": "e2spt_isr.py ",
   "option": " ['--saveali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, will save the recentered subtiltseries after each iteration. "
 },
 {
   "count": 12,
   "prog": "e2spt_mapptclstotomo.py ",
   "option": " ['--gui'] ",
   "default": " False ",
   "type": " None ",
   "help": " open the resulting map and tomogram in a GUI display "
 },
 {
   "count": 12,
   "prog": "e2spt_preproc.py ",
   "option": " ['--threshold'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A threshold applied to the subvolumes after normalization. For example, --threshold=threshold.belowtozero:minval=0 makes all negative pixels equal 0, so that they do not contribute to the correlation score. "
 },
 {
   "count": 12,
   "prog": "e2spt_recompute.py ",
   "option": " ['--boxsize'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (option not used). Provide a value for the boxsize of the output average in pixels. If not provided, the boxsize of --stacks will be used. "
 },
 {
   "count": 12,
   "prog": "e2spt_recompute.py ",
   "option": " ['--threshold'] ",
   "default": "  ",
   "type": " str ",
   "help": " Threshold processor to apply to particles before writing them out to get rid of too high and/or too low pixel values. "
 },
 {
   "count": 12,
   "prog": "e2spt_refine.py ",
   "option": " ['--niter'] ",
   "default": "5",
   "type": " int ",
   "help": " Number of iterations "
 },
 {
   "count": 12,
   "prog": "e2spt_refine.py ",
   "option": " ['--minres'] ",
   "default": "200",
   "type": " float ",
   "help": " Minimum resolution (the larger number) to consider in alignment (in A, not 1/A, default=200) "
 },
 {
   "count": 12,
   "prog": "e2spt_refine.py ",
   "option": " ['--breaksym'] ",
   "default": " False ",
   "type": " None ",
   "help": " break symmetry "
 },
 {
   "count": 12,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--minres'] ",
   "default": "0",
   "type": " float ",
   "help": " Minimum resolution to consider in alignment (in A, not 1/A) "
 },
 {
   "count": 12,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--breaksym'] ",
   "default": " None ",
   "type": " str ",
   "help": " symmetry to break "
 },
 {
   "count": 12,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--niter'] ",
   "default": "5",
   "type": " int ",
   "help": " Number of iterations "
 },
 {
   "count": 12,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--minres'] ",
   "default": "0",
   "type": " float ",
   "help": " Minimum resolution (the larger number) to consider in alignment (in A, not 1/A) "
 },
 {
   "count": 12,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--niter'] ",
   "default": "5",
   "type": " int ",
   "help": " number of iterations "
 },
 {
   "count": 12,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--breaksym'] ",
   "default": " None ",
   "type": " str ",
   "help": " break specified symmetry "
 },
 {
   "count": 12,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--niter'] ",
   "default": "10",
   "type": " int ",
   "help": " number of iterations "
 },
 {
   "count": 12,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--saveali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, will save the aligned particle volumes in class_ptcl.hdf. Overwrites existing file. "
 },
 {
   "count": 12,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--threshold'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A threshold applied to the subvolumes after normalization. For example, --threshold=threshold.belowtozero:minval=0 makes all negative pixels equal 0, so that they do not contribute to the correlation score. "
 },
 {
   "count": 12,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--aligncmp'] ",
   "default": " ccc.tomo.thresh ",
   "type": " str ",
   "help": " The comparator used for the --align aligner. Default is the internal tomographic ccc.tomo.thresh. Do not specify unless you need to use another specific aligner. "
 },
 {
   "count": 12,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--breaksym'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Breaks symmetry (skip symmetrization after averaging). "
 },
 {
   "count": 12,
   "prog": "e2spt_sgd.py ",
   "option": " ['--niter'] ",
   "default": "5",
   "type": " int ",
   "help": " Number of iterations "
 },
 {
   "count": 12,
   "prog": "e2spt_stat.py ",
   "option": " ['--gui'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set will open an interactive plot with the results "
 },
 {
   "count": 12,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--boxsize'] ",
   "default": "128",
   "type": " int ",
   "help": " Size of the 2D \"tiles\" or images for each particle from each image in the tiltseries. "
 },
 {
   "count": 12,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--threshold'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None (no threshold). Requires --track. Thresholding processor (see e2help.py processors at the command line), part of preprocessing to facilitate particle tracking. "
 },
 {
   "count": 12,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--minres'] ",
   "default": "0",
   "type": " float ",
   "help": " Minimum resolution to consider in alignment (in A, not 1/A) "
 },
 {
   "count": 12,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--minres'] ",
   "default": "-1",
   "type": " float ",
   "help": " min resolution for fsc "
 },
 {
   "count": 12,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--minres'] ",
   "default": "-1",
   "type": " float ",
   "help": " min resolution for cmp "
 },
 {
   "count": 12,
   "prog": "e2symsearch3d.py ",
   "option": " ['--saveali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Save the stack of aligned/symmetrized particles. "
 },
 {
   "count": 12,
   "prog": "e2symsearch3d.py ",
   "option": " ['--threshold'] ",
   "default": "  ",
   "type": " str ",
   "help": " A threshold applied to the subvolumes after normalization. For example, --threshold=threshold.belowtozero:minval=0 makes all negative pixels equal 0, so that they do not contribute to the correlation score. "
 },
 {
   "count": 12,
   "prog": "e2tileimage.py ",
   "option": " ['--boxsize'] ",
   "default": "512",
   "type": " int ",
   "help": " Box size for each tile in pixels. Default is 512. "
 },
 {
   "count": 12,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--gui'] ",
   "default": " False ",
   "type": " None ",
   "help": " Start the GUI for viewing the tiltvalidate plots "
 },
 {
   "count": 12,
   "prog": "e2tomogram.py ",
   "option": " ['--niter'] ",
   "default": " 2,1,1,1 ",
   "type": " str ",
   "help": " Number of iterations for bin8, bin4, bin2 images. Default if 2,1,1,1 "
 },
 {
   "count": 12,
   "prog": "e2tomopreproc.py ",
   "option": " ['--threshold'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A threshold processor applied to each image. "
 },
 {
   "count": 12,
   "prog": "e2tomoseg_buildtrainset.py ",
   "option": " ['--boxsize'] ",
   "default": "-1",
   "type": " int ",
   "help": " Box size in pixels "
 },
 {
   "count": 12,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--niter'] ",
   "default": "20",
   "type": " int ",
   "help": " Training iterations "
 },
 {
   "count": 11,
   "prog": "e2classaverage.py ",
   "option": " ['--averager'] ",
   "default": " mean ",
   "type": " str ",
   "help": " The type of averager used to produce the class average. "
 },
 {
   "count": 11,
   "prog": "e2classesbyref.py ",
   "option": " ['--averager'] ",
   "default": " ctf.weight ",
   "type": " str ",
   "help": " Averager to use for class-averages "
 },
 {
   "count": 11,
   "prog": "e2erasefiducials.py ",
   "option": " ['--subset'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Apply algorithm to only a subset of images in each stack file. "
 },
 {
   "count": 11,
   "prog": "e2fsc_local.py ",
   "option": " ['--setsf'] ",
   "default": "  ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 11,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--setsf'] ",
   "default": " None ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 11,
   "prog": "e2make3d.py ",
   "option": " ['--setsf'] ",
   "default": " none ",
   "type": " str ",
   "help": " Force the structure factor to match a 'known' curve prior to postprocessing (<filename>, auto or none). default=none "
 },
 {
   "count": 11,
   "prog": "e2make3dpar.py ",
   "option": " ['--setsf'] ",
   "default": " none ",
   "type": " str ",
   "help": " Force the structure factor to match a 'known' curve prior to postprocessing (<filename>, auto or none). default=none "
 },
 {
   "count": 11,
   "prog": "e2match.py ",
   "option": " ['--highpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " A highpass filtering processor (as in e2proc3d.py) to be applied to the edited img2process. "
 },
 {
   "count": 11,
   "prog": "e2proc2d.py ",
   "option": " ['--averager'] ",
   "default": " mean ",
   "type": " str ",
   "help": " If --average is specified, this is the averager to use (e2help.py averager). Default=mean "
 },
 {
   "count": 11,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--setsf'] ",
   "default": " none ",
   "type": " str ",
   "help": " Force the structure factor to match a 'known' curve prior to postprocessing (<filename>, none). default=none "
 },
 {
   "count": 11,
   "prog": "e2spa_refine.py ",
   "option": " ['--setsf'] ",
   "default": " strucfac.txt ",
   "type": " str ",
   "help": " structure factor "
 },
 {
   "count": 11,
   "prog": "e2spa_refine_multi.py ",
   "option": " ['--setsf'] ",
   "default": " None ",
   "type": " str ",
   "help": " setsf "
 },
 {
   "count": 11,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--highpass'] ",
   "default": " None ",
   "type": " str ",
   "help": " A highpass filtering processor (as in e2proc3d.py) to be applied to the tomogram. "
 },
 {
   "count": 11,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--subset'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Refine only this substet of particles from the stack provided through --input "
 },
 {
   "count": 11,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--averager'] ",
   "default": " mean.tomo ",
   "type": " str ",
   "help": " Default=mean.tomo. The type of averager used to produce the class average. Default=mean.tomo. "
 },
 {
   "count": 11,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--highpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 11,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--subset'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Used to extract particles without the GUI. Requires --coords. Specify how many subvolumes from --coords you want to extract; e.g, if you specify 10, the first 10 particles will be extracted. 0 means \"box them all\" because it makes no sense to box none. "
 },
 {
   "count": 11,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--subset'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Refine only this substet of particles from the stack provided through --input "
 },
 {
   "count": 11,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--averager'] ",
   "default": " mean.tomo ",
   "type": " str ",
   "help": " Default=mean.tomo. The type of averager used to produce the class average. Default=mean.tomo. "
 },
 {
   "count": 11,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--highpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 11,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--subset'] ",
   "default": "0",
   "type": " int ",
   "help": " Requires --subtiltsdir. Specify how many subtiltseries (or particles) to ctf correct. If you specify 10, the first 10 subtiltseires in --subtiltsdir will be corrected. 0 means \"process all\" because it makes no sense to process none "
 },
 {
   "count": 11,
   "prog": "e2spt_hac.py ",
   "option": " ['--subset'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Refine only this substet of particles from the stack provided through --input "
 },
 {
   "count": 11,
   "prog": "e2spt_hac.py ",
   "option": " ['--averager'] ",
   "default": " mean.tomo ",
   "type": " str ",
   "help": " Default=mean.tomo. The type of averager used to produce the class average. Default=mean.tomo. "
 },
 {
   "count": 11,
   "prog": "e2spt_hac.py ",
   "option": " ['--highpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 11,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--averager'] ",
   "default": " mean.tomo ",
   "type": " str ",
   "help": " Default=mean.tomo. The type of averager used to produce the class average. "
 },
 {
   "count": 11,
   "prog": "e2spt_isr.py ",
   "option": " ['--highpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A highpass filtering processor (see e2help.py --verbose=10) applied to each volume prior to reprojection generation. "
 },
 {
   "count": 11,
   "prog": "e2spt_preproc.py ",
   "option": " ['--highpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 11,
   "prog": "e2spt_preproc.py ",
   "option": " ['--subset'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Refine only this substet of particles from the stack provided through --input "
 },
 {
   "count": 11,
   "prog": "e2spt_recompute.py ",
   "option": " ['--averager'] ",
   "default": " mean.tomo ",
   "type": " str ",
   "help": " The type of averager used to produce the class average. Default=mean.tomo "
 },
 {
   "count": 11,
   "prog": "e2spt_refine.py ",
   "option": " ['--setsf'] ",
   "default": " None ",
   "type": " str ",
   "help": " structure factor "
 },
 {
   "count": 11,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--setsf'] ",
   "default": " None ",
   "type": " str ",
   "help": " structure factor for sharpening "
 },
 {
   "count": 11,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--setsf'] ",
   "default": " None ",
   "type": " str ",
   "help": " structure factor "
 },
 {
   "count": 11,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--setsf'] ",
   "default": " None ",
   "type": " str ",
   "help": " set structure factor "
 },
 {
   "count": 11,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--subset'] ",
   "default": "0",
   "type": " int ",
   "help": "  WARNING: NOT IMPLEMENTED HERE YET. Default=0 (not used). Refine only this substet of particles from the stack provided through --input "
 },
 {
   "count": 11,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--highpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None.A highpass filtering processor (as in e2proc3d.py) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 11,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--averager'] ",
   "default": " mean.tomo ",
   "type": " str ",
   "help": " The type of averager used to produce the class average. Default=mean "
 },
 {
   "count": 11,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--subset'] ",
   "default": "0",
   "type": " int ",
   "help": " Specify how many sub-tiltseries (or particles) from the coordinates file you want to extract; e.g, if you specify 10, the first 10 particles will be boxed. 0 means \"box them all\" because it makes no sense to box none "
 },
 {
   "count": 11,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--highpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None (no highpass). High pass filtering processor (see e2help.py processors at the command line), part of preprocessing to facilitate particle tracking. "
 },
 {
   "count": 11,
   "prog": "e2spt_wedgefill.py ",
   "option": " ['--subset'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Plot only this substet of transforms from the hdf stack or json file provided. "
 },
 {
   "count": 11,
   "prog": "e2symsearch3d.py ",
   "option": " ['--averager'] ",
   "default": " mean.tomo ",
   "type": " str ",
   "help": " Default=mean.tomo. The type of averager used to produce the class average. Default=mean.tomo. "
 },
 {
   "count": 11,
   "prog": "e2symsearch3d.py ",
   "option": " ['--highpass'] ",
   "default": "  ",
   "type": " str ",
   "help": " A highpass filtering processor (from e2proc3d.py, see e2help.py processors) to be applied to each volume prior to COARSE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 11,
   "prog": "e2symsearch3d.py ",
   "option": " ['--subset'] ",
   "default": "0",
   "type": " int ",
   "help": " Number of particles in a subset of particles from the --input stack of particles to run the alignments on. "
 },
 {
   "count": 11,
   "prog": "e2tomogram.py ",
   "option": " ['--highpass'] ",
   "default": "3",
   "type": " int ",
   "help": " initial highpass filter for alignment in pixels. default if 3 "
 },
 {
   "count": 11,
   "prog": "e2tomoresolution.py ",
   "option": " ['--averager'] ",
   "default": " mean ",
   "type": " str ",
   "help": " The averager used to generate the averages. Default is 'mean'. "
 },
 {
   "count": 9,
   "prog": "e2a2d_align.py ",
   "option": " ['--ralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " This is the second stage aligner used to refine the first alignment. This is usually the 'refine' aligner. "
 },
 {
   "count": 9,
   "prog": "e2align2d.py ",
   "option": " ['--ralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " This is the second stage aligner used to refine the first alignment. This is usually the 'refine' aligner. "
 },
 {
   "count": 9,
   "prog": "e2align3d.py ",
   "option": " ['--ralign'] ",
   "default": " refine_3d:spin_coeff=1 ",
   "type": " str ",
   "help": " aligner to use for refine alignment, default='refine_3d:spin_coeff=1' "
 },
 {
   "count": 9,
   "prog": "e2bdb.py ",
   "option": " ['--force'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will force an action that would normally fail due to failed checks. "
 },
 {
   "count": 9,
   "prog": "e2bdb.py ",
   "option": " ['--exclude'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of a database containing a list of exclusion keys "
 },
 {
   "count": 9,
   "prog": "e2boxer.py ",
   "option": " ['--ac'] ",
   "default": "10",
   "type": " float ",
   "help": " Amplitude contrast (percentage, default=10) "
 },
 {
   "count": 9,
   "prog": "e2boxer_old.py ",
   "option": " ['--force'] ",
   "default": " False ",
   "type": " None ",
   "help": " Force overwrite "
 },
 {
   "count": 9,
   "prog": "e2boxer_old.py ",
   "option": " ['--ac'] ",
   "default": "10",
   "type": " float ",
   "help": " Amplitude contrast (percentage, default=10) "
 },
 {
   "count": 9,
   "prog": "e2classaverage.py ",
   "option": " ['--ralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " This is the second stage aligner used to refine the first alignment. This is usually the 'refine' aligner. "
 },
 {
   "count": 9,
   "prog": "e2classaverage.py ",
   "option": " ['--force'] ",
   "default": " False ",
   "type": " None ",
   "help": " Force overwrite the output file if it exists. "
 },
 {
   "count": 9,
   "prog": "e2classesbyref.py ",
   "option": " ['--ralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " specify a refine aligner to use after the coarse alignment "
 },
 {
   "count": 9,
   "prog": "e2classify.py ",
   "option": " ['--force'] ",
   "default": " False ",
   "type": " None ",
   "help": " Force overwrite the output file if it exists "
 },
 {
   "count": 9,
   "prog": "e2classifykmeans.py ",
   "option": " ['--exclude'] ",
   "default": " None ",
   "type": " str ",
   "help": " The named file should contain a set of integers, each representing an image from the input file to exclude. "
 },
 {
   "count": 9,
   "prog": "e2classifytree.py ",
   "option": " ['--ralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name and parameters of the second stage aligner which refines the results of the first alignment "
 },
 {
   "count": 9,
   "prog": "e2classvsproj.py ",
   "option": " ['--ralign'] ",
   "default": " refine ",
   "type": " str ",
   "help": " The name and parameters of the second stage aligner which refines the results of the first alignment "
 },
 {
   "count": 9,
   "prog": "e2ctf.py ",
   "option": " ['--ac'] ",
   "default": "10",
   "type": " float ",
   "help": " Amplitude contrast (percentage, default=10) "
 },
 {
   "count": 9,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--ac'] ",
   "default": "10",
   "type": " float ",
   "help": " Set amplitude contrast (percentage, default=10). "
 },
 {
   "count": 9,
   "prog": "e2ctf_auto.py ",
   "option": " ['--ac'] ",
   "default": "10",
   "type": " float ",
   "help": " Amplitude contrast (percentage, default 10) "
 },
 {
   "count": 9,
   "prog": "e2ctffind3util.py ",
   "option": " ['--ac'] ",
   "default": "0",
   "type": " float ",
   "help": " The amplitude contrast of the micrographs "
 },
 {
   "count": 9,
   "prog": "e2ctfsim.py ",
   "option": " ['--ac'] ",
   "default": "10",
   "type": " float ",
   "help": " Amplitude contrast (percentage, default=10) "
 },
 {
   "count": 9,
   "prog": "e2evalimage.py ",
   "option": " ['--ac'] ",
   "default": "10",
   "type": " float ",
   "help": " Amplitude contrast (percentage, default=10) "
 },
 {
   "count": 9,
   "prog": "e2make3d.py ",
   "option": " ['--force'] ",
   "default": " False ",
   "type": " None ",
   "help": " deprecated "
 },
 {
   "count": 9,
   "prog": "e2proc2d.py ",
   "option": " ['--exclude'] ",
   "default": " None ",
   "type": " str ",
   "help": " Excludes image numbers, either a list of comma separated values, or a filename with one number per line, first image == 0 "
 },
 {
   "count": 9,
   "prog": "e2proclst.py ",
   "option": " ['--exclude'] ",
   "default": " None ",
   "type": " str ",
   "help": " only works if --create is supplied. comma-separated list of indexes from the input file(s) to EXCLUDE from the created .lst file. "
 },
 {
   "count": 9,
   "prog": "e2proclst.py ",
   "option": " ['--force'] ",
   "default": " False ",
   "type": " None ",
   "help": " only works with --create. if the stack specified in --create already exists, it will be removed and rewritten. "
 },
 {
   "count": 9,
   "prog": "e2project3d.py ",
   "option": " ['--force'] ",
   "default": " False ",
   "type": " None ",
   "help": " Force overwrite the output file if it exists "
 },
 {
   "count": 9,
   "prog": "e2rawdata.py ",
   "option": " ['--ac'] ",
   "default": "10",
   "type": " float ",
   "help": " Amplitude contrast (percentage, default=10) "
 },
 {
   "count": 9,
   "prog": "e2refine2d.py ",
   "option": " ['--exclude'] ",
   "default": " None ",
   "type": " str ",
   "help": " The named file should contain a set of integers, each representing an image from the input file to exclude. "
 },
 {
   "count": 9,
   "prog": "e2simmx.py ",
   "option": " ['--ralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name and parameters of the second stage aligner which refines the results of the first alignment "
 },
 {
   "count": 9,
   "prog": "e2simmx.py ",
   "option": " ['--force'] ",
   "default": " False ",
   "type": " None ",
   "help": " Force overwrite the output file if it exists "
 },
 {
   "count": 9,
   "prog": "e2simmx.py ",
   "option": " ['--exclude'] ",
   "default": " None ",
   "type": " str ",
   "help": " The named file should contain a set of integers, each representing an image from the input file to exclude. Matrix elements will still be created, but will be zeroed. "
 },
 {
   "count": 9,
   "prog": "e2simmx2stage.py ",
   "option": " ['--ralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name and parameters of the second stage aligner which refines the results of the first alignment "
 },
 {
   "count": 9,
   "prog": "e2simmx2stage.py ",
   "option": " ['--exclude'] ",
   "default": " None ",
   "type": " str ",
   "help": " The named file should contain a set of integers, each representing an image from the input file to exclude. Matrix elements will still be created, but will be zeroed. "
 },
 {
   "count": 9,
   "prog": "e2simmx2stage.py ",
   "option": " ['--force'] ",
   "default": " True ",
   "type": " None ",
   "help": " Deprecated. Value ignored "
 },
 {
   "count": 9,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--exclude'] ",
   "default": "  ",
   "type": " str ",
   "help": " Comma-separated list of image indexes in the --tiltseries to exclude from CTF fitting. For example, --exclude 0,3,4,6,7. "
 },
 {
   "count": 9,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--exclude'] ",
   "default": "  ",
   "type": " str ",
   "help": " Comma separated list of numbers corresponding to images to exclude. --unstack or --restack must be supplied. You can also exclude by ranges. For example: Recall that the FIRST image INDEX is 0. --exclude=1,5-7,10,12,15-19 will exclude images 1,5,6,7,10,12,15,16,17,18,19 "
 },
 {
   "count": 8,
   "prog": "e2a2d_align.py ",
   "option": " ['--raligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The comparitor used by the second stage aligner. "
 },
 {
   "count": 8,
   "prog": "e2align2d.py ",
   "option": " ['--raligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The comparitor used by the second stage aligner. "
 },
 {
   "count": 8,
   "prog": "e2basis.py ",
   "option": " ['--maskfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " File containing a mask to apply to the particles before normalization "
 },
 {
   "count": 8,
   "prog": "e2classaverage.py ",
   "option": " ['--raligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The comparitor used by the second stage aligner. "
 },
 {
   "count": 8,
   "prog": "e2classesbyref.py ",
   "option": " ['--raligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " Similarity metric for the refine aligner "
 },
 {
   "count": 8,
   "prog": "e2classifytree.py ",
   "option": " ['--raligncmp'] ",
   "default": " dot ",
   "type": " str ",
   "help": " The name and parameters of the comparitor used by the second stage aligner. Default is dot. "
 },
 {
   "count": 8,
   "prog": "e2classvsproj.py ",
   "option": " ['--raligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The name and parameters of the comparitor used by the second stage aligner. Default is ccc. "
 },
 {
   "count": 8,
   "prog": "e2make3d.py ",
   "option": " ['--pad'] ",
   "default": " None ",
   "type": " str ",
   "help": " Will zero-pad images to the specifed size (x,y) or (x,x) prior to reconstruction. If not specified no padding occurs. "
 },
 {
   "count": 8,
   "prog": "e2make3dpar.py ",
   "option": " ['--pad'] ",
   "default": " None ",
   "type": " str ",
   "help": " Will zero-pad images to the specifed size (x,y) or (x,x) prior to reconstruction. If not specified or 0 no padding occurs. If a negative value is specified automatic padding is performed.  "
 },
 {
   "count": 8,
   "prog": "e2msa.py ",
   "option": " ['--maskfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " File containing a mask defining the pixels to include in the Eigenimages "
 },
 {
   "count": 8,
   "prog": "e2refine_easy.py ",
   "option": " ['--pad'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=auto. To reduce Fourier artifacts, the model is typically padded by ~25 percent - only applies to Fourier reconstruction "
 },
 {
   "count": 8,
   "prog": "e2refinemulti.py ",
   "option": " ['--pad'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=auto. To reduce Fourier artifacts, the model is typically padded by ~25 percent - only applies to Fourier reconstruction "
 },
 {
   "count": 8,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--pad'] ",
   "default": "1",
   "type": " int ",
   "help": " Padding factor "
 },
 {
   "count": 8,
   "prog": "e2refinevariance.py ",
   "option": " ['--pad'] ",
   "default": "0",
   "type": " int ",
   "help": " To reduce Fourier artifacts, the model is typically padded by ~25 percent - only applies to Fourier reconstruction "
 },
 {
   "count": 8,
   "prog": "e2simmx.py ",
   "option": " ['--raligncmp'] ",
   "default": " dot ",
   "type": " str ",
   "help": " The name and parameters of the comparitor used by the second stage aligner. Default is dot. "
 },
 {
   "count": 8,
   "prog": "e2simmx2stage.py ",
   "option": " ['--raligncmp'] ",
   "default": " dot ",
   "type": " str ",
   "help": " The name and parameters of the comparitor used by the second stage aligner. Default is dot. "
 },
 {
   "count": 8,
   "prog": "e2spa_make3d.py ",
   "option": " ['--pad'] ",
   "default": "-1",
   "type": " int ",
   "help": " Will zero-pad images to the specifed size.  "
 },
 {
   "count": 8,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--pad'] ",
   "default": " False ",
   "type": " None ",
   "help": " Provide this if the particles in the --particlestack used to create a template, or the template supplied through --template are in a tight box. The size "
 },
 {
   "count": 8,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--maskfile'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Mask file (3D IMAGE) applied to particles before alignment. Must be in HDF format. Default is None. "
 },
 {
   "count": 8,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--maskfile'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Mask file (3D IMAGE) applied to the reference image before alignment. It will also be applied to the average in each iteration since the average serves as the reference for the next iteration. Must be in HDF format. Default is None. "
 },
 {
   "count": 8,
   "prog": "e2spt_hac.py ",
   "option": " ['--maskfile'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Mask file (3D IMAGE) applied to particles before alignment. Must be in HDF format. Default is None. "
 },
 {
   "count": 8,
   "prog": "e2spt_preproc.py ",
   "option": " ['--maskfile'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Mask file (3D IMAGE) applied to particles before alignment. Must be in HDF format. Default is None. "
 },
 {
   "count": 8,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--maskfile'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Mask file (3D IMAGE) applied to particles before alignment. Must be in HDF format. Default is None. "
 },
 {
   "count": 8,
   "prog": "e2symsearch3d.py ",
   "option": " ['--maskfile'] ",
   "default": "  ",
   "type": " str ",
   "help": " Mask file (3D IMAGE) applied to particles before alignment. Must be in HDF format. Default is None. "
 },
 {
   "count": 7,
   "prog": "e2a2d_stat.py ",
   "option": " ['--mode'] ",
   "default": " score ",
   "type": " str ",
   "help": " Which variable to histogram, score, coverage, alpha, tx, ty. default=score "
 },
 {
   "count": 7,
   "prog": "e2bdb.py ",
   "option": " ['--check'] ",
   "default": " False ",
   "type": " None ",
   "help": " Check for self-consistency and errors in the structure of specified databases "
 },
 {
   "count": 7,
   "prog": "e2classaverage.py ",
   "option": " ['--check'] ",
   "default": " False ",
   "type": " None ",
   "help": " Performs a command line argument check only. "
 },
 {
   "count": 7,
   "prog": "e2classify.py ",
   "option": " ['--check'] ",
   "default": " False ",
   "type": " None ",
   "help": " Performs a command line argument check only. "
 },
 {
   "count": 7,
   "prog": "e2classifykmeans.py ",
   "option": " ['--ncls'] ",
   "default": "-1",
   "type": " int ",
   "help": " Number of classes to generate "
 },
 {
   "count": 7,
   "prog": "e2classifyligand.py ",
   "option": " ['--process'] ",
   "default": " None ",
   "type": " str ",
   "help": " A processor to apply to the particle data before classifying "
 },
 {
   "count": 7,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--tophat'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, the local filter is a tophat filter, otherwise a local Wiener filter is applied "
 },
 {
   "count": 7,
   "prog": "e2make3d.py ",
   "option": " ['--check'] ",
   "default": " False ",
   "type": " None ",
   "help": " Performs a command line argument check only. "
 },
 {
   "count": 7,
   "prog": "e2make3d.py ",
   "option": " ['--postprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " postprocessor to be applied to the 3D volume once the reconstruction is completed. There can be more than one postprocessor, and they are applied in the order in which they are specified. See e2help.py processors for a complete list of available processors. "
 },
 {
   "count": 7,
   "prog": "e2make3dpar.py ",
   "option": " ['--mode'] ",
   "default": " gauss_var ",
   "type": " str ",
   "help": " Fourier reconstruction 'mode' to use. The default should not normally be changed. default='gauss_var' "
 },
 {
   "count": 7,
   "prog": "e2make3dpar.py ",
   "option": " ['--postprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " postprocessor to be applied to the 3D volume once the reconstruction is completed. There can be more than one postprocessor, and they are applied in the order in which they are specified. See e2help.py processors for a complete list of available processors. "
 },
 {
   "count": 7,
   "prog": "e2msa.py ",
   "option": " ['--mode'] ",
   "default": " pca ",
   "type": " str ",
   "help": " Mode should be one of: pca, sparsepca, fastica, factan, lda, nmf "
 },
 {
   "count": 7,
   "prog": "e2parallel.py ",
   "option": " ['--mode'] ",
   "default": " thread ",
   "type": " str ",
   "help": " choose from thread and mpi "
 },
 {
   "count": 7,
   "prog": "e2proc2d.py ",
   "option": " ['--process'] ",
   "default": " None ",
   "type": " str ",
   "help": " apply a processor named 'processorname' with all its parameters/values. "
 },
 {
   "count": 7,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--process'] ",
   "default": " None ",
   "type": " str ",
   "help": " apply a processor named 'processorname' with all its parameters/values. "
 },
 {
   "count": 7,
   "prog": "e2proc2dpar.py ",
   "option": " ['--process'] ",
   "default": " None ",
   "type": " str ",
   "help": " apply a processor named 'processorname' with all its parameters/values. "
 },
 {
   "count": 7,
   "prog": "e2proc3d_huge.py ",
   "option": " ['--process'] ",
   "default": " None ",
   "type": " str ",
   "help": " apply a processor named 'processorname' with all its parameters/values. WARNING: this works by operating on fragments of the overall image at a time, and some processors won't work properly this way. "
 },
 {
   "count": 7,
   "prog": "e2project3d.py ",
   "option": " ['--check'] ",
   "default": " False ",
   "type": " None ",
   "help": " Checks to see if the command line arguments will work. "
 },
 {
   "count": 7,
   "prog": "e2project3d.py ",
   "option": " ['--postprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " postprocessor to be applied to each projection. There can be more than one postprocessor, and they are applied in the order in which they are specified. See e2help.py processors for a complete list of available processors. "
 },
 {
   "count": 7,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--simcmp'] ",
   "default": " optsub:maxres=12 ",
   "type": " str ",
   "help": " Default=auto. The name of a 'cmp' to be used in comparing the aligned images "
 },
 {
   "count": 7,
   "prog": "e2rct.py ",
   "option": " ['--process'] ",
   "default": " None ",
   "type": " str ",
   "help": " process RCT recons. Usually used to filter RCTS "
 },
 {
   "count": 7,
   "prog": "e2refine2d.py ",
   "option": " ['--ncls'] ",
   "default": "32",
   "type": " int ",
   "help": " Number of classes to generate "
 },
 {
   "count": 7,
   "prog": "e2refine2d.py ",
   "option": " ['--check'] ",
   "default": " False ",
   "type": " None ",
   "help": " Checks the contents of the current directory to verify that e2refine2d.py command will work - checks for the existence of the necessary starting files and checks their dimensions. Performs no work  "
 },
 {
   "count": 7,
   "prog": "e2refine2d.py ",
   "option": " ['--simcmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The name of a 'cmp' to be used in comparing the aligned images (default=ccc) "
 },
 {
   "count": 7,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--ncls'] ",
   "default": "32",
   "type": " int ",
   "help": " Number of classes to generate "
 },
 {
   "count": 7,
   "prog": "e2refine_easy.py ",
   "option": " ['--tophat'] ",
   "default": " None ",
   "type": " str ",
   "help": " 'local', 'localwiener' or 'global'. Instead of imposing a final overall Wiener filter, use a tophat filter (global similar to Relion). local is a local tophat filter, localwiener is a localized Wiener filter "
 },
 {
   "count": 7,
   "prog": "e2refine_easy.py ",
   "option": " ['--mass'] ",
   "default": "0",
   "type": " float ",
   "help": " The ~mass of the particle in kilodaltons, used to run normalize.bymass. Due to resolution effects, not always the true mass. "
 },
 {
   "count": 7,
   "prog": "e2refine_easy.py ",
   "option": " ['--simcmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The name of a 'cmp' to be used in comparing the aligned images "
 },
 {
   "count": 7,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--mass'] ",
   "default": "0",
   "type": " float ",
   "help": " The rough mass of the particle in kilodaltons, used to run normalize.bymass. Due to resolution effects, not always the true mass. "
 },
 {
   "count": 7,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--tophat'] ",
   "default": " None ",
   "type": " str ",
   "help": " 'global', 'local' or 'localwiener'. Overall Wiener filter disabled, and replaced by a tophat filter either across the map at 0.143 as Relion appears to do, or locally based on e2fsc_local_real.py results (either local tophat or local wiener) "
 },
 {
   "count": 7,
   "prog": "e2refinemulti.py ",
   "option": " ['--mass'] ",
   "default": "0",
   "type": " str ",
   "help": " The ~mass of the particles in kilodaltons. May specify one number or one number for each map. Due to resolution effects, not always the true mass. "
 },
 {
   "count": 7,
   "prog": "e2refinemulti.py ",
   "option": " ['--simcmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The name of a 'cmp' to be used in comparing the aligned images "
 },
 {
   "count": 7,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--simcmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The name of a 'cmp' to be used in comparing the aligned images. eg- frc:minres=80:maxres=20. Default=ccc "
 },
 {
   "count": 7,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--mode'] ",
   "default": "1",
   "type": " str ",
   "help": " Mode to run FreAlign in: Mode 1 - Refinement and Reconstruction, Mode 3 - Simple Search and Refinement "
 },
 {
   "count": 7,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--mass'] ",
   "default": "0",
   "type": " float ",
   "help": " The ~mass of the particle in kilodaltons "
 },
 {
   "count": 7,
   "prog": "e2refinevariance.py ",
   "option": " ['--mass'] ",
   "default": " None ",
   "type": " float ",
   "help": " The mass of the particle in kilodaltons, used to run normalize.bymass. If unspecified nothing happens. Requires the --apix argument. "
 },
 {
   "count": 7,
   "prog": "e2segment3d.py ",
   "option": " ['--process'] ",
   "default": " segment.kmeans:ampweight=1:nseg=50:thr=0.8 ",
   "type": " str ",
   "help": " The name and parameters of a processor to perform the segmentation. 'e2help.py processor segment -v 1' for a full list. Default=segment.kmeans:ampweight=1:nseg=50:thr=0.8  "
 },
 {
   "count": 7,
   "prog": "e2simmx.py ",
   "option": " ['--check'] ",
   "default": " False ",
   "type": " None ",
   "help": " Performs a command line argument check only. "
 },
 {
   "count": 7,
   "prog": "e2spa_make3d.py ",
   "option": " ['--mode'] ",
   "default": " trilinear ",
   "type": " str ",
   "help": " Fourier reconstruction 'mode' to use. The default should not normally be changed. "
 },
 {
   "count": 7,
   "prog": "e2spa_refine.py ",
   "option": " ['--tophat'] ",
   "default": " local ",
   "type": " str ",
   "help": " Default=local, can also specify localwiener "
 },
 {
   "count": 7,
   "prog": "e2spa_refine_multi.py ",
   "option": " ['--ncls'] ",
   "default": "2",
   "type": " int ",
   "help": " number of classes "
 },
 {
   "count": 7,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--postprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " A processor to be applied to the FINAL volume after averaging the raw volumes in their FINAL orientations, after all iterations are done. "
 },
 {
   "count": 7,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--postprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A processor to be applied to the FINAL volume after averaging the raw volumes in their FINAL orientations, after all iterations are done. "
 },
 {
   "count": 7,
   "prog": "e2spt_classify.py ",
   "option": " ['--mass'] ",
   "default": "500",
   "type": " float ",
   "help": " mass "
 },
 {
   "count": 7,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--ncls'] ",
   "default": "3",
   "type": " int ",
   "help": " Number of classes to generate "
 },
 {
   "count": 7,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--tltfile'] ",
   "default": "  ",
   "type": " str ",
   "help": " File containing a list of    tilt angles corresponding to the tilt angles of images 0 to n of an aligned   tilt series "
 },
 {
   "count": 7,
   "prog": "e2spt_hac.py ",
   "option": " ['--postprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " default=None. A processor to be applied to the FINAL volume after averaging the raw volumes in their FINAL orientations, after all iterations are done. "
 },
 {
   "count": 7,
   "prog": "e2spt_isr.py ",
   "option": " ['--tltfile'] ",
   "default": "  ",
   "type": " str ",
   "help": " IMOD-like .tlt file with tilt angles for the aligned tiltseries (or set of subtiltseries). "
 },
 {
   "count": 7,
   "prog": "e2spt_refine.py ",
   "option": " ['--mass'] ",
   "default": "-1",
   "type": " float ",
   "help": " mass. default -1 will skip by mass normalization "
 },
 {
   "count": 7,
   "prog": "e2spt_refine.py ",
   "option": " ['--tophat'] ",
   "default": " None ",
   "type": " str ",
   "help": " 'local', 'localwiener' or 'global'. Instead of imposing a uniform Wiener filter, use a tophat filter (global similar to Relion). local is a local tophat filter, localwiener is a localized Wiener filter "
 },
 {
   "count": 7,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--tophat'] ",
   "default": " None ",
   "type": " str ",
   "help": " tophat filter options "
 },
 {
   "count": 7,
   "prog": "e2spt_refinemsa.py ",
   "option": " ['--ncls'] ",
   "default": "3",
   "type": " int ",
   "help": " Default=3. Number of classes to sort the particle stack into. In theory, a minimum of 2 conformational classes and 1 'garbage' class should be used. "
 },
 {
   "count": 7,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--ncls'] ",
   "default": "2",
   "type": " int ",
   "help": " Number of classes to generate. Specify this or multiple --ref options. Default 2 "
 },
 {
   "count": 7,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--postprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None.A processor to be applied to the FINAL volume after averaging the raw volumes in their FINAL orientations, after all iterations are done. "
 },
 {
   "count": 7,
   "prog": "e2spt_stat.py ",
   "option": " ['--mode'] ",
   "default": " score ",
   "type": " str ",
   "help": " Which variable to histogram, score, coverage, alt, az, phi, dx, dy, dz, score_remask. default=score. "
 },
 {
   "count": 7,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--tophat'] ",
   "default": " localwiener ",
   "type": " str ",
   "help": " 'local', 'localwiener' or 'global'. Instead of imposing a uniform Wiener filter, use a tophat filter ('global' similar to Relion). local is a local tophat filter, localwiener is a local Wiener filter "
 },
 {
   "count": 7,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--tltfile'] ",
   "default": "  ",
   "type": " str ",
   "help": " \".tlt file IF unstacking an aligned tilt series with --unstack=<stackfile> or restacking a tiltseries with --restack=<stackfile> "
 },
 {
   "count": 7,
   "prog": "e2stacksort.py ",
   "option": " ['--simcmp'] ",
   "default": " optvariance:keepzero=1:matchfilt=1 ",
   "type": " str ",
   "help": " The name of a 'cmp' to be used in comparing the after optional alignment (default=optvariance:keepzero=1:matchfilt=1) "
 },
 {
   "count": 7,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--simcmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The name of a 'cmp' to be used in comparing the aligned images (default=ccc) "
 },
 {
   "count": 7,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--tltfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " File containing a list of tilt angles corresponding to the tilt angles of images 0 to n. "
 },
 {
   "count": 7,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--tltfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " default=None. .tlt file from IMOD. "
 },
 {
   "count": 7,
   "prog": "e2tomopreproc.py ",
   "option": " ['--tltfile'] ",
   "default": "  ",
   "type": " str ",
   "help": " \".tlt file containing the tilt angles for --tiltseries "
 },
 {
   "count": 7,
   "prog": "e2tvrecon.py ",
   "option": " ['--tltfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " An IMOD-like .tlt file containing    alignment angles. If specified slices will be inserted using these angles in the    IMOD convention "
 },
 {
   "count": 6,
   "prog": "e2basis.py ",
   "option": " ['--nbasis'] ",
   "default": "-1",
   "type": " int ",
   "help": " Will use the first n basis images from the input, excluding the mean if present "
 },
 {
   "count": 6,
   "prog": "e2bdb.py ",
   "option": " ['--step'] ",
   "default": " 0,1 ",
   "type": " str ",
   "help": " Specify <init>,<step>[,<max>]. Processes only a subset of the input data. For example, 0,2 would process only the even numbered particles "
 },
 {
   "count": 6,
   "prog": "e2classaverage.py ",
   "option": " ['--prefilt'] ",
   "default": " False ",
   "type": " None ",
   "help": " Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison "
 },
 {
   "count": 6,
   "prog": "e2classaverage.py ",
   "option": " ['--keepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " Causes the keep argument to be interpreted in standard deviations. "
 },
 {
   "count": 6,
   "prog": "e2classaverage.py ",
   "option": " ['--center'] ",
   "default": " xform.center ",
   "type": " str ",
   "help": " If the default centering algorithm (xform.center) doesn't work well, you can specify one of the others here (e2help.py processor center), or the word 'nocenter' for no centering "
 },
 {
   "count": 6,
   "prog": "e2ctf.py ",
   "option": " ['--phaseplate'] ",
   "default": " False ",
   "type": " None ",
   "help": " Include phase/amplitude contrast in CTF estimation. For use with hole-less phase plates. "
 },
 {
   "count": 6,
   "prog": "e2ctf_auto.py ",
   "option": " ['--phaseplate'] ",
   "default": " False ",
   "type": " None ",
   "help": " Include phase/amplitude contrast in CTF estimation. For use with hole-less phase plates. "
 },
 {
   "count": 6,
   "prog": "e2ddd_movie.py ",
   "option": " ['--step'] ",
   "default": " 0,1 ",
   "type": " str ",
   "help": " Specify <first>,<step>,[last]. Processes only a subset of the input data. ie- 0,2 would process all even particles. Same step used for all input files. [last] is exclusive. Default= 0,1 "
 },
 {
   "count": 6,
   "prog": "e2ddd_movie.py ",
   "option": " ['--phaseplate'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use this flag when aligning phase plate frames. "
 },
 {
   "count": 6,
   "prog": "e2ddd_particles.py ",
   "option": " ['--step'] ",
   "default": " 0,-1,1 ",
   "type": " str ",
   "help": " Specify <first>,<last>,<step>. Processes only a subset of the input frames. For example, 0,6,2 would process only frames 0,2,4. 1,5,1 would process frames 1,2,3 and 4, skipping frame 0. First is inclusive, last exclusive "
 },
 {
   "count": 6,
   "prog": "e2evalimage.py ",
   "option": " ['--phaseplate'] ",
   "default": " False ",
   "type": " None ",
   "help": " Include phase/amplitude contrast in CTF estimation. For use with hole-less phase plates. "
 },
 {
   "count": 6,
   "prog": "e2fsc_local.py ",
   "option": " ['--step'] ",
   "default": "4",
   "type": " int ",
   "help": "  "
 },
 {
   "count": 6,
   "prog": "e2make3d.py ",
   "option": " ['--keepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, keep will be interpreted as a standard deviation coefficient instead of as a percentage. "
 },
 {
   "count": 6,
   "prog": "e2make3dpar.py ",
   "option": " ['--keepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, keep will be interpreted as a standard deviation coefficient instead of as a percentage. "
 },
 {
   "count": 6,
   "prog": "e2match.py ",
   "option": " ['--mirror'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will generate a mirrored copy of the edited img2process. "
 },
 {
   "count": 6,
   "prog": "e2msa.py ",
   "option": " ['--nbasis'] ",
   "default": "20",
   "type": " int ",
   "help": " Number of basis images to generate. "
 },
 {
   "count": 6,
   "prog": "e2msa.py ",
   "option": " ['--step'] ",
   "default": " 0,1 ",
   "type": " str ",
   "help": " Specify <init>,<step>[,last]. Processes only a subset of the input data. For example, 0,2 would process only the even numbered particles "
 },
 {
   "count": 6,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--center'] ",
   "default": " False ",
   "type": " None ",
   "help": " Move the atomic center to the center of the box "
 },
 {
   "count": 6,
   "prog": "e2proc2d.py ",
   "option": " ['--step'] ",
   "default": " 0,1 ",
   "type": " str ",
   "help": " Specify <init>,<step>. Processes only a subset of the input data. For example, 0,2 would process only the even numbered particles "
 },
 {
   "count": 6,
   "prog": "e2procpdb.py ",
   "option": " ['--center'] ",
   "default": " 0.0,0.0,0.0 ",
   "type": " str ",
   "help": " center of the rotation, (0,0,0) "
 },
 {
   "count": 6,
   "prog": "e2procpdb.py ",
   "option": " ['--mirror'] ",
   "default": "0",
   "type": " bool ",
   "help": " mirror "
 },
 {
   "count": 6,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--simalign'] ",
   "default": " rotate_translate_flip ",
   "type": " str ",
   "help": " Default=auto. The name of an 'aligner' to use prior to comparing the images "
 },
 {
   "count": 6,
   "prog": "e2rawdata.py ",
   "option": " ['--phaseplate'] ",
   "default": " False ",
   "type": " None ",
   "help": " Include phase/amplitude contrast in CTF estimation. For use with hole-less phase plates. "
 },
 {
   "count": 6,
   "prog": "e2refine2d.py ",
   "option": " ['--center'] ",
   "default": " xform.center ",
   "type": " str ",
   "help": " If the default centering algorithm (xform.center) doesn't work well, you can specify one of the others here (e2help.py processor center) "
 },
 {
   "count": 6,
   "prog": "e2refine2d.py ",
   "option": " ['--simalign'] ",
   "default": " rotate_translate_tree ",
   "type": " str ",
   "help": " The name of an 'aligner' to use prior to comparing the images (default=rotate_translate_tree) "
 },
 {
   "count": 6,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--center'] ",
   "default": " xform.center ",
   "type": " str ",
   "help": " If the default centering algorithm (xform.center) doesn't work well, you can specify one of the others here (e2help.py processor center) "
 },
 {
   "count": 6,
   "prog": "e2refine_easy.py ",
   "option": " ['--mirror'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default for non bispectrum refinement is to handle mirrored projections by permitting flips in 2-D alignment. This will force the normal refinement to make explict mirrored projections "
 },
 {
   "count": 6,
   "prog": "e2refine_easy.py ",
   "option": " ['--simalign'] ",
   "default": " rotate_translate_flip:usebispec=1 ",
   "type": " str ",
   "help": " Default=auto. The name of an 'aligner' to use prior to comparing the images "
 },
 {
   "count": 6,
   "prog": "e2refine_easy.py ",
   "option": " ['--prefilt'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=auto. Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison. Applies both to classification and class-averaging. "
 },
 {
   "count": 6,
   "prog": "e2refine_split.py ",
   "option": " ['--nbasis'] ",
   "default": "-1",
   "type": " int ",
   "help": " Number of basis vectors to compute. Must be at least usebasis+1. Default 6 or usebasis+1. "
 },
 {
   "count": 6,
   "prog": "e2refinemulti.py ",
   "option": " ['--simalign'] ",
   "default": " rotate_translate_flip ",
   "type": " str ",
   "help": " Default=auto. The name of an 'aligner' to use prior to comparing the images "
 },
 {
   "count": 6,
   "prog": "e2refinemulti.py ",
   "option": " ['--prefilt'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=auto. Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison. Applies both to classification and class-averaging. "
 },
 {
   "count": 6,
   "prog": "e2refinevariance.py ",
   "option": " ['--prefilt'] ",
   "default": " False ",
   "type": " None ",
   "help": " Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison "
 },
 {
   "count": 6,
   "prog": "e2simmx.py ",
   "option": " ['--prefilt'] ",
   "default": " False ",
   "type": " None ",
   "help": " Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison "
 },
 {
   "count": 6,
   "prog": "e2simmx2stage.py ",
   "option": " ['--prefilt'] ",
   "default": " False ",
   "type": " None ",
   "help": " Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison "
 },
 {
   "count": 6,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--plots'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Turn this option on to generatea plot of the ccc scores during each iteration. Running on a cluster or via ssh remotely might not support plotting. "
 },
 {
   "count": 6,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--radius'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0 (which means it's not used by default). Hydrodynamic radius of the particle in Angstroms. This will be used to automatically calculate the angular steps to use in search of the best alignment. Make sure the apix is correct on the particles' headers, sine the radius will be converted from Angstroms to pixels. Then, the fine angular step is equal to 360/(2*pi*radius), and the coarse angular step 4 times that. "
 },
 {
   "count": 6,
   "prog": "e2spt_boxer_convnet.py ",
   "option": " ['--label'] ",
   "default": " tomobox ",
   "type": " str ",
   "help": " Load previous contour segmentation. "
 },
 {
   "count": 6,
   "prog": "e2spt_buildsets.py ",
   "option": " ['--label'] ",
   "default": "  ",
   "type": " str ",
   "help": " label of particles for sets "
 },
 {
   "count": 6,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--plots'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Turn this option on to generate a plot of the ccc scores during each iteration in.png format (otherwise only .txt files will be saved). This option will also produce a plot of mean ccc score across iterations. Running on a cluster or via ssh remotely might not support plotting. "
 },
 {
   "count": 6,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--keepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Causes the keep argument to be interpreted in standard deviations. "
 },
 {
   "count": 6,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--radius'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0 (which means it's not used by default). Hydrodynamic radius of the particle in Angstroms. This will be used to automatically calculate the angular steps to use in search of the best alignment. Make sure the apix is correct on the particles' headers, sine the radius will be converted from Angstroms to pixels. Then, the fine angular step is equal to 360/(2*pi*radius), and the coarse angular step 4 times that. "
 },
 {
   "count": 6,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--nbasis'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of basis vectors for the MSA phase, default=4 "
 },
 {
   "count": 6,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--radius'] ",
   "default": "0",
   "type": " int ",
   "help": " Radius of the particle in pixels. "
 },
 {
   "count": 6,
   "prog": "e2spt_extract.py ",
   "option": " ['--label'] ",
   "default": " None ",
   "type": " str ",
   "help": " Only extract particle with this name. Leave blank to extract all particles. "
 },
 {
   "count": 6,
   "prog": "e2spt_hac.py ",
   "option": " ['--plots'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Turn this option on to generatea plot of the ccc scores during each iteration. Running on a cluster or via ssh remotely might not support plotting. "
 },
 {
   "count": 6,
   "prog": "e2spt_hac.py ",
   "option": " ['--radius'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0 (which means it's not used by default). Hydrodynamic radius of the particle in Angstroms. This will be used to automatically calculate the angular steps to use in search of the best alignment. Make sure the apix is correct on the particles' headers, sine the radius will be converted from Angstroms to pixels. Then, the fine angular step is equal to 360/(2*pi*radius), and the coarse angular step 4 times that. "
 },
 {
   "count": 6,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--nbasis'] ",
   "default": "3",
   "type": " int ",
   "help": " Number of PCA basis vectors. Default is 3. "
 },
 {
   "count": 6,
   "prog": "e2spt_refinemsa.py ",
   "option": " ['--nbasis'] ",
   "default": "3",
   "type": " int ",
   "help": " Basis vectors to use "
 },
 {
   "count": 6,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--radius'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0 (not used). Will make --align and --falign None. Hydrodynamic radius of the particle in Angstroms. This will be used to automatically calculate the angular steps to use in search of the best alignment. Make sure the apix is correct on the particles' headers, sine the radius will be converted from Angstroms to pixels. Then, the fine angular step is equal to 360/(2*pi*radius), and the coarse angular step 4 times that "
 },
 {
   "count": 6,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--keepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " Causes the keep argument to be interpreted in standard deviations. "
 },
 {
   "count": 6,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--plots'] ",
   "default": " False ",
   "type": " None ",
   "help": " Turn this option on to generate a plot of the ccc scores both during model generation with e2spt_classaverage.py or e2spt_hac.py and for refinement results of e2spt_refinemulti.py. Running on a cluster or via ssh remotely might not support plotting. "
 },
 {
   "count": 6,
   "prog": "e2spt_remake3dptcl.py ",
   "option": " ['--label'] ",
   "default": "  ",
   "type": " str ",
   "help": " new particle label "
 },
 {
   "count": 6,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--mirror'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, it will generate a mirrored version of --ref and recompute FSCs against it. This will be IN ADDITION to FSC computation of --input against the original, unmirrored --ref. "
 },
 {
   "count": 6,
   "prog": "e2spt_structfac.py ",
   "option": " ['--label'] ",
   "default": " None ",
   "type": " str ",
   "help": " particles label "
 },
 {
   "count": 6,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--radius'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Radius of the particle in pixels. 2*radius will be added to the icethickness if --radius AND --icethicknessauto are supplied. "
 },
 {
   "count": 6,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--label'] ",
   "default": " None ",
   "type": " str ",
   "help": " Assign unique label to particles resembling specified reference. This allows specific particles to be extracted in the next step and aids project organization with easily interpreted filenames. If --label is not specified, this set of particles will be labeled according to the file name of the reference without file extension. "
 },
 {
   "count": 6,
   "prog": "e2stacksort.py ",
   "option": " ['--simalign'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of an 'aligner' to use prior to comparing the images (default=no alignment) "
 },
 {
   "count": 6,
   "prog": "e2stacksort.py ",
   "option": " ['--center'] ",
   "default": " False ",
   "type": " None ",
   "help": " After alignment, particles are centered via center of mass before comparison "
 },
 {
   "count": 6,
   "prog": "e2symbest.py ",
   "option": " ['--mirror'] ",
   "default": " None ",
   "type": " str ",
   "help": " search for particles with mirror symmetry and write them out to outputfile. "
 },
 {
   "count": 6,
   "prog": "e2symsearch3d.py ",
   "option": " ['--keepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Causes theoptions.keep argument to be interpreted in standard deviations. "
 },
 {
   "count": 6,
   "prog": "e2symsearch3d.py ",
   "option": " ['--mirror'] ",
   "default": "  ",
   "type": " str ",
   "help": " Axis across of which to generate a mirrored copy of --ref. All particles will be compared to it in addition to the unmirrored image in --ref if --keepsig is provided or if --keep < 1.0. "
 },
 {
   "count": 6,
   "prog": "e2symsearch3d.py ",
   "option": " ['--plots'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Turn this option on to generate a plot of the ccc scores if --average is supplied. Running on a cluster or via ssh remotely might not support plotting. "
 },
 {
   "count": 6,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--simalign'] ",
   "default": " rotate_translate ",
   "type": " str ",
   "help": " The name of an 'aligner' to use prior to comparing the images (default=rotate_translate) "
 },
 {
   "count": 6,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--phaseplate'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Supply this if the data were collected with hole-free phase plate. "
 },
 {
   "count": 6,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--plots'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Turn this option on to generate plots of the background-subtracted 1D power spectrum overlaid with the best CTF fit. Running on a cluster or via ssh remotely might not support plotting. "
 },
 {
   "count": 5,
   "prog": "e2align3d.py ",
   "option": " ['--search'] ",
   "default": "10",
   "type": " int ",
   "help": " maximum extent of the translational search, default=10 "
 },
 {
   "count": 5,
   "prog": "e2classaverage.py ",
   "option": " ['--classmx'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name of the classification matrix specifying how particles in 'input' should be grouped. If omitted, all particles will be averaged. "
 },
 {
   "count": 5,
   "prog": "e2classaverage.py ",
   "option": " ['--nofilecheck'] ",
   "default": " False ",
   "type": " None ",
   "help": " Turns file checking off in the check functionality - used by e2refine.py. "
 },
 {
   "count": 5,
   "prog": "e2classesbyref.py ",
   "option": " ['--classmx'] ",
   "default": " None ",
   "type": " str ",
   "help": " Store results in a classmx_xx.hdf style file "
 },
 {
   "count": 5,
   "prog": "e2classify.py ",
   "option": " ['--nofilecheck'] ",
   "default": " False ",
   "type": " None ",
   "help": " Turns file checking off in the check functionality - used by e2refine.py. "
 },
 {
   "count": 5,
   "prog": "e2cmmtomrc.py ",
   "option": " ['--res'] ",
   "default": "2.8",
   "type": " float ",
   "help": " Resolution in A, equivalent to Gaussian lowpass with 1/e width at 1/res "
 },
 {
   "count": 5,
   "prog": "e2ctf.py ",
   "option": " ['--defocusmin'] ",
   "default": "0.6",
   "type": " float ",
   "help": " Minimum autofit defocus "
 },
 {
   "count": 5,
   "prog": "e2ctf.py ",
   "option": " ['--defocusmax'] ",
   "default": "4",
   "type": " float ",
   "help": " Maximum autofit defocus "
 },
 {
   "count": 5,
   "prog": "e2ctf_auto.py ",
   "option": " ['--defocusmin'] ",
   "default": "0.6",
   "type": " float ",
   "help": " Minimum defocus in autofitting "
 },
 {
   "count": 5,
   "prog": "e2ctf_auto.py ",
   "option": " ['--defocusmax'] ",
   "default": "4",
   "type": " float ",
   "help": " Maximum defocus in autofitting "
 },
 {
   "count": 5,
   "prog": "e2ctffind3util.py ",
   "option": " ['--defocusmin'] ",
   "default": "0",
   "type": " float ",
   "help": " The starting defocus value for grid search (microns) "
 },
 {
   "count": 5,
   "prog": "e2ctffind3util.py ",
   "option": " ['--defocusmax'] ",
   "default": "0",
   "type": " float ",
   "help": " The end defocus value for grid search (microns) "
 },
 {
   "count": 5,
   "prog": "e2ddd_external.py ",
   "option": " ['--tomo'] ",
   "default": " False ",
   "type": " None ",
   "help": " If checked, aligned frames will be placed in a tiltseries located in the 'tiltseries' directory. Otherwise, aligned sums will populate the 'micrographs_mrc' directory. "
 },
 {
   "count": 5,
   "prog": "e2ddd_movie.py ",
   "option": " ['--tomo'] ",
   "default": " False ",
   "type": " None ",
   "help": " Process input movies as tilts from a tomogram. "
 },
 {
   "count": 5,
   "prog": "e2display.py ",
   "option": " ['--classmx'] ",
   "default": " None ",
   "type": " str ",
   "help": " <classmx>,<#> Show particles in one class from a classification matrix. Pass raw particle file as first argument to command. "
 },
 {
   "count": 5,
   "prog": "e2gmm_refine.py ",
   "option": " ['--model'] ",
   "default": "  ",
   "type": " str ",
   "help": " load from an existing model file "
 },
 {
   "count": 5,
   "prog": "e2gmm_refine.py ",
   "option": " ['--learnrate'] ",
   "default": "0.0001",
   "type": " float ",
   "help": " learning rate for model training only. Default is 1e-4.  "
 },
 {
   "count": 5,
   "prog": "e2initialmodel.py ",
   "option": " ['--orientgen'] ",
   "default": " eman:delta=9.0:inc_mirror=0:perturb=1 ",
   "type": " str ",
   "help": " The type of orientation generator. Default is eman:delta=9.0:inc_mirror=0:perturb=1. See e2help.py orientgens "
 },
 {
   "count": 5,
   "prog": "e2initialmodel_hisym.py ",
   "option": " ['--orientgen'] ",
   "default": " eman:delta=3.0:inc_mirror=0:perturb=0 ",
   "type": " str ",
   "help": " The type of orientation generator. Default is eman:delta=3.0:inc_mirror=0. See e2help.py orientgens "
 },
 {
   "count": 5,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--learnrate'] ",
   "default": "0.3",
   "type": " float ",
   "help": " Learning rate. i.e. how much the initial model changes toward the gradient direction in each iteration. Range from 0.0~1.0. Default is 0.3 "
 },
 {
   "count": 5,
   "prog": "e2make3d.py ",
   "option": " ['--nofilecheck'] ",
   "default": " False ",
   "type": " None ",
   "help": " Turns file checking off in the check functionality - used by e2refine.py. "
 },
 {
   "count": 5,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--res'] ",
   "default": "2.8",
   "type": " float ",
   "help": " Resolution in A, equivalent to Gaussian lowpass with 1/e width at 1/res "
 },
 {
   "count": 5,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--model'] ",
   "default": " None ",
   "type": " int ",
   "help": " Extract only a single numbered model from a multi-model PDB "
 },
 {
   "count": 5,
   "prog": "e2proc2d.py ",
   "option": " ['--mult'] ",
   "default": " None ",
   "type": " float ",
   "help": " Multiply image by a constant. mult=-1 to invert contrast. "
 },
 {
   "count": 5,
   "prog": "e2proc2d.py ",
   "option": " ['--outmode'] ",
   "default": " float ",
   "type": " str ",
   "help": " All EMAN2 programs write images with 4-byte floating point values when possible by default. This allows specifying an alternate format when supported (float, int8, int16, int32, uint8, uint16, uint32). Values are rescaled to fill MIN-MAX range. "
 },
 {
   "count": 5,
   "prog": "e2proc2d.py ",
   "option": " ['--scale'] ",
   "default": " None ",
   "type": " float ",
   "help": " Scale by specified scaling factor. Clip must also be specified to change the dimensions of the output map. "
 },
 {
   "count": 5,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--mult'] ",
   "default": " None ",
   "type": " float ",
   "help": " Multiply image by a constant. mult=-1 to invert contrast. "
 },
 {
   "count": 5,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--scale'] ",
   "default": " None ",
   "type": " float ",
   "help": " Scale by specified scaling factor. Clip must also be specified to change the dimensions of the output map. "
 },
 {
   "count": 5,
   "prog": "e2proc2dpar.py ",
   "option": " ['--outmode'] ",
   "default": " float ",
   "type": " str ",
   "help": " All EMAN2 programs write images with 4-byte floating point values when possible by default. This allows specifying an alternate format when supported (float, int8, int16, int32, uint8, uint16, uint32). Values are rescaled to fill MIN-MAX range. "
 },
 {
   "count": 5,
   "prog": "e2proc2dpar.py ",
   "option": " ['--mult'] ",
   "default": " None ",
   "type": " float ",
   "help": " Multiply image by a constant. mult=-1 to invert contrast. "
 },
 {
   "count": 5,
   "prog": "e2proc2dpar.py ",
   "option": " ['--scale'] ",
   "default": " None ",
   "type": " float ",
   "help": " Scale by specified scaling factor. Clip must also be specified to change the dimensions of the output map. "
 },
 {
   "count": 5,
   "prog": "e2proc3d_huge.py ",
   "option": " ['--mult'] ",
   "default": " None ",
   "type": " float ",
   "help": " Scales the densities by a fixed number in the output "
 },
 {
   "count": 5,
   "prog": "e2procpdb.py ",
   "option": " ['--scale'] ",
   "default": "1",
   "type": " float ",
   "help": " scale "
 },
 {
   "count": 5,
   "prog": "e2project3d.py ",
   "option": " ['--orientgen'] ",
   "default": " None ",
   "type": " None ",
   "help": " The orientation generator to use. See e2help.py orientgen. Example: --orientgen=eman:delta=3.0:inc_mirror=0:perturb=1 "
 },
 {
   "count": 5,
   "prog": "e2project3d.py ",
   "option": " ['--nofilecheck'] ",
   "default": " False ",
   "type": " None ",
   "help": " Turns file checking off in the check functionality - used by e2refine.py. "
 },
 {
   "count": 5,
   "prog": "e2ptcltrace.py ",
   "option": " ['--refine'] ",
   "default": " None ",
   "type": " None ",
   "help": " Specify a refinement directory as an alternative to providing classmx files. Even and odd subsets will be interleaved based on input set. "
 },
 {
   "count": 5,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--model'] ",
   "default": " None ",
   "type": " str ",
   "help": " The map to use as a starting point for refinement "
 },
 {
   "count": 5,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--simaligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " Default=auto. Name of the aligner along with its construction arguments "
 },
 {
   "count": 5,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--simralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The name and parameters of the second stage aligner which refines the results of the first alignment "
 },
 {
   "count": 5,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--simraligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " Default=auto. The name and parameters of the comparitor used by the second stage aligner. "
 },
 {
   "count": 5,
   "prog": "e2rawdata.py ",
   "option": " ['--defocusmin'] ",
   "default": "0.6",
   "type": " float ",
   "help": " Minimum autofit defocus "
 },
 {
   "count": 5,
   "prog": "e2rawdata.py ",
   "option": " ['--defocusmax'] ",
   "default": "4",
   "type": " float ",
   "help": " Maximum autofit defocus "
 },
 {
   "count": 5,
   "prog": "e2rct.py ",
   "option": " ['--verbose'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--simaligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " Name of the aligner along with its construction arguments (default=ccc) "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--simralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name and parameters of the second stage aligner which refines the results of the first alignment "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--simraligncmp'] ",
   "default": " dot ",
   "type": " str ",
   "help": " The name and parameters of the comparitor used by the second stage aligner. (default=dot). "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--classkeep'] ",
   "default": "0.85",
   "type": " float ",
   "help": " The fraction of particles to keep in each class, based on the similarity score generated by the --cmp argument (default=0.85). "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--classkeepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " Change the keep ('--keep') criterion from fraction-based to sigma-based. "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--classiter'] ",
   "default": "5",
   "type": " int ",
   "help": " Number of iterations to use when making class-averages (default=5) "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--classalign'] ",
   "default": " rotate_translate_tree ",
   "type": " str ",
   "help": " If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average. "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--classaligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " This is the name and parameters of the comparitor used by the fist stage aligner  Default is dot. "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--classralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " The second stage aligner which refines the results of the first alignment in class averaging. Default is None. "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--classraligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The comparitor used by the second stage aligner in class averageing. Default is dot:normalize=1. "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--classaverager'] ",
   "default": " ctf.weight.autofilt ",
   "type": " str ",
   "help": " The averager used to generate the class averages. Default is 'mean'. "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--classcmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The name and parameters of the comparitor used to generate similarity scores, when class averaging. Default is ccc' "
 },
 {
   "count": 5,
   "prog": "e2refine2d.py ",
   "option": " ['--classnormproc'] ",
   "default": " normalize.edgemean ",
   "type": " str ",
   "help": " Normalization applied during class averaging "
 },
 {
   "count": 5,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--classkeep'] ",
   "default": "0.8",
   "type": " float ",
   "help": " The fraction of particles to keep in each class, based on the similarity score generated by the --cmp argument (default=0.8). "
 },
 {
   "count": 5,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--classkeepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " Change the keep ('--keep') criterion from fraction-based to sigma-based. "
 },
 {
   "count": 5,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--classiter'] ",
   "default": "4",
   "type": " int ",
   "help": " Number of iterations to use when making class-averages (default=4) "
 },
 {
   "count": 5,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--classalign'] ",
   "default": " rotate_translate_tree:flip=1 ",
   "type": " str ",
   "help": " If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average. "
 },
 {
   "count": 5,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--classaligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " This is the name and parameters of the comparitor used by the fist stage aligner  Default is dot. "
 },
 {
   "count": 5,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--classralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " The second stage aligner which refines the results of the first alignment in class averaging. Default is None. "
 },
 {
   "count": 5,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--classraligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The comparitor used by the second stage aligner in class averageing. Default is dot:normalize=1. "
 },
 {
   "count": 5,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--classaverager'] ",
   "default": " ctf.weight.autofilt ",
   "type": " str ",
   "help": " The averager used to generate the class averages. Default is 'mean'. "
 },
 {
   "count": 5,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--classcmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " The name and parameters of the comparitor used to generate similarity scores, when class averaging. Default is ccc' "
 },
 {
   "count": 5,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--classnormproc'] ",
   "default": " normalize.edgemean ",
   "type": " str ",
   "help": " Normalization applied during class averaging "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--model'] ",
   "default": " None ",
   "type": " str ",
   "help": " The map to use as a starting point for refinement "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--classkeep'] ",
   "default": "0.9",
   "type": " float ",
   "help": " The fraction of particles to keep in each class, based on the similarity score. (default=0.9 -> 90%%) "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--orientgen'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. Orientation generator for projections, eg - eman:delta=5.0:inc_mirror=0:perturb=1 "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--simaligncmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. Name of the aligner along with its construction arguments "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--simralign'] ",
   "default": " auto ",
   "type": " str ",
   "help": " Default=auto. The name and parameters of the second stage aligner which refines the results of the first alignment "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--simraligncmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The name and parameters of the comparitor used by the second stage aligner. "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--classkeepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " Change the keep ('--keep') criterion from fraction-based to sigma-based. "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--classiter'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=auto. The number of iterations to perform. "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--classalign'] ",
   "default": " rotate_translate_flip:usebispec=1 ",
   "type": " str ",
   "help": " Default=auto. If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average. "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--classaligncmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. This is the name and parameters of the comparitor used by the fist stage aligner. "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--classralign'] ",
   "default": " auto ",
   "type": " str ",
   "help": " Default=auto. The second stage aligner which refines the results of the first alignment in class averaging. "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--classraligncmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The comparitor used by the second stage aligner in class averageing. "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--classaverager'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The averager used to generate the class averages. Default is auto. "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--classcmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The name and parameters of the comparitor used to generate similarity scores, when class averaging. "
 },
 {
   "count": 5,
   "prog": "e2refine_easy.py ",
   "option": " ['--classnormproc'] ",
   "default": " normalize.edgemean ",
   "type": " str ",
   "help": " Default=auto. Normalization applied during class averaging "
 },
 {
   "count": 5,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--tomo'] ",
   "default": " False ",
   "type": " None ",
   "help": " Modifies settings to be more appropriate for typical subtomogram averaging "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--model'] ",
   "default": " None ",
   "type": " str ",
   "help": " The map to use as a starting point for refinement "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--classkeep'] ",
   "default": "0.9",
   "type": " float ",
   "help": " The fraction of particles to keep in each class, based on the similarity score. (default=0.9 -> 90%%) "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--orientgen'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. Orientation generator for projections, eg - eman:delta=5.0:inc_mirror=0:perturb=1 "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--simaligncmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. Name of the aligner along with its construction arguments "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--simralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The name and parameters of the second stage aligner which refines the results of the first alignment "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--simraligncmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The name and parameters of the comparitor used by the second stage aligner. "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--classkeepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " Change the keep ('--keep') criterion from fraction-based to sigma-based. "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--classiter'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=auto. The number of iterations to perform. "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--classalign'] ",
   "default": " rotate_translate_flip ",
   "type": " str ",
   "help": " Default=auto. If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average. "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--classaligncmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. This is the name and parameters of the comparitor used by the fist stage aligner. "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--classralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The second stage aligner which refines the results of the first alignment in class averaging. "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--classraligncmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The comparitor used by the second stage aligner in class averageing. "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--classaverager'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The averager used to generate the class averages. Default is 'mean'. "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--classcmp'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. The name and parameters of the comparitor used to generate similarity scores, when class averaging. "
 },
 {
   "count": 5,
   "prog": "e2refinemulti.py ",
   "option": " ['--classnormproc'] ",
   "default": " normalize.edgemean ",
   "type": " str ",
   "help": " Default=auto. Normalization applied during class averaging "
 },
 {
   "count": 5,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--verbose'] ",
   "default": "1",
   "type": " int ",
   "help": " Level of verbose; how much information do you want the program to output?(0-9) "
 },
 {
   "count": 5,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--defocus'] ",
   "default": "10000",
   "type": " float ",
   "help": " (Expert Option) Defocus in A "
 },
 {
   "count": 5,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--verbose'] ",
   "default": "1",
   "type": " int ",
   "help": " Set the level of verbosity for the code "
 },
 {
   "count": 5,
   "prog": "e2refinevariance.py ",
   "option": " ['--classkeep'] ",
   "default": " None ",
   "type": " float ",
   "help": " The fraction of particles to keep in each class, based on the similarity score generated by the --cmp argument. "
 },
 {
   "count": 5,
   "prog": "e2refinevariance.py ",
   "option": " ['--classkeepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " Change the keep ('--keep') criterion from fraction-based to sigma-based. "
 },
 {
   "count": 5,
   "prog": "e2refinevariance.py ",
   "option": " ['--classiter'] ",
   "default": "1",
   "type": " int ",
   "help": " The number of iterations to perform. Default is 1. "
 },
 {
   "count": 5,
   "prog": "e2refinevariance.py ",
   "option": " ['--classalign'] ",
   "default": " rotate_translate_flip ",
   "type": " str ",
   "help": " If doing more than one iteration, this is the name and parameters of the 'aligner' used to align particles to the previous class average. "
 },
 {
   "count": 5,
   "prog": "e2refinevariance.py ",
   "option": " ['--classaligncmp'] ",
   "default": " phase ",
   "type": " str ",
   "help": " This is the name and parameters of the comparitor used by the fist stage aligner  Default is dot. "
 },
 {
   "count": 5,
   "prog": "e2refinevariance.py ",
   "option": " ['--classralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " The second stage aligner which refines the results of the first alignment in class averaging. Default is None. "
 },
 {
   "count": 5,
   "prog": "e2refinevariance.py ",
   "option": " ['--classraligncmp'] ",
   "default": " dot:normalize=1 ",
   "type": " str ",
   "help": " The comparitor used by the second stage aligner in class averageing. Default is dot:normalize=1. "
 },
 {
   "count": 5,
   "prog": "e2refinevariance.py ",
   "option": " ['--classaverager'] ",
   "default": " mean ",
   "type": " str ",
   "help": " The averager used to generate the class averages. Default is 'mean'. "
 },
 {
   "count": 5,
   "prog": "e2refinevariance.py ",
   "option": " ['--classcmp'] ",
   "default": " dot:normalize=1 ",
   "type": " str ",
   "help": " The name and parameters of the comparitor used to generate similarity scores, when class averaging. Default is 'dot:normalize=1' "
 },
 {
   "count": 5,
   "prog": "e2refinevariance.py ",
   "option": " ['--classnormproc'] ",
   "default": " normalize.edgemean ",
   "type": " str ",
   "help": " Normalization applied during class averaging "
 },
 {
   "count": 5,
   "prog": "e2simmx.py ",
   "option": " ['--nofilecheck'] ",
   "default": " False ",
   "type": " None ",
   "help": " Turns file checking off in the check functionality - used by e2refine.py. "
 },
 {
   "count": 5,
   "prog": "e2spa_align.py ",
   "option": " ['--ptclin'] ",
   "default": " None ",
   "type": " str ",
   "help": " particle input "
 },
 {
   "count": 5,
   "prog": "e2spa_classify.py ",
   "option": " ['--ptclin'] ",
   "default": " None ",
   "type": " str ",
   "help": " particle input "
 },
 {
   "count": 5,
   "prog": "e2spa_refine.py ",
   "option": " ['--res'] ",
   "default": "10",
   "type": " float ",
   "help": " The resolution that reference map is lowpass filtered to (with phase randomization) at the begining of the refinement.  "
 },
 {
   "count": 5,
   "prog": "e2spt_align.py ",
   "option": " ['--goldcontinue'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will use even/odd refs corresponding to specified reference to continue refining without phase randomizing again "
 },
 {
   "count": 5,
   "prog": "e2spt_align.py ",
   "option": " ['--transonly'] ",
   "default": " False ",
   "type": " None ",
   "help": " translational alignment only, for prealigned particles "
 },
 {
   "count": 5,
   "prog": "e2spt_align.py ",
   "option": " ['--refine'] ",
   "default": " False ",
   "type": " None ",
   "help": " local refinement from xform.align3d in header. "
 },
 {
   "count": 5,
   "prog": "e2spt_align.py ",
   "option": " ['--maxang'] ",
   "default": "30",
   "type": " float ",
   "help": " Maximum angular difference for the refine mode. default is 30 "
 },
 {
   "count": 5,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--goldcontinue'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will use even/odd refs corresponding to specified reference to continue refining without phase randomizing again "
 },
 {
   "count": 5,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--maxang'] ",
   "default": "30",
   "type": " int ",
   "help": " maximum angle difference from starting point. ignored when fromscratch is on "
 },
 {
   "count": 5,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--tiltrange'] ",
   "default": "60",
   "type": " float ",
   "help": " Maximum angular value at which the highest tilt picture will be simulated. Projections will be simulated from -tiltrange to +titlrange. For example, if simulating a tilt series collected from -60 to 60 degrees, enter a --tiltrange value of 60. Note that this parameter will determine the size of the missing wedge. "
 },
 {
   "count": 5,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--outmode'] ",
   "default": " float ",
   "type": " str ",
   "help": " All EMAN2 programs write images with 4-byte floating point values when possible by default. This allows specifying an alternate format when supported (int8, int16, int32, uint8, uint16, uint32). Values are rescaled to fill MIN-MAX range. "
 },
 {
   "count": 5,
   "prog": "e2spt_average.py ",
   "option": " ['--maxtilt'] ",
   "default": "90",
   "type": " float ",
   "help": " Explicitly zeroes data beyond specified tilt angle. Assumes tilt axis exactly on Y and zero tilt in X-Y plane. Default 90 (no limit). "
 },
 {
   "count": 5,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--maxtilt'] ",
   "default": "90",
   "type": " float ",
   "help": " Explicitly zeroes data beyond specified tilt angle. Assumes tilt axis exactly on Y and zero tilt in X-Y plane. Default 90 (no limit). "
 },
 {
   "count": 5,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--preavgproc1'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) "
 },
 {
   "count": 5,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--preavgproc2'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) "
 },
 {
   "count": 5,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--weighbytiltaxis'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A,B, where A is an integer number and B a decimal. A represents the location of the tilt axis in the tomogram in pixels (eg.g, for a 4096x4096xZ tomogram, this value should be 2048), and B is the weight of the particles furthest from the tomogram. For example, --weighbytiltaxis=2048,0.5 means that praticles at the tilt axis (with an x coordinate of 2048) will have a weight of 1.0 during averaging, while the distance in the x coordinates of particles not-on the tilt axis will be used to weigh their contribution to the average, with particles at the edge(0+radius or 4096-radius) weighing 0.5, as specified by the value provided for B. "
 },
 {
   "count": 5,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--weighbyscore'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This option will weigh the contribution of each subtomogram to the average by score/bestscore. "
 },
 {
   "count": 5,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--search'] ",
   "default": "8",
   "type": " int ",
   "help": " \"Default=8. During COARSE alignment translational search in X, Y and Z, in pixels. Default=8. This WILL overwrite any search: provided through --align, EXCEPT if you provide --search=8, which is the default. In general, just avoid providing search twice (through here and through the aligner, --align). If you do, just be careful to make them consistent to minimize misinterpretation and error. "
 },
 {
   "count": 5,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--savesteps'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, will save the average after each iteration to class_#.hdf. Each class in a separate file. Appends to existing files. "
 },
 {
   "count": 5,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--tweak'] ",
   "default": " False ",
   "type": " None ",
   "help": " WARNING: BUGGY. This will perform a final alignment with no downsampling [without using --shrink or --shrinkfine] if --shrinkfine > 1. "
 },
 {
   "count": 5,
   "prog": "e2spt_boxer_convnet.py ",
   "option": " ['--mult'] ",
   "default": "1",
   "type": " float ",
   "help": " multiply data by factor. useful for vpp data... "
 },
 {
   "count": 5,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--preavgproc1'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) "
 },
 {
   "count": 5,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--preavgproc2'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) "
 },
 {
   "count": 5,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--savesteps'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, this will save the average after each iteration to class_#.hdf. Each class in a separate file. Appends to existing files. "
 },
 {
   "count": 5,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--weighbytiltaxis'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A,B, where A is an integer number and B a decimal. A represents the location of the tilt axis in the tomogram in pixels (eg.g, for a 4096x4096xZ tomogram, this value should be 2048), and B is the weight of the particles furthest from the tiltaxis. For example, --weighbytiltaxis=2048,0.5 means that praticles at the tilt axis (with an x coordinate of 2048) will have a weight of 1.0 during averaging, while the distance in the x coordinates of particles not-on the tilt axis will be used to weigh their contribution to the average, with particles at the edge(0+radius or 4096-radius) weighing 0.5, as specified by the value provided for B. "
 },
 {
   "count": 5,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--weighbyscore'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This option will weigh the contribution of each subtomogram to the average by score/bestscore. "
 },
 {
   "count": 5,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--classmx'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. The name of the classification matrix specifying how particles in 'input' should be grouped. If omitted, all particles will be averaged. "
 },
 {
   "count": 5,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--search'] ",
   "default": "8",
   "type": " int ",
   "help": " \"Default=8. During COARSE alignment, translational search in X, Y and Z, in pixels. This WILL overwrite any search: provided through --align, EXCEPT if you provide --search=8, which is the default. In general, just avoid providing search twice (through here and through the aligner, --align). If you do, just be careful to make them consistent to minimize misinterpretation and error. "
 },
 {
   "count": 5,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--tweak'] ",
   "default": " False ",
   "type": " None ",
   "help": " WARNING: BUGGY. This will perform a final alignment with no downsampling [without using --shrink or --shrinkfine] if --shrinkfine > 1. "
 },
 {
   "count": 5,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--tiltseries'] ",
   "default": "  ",
   "type": " str ",
   "help": " Aligned tilt series. File format must be MRC and must have .mrc or .st or .ali extension. "
 },
 {
   "count": 5,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--defocusmin'] ",
   "default": "0",
   "type": " float ",
   "help": "  If --autofit, minimum autofit defocus. Default=0.0, not used. A value will be estimated based on tilt angle and distance from the tilt axis. "
 },
 {
   "count": 5,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--defocusmax'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0, not used. If --autofit, maximum autofit defocus. A value will be estimated based on tilt angle and distance from the tilt axis. "
 },
 {
   "count": 5,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--defocus'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.    Target defocus at the tilt axis. In the absence of ctfparamsfile(s)   this value will be assumed to be the defocus at the tilt axis for all tilt images. "
 },
 {
   "count": 5,
   "prog": "e2spt_extract.py ",
   "option": " ['--maxtilt'] ",
   "default": "100",
   "type": " int ",
   "help": " max tilt "
 },
 {
   "count": 5,
   "prog": "e2spt_extract.py ",
   "option": " ['--verbose'] ",
   "default": "1",
   "type": " int ",
   "help": " verbose "
 },
 {
   "count": 5,
   "prog": "e2spt_hac.py ",
   "option": " ['--preavgproc1'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) "
 },
 {
   "count": 5,
   "prog": "e2spt_hac.py ",
   "option": " ['--preavgproc2'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) "
 },
 {
   "count": 5,
   "prog": "e2spt_hac.py ",
   "option": " ['--weighbytiltaxis'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A,B, where A is an integer number and B a decimal. A represents the location of the tilt axis in the tomogram in pixels (eg.g, for a 4096x4096xZ tomogram, this value should be 2048), and B is the weight of the particles furthest from the tomogram. For example, --weighbytiltaxis=2048,0.5 means that praticles at the tilt axis (with an x coordinate of 2048) will have a weight of 1.0 during averaging, while the distance in the x coordinates of particles not-on the tilt axis will be used to weigh their contribution to the average, with particles at the edge(0+radius or 4096-radius) weighing 0.5, as specified by the value provided for B. "
 },
 {
   "count": 5,
   "prog": "e2spt_hac.py ",
   "option": " ['--weighbyscore'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This option will weigh the contribution of each subtomogram to the average by score/bestscore. "
 },
 {
   "count": 5,
   "prog": "e2spt_hac.py ",
   "option": " ['--search'] ",
   "default": "8",
   "type": " int ",
   "help": " \"Default=8. During COARSE alignment translational search in X, Y and Z, in pixels. Default=8. This WILL overwrite any search: provided through --align, EXCEPT if you provide --search=8, which is the default. In general, just avoid providing search twice (through here and through the aligner, --align). If you do, just be careful to make them consistent to minimize misinterpretation and error. "
 },
 {
   "count": 5,
   "prog": "e2spt_hac.py ",
   "option": " ['--savesteps'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, will save the average after each iteration to class_#.hdf. Each class in a separate file. Appends to existing files. "
 },
 {
   "count": 5,
   "prog": "e2spt_hac.py ",
   "option": " ['--tweak'] ",
   "default": " False ",
   "type": " None ",
   "help": " WARNING: BUGGY. This will perform a final alignment with no downsampling [without using --shrink or --shrinkfine] if --shrinkfine > 1. "
 },
 {
   "count": 5,
   "prog": "e2spt_make3d.py ",
   "option": " ['--ptclin'] ",
   "default": " None ",
   "type": " str ",
   "help": " 2D particle input "
 },
 {
   "count": 5,
   "prog": "e2spt_mapptclstotomo.py ",
   "option": " ['--tomo'] ",
   "default": "  ",
   "type": " str ",
   "help": " tomogram file name "
 },
 {
   "count": 5,
   "prog": "e2spt_refine.py ",
   "option": " ['--maskalign'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask file applied to 3D alignment reference in each iteration. Not applied to the average, which will follow normal masking routine. "
 },
 {
   "count": 5,
   "prog": "e2spt_refine.py ",
   "option": " ['--goldcontinue'] ",
   "default": " False ",
   "type": " None ",
   "help": " continue from an existing gold standard refinement "
 },
 {
   "count": 5,
   "prog": "e2spt_refine.py ",
   "option": " ['--maxtilt'] ",
   "default": "90",
   "type": " float ",
   "help": " Explicitly zeroes data beyond specified tilt angle. Assumes tilt axis exactly on Y and zero tilt in X-Y plane. Default 90 (no limit). "
 },
 {
   "count": 5,
   "prog": "e2spt_refine.py ",
   "option": " ['--smooth'] ",
   "default": "40",
   "type": " float ",
   "help": " smoothing factor for subtlt. "
 },
 {
   "count": 5,
   "prog": "e2spt_refine.py ",
   "option": " ['--maxang'] ",
   "default": "-1",
   "type": " float ",
   "help": " maximum anglular difference in refine mode. "
 },
 {
   "count": 5,
   "prog": "e2spt_refine.py ",
   "option": " ['--transonly'] ",
   "default": " False ",
   "type": " None ",
   "help": " translational alignment only "
 },
 {
   "count": 5,
   "prog": "e2spt_refine.py ",
   "option": " ['--refine'] ",
   "default": " False ",
   "type": " None ",
   "help": " local refinement from xform in header. "
 },
 {
   "count": 5,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--goldcontinue'] ",
   "default": " False ",
   "type": " None ",
   "help": " ues the _even/_odd version of the given reference "
 },
 {
   "count": 5,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--maskalign'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask file applied to 3D alignment reference in each iteration. Not applied to the average, which will follow normal masking routine. "
 },
 {
   "count": 5,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--maxang'] ",
   "default": "30",
   "type": " int ",
   "help": " maximum angle difference from starting point for localrefine.  "
 },
 {
   "count": 5,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--smooth'] ",
   "default": "100",
   "type": " float ",
   "help": " smooth local motion by this factor. smoother local motion with larger numbers. default 100 "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--maskalign'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask file applied to 3D alignment reference in each iteration. Not applied to the average, which will follow normal masking routine. "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--maxtilt'] ",
   "default": "90",
   "type": " float ",
   "help": " Explicitly zeroes data beyond specified tilt angle. Assumes tilt axis exactly on Y and zero tilt in X-Y plane. Default 90 (no limit). "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--maxang'] ",
   "default": "30",
   "type": " float ",
   "help": " maximum anglular difference in refine mode. "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--transonly'] ",
   "default": " False ",
   "type": " None ",
   "help": " translational alignment only "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--refine'] ",
   "default": " False ",
   "type": " None ",
   "help": " local refinement from xform in header. "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--maskalign'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask file applied to 3D alignment reference in each iteration. Not applied to the average, which will follow normal masking routine. "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--res'] ",
   "default": "20",
   "type": " float ",
   "help": " target resolution "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--classmx'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. WARNING: Not implemented yet. The name of the classification matrix specifying how particles in 'input' should be grouped to generate initial averages and seed refinement. "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--savesteps'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, will save the average after each iteration to class_#.hdf. Each class in a separate file. Appends to existing files. "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--search'] ",
   "default": "8",
   "type": " int ",
   "help": " \"During COARSE alignment translational search in X, Y and Z, in pixels. Default=8. This WILL overwrite any search: provided through --align, EXCEPT if you provide --search=8, which is the default. In general, just avoid providing search twice (through here and through the aligner, --align). If you do, just be careful to make them consistent to minimize misinterpretation and error. "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--preavgproc1'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--preavgproc2'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--weighbytiltaxis'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A,B, where A is an integer number and B a decimal. A represents the location of the tilt axis in the tomogram in pixels (eg.g, for a 4096x4096xZ tomogram, this value should be 2048), and B is the weight of the particles furthest from the tomogram. For example, --weighbytiltaxis=2048,0.5 means that praticles at the tilt axis (with an x coordinate of 2048) will have a weight of 1.0 during averaging, while the distance in the x coordinates of particles not-on the tilt axis will be used to weigh their contribution to the average, with particles at the edge(0+radius or 4096-radius) weighing 0.5, as specified by the value provided for B. "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--weighbyscore'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This option will weigh the contribution of each subtomogram to the average by score/bestscore. "
 },
 {
   "count": 5,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--tweak'] ",
   "default": " False ",
   "type": " None ",
   "help": " WARNING: BUGGY. This will perform a final alignment with no downsampling [without using --shrink or --shrinkfine] if --shrinkfine > 1. "
 },
 {
   "count": 5,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--smooth'] ",
   "default": " False ",
   "type": " None ",
   "help": " Smooth out FSC curves by taking the average of a low value with a subsequent maxima. "
 },
 {
   "count": 5,
   "prog": "e2spt_sgd.py ",
   "option": " ['--learnrate'] ",
   "default": "0.1",
   "type": " float ",
   "help": " Learning rate. Default is 0.1 "
 },
 {
   "count": 5,
   "prog": "e2spt_sgd.py ",
   "option": " ['--refine'] ",
   "default": " False ",
   "type": " None ",
   "help": " start from xform.align3d in header "
 },
 {
   "count": 5,
   "prog": "e2spt_simulation.py ",
   "option": " ['--tiltrange'] ",
   "default": "60",
   "type": " float ",
   "help": " Default=60. Maximum angular value at which the highest tilt picture will be simulated. Projections will be simulated from -tiltrange to +titlrange. For example, if simulating a tilt series collected from -60 to 60 degrees, enter a --tiltrange value of 60. Note that this parameter will determine the size of the missing wedge. "
 },
 {
   "count": 5,
   "prog": "e2spt_simulation.py ",
   "option": " ['--defocus'] ",
   "default": "3",
   "type": " float ",
   "help": " Default=3.0. Target defocus at the tilt axis (in microns) for the simulated tilt series. Notice that DEFOCUS (underfocus) values are POSITIVE, by convention. "
 },
 {
   "count": 5,
   "prog": "e2spt_structfac.py ",
   "option": " ['--res'] ",
   "default": "15",
   "type": " float ",
   "help": " lowpass resolution. default 15 "
 },
 {
   "count": 5,
   "prog": "e2spt_subtilt_from_imod.py ",
   "option": " ['--tomo'] ",
   "default": "  ",
   "type": " str ",
   "help": " File name of reconstructed tomogram. "
 },
 {
   "count": 5,
   "prog": "e2spt_subtilt_from_imod.py ",
   "option": " ['--ptclin'] ",
   "default": "  ",
   "type": " str ",
   "help": " File name of input 3D particles. "
 },
 {
   "count": 5,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--tiltseries'] ",
   "default": "  ",
   "type": " str ",
   "help": " File in .ali, .mrc or .hdf format of the aligned tiltseries. "
 },
 {
   "count": 5,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--goldcontinue'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will use even/odd refs corresponding to specified reference to continue refining without phase randomizing again "
 },
 {
   "count": 5,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--smooth'] ",
   "default": "100",
   "type": " float ",
   "help": " smooth local motion by this factor. smoother local motion with larger numbers. default 100 "
 },
 {
   "count": 5,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--maskalign'] ",
   "default": "  ",
   "type": " str ",
   "help": " Mask to apply during alignment, but not the final model. Default is to use the same mask. "
 },
 {
   "count": 5,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--transonly'] ",
   "default": " False ",
   "type": " None ",
   "help": " only refine translation "
 },
 {
   "count": 5,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--ptclin'] ",
   "default": " None ",
   "type": " str ",
   "help": " particle input "
 },
 {
   "count": 5,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--transonly'] ",
   "default": " False ",
   "type": " None ",
   "help": " only refine translation "
 },
 {
   "count": 5,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--defocus'] ",
   "default": " False ",
   "type": " None ",
   "help": " refine defocus. Still under development "
 },
 {
   "count": 5,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--smooth'] ",
   "default": "-1",
   "type": " int ",
   "help": " Smooth trajectory per image based on nearby particles. Still under development "
 },
 {
   "count": 5,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--outmode'] ",
   "default": " float ",
   "type": " str ",
   "help": " All EMAN2 programs write images with 4-byte floating point values when possible by default. This allows specifying an alternate format when supported: float, int8, int16, int32, uint8, uint16, uint32. Values are rescaled to fill MIN-MAX range. "
 },
 {
   "count": 5,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--tiltrange'] ",
   "default": "0",
   "type": " float ",
   "help": " If provided, this will make --lowesttilt=-1*tiltrange and --highesttilt=tiltrange. If the range is asymmetric, supply --lowesttilt and --highesttilt directly. "
 },
 {
   "count": 5,
   "prog": "e2stackanim.py ",
   "option": " ['--scale'] ",
   "default": "1",
   "type": " float ",
   "help": " Scale factor "
 },
 {
   "count": 5,
   "prog": "e2symsearch3d.py ",
   "option": " ['--preavgproc1'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) "
 },
 {
   "count": 5,
   "prog": "e2symsearch3d.py ",
   "option": " ['--preavgproc2'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A processor (see 'e2help.py processors -v 10' at the command line) to be applied to the raw particle after alignment but before averaging (for example, a threshold to exclude extreme values, or a highphass filter if you have phaseplate data.) "
 },
 {
   "count": 5,
   "prog": "e2symsearch3d.py ",
   "option": " ['--savesteps'] ",
   "default": " False ",
   "type": " None ",
   "help": " If --avgiter > 1, save all intermediate averages and intermediate aligned kept stacks. "
 },
 {
   "count": 5,
   "prog": "e2symsearch3d.py ",
   "option": " ['--tweak'] ",
   "default": " False ",
   "type": " None ",
   "help": " WARNING: Not used for anything yet. This will perform a final alignment with no downsampling [without using --shrink or --shrinkfine] if --shrinkfine > 1. "
 },
 {
   "count": 5,
   "prog": "e2symsearch3d.py ",
   "option": " ['--weighbytiltaxis'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A,B, where A is an integer number and B a decimal. A represents the location of the tilt axis in the tomogram in pixels (eg.g, for a 4096x4096xZ tomogram, this value should be 2048), and B is the weight of the particles furthest from the tomogram. For example, --weighbytiltaxis=2048,0.5 means that praticles at the tilt axis (with an x coordinate of 2048) will have a weight of 1.0 during averaging, while the distance in the x coordinates of particles not-on the tilt axis will be used to weigh their contribution to the average, with particles at the edge(0+radius or 4096-radius) weighing 0.5, as specified by the value provided for B. "
 },
 {
   "count": 5,
   "prog": "e2symsearch3d.py ",
   "option": " ['--weighbyscore'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This option will weigh the contribution of each subtomogram to the average by score/bestscore. "
 },
 {
   "count": 5,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--tiltrange'] ",
   "default": "15",
   "type": " int ",
   "help": " The angular tiltrange to search "
 },
 {
   "count": 5,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--simaligncmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " Name of the aligner along with its construction arguments (default=ccc) "
 },
 {
   "count": 5,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--simralign'] ",
   "default": " None ",
   "type": " str ",
   "help": " The name and parameters of the second stage aligner which refines the results of the first alignment "
 },
 {
   "count": 5,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--simraligncmp'] ",
   "default": " dot ",
   "type": " str ",
   "help": " The name and parameters of the comparitor used by the second stage aligner. (default=dot). "
 },
 {
   "count": 5,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--verbose'] ",
   "default": "0",
   "type": " int ",
   "help": " verbose level [0-9], higher number means higher level of verboseness "
 },
 {
   "count": 5,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--defocus'] ",
   "default": " None ",
   "type": " float ",
   "help": " Default=None. Target defocus at the tilt axis. If not provided, a \"global defocus\" value will be estimated automatially. "
 },
 {
   "count": 5,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--tiltseries'] ",
   "default": " None ",
   "type": " str ",
   "help": " default=None. .st file from IMOD if --iconpreproc is turned on. Otherwise, supply the .ali file from IMOD *after* X-ray correction, iconpreprocessing, and alignment with IMOD. "
 },
 {
   "count": 5,
   "prog": "e2tomo_mwfill.py ",
   "option": " ['--learnrate'] ",
   "default": "0.0002",
   "type": " float ",
   "help": " learning rate "
 },
 {
   "count": 5,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--tiltrange'] ",
   "default": "0",
   "type": " float ",
   "help": " If provided, this will make --lowesttilt=-1*tiltrange and --highesttilt=tiltrange. If the range is asymmetric, supply --lowesttilt and --highesttilt directly. "
 },
 {
   "count": 5,
   "prog": "e2tomopreproc.py ",
   "option": " ['--tiltseries'] ",
   "default": "  ",
   "type": " str ",
   "help": " \"tiltseries to process. redundant with --input "
 },
 {
   "count": 5,
   "prog": "e2tomopreproc.py ",
   "option": " ['--outmode'] ",
   "default": "  ",
   "type": " str ",
   "help": " All EMAN2 programs write images with 4-byte floating point values when possible by default. This allows specifying an alternate format when supported: float, int8, int16, int32, uint8, uint16, uint32. Values are rescaled to fill MIN-MAX range. "
 },
 {
   "count": 5,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--learnrate'] ",
   "default": "0.0001",
   "type": " float ",
   "help": " Learning rate  "
 },
 {
   "count": 5,
   "prog": "e2tvrecon.py ",
   "option": " ['--tiltseries'] ",
   "default": " None ",
   "type": " None ",
   "help": " The input projections.    Project should usually have the xform.projection header attribute, which is    used for slice insertion "
 },
 {
   "count": 4,
   "prog": "e2RCTboxer.py ",
   "option": " ['--suffix'] ",
   "default": " _ptcls ",
   "type": " str ",
   "help": " suffix which is appended to the names of output particle and coordinate files "
 },
 {
   "count": 4,
   "prog": "e2basis.py ",
   "option": " ['--normproj'] ",
   "default": " False ",
   "type": " None ",
   "help": " Normalize the projections resulting from 'project', such that the length of each vector is 1 "
 },
 {
   "count": 4,
   "prog": "e2boxer.py ",
   "option": " ['--suffix'] ",
   "default": "  ",
   "type": " str ",
   "help": " Suffix of the micrographs used for particle picking (i.e. suffix=goodali will use micrographs end with __goodali.hdf). It is only useful when [allmicrographs] is True. "
 },
 {
   "count": 4,
   "prog": "e2boxer_old.py ",
   "option": " ['--suffix'] ",
   "default": " _ptcls ",
   "type": " str ",
   "help": " suffix which is appended to the names of output particle and coordinate files "
 },
 {
   "count": 4,
   "prog": "e2buildsets.py ",
   "option": " ['--allparticles'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will process all particle stacks stored in the particles subdirectory (if specified, list of files will be ignored) "
 },
 {
   "count": 4,
   "prog": "e2classaverage.py ",
   "option": " ['--prectf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Apply particle CTF to each reference before alignment "
 },
 {
   "count": 4,
   "prog": "e2classaverage.py ",
   "option": " ['--even'] ",
   "default": " False ",
   "type": " None ",
   "help": " Used by EMAN2 when running eotests. Includes only even numbered particles in class averages. "
 },
 {
   "count": 4,
   "prog": "e2classesbyref.py ",
   "option": " ['--sep'] ",
   "default": "1",
   "type": " int ",
   "help": " The number of classes a particle can contribute towards (default is 1) "
 },
 {
   "count": 4,
   "prog": "e2classesbyref.py ",
   "option": " ['--classes'] ",
   "default": " None ",
   "type": " str ",
   "help": " Generate class-averages directly. No bad particle exclusion or iteration. Specify filename. "
 },
 {
   "count": 4,
   "prog": "e2classify.py ",
   "option": " ['--sep'] ",
   "default": "1",
   "type": " int ",
   "help": " The number of classes a particle can contribute towards (default is 1) "
 },
 {
   "count": 4,
   "prog": "e2classifykmeans.py ",
   "option": " ['--average'] ",
   "default": " False ",
   "type": " None ",
   "help": " Average the particles within each class "
 },
 {
   "count": 4,
   "prog": "e2classptcl.py ",
   "option": " ['--classes'] ",
   "default": " None ",
   "type": " str ",
   "help": " Comma separated list of class-numbers to extract particles for "
 },
 {
   "count": 4,
   "prog": "e2cmmtomrc.py ",
   "option": " ['--box'] ",
   "default": "0",
   "type": " int ",
   "help": " Box size in pixels "
 },
 {
   "count": 4,
   "prog": "e2ctf.py ",
   "option": " ['--allparticles'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will process all particle stacks stored in the particles subdirectory (no list of files required) "
 },
 {
   "count": 4,
   "prog": "e2ctf.py ",
   "option": " ['--astigmatism'] ",
   "default": " False ",
   "type": " None ",
   "help": " Includes astigmatism in automatic fitting "
 },
 {
   "count": 4,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--last'] ",
   "default": "-1",
   "type": " int ",
   "help": " Last image to include in the plot. "
 },
 {
   "count": 4,
   "prog": "e2ctf_auto.py ",
   "option": " ['--fromscratch'] ",
   "default": " False ",
   "type": " None ",
   "help": " Force refitting of CTF from scratch, ignoring any previous fits. "
 },
 {
   "count": 4,
   "prog": "e2ctf_auto.py ",
   "option": " ['--astigmatism'] ",
   "default": " False ",
   "type": " None ",
   "help": " Includes astigmatism in automatic fitting (use e2rawdata first) "
 },
 {
   "count": 4,
   "prog": "e2ddd_external.py ",
   "option": " ['--last'] ",
   "default": " None ",
   "type": " int ",
   "help": " The index of the last frame to include in alignment. "
 },
 {
   "count": 4,
   "prog": "e2ddd_movie.py ",
   "option": " ['--suffix'] ",
   "default": " proc ",
   "type": " str ",
   "help": " Specify a unique suffix for output frames. Default is 'proc'. Note that the output of --frames will be overwritten if identical suffix is already present. "
 },
 {
   "count": 4,
   "prog": "e2display.py ",
   "option": " ['--classes'] ",
   "default": " None ",
   "type": " str ",
   "help": " <rawptcl>,<classmx> Show particles associated class-averages "
 },
 {
   "count": 4,
   "prog": "e2euler_refine.py ",
   "option": " ['--no_wt'] ",
   "default": " False ",
   "type": " None ",
   "help": " This argument turns automatic weighting off causing all images to be weighted by 1. If this argument is not specified images inserted into the reconstructed volume are weighted by the number of particles that contributed to them (i.e. as in class averages), which is extracted from the image header (as the ptcl_repr attribute). "
 },
 {
   "count": 4,
   "prog": "e2evalimage.py ",
   "option": " ['--astigmatism'] ",
   "default": " False ",
   "type": " None ",
   "help": " Includes astigmatism in automatic fitting "
 },
 {
   "count": 4,
   "prog": "e2evalimage.py ",
   "option": " ['--box'] ",
   "default": "-1",
   "type": " int ",
   "help": " Forced box size in grid mode. Overrides any previous setting.  "
 },
 {
   "count": 4,
   "prog": "e2fsc.py ",
   "option": " ['--cutoff'] ",
   "default": "0.143",
   "type": " float ",
   "help": " fsc cutoff. default is 0.143 "
 },
 {
   "count": 4,
   "prog": "e2fsc_local.py ",
   "option": " ['--even'] ",
   "default": "  ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 4,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--cutoff'] ",
   "default": "0.143",
   "type": " float ",
   "help": " fsc cutoff. default is 0.143 "
 },
 {
   "count": 4,
   "prog": "e2gmm_refine.py ",
   "option": " ['--fromscratch'] ",
   "default": " False ",
   "type": " None ",
   "help": " start from coarse alignment. otherwise will only do refinement from last round "
 },
 {
   "count": 4,
   "prog": "e2initialmodel.py ",
   "option": " ['--automaskexpand'] ",
   "default": "-1",
   "type": " int ",
   "help": " Number of voxels of post-threshold expansion in the mask, for use when peripheral features are truncated. (default=shrunk boxsize/20) "
 },
 {
   "count": 4,
   "prog": "e2make3d.py ",
   "option": " ['--outsize'] ",
   "default": " None ",
   "type": " str ",
   "help": " Defines the dimensions (x,y,z) or (x,x,x) of the final volume written to disk, if ommitted, size will be based on unpadded input size "
 },
 {
   "count": 4,
   "prog": "e2make3d.py ",
   "option": " ['--recon'] ",
   "default": " fourier ",
   "type": " None ",
   "help": " Reconstructor to use see e2help.py reconstructors -v. Default is fourier:mode=gauss_2 "
 },
 {
   "count": 4,
   "prog": "e2make3d.py ",
   "option": " ['--no_wt'] ",
   "default": " False ",
   "type": " None ",
   "help": " This argument turns automatic weighting off causing all images to be weighted by 1. If this argument is not specified images inserted into the reconstructed volume are weighted by the number of particles that contributed to them (i.e. as in class averages), which is extracted from the image header (as the ptcl_repr attribute). "
 },
 {
   "count": 4,
   "prog": "e2make3d.py ",
   "option": " ['--lowmem'] ",
   "default": " False ",
   "type": " None ",
   "help": " Causes images to be loaded as needed to reduce memory usage at the cost of time. "
 },
 {
   "count": 4,
   "prog": "e2make3dpar.py ",
   "option": " ['--outsize'] ",
   "default": " None ",
   "type": " str ",
   "help": " Defines the dimensions (x,y,z) or (x,x,x) of the final volume written to disk, if ommitted, size will be based on unpadded input size "
 },
 {
   "count": 4,
   "prog": "e2make3dpar.py ",
   "option": " ['--no_wt'] ",
   "default": " False ",
   "type": " None ",
   "help": " This argument turns automatic weighting off causing all images to be weighted by 1. If this argument is not specified images inserted into the reconstructed volume are weighted by the number of particles that contributed to them (i.e. as in class averages), which is extracted from the image header (as the ptcl_repr attribute). "
 },
 {
   "count": 4,
   "prog": "e2maskbyclass.py ",
   "option": " ['--classes'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to a class-average file (must be EMAN2 HDF averages) "
 },
 {
   "count": 4,
   "prog": "e2msa.py ",
   "option": " ['--normproj'] ",
   "default": " False ",
   "type": " None ",
   "help": " When generating subspace projections, normalize each projection vector to unit length "
 },
 {
   "count": 4,
   "prog": "e2pathwalker.py ",
   "option": " ['--average'] ",
   "default": "3.78",
   "type": " float ",
   "help": " Average Ca-Ca length "
 },
 {
   "count": 4,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--box'] ",
   "default": " None ",
   "type": " str ",
   "help": " Box size in pixels, <xyz> or <x>,<y>,<z> "
 },
 {
   "count": 4,
   "prog": "e2proc2d.py ",
   "option": " ['--average'] ",
   "default": " False ",
   "type": " None ",
   "help": " Averages all input images (without alignment) and writes a single output image "
 },
 {
   "count": 4,
   "prog": "e2proc2d.py ",
   "option": " ['--last'] ",
   "default": "-1",
   "type": " int ",
   "help": " the last image in the input to process "
 },
 {
   "count": 4,
   "prog": "e2proc2d.py ",
   "option": " ['--multfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Multiplies the volume by another volume of identical size. This can be used to apply masks, etc. "
 },
 {
   "count": 4,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--allparticles'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will process all particle sets stored in BDB in the particles subdirectory "
 },
 {
   "count": 4,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--multfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Multiplies the volume by another volume of identical size. This can be used to apply masks, etc. "
 },
 {
   "count": 4,
   "prog": "e2proc2dpar.py ",
   "option": " ['--multfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Multiplies the image by another image of identical size. This can be used to apply masks, etc. "
 },
 {
   "count": 4,
   "prog": "e2proc3d_huge.py ",
   "option": " ['--multfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Multiplies the volume by another volume of identical size. This can be used to apply masks, etc. "
 },
 {
   "count": 4,
   "prog": "e2rawdata.py ",
   "option": " ['--astigmatism'] ",
   "default": " False ",
   "type": " None ",
   "help": " Includes astigmatism in automatic fitting "
 },
 {
   "count": 4,
   "prog": "e2rct.py ",
   "option": " ['--tiltaxis'] ",
   "default": " False ",
   "type": " None ",
   "help": " Do a tiltaxis correction(Takes into account variations in tilt axis from micrograph to micrograph. Only possible if e2RCTboxer was used for particle picking "
 },
 {
   "count": 4,
   "prog": "e2refine2d.py ",
   "option": " ['--normproj'] ",
   "default": " False ",
   "type": " None ",
   "help": " Normalizes each projected vector into the MSA subspace. Note that this is different from normalizing the input images since the subspace is not expected to fully span the image "
 },
 {
   "count": 4,
   "prog": "e2refine2d.py ",
   "option": " ['--resume'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will cause a check of the files in the current directory, and the refinement will resume after the last completed iteration. It's ok to alter other parameters. "
 },
 {
   "count": 4,
   "prog": "e2refine2d.py ",
   "option": " ['--classrefsf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use the setsfref option in class averaging to produce better filtered averages. "
 },
 {
   "count": 4,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--normproj'] ",
   "default": " False ",
   "type": " None ",
   "help": " Normalizes each projected vector into the MSA subspace. Note that this is different from normalizing the input images since the subspace is not expected to fully span the image "
 },
 {
   "count": 4,
   "prog": "e2refine_easy.py ",
   "option": " ['--sep'] ",
   "default": "-1",
   "type": " int ",
   "help": " The number of classes each particle can contribute towards (normally 1). Increasing will improve SNR, but produce rotational blurring. "
 },
 {
   "count": 4,
   "prog": "e2refine_easy.py ",
   "option": " ['--m3dpostprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=none. An arbitrary post-processor to run after all other automatic processing. Maps are autofiltered, so a low-pass filter should not normally be used here. "
 },
 {
   "count": 4,
   "prog": "e2refine_easy.py ",
   "option": " ['--automaskexpand'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=boxsize/20. Specify number of voxels to expand mask before soft edge. Use this if low density peripheral features are cut off by the mask. "
 },
 {
   "count": 4,
   "prog": "e2refine_easy.py ",
   "option": " ['--automask3d'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. Specify as a processor, eg - mask.auto3d:threshold=1.1:radius=30:nshells=5:nshellsgauss=5. "
 },
 {
   "count": 4,
   "prog": "e2refine_easy.py ",
   "option": " ['--prectf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=auto. Filter each reference (c) to match the power spectrum of each particle (r) before alignment and comparison. Applies both to classification and class-averaging. "
 },
 {
   "count": 4,
   "prog": "e2refine_easy.py ",
   "option": " ['--classrefsf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use the setsfref option in class averaging. This matches the filtration of the class-averages to the projections for easier comparison. Disabled when ampcorrect=flatten is used. "
 },
 {
   "count": 4,
   "prog": "e2refine_easy.py ",
   "option": " ['--recon'] ",
   "default": " fourier ",
   "type": " None ",
   "help": " Default=auto. Reconstructor to use see e2help.py reconstructors -v "
 },
 {
   "count": 4,
   "prog": "e2refine_easy.py ",
   "option": " ['--lowmem'] ",
   "default": " True ",
   "type": " None ",
   "help": " Default=auto. Make limited use of memory when possible - useful on lower end machines "
 },
 {
   "count": 4,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--even'] ",
   "default": " None ",
   "type": " str ",
   "help": " The filename of the map from the even 1/2 of the data "
 },
 {
   "count": 4,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--restarget'] ",
   "default": "-1",
   "type": " float ",
   "help": " The specified target resolution to avoid underfiltering artifacts. "
 },
 {
   "count": 4,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--m3dpostprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=none. An arbitrary post-processor to run after all other automatic processing. "
 },
 {
   "count": 4,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--automaskexpand'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=boxsize/20. Specify number of voxels to expand mask before soft edge. Only used if automask3d not specified. "
 },
 {
   "count": 4,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--automask3d'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. Specify as a processor, eg - mask.auto3d:threshold=1.1:radius=30:nshells=5:nshellsgauss=5. "
 },
 {
   "count": 4,
   "prog": "e2refinemulti.py ",
   "option": " ['--sep'] ",
   "default": "-1",
   "type": " int ",
   "help": " The number of classes each particle can contribute towards (normally 1). Increasing will improve SNR, but produce rotational blurring. "
 },
 {
   "count": 4,
   "prog": "e2refinemulti.py ",
   "option": " ['--m3dpostprocess'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=none. An arbitrary post-processor to run after all other automatic processing. Maps are autofiltered, so a low-pass filter is not required here. "
 },
 {
   "count": 4,
   "prog": "e2refinemulti.py ",
   "option": " ['--automask3d'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. Specify as a processor, eg - mask.auto3d:threshold=1.1:radius=30:nshells=5:nshellsgauss=5. "
 },
 {
   "count": 4,
   "prog": "e2refinemulti.py ",
   "option": " ['--classrefsf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=True. Use the setsfref option in class averaging to produce better filtered averages. "
 },
 {
   "count": 4,
   "prog": "e2refinemulti.py ",
   "option": " ['--recon'] ",
   "default": " fourier ",
   "type": " None ",
   "help": " Default=auto. Reconstructor to use see e2help.py reconstructors -v "
 },
 {
   "count": 4,
   "prog": "e2refinemulti.py ",
   "option": " ['--lowmem'] ",
   "default": " True ",
   "type": " None ",
   "help": " Default=auto. Make limited use of memory when possible - useful on lower end machines "
 },
 {
   "count": 4,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--ampcont'] ",
   "default": "0.1",
   "type": " float ",
   "help": " (Expert Option) Amplitude Constrast. 10%% = .1 "
 },
 {
   "count": 4,
   "prog": "e2refinevariance.py ",
   "option": " ['--classrefsf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use the setsfref option in class averaging to produce better filtered averages. "
 },
 {
   "count": 4,
   "prog": "e2refinevariance.py ",
   "option": " ['--recon'] ",
   "default": " fourier ",
   "type": " None ",
   "help": " Reconstructor to use see e2help.py reconstructors -v "
 },
 {
   "count": 4,
   "prog": "e2refinevariance.py ",
   "option": " ['--m3dpostprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " Post processor to be applied to the 3D volume once the reconstruction is completed "
 },
 {
   "count": 4,
   "prog": "e2refinevariance.py ",
   "option": " ['--lowmem'] ",
   "default": " False ",
   "type": " None ",
   "help": " Make limited use of memory when possible - useful on lower end machines "
 },
 {
   "count": 4,
   "prog": "e2scannereval.py ",
   "option": " ['--box'] ",
   "default": "256",
   "type": " int ",
   "help": " size in pixels of the power spectra "
 },
 {
   "count": 4,
   "prog": "e2simmx.py ",
   "option": " ['--prectf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Apply CTF to each projection before comparison "
 },
 {
   "count": 4,
   "prog": "e2simmx2stage.py ",
   "option": " ['--prectf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Apply CTF to each projection before comparison "
 },
 {
   "count": 4,
   "prog": "e2spa_align.py ",
   "option": " ['--ptclout'] ",
   "default": " None ",
   "type": " str ",
   "help": " particle output "
 },
 {
   "count": 4,
   "prog": "e2spa_make3d.py ",
   "option": " ['--outsize'] ",
   "default": "-1",
   "type": " int ",
   "help": " Defines the dimensions of the final volume written to disk "
 },
 {
   "count": 4,
   "prog": "e2spa_make3d.py ",
   "option": " ['--no_wt'] ",
   "default": " False ",
   "type": " None ",
   "help": " This argument turns automatic weighting off causing all images to be weighted by 1. "
 },
 {
   "count": 4,
   "prog": "e2spa_refine.py ",
   "option": " ['--automask3d'] ",
   "default": " auto ",
   "type": " str ",
   "help": " Default=auto. Specify as a processor, eg - mask.auto3d:threshold=1.1:radius=30:nshells=5:nshellsgauss=5. "
 },
 {
   "count": 4,
   "prog": "e2spt_align.py ",
   "option": " ['--refinentry'] ",
   "default": "8",
   "type": " int ",
   "help": " number of tests for refine mode. default is 8 "
 },
 {
   "count": 4,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--fromscratch'] ",
   "default": " False ",
   "type": " None ",
   "help": " . "
 },
 {
   "count": 4,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--tiltaxis'] ",
   "default": " y ",
   "type": " str ",
   "help": " Axis to produce projections about. Default is 'y'; the only other valid option is 'x'. "
 },
 {
   "count": 4,
   "prog": "e2spt_average.py ",
   "option": " ['--maxalt'] ",
   "default": "180",
   "type": " float ",
   "help": " Maximum alignment altitude to include. Deafult=180 "
 },
 {
   "count": 4,
   "prog": "e2spt_average.py ",
   "option": " ['--automaskexpand'] ",
   "default": "-1",
   "type": " int ",
   "help": " Default=boxsize/20. Specify number of voxels to expand mask before soft edge. Use this if low density peripheral features are cut off by the mask. "
 },
 {
   "count": 4,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--maxalt'] ",
   "default": "180",
   "type": " float ",
   "help": " Maximum alignment altitude to include. Deafult=180 "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--npeakstorefine'] ",
   "default": "4",
   "type": " int ",
   "help": " Default=1. The number of best coarse alignments to refine in search of the best final alignment. Default=1. "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--shrinkfine'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for refine alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--preprocessfine'] ",
   "default": "  ",
   "type": " str ",
   "help": " Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--lowpassfine'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--highpassfine'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--precision'] ",
   "default": "1",
   "type": " float ",
   "help": " Default=1.0. Precision in pixels to use when figuring out alignment parameters automatically using --radius. Precision would be the number of pixels that the the edge of the specimen is moved (rotationally) during the finest sampling, --falign. If precision is 1, then the precision of alignment will be that of the sampling (apix of your images) times the --shrinkfine factor specified. "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--searchfine'] ",
   "default": "2",
   "type": " int ",
   "help": " \"Default=2. During FINE alignment translational search in X, Y and Z, in pixels. Default=2. This WILL overwrite any search: provided through --falign, EXCEPT if you provide --searchfine=2, which is the default. In general, just avoid providing search twice (through here and through the fine aligner --falign). If you do, just be careful to make them consistent to minimize misinterpretation and error. "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--saveallalign'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, will save the alignment parameters after each iteration "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--procfinelikecoarse'] ",
   "default": " False ",
   "type": " None ",
   "help": " If you supply this parameters, particles for fine alignment will be preprocessed identically to particles for coarse alignment by default. If you supply this, but want specific parameters for preprocessing particles for also supply: fine alignment, nd supply fine alignment parameters, such as --lowpassfine, --highpassfine, etc; to preprocess the particles for FINE alignment differently than for COARSE alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--falign'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=None. This is the second stage aligner used to fine-tune the first alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--faligncmp'] ",
   "default": " ccc.tomo.thresh ",
   "type": " str ",
   "help": " Default=ccc.tomo.thresh. The comparator used by the second stage aligner. "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--randomizewedge'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This parameter is EXPERIMENTAL. It randomizes the position of the particles BEFORE alignment, to minimize missing wedge bias and artifacts during symmetric alignment where only a fraction of space is scanned "
 },
 {
   "count": 4,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--autocenter'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Autocenters each averaged pair during initial average generation with --btref and --hacref. Will also autocenter the average of all particles after each iteration of iterative refinement. Options are --autocenter=xform.centerofmass (self descriptive), or --autocenter=xform.centeracf, which applies auto-convolution on the average. "
 },
 {
   "count": 4,
   "prog": "e2spt_buildsets.py ",
   "option": " ['--allparticles'] ",
   "default": " False ",
   "type": " None ",
   "help": " make sets for all particles "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--npeakstorefine'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=1. The number of best coarse alignments to refine in search of the best final alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--resume'] ",
   "default": "  ",
   "type": " str ",
   "help": " (Not working currently). sptali_ir.json file that contains alignment information for the particles in the set. If the information is incomplete (i.e., there are less elements in the file than particles in the stack), on the first iteration the program will complete the file by working ONLY on particle indexes that are missing. For subsequent iterations, all the particles will be used. "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--saveallalign'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, this will save an aligned stack of particles for each iteration "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--shrinkfine'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for refine alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--preprocessfine'] ",
   "default": "  ",
   "type": " str ",
   "help": " Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--lowpassfine'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--highpassfine'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--precision'] ",
   "default": "1",
   "type": " float ",
   "help": " Default=1.0. Precision in pixels to use when figuring out alignment parameters automatically using --radius. Precision would be the number of pixels that the the edge of the specimen is moved (rotationally) during the finest sampling, --falign. If precision is 1, then the precision of alignment will be that of the sampling (apix of your images) times the --shrinkfine factor specified. "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--searchfine'] ",
   "default": "2",
   "type": " int ",
   "help": " \"Default=2. During FINE alignment translational search in X, Y and Z, in pixels. Default=2. This WILL overwrite any search: provided through --falign, EXCEPT if you provide --searchfine=2, which is the default. In general, just avoid providing search twice (through here and through the fine aligner --falign). If you do, just be careful to make them consistent to minimize misinterpretation and error. "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--procfinelikecoarse'] ",
   "default": " False ",
   "type": " None ",
   "help": " If you supply this parameters, particles for fine alignment will be preprocessed identically to particles for coarse alignment by default. If you supply this, but want specific parameters for preprocessing particles for also supply: fine alignment, nd supply fine alignment parameters, such as --lowpassfine, --highpassfine, etc; to preprocess the particles for FINE alignment differently than for COARSE alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--falign'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. This is the second stage aligner when the default aligner (rotate_translate_3d_tree) is NOT used. The fine alignment aligner is used to fine-tune the first alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--faligncmp'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. The default will depend on the aligner used (ccc.tomo or ccc.tomo.thresh). The comparator used by the second stage aligner. "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--randomizewedge'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This parameter is EXPERIMENTAL. It randomizes the position of the particles BEFORE alignment, to minimize missing wedge bias and artifacts during symmetric alignment where only a fraction of space is scanned "
 },
 {
   "count": 4,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--autocenter'] ",
   "default": "  ",
   "type": " str ",
   "help": " WARNING: Experimental. Default=None. Autocenters each averaged pair during initial average generation with --btref and --hacref. Will also autocenter the average of all particles after each iteration of iterative refinement. Options are --autocenter=xform.centerofmass (self descriptive), or --autocenter=xform.centeracf, which applies auto-convolution on the average. "
 },
 {
   "count": 4,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--reconstructor'] ",
   "default": " fourier:mode=gauss_2 ",
   "type": " str ",
   "help": " Default=fourier:mode=gauss_2. The reconstructor to use to reconstruct the tilt series into a tomogram. Type 'e2help.py reconstructors' at the command line to see all options and parameters available. To specify the interpolation scheme for the fourier reconstruction, specify 'mode'. Options are 'nearest_neighbor', 'gauss_2', 'gauss_3', 'gauss_5', 'gauss_5_slow', 'gypergeom_5', 'experimental'. For example --reconstructor=fourier:mode=gauss_5  "
 },
 {
   "count": 4,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--pad2d'] ",
   "default": "0",
   "type": " float ",
   "help": " Padding factor to zero-pad   the 2d images in the tilt series prior to reconstruction.   (The final reconstructed subvolumes will be cropped to the original size). "
 },
 {
   "count": 4,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--pad3d'] ",
   "default": "0",
   "type": " float ",
   "help": " Padding factor to zero-pad   the reconstruction volume. (The final reconstructed subvolumes will be cropped to    the original size). "
 },
 {
   "count": 4,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--tilesize'] ",
   "default": "512",
   "type": " int ",
   "help": " Tile size to use for strips   when --autofit is provided. "
 },
 {
   "count": 4,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--ampcont'] ",
   "default": "0.05",
   "type": " float ",
   "help": " Default=0.05. Amplitude    contrast to use for CTF correction phase flipping. Supply it to replace the value   in ctfparamsfile(s), or if ctfparamsfile(s) are lacking altogether. "
 },
 {
   "count": 4,
   "prog": "e2spt_extractfromseg.py ",
   "option": " ['--boxsz'] ",
   "default": "32",
   "type": " int ",
   "help": " Box size "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--npeakstorefine'] ",
   "default": "4",
   "type": " int ",
   "help": " Default=1. The number of best coarse alignments to refine in search of the best final alignment. Default=1. "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--shrinkfine'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=1 (no shrinking). Optionally shrink the input volumes by an integer amount for refine alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--preprocessfine'] ",
   "default": "  ",
   "type": " str ",
   "help": " Any processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--lowpassfine'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A lowpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--highpassfine'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. A highpass filtering processor (see 'e2help.py processors -v 10' at the command line) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--precision'] ",
   "default": "1",
   "type": " float ",
   "help": " Default=1.0. Precision in pixels to use when figuring out alignment parameters automatically using --radius. Precision would be the number of pixels that the the edge of the specimen is moved (rotationally) during the finest sampling, --falign. If precision is 1, then the precision of alignment will be that of the sampling (apix of your images) times the --shrinkfine factor specified. "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--searchfine'] ",
   "default": "2",
   "type": " int ",
   "help": " \"Default=2. During FINE alignment translational search in X, Y and Z, in pixels. Default=2. This WILL overwrite any search: provided through --falign, EXCEPT if you provide --searchfine=2, which is the default. In general, just avoid providing search twice (through here and through the fine aligner --falign). If you do, just be careful to make them consistent to minimize misinterpretation and error. "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--saveallalign'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, will save the alignment parameters after each iteration "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--procfinelikecoarse'] ",
   "default": " False ",
   "type": " None ",
   "help": " If you supply this parameters, particles for fine alignment will be preprocessed identically to particles for coarse alignment by default. If you supply this, but want specific parameters for preprocessing particles for also supply: fine alignment, nd supply fine alignment parameters, such as --lowpassfine, --highpassfine, etc; to preprocess the particles for FINE alignment differently than for COARSE alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--falign'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=None. This is the second stage aligner used to fine-tune the first alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--faligncmp'] ",
   "default": " ccc.tomo.thresh ",
   "type": " str ",
   "help": " Default=ccc.tomo.thresh. The comparator used by the second stage aligner. "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--randomizewedge'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This parameter is EXPERIMENTAL. It randomizes the position of the particles BEFORE alignment, to minimize missing wedge bias and artifacts during symmetric alignment where only a fraction of space is scanned "
 },
 {
   "count": 4,
   "prog": "e2spt_hac.py ",
   "option": " ['--autocenter'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Autocenters each averaged pair during initial average generation with --btref and --hacref. Will also autocenter the average of all particles after each iteration of iterative refinement. Options are --autocenter=xform.centerofmass (self descriptive), or --autocenter=xform.centeracf, which applies auto-convolution on the average. "
 },
 {
   "count": 4,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--pad2d'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0. Padding factor (e.g., 2.0, to make the box twice as big) to zero-pad the 2d images in the tilt series for reconstruction purposes (the final reconstructed subvolumes will be cropped back to the original size though). "
 },
 {
   "count": 4,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--pad3d'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0. Padding factor (e.g., 2.0, to make the box twice as big) to zero-pad the volumes for reconstruction purposes (the final reconstructed subvolumes will be cropped back to the original size though). "
 },
 {
   "count": 4,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--reconstructor'] ",
   "default": " fourier:mode=gauss_2 ",
   "type": " str ",
   "help": " Default=fourier:mode=gauss_2. The reconstructor to use to reconstruct the tilt series into a tomogram. Type 'e2help.py reconstructors' at the command line to see all options and parameters available. To specify the interpolation scheme for the fourier reconstructor, specify 'mode'. Options are 'nearest_neighbor', 'gauss_2', 'gauss_3', 'gauss_5'. For example --reconstructor=fourier:mode=gauss_5  "
 },
 {
   "count": 4,
   "prog": "e2spt_isr.py ",
   "option": " ['--reconstructor'] ",
   "default": " fourier:mode=gauss_2 ",
   "type": " str ",
   "help": " Default=fourier:mode=gauss_2. The reconstructor to use to reconstruct the tilt series into a tomogram. Type 'e2help.py reconstructors' at the command line to see all options and parameters available. To specify the interpolation scheme for the fourier reconstructor, specify 'mode'. Options are 'nearest_neighbor', 'gauss_2', 'gauss_3', 'gauss_5'. For example --reconstructor=fourier:mode=gauss_5  "
 },
 {
   "count": 4,
   "prog": "e2spt_isr.py ",
   "option": " ['--tiltaxis'] ",
   "default": " y ",
   "type": " str ",
   "help": " Axis to produce projections about. Default is 'y'; the only other valid option is 'x'. "
 },
 {
   "count": 4,
   "prog": "e2spt_isr.py ",
   "option": " ['--pad2d'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0. Padding factor (e.g., 2.0, to make the box twice as big) to zero-pad the 2d images in the tilt series for reconstruction purposes (the final reconstructed subvolumes will be cropped back to the original size though). "
 },
 {
   "count": 4,
   "prog": "e2spt_isr.py ",
   "option": " ['--pad3d'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0. Padding factor (e.g., 2.0, to make the box twice as big) to zero-pad the volumes for reconstruction purposes (the final reconstructed subvolumes will be cropped back to the original size though). "
 },
 {
   "count": 4,
   "prog": "e2spt_make3d.py ",
   "option": " ['--ptclout'] ",
   "default": " None ",
   "type": " str ",
   "help": " 3D particle output. "
 },
 {
   "count": 4,
   "prog": "e2spt_project.py ",
   "option": " ['--maxalt'] ",
   "default": "180",
   "type": " float ",
   "help": " Maximum alignment altitude to include. Deafult=180 "
 },
 {
   "count": 2,
   "prog": "e2spt_refine.py ",
   "option": " ['--reference', '--ref'] ",
   "default": "  ",
   "type": " None ",
   "help": " 3D reference for iterative alignment/averaging. No reference is used by default. <name> or <name>,# "
 },
 {
   "count": 4,
   "prog": "e2spt_refine.py ",
   "option": " ['--restarget'] ",
   "default": "0",
   "type": " float ",
   "help": " The resolution you reasonably expect to achieve in the current refinement run in A. "
 },
 {
   "count": 4,
   "prog": "e2spt_refine.py ",
   "option": " ['--refinentry'] ",
   "default": "8",
   "type": " int ",
   "help": " Number of local perturbations to initialize local alignment with (default=8) "
 },
 {
   "count": 4,
   "prog": "e2spt_refine.py ",
   "option": " ['--resume'] ",
   "default": " False ",
   "type": " None ",
   "help": " resume from previous run "
 },
 {
   "count": 4,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--restarget'] ",
   "default": "0",
   "type": " float ",
   "help": " The resolution you reasonably expect to achieve in the current refinement run (in A). "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--restarget'] ",
   "default": "-1",
   "type": " float ",
   "help": " Filters each map at the end of each iteration to this resolution (in A) since FSC isn't available "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--saveallalign'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, will save the alignment parameters after each iteration "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--preprocessfine'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=''. Any processor (as in e2proc3d.py) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--lowpassfine'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None.A lowpass filtering processor (as in e2proc3d.py) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--highpassfine'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None.A highpass filtering processor (as in e2proc3d.py) to be applied to each volume prior to FINE alignment. Not applied to aligned particles before averaging. "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--procfinelikecoarse'] ",
   "default": " True ",
   "type": " bool ",
   "help": " Turn on with --procfinelikecoarse=False, and supply fine alignment parameters, such as --lowpassfine, --highpassfine, etc; to preprocess the particles for FINE alignment differently than for COARSE alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--npeakstorefine'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=1. The number of best coarse alignments to refine in search of the best final alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--falign'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None (not used). This is the second stage aligner used to fine-tune the first alignment. Specify 'None' to disable. "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--faligncmp'] ",
   "default": " ccc.tomo.thresh ",
   "type": " str ",
   "help": " The comparator used by the second stage aligner. Default is the internal tomographic ccc.tomo.thresh. "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--randomizewedge'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This parameter is EXPERIMENTAL. It randomizes the position of the particles BEFORE alignment, to minimize missing wedge bias and artifacts during symmetric alignment where only a fraction of space is scanned "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--autocenter'] ",
   "default": "  ",
   "type": " str ",
   "help": " WARNING: Experimental. Default=None. Autocenters each averaged pair during initial average generation with --btref and --hacref. Will also autocenter the average of all particles after each iteration of iterative refinement. Options are --autocenter=xform.centerofmass (self descriptive), or --autocenter=xform.centeracf, which applies auto-convolution on the average. "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--shrinkfine'] ",
   "default": "0",
   "type": " int ",
   "help": " Optionally shrink the input volumes by an integer amount for fine alignment. "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--searchfine'] ",
   "default": "2",
   "type": " int ",
   "help": " \"During FINE alignment translational search in X, Y and Z, in pixels. Default=2. This WILL overwrite any search: provided through --falign, EXCEPT if you provide --searchfine=2, which is the default. In general, just avoid providing search twice (through here and through the fine aligner --falign). If you do, just be careful to make them consistent to minimize misinterpretation and error. "
 },
 {
   "count": 4,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--precision'] ",
   "default": "1",
   "type": " float ",
   "help": " Default=1.0. Precision in pixels to use when figuring out alignment parameters automatically using --radius. Precision would be the number of pixels that the the edge of the specimen is moved (rotationally) during the finest sampling, --falign. If precision is 1, then the precision of alignment will be that of the sampling (apix of your images) times the --shrinkfine factor specified. "
 },
 {
   "count": 4,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--cutoff'] ",
   "default": "0.5",
   "type": " str ",
   "help": " Comma separated values of cutoff thresholds to plot as horizontal lines. Default=0.5, to turn of supply 'None'.  "
 },
 {
   "count": 2,
   "prog": "e2spt_sgd.py ",
   "option": " ['--reference', '--ref'] ",
   "default": "  ",
   "type": " str ",
   "help": " 3D reference for initial model generation. No reference is used by default. "
 },
 {
   "count": 4,
   "prog": "e2spt_simulation.py ",
   "option": " ['--pad3d'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0. Factor to calculate the boxsize to use for 3D reconstruction. For example, if the model in --input has an original boxsize with its largest dimension of 64 and you enter --pad3d=1.5x, then the volume used for 3D reconstruction will be 1.5*64, that is, 96. If you provide --shrink, for example, --shrink=2, then the reconstruction box will be 64/2 * 1.5 = 48. Make sure to supply --clip to clip the simulated subtomograms to the final desired box size; otherwise they will be clipped to the current largest dimension of the supplied model/volume. "
 },
 {
   "count": 4,
   "prog": "e2spt_simulation.py ",
   "option": " ['--pad2d'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0. Factor to pad projections in the tilt series by before reconstruction. "
 },
 {
   "count": 4,
   "prog": "e2spt_simulation.py ",
   "option": " ['--reconstructor'] ",
   "default": " fourier ",
   "type": " str ",
   "help": " Default=fourier. The reconstructor to use to reconstruct the tilt series into a tomogram. Type 'e2help.py reconstructors' at the command line to see all options and parameters available. To specify the interpolation scheme for the fourier reconstruction, specify 'mode'. Options are 'nearest_neighbor', 'gauss_2', 'gauss_3', 'gauss_5', 'gauss_5_slow', 'gypergeom_5', 'experimental'. For example --reconstructor=fourier:mode=gauss_5  "
 },
 {
   "count": 4,
   "prog": "e2spt_simulation.py ",
   "option": " ['--tiltaxis'] ",
   "default": " y ",
   "type": " str ",
   "help": " Default=y. Axis to produce projections about. The only other valid option is 'x'. "
 },
 {
   "count": 4,
   "prog": "e2spt_simulation.py ",
   "option": " ['--ampcont'] ",
   "default": "0.05",
   "type": " float ",
   "help": " Default=0.05. Amplitude contrast to use for CTF correction phase flipping. "
 },
 {
   "count": 4,
   "prog": "e2spt_structfac.py ",
   "option": " ['--even'] ",
   "default": " None ",
   "type": " str ",
   "help": " even threed file "
 },
 {
   "count": 4,
   "prog": "e2spt_structfac.py ",
   "option": " ['--cutoff'] ",
   "default": "20",
   "type": " float ",
   "help": " cutoff "
 },
 {
   "count": 4,
   "prog": "e2spt_subtilt_from_imod.py ",
   "option": " ['--ptclout'] ",
   "default": " None ",
   "type": " str ",
   "help": " File name of output 2D extracted particles. "
 },
 {
   "count": 4,
   "prog": "e2spt_subtilt_from_imod.py ",
   "option": " ['--boxsz'] ",
   "default": "-1",
   "type": " int ",
   "help": " Box size of extracted 2D particles. "
 },
 {
   "count": 4,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--boxsz'] ",
   "default": "-1",
   "type": " int ",
   "help": " Overwrite box size "
 },
 {
   "count": 4,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--maxalt'] ",
   "default": "45",
   "type": " float ",
   "help": " max altitude to insert to volume "
 },
 {
   "count": 4,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--resume'] ",
   "default": " False ",
   "type": " None ",
   "help": " continue from previous run "
 },
 {
   "count": 4,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--refinentry'] ",
   "default": "8",
   "type": " int ",
   "help": " number of starting points for refine alignment "
 },
 {
   "count": 4,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--ptclout'] ",
   "default": " None ",
   "type": " str ",
   "help": " particle output "
 },
 {
   "count": 4,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--fromscratch'] ",
   "default": " False ",
   "type": " None ",
   "help": " align from scratch and ignore previous particle transforms. for spt mostly. will include mirror "
 },
 {
   "count": 4,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--refinentry'] ",
   "default": "4",
   "type": " int ",
   "help": " number of starting points for refine alignment "
 },
 {
   "count": 4,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--tilesize'] ",
   "default": "256",
   "type": " int ",
   "help": " Size of tile to calculate FFT, default is 256 "
 },
 {
   "count": 4,
   "prog": "e2stackanim.py ",
   "option": " ['--last'] ",
   "default": "0",
   "type": " int ",
   "help": " Number of last image to use "
 },
 {
   "count": 4,
   "prog": "e2symsearch3d.py ",
   "option": " ['--average'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If supplied and a stack is provided through --input, the average of the aligned and/or symmetrized stack will also be saved. "
 },
 {
   "count": 4,
   "prog": "e2tilefile.py ",
   "option": " ['--tilesize'] ",
   "default": "256",
   "type": " int ",
   "help": " Build a new tile file from this image "
 },
 {
   "count": 4,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--ampcont'] ",
   "default": "0.05",
   "type": " float ",
   "help": " Default=0.05. Amplitude contrast to use for CTF correction phase flipping. "
 },
 {
   "count": 4,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--tilesize'] ",
   "default": "256",
   "type": " int ",
   "help": " Tile size to use for strips when --autofit is provided. "
 },
 {
   "count": 4,
   "prog": "e2tomo_mwfill.py ",
   "option": " ['--boxsz'] ",
   "default": "128",
   "type": " int ",
   "help": " box size "
 },
 {
   "count": 4,
   "prog": "e2tomogram.py ",
   "option": " ['--outsize'] ",
   "default": " 1k ",
   "type": " str ",
   "help": " Size of output tomograms. choose from 1k, 2k and 4k. default is 1k "
 },
 {
   "count": 3,
   "prog": "e2RCTboxer.py ",
   "option": " ['--write_ptcls'] ",
   "default": " False ",
   "type": " None ",
   "help": " Write particles to disk "
 },
 {
   "count": 3,
   "prog": "e2RCTboxer.py ",
   "option": " ['--norm'] ",
   "default": " normalize.edgemean ",
   "type": " str ",
   "help": " Normalization processor to apply to written particle images. Should be normalize, normalize.edgemean,etc.Specifc \"None\" to turn this off "
 },
 {
   "count": 3,
   "prog": "e2a2d_masks.py ",
   "option": " ['--extract'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, will also produce a .txt file for plotting with all of the per-particle statistics "
 },
 {
   "count": 3,
   "prog": "e2a2d_stat.py ",
   "option": " ['--extract'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, will convert the .json file to a .txt file suitable for plotting. No histogramming is involved, this is a per-particle conversion "
 },
 {
   "count": 3,
   "prog": "e2align3d.py ",
   "option": " ['--cuda'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use CUDA for the alignment step. "
 },
 {
   "count": 3,
   "prog": "e2align3d.py ",
   "option": " ['--delta'] ",
   "default": "30",
   "type": " float ",
   "help": " step size for the orientation generator, default=30.0 "
 },
 {
   "count": 3,
   "prog": "e2bdb.py ",
   "option": " ['--merge'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will merge the contents of BDB 2-N into BDB 1 (including BDB 1's contents) "
 },
 {
   "count": 3,
   "prog": "e2bdb.py ",
   "option": " ['--list'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify the name of a file with a list of images to use in creation of virtual stacks. Please see source for details. "
 },
 {
   "count": 3,
   "prog": "e2boxer.py ",
   "option": " ['--write_ptcls'] ",
   "default": " False ",
   "type": " None ",
   "help": " Extract selected particles from micrographs and write to disk "
 },
 {
   "count": 3,
   "prog": "e2boxer.py ",
   "option": " ['--device'] ",
   "default": " cpu ",
   "type": " str ",
   "help": " For Convnet training only. Pick a device to use. chose from cpu, gpu, or gpuX (X=0,1,...) when multiple gpus are available. default is cpu "
 },
 {
   "count": 3,
   "prog": "e2boxer_old.py ",
   "option": " ['--write_ptcls'] ",
   "default": " False ",
   "type": " None ",
   "help": " Write particles to disk "
 },
 {
   "count": 3,
   "prog": "e2boxer_old.py ",
   "option": " ['--norm'] ",
   "default": " normalize.edgemean ",
   "type": " str ",
   "help": " Normalization processor to apply to written particle images. Should be normalize, normalize.edgemean,etc.Specific \"None\" to turn this off "
 },
 {
   "count": 3,
   "prog": "e2buildsets.py ",
   "option": " ['--minptcl'] ",
   "default": "0",
   "type": " int ",
   "help": " Files with fewer than the specified number of particles will be skipped "
 },
 {
   "count": 3,
   "prog": "e2buildsets.py ",
   "option": " ['--minqual'] ",
   "default": "0",
   "type": " int ",
   "help": " Files with a quality value lower than specified will be skipped "
 },
 {
   "count": 3,
   "prog": "e2classaverage.py ",
   "option": " ['--automask'] ",
   "default": " False ",
   "type": " None ",
   "help": " Applies a 2-D automask before centering. Can help with negative stain data, and other cases where centering is poor. "
 },
 {
   "count": 3,
   "prog": "e2classaverage.py ",
   "option": " ['--odd'] ",
   "default": " False ",
   "type": " None ",
   "help": " Used by EMAN2 when running eotests. Includes only odd numbered particles in class averages. "
 },
 {
   "count": 3,
   "prog": "e2classesbyref.py ",
   "option": " ['--invartype'] ",
   "default": " auto ",
   "type": " None ",
   "help": " Which type of invariants to generate: (bispec,harmonic) "
 },
 {
   "count": 3,
   "prog": "e2classesbyref.py ",
   "option": " ['--nbasisfp'] ",
   "default": "12",
   "type": " int ",
   "help": " Only used in MSA mode. Number of MSA basis vectors to use when classifying particles, default=12 "
 },
 {
   "count": 3,
   "prog": "e2classifycnn.py ",
   "option": " ['--gpuid'] ",
   "default": "  ",
   "type": " str ",
   "help": " Specify the gpu to use "
 },
 {
   "count": 3,
   "prog": "e2classifytree.py ",
   "option": " ['--cmpdiff'] ",
   "default": " False ",
   "type": " None ",
   "help": " Compare using the difference of the two children "
 },
 {
   "count": 3,
   "prog": "e2compress.py ",
   "option": " ['--range'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify <minval>,<maxval> representing the largest and smallest values to be saved in the output file. Automatic if unspecified. "
 },
 {
   "count": 3,
   "prog": "e2ctf.py ",
   "option": " ['--minptcl'] ",
   "default": "0",
   "type": " int ",
   "help": " Files with fewer than the specified number of particles will be skipped "
 },
 {
   "count": 3,
   "prog": "e2ctf.py ",
   "option": " ['--minqual'] ",
   "default": "0",
   "type": " int ",
   "help": " Files with a quality value lower than specified will be skipped "
 },
 {
   "count": 3,
   "prog": "e2ctf.py ",
   "option": " ['--curdefocusfix'] ",
   "default": " False ",
   "type": " None ",
   "help": " Fixes the defocus at the current determined value (if any) (+-.001 um), but recomputes SSNR, etc. "
 },
 {
   "count": 3,
   "prog": "e2ctf.py ",
   "option": " ['--constbfactor'] ",
   "default": "-1",
   "type": " float ",
   "help": " Set B-factor to fixed specified value, negative value autofits "
 },
 {
   "count": 3,
   "prog": "e2ctf.py ",
   "option": " ['--extrapad'] ",
   "default": " False ",
   "type": " None ",
   "help": " If particles were boxed more tightly than EMAN requires, this will add some extra padding, but only to processed output particles "
 },
 {
   "count": 3,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--first'] ",
   "default": "-1",
   "type": " int ",
   "help": " First image to include in the plot. "
 },
 {
   "count": 3,
   "prog": "e2ctf_auto.py ",
   "option": " ['--curdefocusfix'] ",
   "default": " False ",
   "type": " None ",
   "help": " Recomputes everything, but maintains the current particle-based defocus/astigmatism, including any manual adjustments "
 },
 {
   "count": 3,
   "prog": "e2ctf_auto.py ",
   "option": " ['--extrapad'] ",
   "default": " False ",
   "type": " None ",
   "help": " If particles were boxed more tightly than EMAN requires, this will add some extra padding "
 },
 {
   "count": 3,
   "prog": "e2ctf_auto.py ",
   "option": " ['--invartype'] ",
   "default": " auto ",
   "type": " None ",
   "help": " Which type of invariants to generate: (bispec,harmonic) "
 },
 {
   "count": 3,
   "prog": "e2ctf_auto.py ",
   "option": " ['--constbfactor'] ",
   "default": "-1",
   "type": " float ",
   "help": " Set B-factor to fixed specified value, negative value autofits "
 },
 {
   "count": 3,
   "prog": "e2ctf_auto.py ",
   "option": " ['--minqual'] ",
   "default": "0",
   "type": " int ",
   "help": " Files with a quality value lower than specified will be skipped "
 },
 {
   "count": 3,
   "prog": "e2ddd_external.py ",
   "option": " ['--device'] ",
   "default": " gpu ",
   "type": " str ",
   "help": " When possible, use this device to process movie frames. Default is gpu. "
 },
 {
   "count": 3,
   "prog": "e2ddd_external.py ",
   "option": " ['--first'] ",
   "default": " None ",
   "type": " int ",
   "help": " The index of the leading frame to include in alignment. "
 },
 {
   "count": 3,
   "prog": "e2ddd_movie.py ",
   "option": " ['--noali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Average of non-aligned frames. "
 },
 {
   "count": 3,
   "prog": "e2erasefiducials.py ",
   "option": " ['--coords'] ",
   "default": "  ",
   "type": " str ",
   "help": " Specify box file with x and y gold coordinates. Must follow standard box file format (x<tab>y<tab>xsize<ysize>) although box sizes are ignored. "
 },
 {
   "count": 3,
   "prog": "e2euler_refine.py ",
   "option": " ['--input_model'] ",
   "default": " None ",
   "type": " None ",
   "help": " If the class-averages have the model_id parameter (produced by e2refinemulti.py), this will use only class-averages with the specified model_id for the reconstruction. "
 },
 {
   "count": 3,
   "prog": "e2evalimage.py ",
   "option": " ['--constbfactor'] ",
   "default": "-1",
   "type": " float ",
   "help": " Set B-factor to fixed specified value, negative value autofits "
 },
 {
   "count": 3,
   "prog": "e2extractsubparticles.py ",
   "option": " ['--invartype'] ",
   "default": " auto ",
   "type": " None ",
   "help": " Which type of invariants to generate: (bispec,harmonic) "
 },
 {
   "count": 3,
   "prog": "e2fsc_local.py ",
   "option": " ['--odd'] ",
   "default": "  ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 3,
   "prog": "e2import.py ",
   "option": " ['--rawtlt'] ",
   "default": " None ",
   "type": " None ",
   "help": " Specify an imod/serialem rawtlt file, and imported tilt series will be sorted in tilt sequence instead of collection sequence, 'auto' will attempt to find a .tlt file automatically "
 },
 {
   "count": 3,
   "prog": "e2import.py ",
   "option": " ['--curdefocusfix'] ",
   "default": " False ",
   "type": " None ",
   "help": " Used with import_eman1, will use EMAN1 defocus unchanged (+-.001 um) "
 },
 {
   "count": 3,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--ptcls'] ",
   "default": " None ",
   "type": " str ",
   "help": " Class average or particles input. "
 },
 {
   "count": 3,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--targetres'] ",
   "default": "20",
   "type": " float ",
   "help": " Target resolution "
 },
 {
   "count": 3,
   "prog": "e2make3d.py ",
   "option": " ['--input_model'] ",
   "default": " None ",
   "type": " None ",
   "help": " If the class-averages have the model_id parameter (produced by e2refinemulti.py), this will use only class-averages with the specified model_id for the reconstruction. "
 },
 {
   "count": 3,
   "prog": "e2make3dpar.py ",
   "option": " ['--input_model'] ",
   "default": " None ",
   "type": " None ",
   "help": " If the class-averages have the model_id parameter (produced by e2refinemulti.py), this will use only class-averages with the specified model_id for the reconstruction. "
 },
 {
   "count": 3,
   "prog": "e2proc2d.py ",
   "option": " ['--add'] ",
   "default": " None ",
   "type": " float ",
   "help": " Adds a constant 'f' to the densities "
 },
 {
   "count": 3,
   "prog": "e2proc2d.py ",
   "option": " ['--first'] ",
   "default": "0",
   "type": " int ",
   "help": " the first image in the input to process [0 - n-1]) "
 },
 {
   "count": 3,
   "prog": "e2proc2d.py ",
   "option": " ['--list'] ",
   "default": " None ",
   "type": " str ",
   "help": " Works only on the image numbers in LIST file "
 },
 {
   "count": 3,
   "prog": "e2proc2d.py ",
   "option": " ['--meanshrink'] ",
   "default": " None ",
   "type": " float ",
   "help": " Reduce an image size by an integral (1.5 also allowed) scaling factor using average. eg - 2 will reduce image size to 1/2. Clip is not required. "
 },
 {
   "count": 3,
   "prog": "e2proc2d.py ",
   "option": " ['--medianshrink'] ",
   "default": " None ",
   "type": " int ",
   "help": " Reduce an image size by an integral scaling factor, uses median filter. eg - 2 will reduce image size to 1/2. Clip is not required. "
 },
 {
   "count": 3,
   "prog": "e2proc2d.py ",
   "option": " ['--randomize'] ",
   "default": " None ",
   "type": " str ",
   "help": " Randomly rotate/translate the image. Specify: da,dxy,flip  da is a uniform distribution over +-da degrees, dxy is a uniform distribution on x/y, if flip is 1, random handedness changes will occur "
 },
 {
   "count": 3,
   "prog": "e2proc2d.py ",
   "option": " ['--rotate'] ",
   "default": " None ",
   "type": " float ",
   "help": " Rotate clockwise (in degrees) "
 },
 {
   "count": 3,
   "prog": "e2proc2d.py ",
   "option": " ['--fp'] ",
   "default": " None ",
   "type": " int ",
   "help": " This generates rotational/translational 'footprints' for each input particle, the number indicates which algorithm to use (0-6) "
 },
 {
   "count": 3,
   "prog": "e2proc2d.py ",
   "option": " ['--selfcl'] ",
   "default": " None ",
   "type": " int ",
   "help": " Output file will be a 180x180 self-common lines map for each image. "
 },
 {
   "count": 3,
   "prog": "e2proc2d.py ",
   "option": " ['--translate'] ",
   "default": " None ",
   "type": " str ",
   "help": " Translate by x,y pixels "
 },
 {
   "count": 3,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--meanshrink'] ",
   "default": " None ",
   "type": " int ",
   "help": " Reduce an image size by an integral scaling factor using average. Clip is not required. "
 },
 {
   "count": 3,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--medianshrink'] ",
   "default": " None ",
   "type": " int ",
   "help": " Reduce an image size by an integral scaling factor, uses median filter. Clip is not required. "
 },
 {
   "count": 3,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--randomize'] ",
   "default": " None ",
   "type": " str ",
   "help": " Randomly rotate/translate the image. Specify: da,dxy,flip  da is a uniform distribution over +-da degrees, dxy is a uniform distribution on x/y, if flip is 1, random handedness changes will occur "
 },
 {
   "count": 3,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--rotate'] ",
   "default": " None ",
   "type": " float ",
   "help": " Rotate clockwise (in degrees) "
 },
 {
   "count": 3,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--fp'] ",
   "default": " None ",
   "type": " int ",
   "help": " This generates rotational/translational 'footprints' for each input particle, the number indicates which algorithm to use (0-6) "
 },
 {
   "count": 3,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--selfcl'] ",
   "default": " None ",
   "type": " int ",
   "help": " Output file will be a 180x180 self-common lines map for each image. "
 },
 {
   "count": 3,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--translate'] ",
   "default": " None ",
   "type": " str ",
   "help": " Translate by x,y pixels "
 },
 {
   "count": 3,
   "prog": "e2proc2dpar.py ",
   "option": " ['--add'] ",
   "default": " None ",
   "type": " float ",
   "help": " Adds a constant 'f' to the densities "
 },
 {
   "count": 3,
   "prog": "e2proc2dpar.py ",
   "option": " ['--meanshrink'] ",
   "default": " None ",
   "type": " float ",
   "help": " Reduce an image size by an integral (1.5 also allowed) scaling factor using average. eg - 2 will reduce image size to 1/2. Clip is not required. "
 },
 {
   "count": 3,
   "prog": "e2proc2dpar.py ",
   "option": " ['--medianshrink'] ",
   "default": " None ",
   "type": " int ",
   "help": " Reduce an image size by an integral scaling factor, uses median filter. eg - 2 will reduce image size to 1/2. Clip is not required. "
 },
 {
   "count": 3,
   "prog": "e2proc2dpar.py ",
   "option": " ['--randomize'] ",
   "default": " None ",
   "type": " str ",
   "help": " Randomly rotate/translate the image. Specify: da,dxy,flip  da is a uniform distribution over +-da degrees, dxy is a uniform distribution on x/y, if flip is 1, random handedness changes will occur "
 },
 {
   "count": 3,
   "prog": "e2proc2dpar.py ",
   "option": " ['--rotate'] ",
   "default": " None ",
   "type": " float ",
   "help": " Rotate clockwise (in degrees) "
 },
 {
   "count": 3,
   "prog": "e2proc2dpar.py ",
   "option": " ['--fp'] ",
   "default": " None ",
   "type": " int ",
   "help": " This generates rotational/translational 'footprints' for each input particle, the number indicates which algorithm to use (0-6) "
 },
 {
   "count": 3,
   "prog": "e2proc2dpar.py ",
   "option": " ['--selfcl'] ",
   "default": " None ",
   "type": " int ",
   "help": " Output file will be a 180x180 self-common lines map for each image. "
 },
 {
   "count": 3,
   "prog": "e2proc2dpar.py ",
   "option": " ['--translate'] ",
   "default": " None ",
   "type": " str ",
   "help": " Translate by x,y pixels "
 },
 {
   "count": 3,
   "prog": "e2proc3d_huge.py ",
   "option": " ['--add'] ",
   "default": " None ",
   "type": " float ",
   "help": " Adds a constant 'f' to the densities "
 },
 {
   "count": 3,
   "prog": "e2proclst.py ",
   "option": " ['--include'] ",
   "default": " None ",
   "type": " str ",
   "help": " only works if --create is supplied. comma-separated list of indexes to take from the input file(s) to INCLUDE in the created .lst file. if you have the list of indexes to include in a .txt file, you can provide it through --list. "
 },
 {
   "count": 3,
   "prog": "e2proclst.py ",
   "option": " ['--list'] ",
   "default": " None ",
   "type": " str ",
   "help": " only works if --create is supplied. .txt file with a list of indexes (one per line/row) to take from the input file(s) to INCLUDE in the created .lst file. "
 },
 {
   "count": 3,
   "prog": "e2proclst.py ",
   "option": " ['--merge'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify the output name here. This will concatenate all of the input .lst files into a single output "
 },
 {
   "count": 3,
   "prog": "e2proclst.py ",
   "option": " ['--range'] ",
   "default": " None ",
   "type": " str ",
   "help": " Range of particles to use. Works only with --create option. Input of 0,10,2 means range(0,10, step=2). "
 },
 {
   "count": 3,
   "prog": "e2procpdb.py ",
   "option": " ['--include'] ",
   "default": " ['helix', 'sheet', 'other'] ",
   "type": " str ",
   "help": " savetype "
 },
 {
   "count": 3,
   "prog": "e2proctxt.py ",
   "option": " ['--merge'] ",
   "default": " None ",
   "type": " str ",
   "help": " Merge several files into a single output. All inputs must have the same number of rows. Row comments stripped. "
 },
 {
   "count": 3,
   "prog": "e2project3d.py ",
   "option": " ['--projector'] ",
   "default": " standard ",
   "type": " None ",
   "help": " Projector to use "
 },
 {
   "count": 3,
   "prog": "e2project3d.py ",
   "option": " ['--cuda'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use CUDA for the projections. "
 },
 {
   "count": 3,
   "prog": "e2project3d.py ",
   "option": " ['--prethreshold'] ",
   "default": " False ",
   "type": " None ",
   "help": " Applies an automatic threshold to the volume before projecting "
 },
 {
   "count": 3,
   "prog": "e2rct.py ",
   "option": " ['--cuda'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use CUDA for the alignment step. "
 },
 {
   "count": 3,
   "prog": "e2refine2d.py ",
   "option": " ['--nbasisfp'] ",
   "default": "12",
   "type": " int ",
   "help": " Number of MSA basis vectors to use when classifying particles "
 },
 {
   "count": 3,
   "prog": "e2refine2d.py ",
   "option": " ['--automask'] ",
   "default": " False ",
   "type": " None ",
   "help": " Automasking during class-averaging to help with centering when particle density is high "
 },
 {
   "count": 3,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--nbasisfp'] ",
   "default": "8",
   "type": " int ",
   "help": " Number of MSA basis vectors to use when classifying particles "
 },
 {
   "count": 3,
   "prog": "e2refine_easy.py ",
   "option": " ['--targetres'] ",
   "default": "25",
   "type": " float ",
   "help": " Target resolution in A of this refinement run. Usually works best in at least two steps (low/medium resolution, then final resolution) when starting with a poor starting model. Usually 3-4 iterations is sufficient. "
 },
 {
   "count": 3,
   "prog": "e2refine_easy.py ",
   "option": " ['--prethreshold'] ",
   "default": " False ",
   "type": " None ",
   "help": " Applies a threshold to the volume just before generating projections. A sort of aggressive solvent flattening for the reference. "
 },
 {
   "count": 3,
   "prog": "e2refine_easy.py ",
   "option": " ['--m3dkeep'] ",
   "default": "0.8",
   "type": " float ",
   "help": " The fraction of slices to keep in e2make3d.py. Default=0.8 -> 80%% "
 },
 {
   "count": 3,
   "prog": "e2refine_easy.py ",
   "option": " ['--projector'] ",
   "default": " standard ",
   "type": " None ",
   "help": " Default=standard. Projector to use with parameters. "
 },
 {
   "count": 3,
   "prog": "e2refine_easy.py ",
   "option": " ['--simmask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. A file containing a single 0/1 image to apply as a mask before comparison but after alignment "
 },
 {
   "count": 3,
   "prog": "e2refine_easy.py ",
   "option": " ['--shrinks1'] ",
   "default": "0",
   "type": " int ",
   "help": " The level of shrinking to apply in the first stage of the two-stage classification process. Default=0 (autoselect) "
 },
 {
   "count": 3,
   "prog": "e2refine_easy.py ",
   "option": " ['--cmpdiff'] ",
   "default": " False ",
   "type": " None ",
   "help": " Used only in binary tree classification. Use a mask that focus on the difference of two children. "
 },
 {
   "count": 3,
   "prog": "e2refine_easy.py ",
   "option": " ['--m3dkeepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=auto. The standard deviation alternative to the --m3dkeep argument "
 },
 {
   "count": 3,
   "prog": "e2refine_easy.py ",
   "option": " ['--m3dpreprocess'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. Normalization processor applied before 3D reconstruction "
 },
 {
   "count": 3,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--odd'] ",
   "default": " None ",
   "type": " str ",
   "help": " The filename of the map from the odd 1/2 of the data "
 },
 {
   "count": 3,
   "prog": "e2refine_split.py ",
   "option": " ['--minptcl'] ",
   "default": "20",
   "type": " int ",
   "help": " Minimum number of particles in a class. Classes with fewer particles will be excluded. "
 },
 {
   "count": 3,
   "prog": "e2refinemulti.py ",
   "option": " ['--targetres'] ",
   "default": "12",
   "type": " float ",
   "help": " Target resolution in A of the final single-model refinements. "
 },
 {
   "count": 3,
   "prog": "e2refinemulti.py ",
   "option": " ['--prethreshold'] ",
   "default": " False ",
   "type": " None ",
   "help": " Applies a threshold to the volume just before generating projections. A sort of aggressive solvent flattening for the reference. "
 },
 {
   "count": 3,
   "prog": "e2refinemulti.py ",
   "option": " ['--m3dkeep'] ",
   "default": "0.8",
   "type": " float ",
   "help": " The fraction of slices to keep in e2make3d.py. Default=0.8 -> 80%% "
 },
 {
   "count": 3,
   "prog": "e2refinemulti.py ",
   "option": " ['--projector'] ",
   "default": " standard ",
   "type": " None ",
   "help": " Default=standard. Projector to use with parameters. "
 },
 {
   "count": 3,
   "prog": "e2refinemulti.py ",
   "option": " ['--simmask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. A file containing a single 0/1 image to apply as a mask before comparison but after alignment "
 },
 {
   "count": 3,
   "prog": "e2refinemulti.py ",
   "option": " ['--shrinks1'] ",
   "default": "0",
   "type": " int ",
   "help": " The level of shrinking to apply in the first stage of the two-stage classification process. Default=0 (autoselect) "
 },
 {
   "count": 3,
   "prog": "e2refinemulti.py ",
   "option": " ['--cmpdiff'] ",
   "default": " False ",
   "type": " None ",
   "help": " Used only in binary tree classification. Use a mask that focus on the difference of two children. "
 },
 {
   "count": 3,
   "prog": "e2refinemulti.py ",
   "option": " ['--m3dkeepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=auto. The standard deviation alternative to the --m3dkeep argument "
 },
 {
   "count": 3,
   "prog": "e2refinemulti.py ",
   "option": " ['--m3dpreprocess'] ",
   "default": " normalize.edgemean ",
   "type": " str ",
   "help": " Default=auto. Normalization processor applied before 3D reconstruction "
 },
 {
   "count": 3,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--symcopy'] ",
   "default": " False ",
   "type": " None ",
   "help": " symcopy "
 },
 {
   "count": 3,
   "prog": "e2refinevariance.py ",
   "option": " ['--m3dkeep'] ",
   "default": " None ",
   "type": " float ",
   "help": " The percentage of slices to keep in e2make3d.py "
 },
 {
   "count": 3,
   "prog": "e2refinevariance.py ",
   "option": " ['--m3dkeepsig'] ",
   "default": " False ",
   "type": " None ",
   "help": " The standard deviation alternative to the --m3dkeep argument "
 },
 {
   "count": 3,
   "prog": "e2refinevariance.py ",
   "option": " ['--m3dpreprocess'] ",
   "default": " normalize.edgemean ",
   "type": " str ",
   "help": " Normalization processor applied before 3D reconstruction "
 },
 {
   "count": 3,
   "prog": "e2scannereval.py ",
   "option": " ['--norm'] ",
   "default": " False ",
   "type": " None ",
   "help": " Normalize the image before analysis "
 },
 {
   "count": 3,
   "prog": "e2simmx.py ",
   "option": " ['--range'] ",
   "default": " None ",
   "type": " str ",
   "help": " Range of images to process (c0,r0,c1,r1) c0,r0 inclusive c1,r1 exclusive "
 },
 {
   "count": 3,
   "prog": "e2simmx2stage.py ",
   "option": " ['--shrinks1'] ",
   "default": "2",
   "type": " float ",
   "help": " Shrinking performed for first stage classification, default=2 "
 },
 {
   "count": 3,
   "prog": "e2spa_align.py ",
   "option": " ['--localrefine'] ",
   "default": " False ",
   "type": " None ",
   "help": " local refinement "
 },
 {
   "count": 3,
   "prog": "e2spt_align.py ",
   "option": " ['--goldstandard'] ",
   "default": "0",
   "type": " float ",
   "help": " If specified, will phase randomize the even and odd references past the specified resolution (in A, not 1/A) "
 },
 {
   "count": 3,
   "prog": "e2spt_align.py ",
   "option": " ['--randphi'] ",
   "default": " False ",
   "type": " None ",
   "help": " randomize phi during refine alignment "
 },
 {
   "count": 3,
   "prog": "e2spt_align.py ",
   "option": " ['--rand180'] ",
   "default": " False ",
   "type": " None ",
   "help": " randomly add a 180 degree rotation during refine alignment "
 },
 {
   "count": 3,
   "prog": "e2spt_align.py ",
   "option": " ['--skipali'] ",
   "default": " False ",
   "type": " None ",
   "help": " skip alignment. the program will do nothing. mostly for testing... "
 },
 {
   "count": 3,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--use3d'] ",
   "default": " False ",
   "type": " None ",
   "help": " use projection of 3d particles instead of 2d sub tilt series "
 },
 {
   "count": 3,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--skipali'] ",
   "default": " False ",
   "type": " None ",
   "help": " . "
 },
 {
   "count": 3,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--tiltangles'] ",
   "default": "  ",
   "type": " str ",
   "help": " File in .tlt or .txt format containing the tilt angle of each tilt image in the tiltseries. "
 },
 {
   "count": 3,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--automask'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Will automask the tomogram 2 sigmas above mean. "
 },
 {
   "count": 3,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--nkeep'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Total number of particles to keep right before writing the coordinates file and output stack. Supersedes --keep "
 },
 {
   "count": 3,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--cshrink'] ",
   "default": "0",
   "type": " int ",
   "help": " If the tomogram was PREVIOUSLY shrunk, --cshrink is the factor by which the tomogram supplied through --tomogram was shrunk with respect to                the raw (unshrunk) tomogram. This CAN work in conjuction with --shrinktomo, so be careful. If both parameters are specified,               the coordinates found by the autoboxer will be multiplied by BOTH factors. "
 },
 {
   "count": 3,
   "prog": "e2spt_average.py ",
   "option": " ['--simthr'] ",
   "default": "-0.1",
   "type": " float ",
   "help": " Similarity is smaller for better 'quality' particles. Specify the highest value to include from e2spt_hist.py. Default -0.1 "
 },
 {
   "count": 3,
   "prog": "e2spt_average.py ",
   "option": " ['--replace'] ",
   "default": " None ",
   "type": " str ",
   "help": " Replace the input subtomograms used for alignment with the specified file (used when the aligned particles were masked or filtered) "
 },
 {
   "count": 3,
   "prog": "e2spt_average.py ",
   "option": " ['--minalt'] ",
   "default": "0",
   "type": " float ",
   "help": " Minimum alignment altitude to include. Default=0 "
 },
 {
   "count": 3,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--simthr'] ",
   "default": "-0.1",
   "type": " float ",
   "help": " Similarity is smaller for better 'quality' particles. Specify the highest value to include from e2spt_hist.py. Default -0.1 "
 },
 {
   "count": 3,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--replace'] ",
   "default": " None ",
   "type": " str ",
   "help": " Replace the input subtomograms used for alignment with the specified file (used when the aligned particles were masked or filtered) "
 },
 {
   "count": 3,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--minalt'] ",
   "default": "0",
   "type": " float ",
   "help": " Minimum alignment altitude to include. Default=0 "
 },
 {
   "count": 3,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--applysym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": " Symmetry to apply to the structure after classification. "
 },
 {
   "count": 3,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--noali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Skip translational alignment. "
 },
 {
   "count": 3,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--symcopy'] ",
   "default": " False ",
   "type": " None ",
   "help": " Copy each particle for each asymetrical unit. need a maskclass to focus on one unit. do not work with applysym "
 },
 {
   "count": 3,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--matchimgs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Applies filter.matchto to one image so that it matches the other's spectral profile during preprocessing for pair-wise alignment purposes. "
 },
 {
   "count": 3,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--filterbyfsc'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If on, this parameter will use dynamic FSC filtering. --lowpass will be used to build initial references if no --ref supplied, then, the FSC between the even and odd initial references will be used to filter the data during preprocessing. If --ref is supplied, --lowpass will be used during the first iteration to align the particles against the reference. Thereafter, the FSC between the most current particle average and the original reference (--ref) will be used in the next iteration. "
 },
 {
   "count": 3,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--autocentermask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Masking processor to apply before autocentering. See 'e2help.py processors -v 10' at the command line. "
 },
 {
   "count": 3,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--autocenterpreprocess'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This will apply a highpass filter at a frequency of half the box size times the apix, shrink by 2, and apply a low pass filter at half nyquist frequency to any computed average for autocentering purposes if --autocenter is provided. Default=False. "
 },
 {
   "count": 3,
   "prog": "e2spt_boxer_convnet.py ",
   "option": " ['--gpuid'] ",
   "default": "  ",
   "type": " str ",
   "help": " Specify the gpu to use "
 },
 {
   "count": 3,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--coords'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Used to extract particles without the GUI. Provide a coordinates file that contains the center coordinates of the subvolumes you want to extract from the command line (without bringing up the GUI). "
 },
 {
   "count": 3,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--cshrink'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=1 (not used; no scaling of --coords). Used to extract particles without the GUI. Requires --coords. Specifies the factor by which to multiply the coordinates in --coords, so that they can be at the same scale as the RAW tomogram (or whatever tomogram you intend for the particles to be extracted from). For example, provide --cshrink=2 if the coordinates were determined in a binned-by-2 (shrunk-by-2) tomogram, but you want to extract the subvolumes from a tomogram without binning/shrinking (which should be 2x larger). "
 },
 {
   "count": 3,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--savepreproc'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Will save stacks of preprocessed particles (one for coarse alignment and one for fine alignment if preprocessing options are different). "
 },
 {
   "count": 3,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--matchimgs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Applies filter.matchto to one image so that it matches the other's spectral profile during preprocessing for pair-wise alignment purposes. "
 },
 {
   "count": 3,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--filterbyfsc'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If on, this parameter will use dynamic FSC filtering. --lowpass will be used to build initial references if no --ref supplied, then, the FSC between the even and odd initial references will be used to filter the data during preprocessing. If --ref is supplied, --lowpass will be used during the first iteration to align the particles against the reference. Thereafter, the FSC between the most current particle average and the original reference (--ref) will be used in the next iteration. "
 },
 {
   "count": 3,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--coords'] ",
   "default": "  ",
   "type": " str ",
   "help": " text file containing x y z (or just z) coordinates for the particles, used to calculate icethickness if --icethicknessauto is specified for ctf fitting. NOT needed if --subtiltsdir is provided for ctf correction. "
 },
 {
   "count": 3,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--bfactor'] ",
   "default": "1000",
   "type": " int ",
   "help": " Default=1000. Bfactor or   temperature factor to use. Supply it to replace the value   in ctfparamsfile(s), or if ctfparamsfile(s) are lacking altogether. "
 },
 {
   "count": 3,
   "prog": "e2spt_evalsubtlt.py ",
   "option": " ['--loadali3d'] ",
   "default": " None ",
   "type": " str ",
   "help": " previous 3d alignment "
 },
 {
   "count": 3,
   "prog": "e2spt_hac.py ",
   "option": " ['--matchimgs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Applies filter.matchto to one image so that it matches the other's spectral profile during preprocessing for pair-wise alignment purposes. "
 },
 {
   "count": 3,
   "prog": "e2spt_hac.py ",
   "option": " ['--filterbyfsc'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If on, this parameter will use dynamic FSC filtering. --lowpass will be used to build initial references if no --ref supplied, then, the FSC between the even and odd initial references will be used to filter the data during preprocessing. If --ref is supplied, --lowpass will be used during the first iteration to align the particles against the reference. Thereafter, the FSC between the most current particle average and the original reference (--ref) will be used in the next iteration. "
 },
 {
   "count": 3,
   "prog": "e2spt_hac.py ",
   "option": " ['--autocentermask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Masking processor to apply before autocentering. See 'e2help.py processors -v 10' at the command line. "
 },
 {
   "count": 3,
   "prog": "e2spt_hac.py ",
   "option": " ['--autocenterpreprocess'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This will apply a highpass filter at a frequency of half the box size times the apix, shrink by 2, and apply a low pass filter at half nyquist frequency to any computed average for autocentering purposes if --autocenter is provided. Default=False. "
 },
 {
   "count": 3,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--nolog'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Turn off recording of the command ran for this program onto the .eman2log.txt file "
 },
 {
   "count": 3,
   "prog": "e2spt_project.py ",
   "option": " ['--simthr'] ",
   "default": "-0.1",
   "type": " float ",
   "help": " Similarity is smaller for better 'quality' particles. Specify the highest value to include from e2spt_hist.py. Default -0.1 "
 },
 {
   "count": 3,
   "prog": "e2spt_project.py ",
   "option": " ['--replace'] ",
   "default": " None ",
   "type": " str ",
   "help": " Replace the input subtomograms used for alignment with the specified file (used when the aligned particles were masked or filtered) "
 },
 {
   "count": 3,
   "prog": "e2spt_project.py ",
   "option": " ['--minalt'] ",
   "default": "0",
   "type": " float ",
   "help": " Minimum alignment altitude to include. Default=0 "
 },
 {
   "count": 3,
   "prog": "e2spt_refine.py ",
   "option": " ['--goldstandard'] ",
   "default": "-1",
   "type": " int ",
   "help": " Phase randomization resolution for gold standard refinement in A. Not equivalent to restarget in e2refine_easy. "
 },
 {
   "count": 3,
   "prog": "e2spt_refine.py ",
   "option": " ['--randphi'] ",
   "default": " False ",
   "type": " None ",
   "help": " randomize phi for refine search "
 },
 {
   "count": 3,
   "prog": "e2spt_refine.py ",
   "option": " ['--rand180'] ",
   "default": " False ",
   "type": " None ",
   "help": " include 180 degree rotation for refine search "
 },
 {
   "count": 3,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--ptcls'] ",
   "default": " None ",
   "type": " str ",
   "help": " 3d particle input "
 },
 {
   "count": 3,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--goldstandard'] ",
   "default": "50",
   "type": " float ",
   "help": " starting resolution for gold standard refinement. default 50 "
 },
 {
   "count": 3,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--use3d'] ",
   "default": " False ",
   "type": " None ",
   "help": " use projection of 3d particles instead of 2d sub tilt series "
 },
 {
   "count": 3,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--localrefine'] ",
   "default": " False ",
   "type": " None ",
   "help": " only perform local search around the solution from the last iteration "
 },
 {
   "count": 3,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--loadali3d'] ",
   "default": " None ",
   "type": " str ",
   "help": " load previous 3d alignment "
 },
 {
   "count": 3,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--randphi'] ",
   "default": " False ",
   "type": " None ",
   "help": " randomize phi for refine search "
 },
 {
   "count": 3,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--rand180'] ",
   "default": " False ",
   "type": " None ",
   "help": " include 180 degree rotation for refine search "
 },
 {
   "count": 3,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--ptcls'] ",
   "default": " None ",
   "type": " str ",
   "help": " path "
 },
 {
   "count": 3,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--nref'] ",
   "default": "-1",
   "type": " int ",
   "help": " duplicate the first ref N times with phase randomization at 2xres "
 },
 {
   "count": 3,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--loadali3d'] ",
   "default": " False ",
   "type": " None ",
   "help": " load previous 3d alignment from --ptcls input. "
 },
 {
   "count": 3,
   "prog": "e2spt_refinemulti_new.py ",
   "option": " ['--skipali'] ",
   "default": " False ",
   "type": " None ",
   "help": " . "
 },
 {
   "count": 3,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--applysym'] ",
   "default": " c1 ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 3,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--symcopy'] ",
   "default": " False ",
   "type": " None ",
   "help": " Copy each particle for each asymetrical unit. need a maskclass to focus on one unit. do not work with applysym "
 },
 {
   "count": 3,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--nref'] ",
   "default": "3",
   "type": " int ",
   "help": " Default=3. (For single reference refinement use e2spt_classaverage.py). Number of references to generate from a single image provided through --ref (random-phase filtered differently), or number of different initial references to generate from scratch from the data set (--input). Default=2 "
 },
 {
   "count": 3,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--savepreproc'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Will save stacks of preprocessed particles (one for coarse alignment and one for fine alignment if preprocessing options are different). "
 },
 {
   "count": 3,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--autocentermask'] ",
   "default": "  ",
   "type": " str ",
   "help": " WARNING: Experimental. Requires --autocenter. Default=None. Masking processor to apply before autocentering. See 'e2help.py processors -v 10' at the command line. "
 },
 {
   "count": 3,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--autocenterpreprocess'] ",
   "default": " False ",
   "type": " None ",
   "help": " WARNING: Experimental. Requires --autocenter. Default=False. This will apply a highpass filter at a frequency of half the box size times the apix, shrink by 2, and apply a low pass filter at half nyquist frequency to any computed average for autocentering purposes if --autocenter is provided. Default=False. "
 },
 {
   "count": 3,
   "prog": "e2spt_sgd.py ",
   "option": " ['--applysym'] ",
   "default": " False ",
   "type": " None ",
   "help": " apply symmetry "
 },
 {
   "count": 3,
   "prog": "e2spt_simulation.py ",
   "option": " ['--tiltangles'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=None. File in .tlt or .txt format containing the tilt angle of each tilt image in the tiltseries. "
 },
 {
   "count": 3,
   "prog": "e2spt_simulation.py ",
   "option": " ['--bfactor'] ",
   "default": "400",
   "type": " int ",
   "help": " Default=400. Bfactor to use for CTF correction phase flipping. "
 },
 {
   "count": 3,
   "prog": "e2spt_stat.py ",
   "option": " ['--extract'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, will convert the .json file to a .txt file suitable for plotting. No histogramming is involved, this is a per-particle conversion "
 },
 {
   "count": 3,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--tiltangles'] ",
   "default": "  ",
   "type": " str ",
   "help": " File in .tlt or .txt format containing the tilt angle of each tilt image in the tiltseries. "
 },
 {
   "count": 3,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--cshrink'] ",
   "default": "1",
   "type": " int ",
   "help": " Specifies the factor by which to multiply the coordinates in the coordinates file, so that they can be at the same scale as the tomogram. For example, provide 2 if the coordinates are on a 2K x 2K scale, but you want to extract the particles' subtiltseries from the UN-shrunk 4K x 4Ktiltseries. "
 },
 {
   "count": 3,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--use3d'] ",
   "default": " False ",
   "type": " None ",
   "help": " use projection of 3d particles instead of 2d ones.. "
 },
 {
   "count": 3,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--delta'] ",
   "default": "30",
   "type": " float ",
   "help": " delta angle "
 },
 {
   "count": 3,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--localrefine'] ",
   "default": " False ",
   "type": " None ",
   "help": " local refinement "
 },
 {
   "count": 3,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--nkeep'] ",
   "default": "1",
   "type": " int ",
   "help": "  "
 },
 {
   "count": 3,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--include'] ",
   "default": "  ",
   "type": " str ",
   "help": " Comma separated list of numbers corresponding to images to include (all others will be excluded). --unstack or --restack must be supplied. Recall that the FIRST image INDEX is 0. --include=1,5-7,10,12,15-19 will include images 1,5,6,7,10,12,15,16,17,18,19 "
 },
 {
   "count": 3,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--nref'] ",
   "default": "15",
   "type": " int ",
   "help": " Using N tilt images near the center tilt to estimate the range of defocus for all images. Default is 15 "
 },
 {
   "count": 3,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--nolog'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Turn off recording of the command ran for this program onto the .eman2log.txt file "
 },
 {
   "count": 3,
   "prog": "e2stacksort.py ",
   "option": " ['--simmask'] ",
   "default": " None ",
   "type": " str ",
   "help": " A file containing a mask to apply prior to comparisons, to focus the sort on one particular region "
 },
 {
   "count": 3,
   "prog": "e2symbest.py ",
   "option": " ['--nkeep'] ",
   "default": " None ",
   "type": " int ",
   "help": " Number of particles to keep "
 },
 {
   "count": 3,
   "prog": "e2symsearch3d.py ",
   "option": " ['--nolog'] ",
   "default": " False ",
   "type": " None ",
   "help": " If supplied, this option will prevent logging the command run in .eman2log.txt. "
 },
 {
   "count": 3,
   "prog": "e2symsearch3d.py ",
   "option": " ['--savepreproc'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Will save stacks of preprocessed particles (one for coarse alignment and one for fine alignment if preprocessing options are different). "
 },
 {
   "count": 3,
   "prog": "e2tiltseries.py ",
   "option": " ['--rawtlt'] ",
   "default": "  ",
   "type": " str ",
   "help": " Name of tilt angles text file. Note, angles must correspond to stack file names in alphabetical/numerical order. "
 },
 {
   "count": 3,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--delta'] ",
   "default": "5",
   "type": " float ",
   "help": " The angular step size for alingment "
 },
 {
   "count": 3,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--bfactor'] ",
   "default": "1000",
   "type": " int ",
   "help": " Default=1000. Bfactor (\"temperature factor\") to use. "
 },
 {
   "count": 3,
   "prog": "e2tomo_drawcontour.py ",
   "option": " ['--load'] ",
   "default": " None ",
   "type": " str ",
   "help": " Load previous contour segmentation. "
 },
 {
   "count": 3,
   "prog": "e2tomo_mwfill.py ",
   "option": " ['--gpuid'] ",
   "default": " None ",
   "type": " int ",
   "help": " gpu id "
 },
 {
   "count": 3,
   "prog": "e2tomo_mwfill.py ",
   "option": " ['--load'] ",
   "default": " None ",
   "type": " str ",
   "help": " load model "
 },
 {
   "count": 3,
   "prog": "e2tomogram.py ",
   "option": " ['--rawtlt'] ",
   "default": "  ",
   "type": " str ",
   "help": " Specify a text file contains raw tilt angles. Will look for files with the same name as the tilt series if a directory is provided "
 },
 {
   "count": 3,
   "prog": "e2tomogram.py ",
   "option": " ['--load'] ",
   "default": " False ",
   "type": " None ",
   "help": " load existing tilt parameters. "
 },
 {
   "count": 3,
   "prog": "e2tomogram.py ",
   "option": " ['--extrapad'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use extra padding for tilted reconstruction. slower and cost more memory, but reduce boundary artifacts when the sample is thick "
 },
 {
   "count": 3,
   "prog": "e2tomogram.py ",
   "option": " ['--noali'] ",
   "default": " False ",
   "type": " None ",
   "help": " skip initial alignment "
 },
 {
   "count": 3,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--device'] ",
   "default": " cpu ",
   "type": " str ",
   "help": " For Convnet training only. Pick a device to use. chose from cpu, gpu, or gpuX (X=0,1,...) when multiple gpus are available. default is cpu "
 },
 {
   "count": 2,
   "prog": "e2RCTboxer.py ",
   "option": " ['--format'] ",
   "default": " hdf ",
   "type": " None ",
   "help": " Format of the output particles images, should be hdf "
 },
 {
   "count": 2,
   "prog": "e2a2d_stat.py ",
   "option": " ['--bins'] ",
   "default": "100",
   "type": " int ",
   "help": " Number of bins to use in the histogram "
 },
 {
   "count": 2,
   "prog": "e2basis.py ",
   "option": " ['--normalize'] ",
   "default": " normalize.unitlen ",
   "type": " str ",
   "help": " Normalize the input images using the named processor. Specify 'tomean' for mean-based scaling. Specify None to disable. "
 },
 {
   "count": 2,
   "prog": "e2basis.py ",
   "option": " ['--txtout'] ",
   "default": " False ",
   "type": " None ",
   "help": " Output will be a multicolumn text file suitable for plotting "
 },
 {
   "count": 2,
   "prog": "e2bdb.py ",
   "option": " ['--short'] ",
   "default": " False ",
   "type": " None ",
   "help": " Dense listing of names only "
 },
 {
   "count": 2,
   "prog": "e2bdb.py ",
   "option": " ['--dump'] ",
   "default": " False ",
   "type": " None ",
   "help": " List contents of an entire database, eg 'e2bdb.py -D refine_01#register "
 },
 {
   "count": 2,
   "prog": "e2boxer.py ",
   "option": " ['--allmicrographs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Add all images from micrographs folder "
 },
 {
   "count": 2,
   "prog": "e2boxer.py ",
   "option": " ['--write_dbbox'] ",
   "default": " False ",
   "type": " None ",
   "help": " Export EMAN1 .box files "
 },
 {
   "count": 2,
   "prog": "e2boxer_old.py ",
   "option": " ['--write_dbbox'] ",
   "default": " False ",
   "type": " None ",
   "help": " Write coordinate file (eman1 dbbox) files "
 },
 {
   "count": 2,
   "prog": "e2boxer_old.py ",
   "option": " ['--format'] ",
   "default": " hdf ",
   "type": " None ",
   "help": " Format of the output particle images. For EMAN2 refinement must be HDF. "
 },
 {
   "count": 2,
   "prog": "e2buildsets.py ",
   "option": " ['--setname'] ",
   "default": " all ",
   "type": " str ",
   "help": " Name of the stack to build "
 },
 {
   "count": 2,
   "prog": "e2buildsets.py ",
   "option": " ['--excludebad'] ",
   "default": " False ",
   "type": " None ",
   "help": " Exclude bad particles. "
 },
 {
   "count": 2,
   "prog": "e2buildsets.py ",
   "option": " ['--mindf'] ",
   "default": "0",
   "type": " float ",
   "help": " Files with a defocus lower than specified will be skipped "
 },
 {
   "count": 2,
   "prog": "e2buildsets.py ",
   "option": " ['--maxdf'] ",
   "default": "20",
   "type": " float ",
   "help": " Files with a defocus higher than specified will be skipped "
 },
 {
   "count": 2,
   "prog": "e2buildsets.py ",
   "option": " ['--minlosnr'] ",
   "default": "0",
   "type": " float ",
   "help": " Integrated SNR from 1/200-1/20 1/A must be larger than this "
 },
 {
   "count": 2,
   "prog": "e2buildsets.py ",
   "option": " ['--minhisnr'] ",
   "default": "0",
   "type": " float ",
   "help": " Integrated SNR from 1/10-1/4 1/A must be larger than this "
 },
 {
   "count": 2,
   "prog": "e2buildstacks.py ",
   "option": " ['--tilts'] ",
   "default": " False ",
   "type": " None ",
   "help": " Write results to 'tiltseries' directory in current project. "
 },
 {
   "count": 2,
   "prog": "e2classaverage.py ",
   "option": " ['--focused'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of a reference projection file to read 1st iteration refine alignment references from. "
 },
 {
   "count": 2,
   "prog": "e2classaverage.py ",
   "option": " ['--resultmx'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify an output image to store the result matrix. This contains 5 images where row is particle number. Rows in the first image contain the class numbers and in the second image consist of 1s or 0s indicating whether or not the particle was included in the class. The corresponding rows in the third, fourth and fifth images are the refined x, y and angle (respectively) used in the final alignment, these are updated and accurate, even if the particle was excluded from the class. "
 },
 {
   "count": 2,
   "prog": "e2classaverage.py ",
   "option": " ['--usefilt'] ",
   "default": " None ",
   "type": " None ",
   "help": " Specify a particle data file that has been low pass or Wiener filtered. Has a one to one correspondence with your particle data. If specified will be used to align particles to the running class average, however the original particle will be used to generate the actual final class average "
 },
 {
   "count": 2,
   "prog": "e2classesbyref.py ",
   "option": " ['--msamode'] ",
   "default": " None ",
   "type": " str ",
   "help": " Enable MSA based classification, default=disabled, typically 'pca', see e2msa.py --mode option for full list "
 },
 {
   "count": 2,
   "prog": "e2classextract.py ",
   "option": " ['--setname'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of the stack to build "
 },
 {
   "count": 2,
   "prog": "e2classextract.py ",
   "option": " ['--excludebad'] ",
   "default": " False ",
   "type": " None ",
   "help": " Excludes the particles from the generated set(s). They are included by default. "
 },
 {
   "count": 2,
   "prog": "e2classextract.py ",
   "option": " ['--sort'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, output .lst file will be sorted. The default is to leave the output grouped by class-average. If (and only if) sorted, duplicate entries will be removed. "
 },
 {
   "count": 2,
   "prog": "e2classify.py ",
   "option": " ['--noalign'] ",
   "default": " False ",
   "type": " None ",
   "help": " Ignore the alignments "
 },
 {
   "count": 2,
   "prog": "e2classifykmeans.py ",
   "option": " ['--minchange'] ",
   "default": "-1",
   "type": " int ",
   "help": " Minimum number of particles that change group before deicding to terminate. Default = len(data)/(#cls*25) "
 },
 {
   "count": 2,
   "prog": "e2classifykmeans.py ",
   "option": " ['--fastseed'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will seed the k-means loop quickly, but may produce lest consistent results. "
 },
 {
   "count": 2,
   "prog": "e2classifyligand.py ",
   "option": " ['--postfix'] ",
   "default": "  ",
   "type": " str ",
   "help": " This string will be appended to each set name to help differentiate the results from multiple runs "
 },
 {
   "count": 2,
   "prog": "e2ctf.py ",
   "option": " ['--autofit'] ",
   "default": " False ",
   "type": " None ",
   "help": " Runs automated CTF fitting on the input images "
 },
 {
   "count": 2,
   "prog": "e2ctf.py ",
   "option": " ['--highdensity'] ",
   "default": " False ",
   "type": " None ",
   "help": " If particles are very close together, this will interfere with SSNR estimation. If set uses an alternative strategy, but may over-estimate SSNR. "
 },
 {
   "count": 2,
   "prog": "e2ctf.py ",
   "option": " ['--curdefocushint'] ",
   "default": " False ",
   "type": " None ",
   "help": " Rather than doing the defocus from scratch, use existing values in the project as a starting point "
 },
 {
   "count": 2,
   "prog": "e2ctf.py ",
   "option": " ['--wiener'] ",
   "default": " False ",
   "type": " None ",
   "help": " Wiener filter (optionally phaseflipped) particles. "
 },
 {
   "count": 2,
   "prog": "e2ctf.py ",
   "option": " ['--snrfilt'] ",
   "default": " False ",
   "type": " None ",
   "help": " Apply SNR filter as part of phase flipping. "
 },
 {
   "count": 2,
   "prog": "e2ctf.py ",
   "option": " ['--proctag'] ",
   "default": " proc ",
   "type": " None ",
   "help": " Tag added to the name of each particle when using the phaseflipproc options "
 },
 {
   "count": 2,
   "prog": "e2ctf.py ",
   "option": " ['--sf'] ",
   "default": " auto ",
   "type": " str ",
   "help": " The name of a file containing a structure factor curve. Specify 'none' to use the built in generic structure factor. Default=auto "
 },
 {
   "count": 2,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--sf'] ",
   "default": " NULL ",
   "type": " str ",
   "help": " The name of a file containing a structure factor curve. "
 },
 {
   "count": 2,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--dfmin'] ",
   "default": "0.5",
   "type": " float ",
   "help": " Set minimum possible defocus value (positive is underfocus). "
 },
 {
   "count": 2,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--dfmax'] ",
   "default": "5",
   "type": " float ",
   "help": " Set maximum possible defocus value (positive is underfocus). "
 },
 {
   "count": 2,
   "prog": "e2ctf_auto.py ",
   "option": " ['--snrfilt'] ",
   "default": " False ",
   "type": " None ",
   "help": " Apply a SNR filter to phase flipped output images "
 },
 {
   "count": 2,
   "prog": "e2ctf_auto.py ",
   "option": " ['--highdensity'] ",
   "default": " False ",
   "type": " None ",
   "help": " If particles are very close together, this will interfere with SSNR estimation. If set uses an alternative strategy, but may over-estimate SSNR. "
 },
 {
   "count": 2,
   "prog": "e2ctffind3util.py ",
   "option": " ['--allmicrographs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Run Ctffind3 on all micrographs in the micrographs directory? "
 },
 {
   "count": 2,
   "prog": "e2ddd_external.py ",
   "option": " ['--mdoc'] ",
   "default": " None ",
   "type": " str ",
   "help": " When an mdoc or idoc is provided, the raw files are automatically found within the input directory "
 },
 {
   "count": 2,
   "prog": "e2ddd_external.py ",
   "option": " ['--dark'] ",
   "default": " None ",
   "type": " str ",
   "help": " Use this dark reference. "
 },
 {
   "count": 2,
   "prog": "e2ddd_external.py ",
   "option": " ['--gain'] ",
   "default": " None ",
   "type": " str ",
   "help": " Use this gain reference. "
 },
 {
   "count": 2,
   "prog": "e2ddd_external.py ",
   "option": " ['--groupby'] ",
   "default": " None ",
   "type": " int ",
   "help": " Before alignment, sum raw frames in groups of X to increase signal to noise ratio. "
 },
 {
   "count": 2,
   "prog": "e2ddd_external.py ",
   "option": " ['--tiltseries_name'] ",
   "default": "  ",
   "type": " str ",
   "help": " Specify the name of the output tiltseries. A .mrc extension will be appended to the filename provided. "
 },
 {
   "count": 2,
   "prog": "e2ddd_movie.py ",
   "option": " ['--tiltseries_name'] ",
   "default": "  ",
   "type": " None ",
   "help": " Specify a name for the tilt series to be generated from the input movies. "
 },
 {
   "count": 2,
   "prog": "e2ddd_movie.py ",
   "option": " ['--dark'] ",
   "default": "  ",
   "type": " str ",
   "help": " Perform dark image correction using the specified image file "
 },
 {
   "count": 2,
   "prog": "e2ddd_movie.py ",
   "option": " ['--gain'] ",
   "default": "  ",
   "type": " str ",
   "help": " Perform gain image correction using the specified image file "
 },
 {
   "count": 2,
   "prog": "e2ddd_movie.py ",
   "option": " ['--realign'] ",
   "default": " False ",
   "type": " None ",
   "help": " Align frames using previous alignment parameters. "
 },
 {
   "count": 2,
   "prog": "e2ddd_movie.py ",
   "option": " ['--groupby'] ",
   "default": "1",
   "type": " int ",
   "help": " Combine every N frames using a moving window approach. "
 },
 {
   "count": 2,
   "prog": "e2ddd_particles.py ",
   "option": " ['--noalign'] ",
   "default": " False ",
   "type": " None ",
   "help": " Regenerates unaligned particle averages into __orig "
 },
 {
   "count": 2,
   "prog": "e2evalimage.py ",
   "option": " ['--usefoldername'] ",
   "default": " False ",
   "type": " None ",
   "help": " If you have the same image filename in multiple folders, and need to import into the same project, this will prepend the folder name on each image name "
 },
 {
   "count": 2,
   "prog": "e2evalrefine.py ",
   "option": " ['--timing'] ",
   "default": " False ",
   "type": " None ",
   "help": " Report on the time required for each step of each refinement run "
 },
 {
   "count": 2,
   "prog": "e2evalrefine.py ",
   "option": " ['--timingbypath'] ",
   "default": " False ",
   "type": " None ",
   "help": " Report on the CPU time required in each refine_xx folder "
 },
 {
   "count": 2,
   "prog": "e2evalrefine.py ",
   "option": " ['--resolution_all'] ",
   "default": " False ",
   "type": " None ",
   "help": " generates resolution plot with the last iteration of all refine_xx directories "
 },
 {
   "count": 2,
   "prog": "e2evalrefine.py ",
   "option": " ['--resolution_vsref'] ",
   "default": " None ",
   "type": " str ",
   "help": " Computes the FSC between the last iteration of each refine_xx directory and a specified reference map. Map must be aligned, but will be rescaled if necessary. "
 },
 {
   "count": 2,
   "prog": "e2fsc.py ",
   "option": " ['--outfilt'] ",
   "default": " res143_filtered.hdf ",
   "type": " str ",
   "help": " Output locally filtered average volume "
 },
 {
   "count": 2,
   "prog": "e2fsc.py ",
   "option": " ['--outfilte'] ",
   "default": " None ",
   "type": " str ",
   "help": " Apply the local filter to the even map as well and write to specified file "
 },
 {
   "count": 2,
   "prog": "e2fsc.py ",
   "option": " ['--outfilto'] ",
   "default": " None ",
   "type": " str ",
   "help": " Apply the local filter to the odd map as well and write to specified file "
 },
 {
   "count": 2,
   "prog": "e2fsc.py ",
   "option": " ['--localsize'] ",
   "default": "-1",
   "type": " int ",
   "help": " Size in pixels of the local region to compute the resolution in "
 },
 {
   "count": 2,
   "prog": "e2fsc.py ",
   "option": " ['--gauss'] ",
   "default": " False ",
   "type": " None ",
   "help": " use gaussian filter instead of tophat "
 },
 {
   "count": 2,
   "prog": "e2fsc_local.py ",
   "option": " ['--overwrite'] ",
   "default": " False ",
   "type": " None ",
   "help": " overwrite even/odd input "
 },
 {
   "count": 2,
   "prog": "e2fsc_local.py ",
   "option": " ['--gauss'] ",
   "default": " False ",
   "type": " None ",
   "help": " gauss instead of tophat "
 },
 {
   "count": 2,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--outfilt'] ",
   "default": " res143_filtered.hdf ",
   "type": " str ",
   "help": " Output locally filtered average volume "
 },
 {
   "count": 2,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--outfilte'] ",
   "default": " None ",
   "type": " str ",
   "help": " Apply the local filter to the even map as well and write to specified file "
 },
 {
   "count": 2,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--outfilto'] ",
   "default": " None ",
   "type": " str ",
   "help": " Apply the local filter to the odd map as well and write to specified file "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--helix-coords', '-X'] ",
   "default": " None ",
   "type": " str ",
   "help": " Save coordinates for helices to the file specified, which will have the EMAN1 *.box format:   x1-w/2        y1-w/2        w        w        -1                    x2-w/2        y2-w/2        w        w        -2 "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--helix-images', '-x'] ",
   "default": " None ",
   "type": " str ",
   "help": " Save images of the helices. The file name specified will have helix numbers added to it. "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--ptcl-coords', '-P'] ",
   "default": " None ",
   "type": " str ",
   "help": " Save coordinates of the centers of particles to the specified formatted text file "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--ptcl-images', '-p'] ",
   "default": " None ",
   "type": " str ",
   "help": " Save images of the particles. The file name specified will have helix numbers (and particle numbers if the file type does not support image stacks) added to it. "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--helix-width', '-w'] ",
   "default": "-1",
   "type": " int ",
   "help": " Helix width in pixels. Overrides widths saved in the database or in an input file. "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--helix-length', '-l'] ",
   "default": "-1",
   "type": " int ",
   "help": " Helix length in pixels. Normally each filament can be an arbitrary length. This forces all new helices to a fixed size. "
 },
 {
   "count": 1,
   "prog": "e2iminfo.py ",
   "option": " ['-H', '--header'] ",
   "default": " False ",
   "type": " None ",
   "help": " Show all header information "
 },
 {
   "count": 1,
   "prog": "e2iminfo.py ",
   "option": " ['-N', '--number'] ",
   "default": "-1",
   "type": " int ",
   "help": " Image number for single image info "
 },
 {
   "count": 1,
   "prog": "e2iminfo.py ",
   "option": " ['-Q', '--quality'] ",
   "default": "-1",
   "type": " int ",
   "help": " Include only images with a single quality value (integer 0-9) "
 },
 {
   "count": 2,
   "prog": "e2iminfo.py ",
   "option": " ['--dfmin'] ",
   "default": " None ",
   "type": " float ",
   "help": " Include only images with defocus >= the specified value "
 },
 {
   "count": 2,
   "prog": "e2iminfo.py ",
   "option": " ['--dfmax'] ",
   "default": " None ",
   "type": " float ",
   "help": " Include only images with defocus <= the specified value "
 },
 {
   "count": 1,
   "prog": "e2iminfo.py ",
   "option": " ['-s', '--stat'] ",
   "default": " False ",
   "type": " None ",
   "help": " Show statistical information about the image(s). "
 },
 {
   "count": 1,
   "prog": "e2iminfo.py ",
   "option": " ['-O', '--outliers'] ",
   "default": " False ",
   "type": " None ",
   "help": " Statistics on number of outlier values, must be used with --stat "
 },
 {
   "count": 1,
   "prog": "e2iminfo.py ",
   "option": " ['-E', '--euler'] ",
   "default": " False ",
   "type": " None ",
   "help": " Show Euler angles from header "
 },
 {
   "count": 1,
   "prog": "e2iminfo.py ",
   "option": " ['-a', '--all'] ",
   "default": " False ",
   "type": " None ",
   "help": " Show info for all images in file "
 },
 {
   "count": 1,
   "prog": "e2iminfo.py ",
   "option": " ['-C', '--check'] ",
   "default": " False ",
   "type": " None ",
   "help": " Checks to make sure all image numbers are populated with images, and that all images have valid CTF parameters "
 },
 {
   "count": 1,
   "prog": "e2iminfo.py ",
   "option": " ['-c', '--count'] ",
   "default": " False ",
   "type": " None ",
   "help": " Just show a count of the number of particles in each file "
 },
 {
   "count": 2,
   "prog": "e2import.py ",
   "option": " ['--extension'] ",
   "default": " dm3 ",
   "type": " str ",
   "help": " Extension of the micrographs that the boxes match "
 },
 {
   "count": 2,
   "prog": "e2import.py ",
   "option": " ['--curdefocushint'] ",
   "default": " False ",
   "type": " None ",
   "help": " Used with import_eman1, will use EMAN1 defocus as starting point "
 },
 {
   "count": 2,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--batchsize'] ",
   "default": "10",
   "type": " int ",
   "help": " Batch size of stochastic gradient desent. N particles are randomly selected to generate an initial model at each step. "
 },
 {
   "count": 2,
   "prog": "e2make3d.py ",
   "option": " ['--tlt'] ",
   "default": " None ",
   "type": " str ",
   "help": " An imod tlt file containing alignment angles. If specified slices will be inserted using these angles in the IMOD convention "
 },
 {
   "count": 2,
   "prog": "e2make3d.py ",
   "option": " ['--padvol'] ",
   "default": " None ",
   "type": " str ",
   "help": " Defines the dimensions (x,y,z) or (x,x,x) of the reconstructed volume. If ommitted, implied value based on padded 2D images is used. "
 },
 {
   "count": 2,
   "prog": "e2make3d.py ",
   "option": " ['--keepabs'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, keep will refer to the absolute quality of the class-average, not a local quality relative to other similar sized classes. "
 },
 {
   "count": 2,
   "prog": "e2make3d.py ",
   "option": " ['--start'] ",
   "default": " None ",
   "type": " str ",
   "help": " This is a starting model for FFT reconstruction "
 },
 {
   "count": 2,
   "prog": "e2make3dpar.py ",
   "option": " ['--tlt'] ",
   "default": " None ",
   "type": " str ",
   "help": " An imod tlt file containing alignment angles. If specified slices will be inserted using these angles in the IMOD convention "
 },
 {
   "count": 2,
   "prog": "e2make3dpar.py ",
   "option": " ['--padvol'] ",
   "default": " None ",
   "type": " str ",
   "help": " Defines the dimensions (x,y,z) or (x,x,x) of the reconstructed volume. If ommitted, implied value based on padded 2D images is used. "
 },
 {
   "count": 2,
   "prog": "e2make3dpar.py ",
   "option": " ['--keepabs'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, keep will refer to the absolute quality of the class-average, not a local quality relative to other similar sized classes. "
 },
 {
   "count": 2,
   "prog": "e2make3dpar.py ",
   "option": " ['--iterative'] ",
   "default": " False ",
   "type": " None ",
   "help": " Uses iterative interpolation in Fourier space instead of single step gridding or interpolation. --mode and --usessnr are ignored with this option. "
 },
 {
   "count": 2,
   "prog": "e2make3dpar.py ",
   "option": " ['--seedmap'] ",
   "default": " None ",
   "type": " str ",
   "help": " If specified this volume will be used as a starting point for the reconstruction, filling any missing values in Fourier space. experimental. "
 },
 {
   "count": 2,
   "prog": "e2msa.py ",
   "option": " ['--normalize'] ",
   "default": " False ",
   "type": " None ",
   "help": " Perform a careful normalization of input images before MSA. Otherwise normalization is not modified until after mean subtraction. "
 },
 {
   "count": 2,
   "prog": "e2pathwalker.py ",
   "option": " ['--start'] ",
   "default": " None ",
   "type": " int ",
   "help": " Start ATOM "
 },
 {
   "count": 2,
   "prog": "e2pathwalker.py ",
   "option": " ['--edgefile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Load fixed fragment file; one sequence of forced connections per line, separated by space. "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['-e', '--edge'] ",
   "default": " None ",
   "type": " None ",
   "help": " Forced edge: e.g. -e1,3 "
 },
 {
   "count": 2,
   "prog": "e2pathwalker.py ",
   "option": " ['--overwrite'] ",
   "default": " False ",
   "type": " None ",
   "help": " Overwrite files without prompting "
 },
 {
   "count": 2,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--chains'] ",
   "default": " None ",
   "type": " str ",
   "help": " String list of chain identifiers to include, eg 'ABEFG' "
 },
 {
   "count": 2,
   "prog": "e2plotEulers.py ",
   "option": " ['--iteration'] ",
   "default": "0",
   "type": " int ",
   "help": " Refinement iteration to plot "
 },
 {
   "count": 2,
   "prog": "e2proc2d.py ",
   "option": " ['--inplace'] ",
   "default": " False ",
   "type": " None ",
   "help": " Output overwrites input, USE SAME FILENAME, DO NOT 'clip' images. "
 },
 {
   "count": 2,
   "prog": "e2proc2d.py ",
   "option": " ['--fouriershrink'] ",
   "default": " None ",
   "type": " float ",
   "help": " Reduce an image size by an arbitrary scaling factor by clipping in Fourier space. eg - 2 will reduce image size to 1/2. "
 },
 {
   "count": 2,
   "prog": "e2proc2d.py ",
   "option": " ['--fixintscaling'] ",
   "default": " None ",
   "type": " str ",
   "help": " When writing to an 8 or 16 bit integer format the data must be scaled. 'noscale' will assume the pixel values are already correct, 'full' will insure the full range of values are included in the output, 'sane' will pick a good range, a number will set the range to mean+=sigma*number "
 },
 {
   "count": 2,
   "prog": "e2proc2d.py ",
   "option": " ['--norefs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Skip any input images which are marked as references (usually used with classes.*) "
 },
 {
   "count": 2,
   "prog": "e2proc2d.py ",
   "option": " ['--outtype'] ",
   "default": " None ",
   "type": " str ",
   "help": " output image format, 'mrc', 'imagic', 'hdf', etc. if specify spidersingle will output single 2D image rather than 2D stack. "
 },
 {
   "count": 2,
   "prog": "e2proc2d.py ",
   "option": " ['--radon'] ",
   "default": " False ",
   "type": " None ",
   "help": " Do Radon transform "
 },
 {
   "count": 2,
   "prog": "e2proc2d.py ",
   "option": " ['--rfp'] ",
   "default": " False ",
   "type": " None ",
   "help": " this is an experimental option "
 },
 {
   "count": 2,
   "prog": "e2proc2d.py ",
   "option": " ['--anisotropic'] ",
   "default": " None ",
   "type": " str ",
   "help": " Anisotropic scaling, stretches on one axis and compresses the orthogonal axis. Specify amount,angle. See e2evalrefine "
 },
 {
   "count": 2,
   "prog": "e2proc2d.py ",
   "option": " ['--writejunk'] ",
   "default": " False ",
   "type": " None ",
   "help": " Writes the image even if its sigma is 0. "
 },
 {
   "count": 2,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--postfix'] ",
   "default": " None ",
   "type": " str ",
   "help": " Adds this string to each input filename to produce output filename (avoid overwriting) "
 },
 {
   "count": 2,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--norefs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Skip any input images which are marked as references (usually used with classes.*) "
 },
 {
   "count": 2,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--radon'] ",
   "default": " False ",
   "type": " None ",
   "help": " Do Radon transform "
 },
 {
   "count": 2,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--writejunk'] ",
   "default": " False ",
   "type": " None ",
   "help": " Writes the image even if its sigma is 0. "
 },
 {
   "count": 2,
   "prog": "e2proc2dpar.py ",
   "option": " ['--outtype'] ",
   "default": " None ",
   "type": " str ",
   "help": " output image format, 'mrc', 'imagic', 'hdf', etc. if specify spidersingle will output single 2D image rather than 2D stack. "
 },
 {
   "count": 2,
   "prog": "e2proc2dpar.py ",
   "option": " ['--fixintscaling'] ",
   "default": " None ",
   "type": " str ",
   "help": " When writing to an 8 or 16 bit integer format the data must be scaled. 'noscale' will assume the pixel values are already correct, 'sane' will pick a good range, a number will set the range to mean+=sigma*number "
 },
 {
   "count": 2,
   "prog": "e2proc2dpar.py ",
   "option": " ['--fouriershrink'] ",
   "default": " None ",
   "type": " float ",
   "help": " Reduce an image size by an arbitrary scaling factor by clipping in Fourier space. eg - 2 will reduce image size to 1/2. "
 },
 {
   "count": 2,
   "prog": "e2proc2dpar.py ",
   "option": " ['--rfp'] ",
   "default": " False ",
   "type": " None ",
   "help": " this is an experimental option "
 },
 {
   "count": 2,
   "prog": "e2proc2dpar.py ",
   "option": " ['--anisotropic'] ",
   "default": " None ",
   "type": " str ",
   "help": " Anisotropic scaling, stretches on one axis and compresses the orthogonal axis. Specify amount,angle. See e2evalrefine "
 },
 {
   "count": 2,
   "prog": "e2proc3d_huge.py ",
   "option": " ['--trans'] ",
   "default": "0",
   "type": " str ",
   "help": " Translate map by dx,dy,dz  "
 },
 {
   "count": 2,
   "prog": "e2procjson.py ",
   "option": " ['--retype'] ",
   "default": " None ",
   "type": " str ",
   "help": " For JSON files where the keys are image name,# pairs, will change the __type value in the image name in all keys "
 },
 {
   "count": 2,
   "prog": "e2proclst.py ",
   "option": " ['--inplace'] ",
   "default": " False ",
   "type": " None ",
   "help": " only works with --create. if the stack specified in --create already exists, this will prevent appending to it. rather, the file will be modified in place. "
 },
 {
   "count": 2,
   "prog": "e2proclst.py ",
   "option": " ['--minhisnr'] ",
   "default": "-1",
   "type": " float ",
   "help": " Integrated SNR from 1/10-1/4 1/A must be larger than this "
 },
 {
   "count": 2,
   "prog": "e2proclst.py ",
   "option": " ['--minlosnr'] ",
   "default": "-1",
   "type": " float ",
   "help": " Integrated SNR from 1/200-1/20 1/A must be larger than this "
 },
 {
   "count": 2,
   "prog": "e2proclst.py ",
   "option": " ['--mindf'] ",
   "default": "-1",
   "type": " float ",
   "help": " Minimum defocus "
 },
 {
   "count": 2,
   "prog": "e2proclst.py ",
   "option": " ['--maxdf'] ",
   "default": "-1",
   "type": " float ",
   "help": " Maximum defocus "
 },
 {
   "count": 2,
   "prog": "e2proclst.py ",
   "option": " ['--retype'] ",
   "default": " None ",
   "type": " str ",
   "help": " If a lst file is referencing a set of particles from particles/imgname__oldtype.hdf, this will change oldtype to the specified string in-place (modifies input files) "
 },
 {
   "count": 2,
   "prog": "e2procpdb.py ",
   "option": " ['--chains'] ",
   "default": " None ",
   "type": " str ",
   "help": " String list of chain identifiers to include, eg 'ABEFG' "
 },
 {
   "count": 2,
   "prog": "e2procpdb.py ",
   "option": " ['--trans'] ",
   "default": " 0,0,0 ",
   "type": " str ",
   "help": " transform, (0,0,0) "
 },
 {
   "count": 2,
   "prog": "e2procpdb.py ",
   "option": " ['--beta'] ",
   "default": "0",
   "type": " float ",
   "help": " beta in imagic convention. "
 },
 {
   "count": 2,
   "prog": "e2project3d.py ",
   "option": " ['--outfile'] ",
   "default": " e2proj.hdf ",
   "type": " None ",
   "help": " Output file. Default is 'e2proj.img' "
 },
 {
   "count": 2,
   "prog": "e2project3d.py ",
   "option": " ['--append'] ",
   "default": " False ",
   "type": " None ",
   "help": " Append to the output file "
 },
 {
   "count": 2,
   "prog": "e2rawdata.py ",
   "option": " ['--usefoldername'] ",
   "default": " False ",
   "type": " None ",
   "help": " If you have the same image filename in multiple folders, and need to import into the same project, this will prepend the folder name on each image name "
 },
 {
   "count": 2,
   "prog": "e2rct.py ",
   "option": " ['--untiltdata'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of the tilted dataset "
 },
 {
   "count": 2,
   "prog": "e2rct.py ",
   "option": " ['--tiltdata'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of the tilted dataset "
 },
 {
   "count": 2,
   "prog": "e2rct.py ",
   "option": " ['--reference'] ",
   "default": " None ",
   "type": " str ",
   "help": " Reference used to align RCT recons to, needs to be aligned to symetry axis is --sym is specified "
 },
 {
   "count": 2,
   "prog": "e2refine2d.py ",
   "option": " ['--fastseed'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will seed the k-means loop quickly, but may produce less consistent results. Always use this when generating >~100 classes. "
 },
 {
   "count": 2,
   "prog": "e2refine2d.py ",
   "option": " ['--minchange'] ",
   "default": "-1",
   "type": " int ",
   "help": " Minimum number of particles that change group before deicding to terminate. Default = -1 (auto) "
 },
 {
   "count": 2,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--msamode'] ",
   "default": " pca ",
   "type": " str ",
   "help": " e2msa can use a variety of different dimensionality reduction algorithms, the default is Principal Component Analysis (PCA), but others are available, see e2msa.py "
 },
 {
   "count": 2,
   "prog": "e2refine_easy.py ",
   "option": " ['--speed'] ",
   "default": "5",
   "type": " int ",
   "help": " (1-7) Balances speed vs precision. Larger values sacrifice a bit of potential resolution for significant speed increases. Set to 1 when really pushing resolution. Set to 7 for initial refinements. default=5 "
 },
 {
   "count": 2,
   "prog": "e2refine_easy.py ",
   "option": " ['--focused'] ",
   "default": " None ",
   "type": " None ",
   "help": " Highly experimental, and under development! Specify a 3-D mask. Not used for coarse alignment, but only for final 'fine tuning' and symmetrizing. With symmetry also use breaksym. "
 },
 {
   "count": 2,
   "prog": "e2refine_easy.py ",
   "option": " ['--treeclassify'] ",
   "default": " False ",
   "type": " None ",
   "help": " Classify using a binary tree. "
 },
 {
   "count": 2,
   "prog": "e2refine_easy.py ",
   "option": " ['--invar'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will use invariants for orientation determination, set invariant type in project (EXPERIMENTAL). "
 },
 {
   "count": 2,
   "prog": "e2refine_easy.py ",
   "option": " ['--classautomask'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will apply an automask to the class-average during iterative alignment for better accuracy. The final class averages are unmasked. "
 },
 {
   "count": 2,
   "prog": "e2refine_easy.py ",
   "option": " ['--automask3d2'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=none. If specified, this mask will be multiplied by the result of the first mask, eg - using mask.soft to mask out the center of a virus. "
 },
 {
   "count": 2,
   "prog": "e2refine_easy.py ",
   "option": " ['--treeincomplete'] ",
   "default": "0",
   "type": " int ",
   "help": " Used only in binary tree classification. Incompleteness of the tree on each level.Default=0 "
 },
 {
   "count": 2,
   "prog": "e2refine_easy.py ",
   "option": " ['--ampcorrect'] ",
   "default": " auto ",
   "type": " None ",
   "help": " Will perform amplitude correction via the specified method.  'flatten' requires a target resolution better than 8 angstroms (experimental). 'none' will disable amplitude correction (experimental). "
 },
 {
   "count": 2,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--ampcorrect'] ",
   "default": " strucfac ",
   "type": " None ",
   "help": " Will perform amplitude correction via the specified method. The default choice is strucfac. "
 },
 {
   "count": 2,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--localsize'] ",
   "default": "-1",
   "type": " float ",
   "help": " Override the automatic local region size (in A) used for local resolution calculation and filtration. "
 },
 {
   "count": 2,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--automask3d2'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=None. Specify as a processor. This will be applied to the mask produced by the first automask. "
 },
 {
   "count": 2,
   "prog": "e2refinemulti.py ",
   "option": " ['--nmodels'] ",
   "default": "2",
   "type": " int ",
   "help": " The total number of different maps to generate. Specify with --model, but not with --models "
 },
 {
   "count": 2,
   "prog": "e2refinemulti.py ",
   "option": " ['--treeclassify'] ",
   "default": " False ",
   "type": " None ",
   "help": " Classify using a binary tree. This will call e2classifytree.py for particle classification, replacing e2simmx2stage.py and e2classify.py. This function is still experimental. "
 },
 {
   "count": 2,
   "prog": "e2refinemulti.py ",
   "option": " ['--speed'] ",
   "default": "5",
   "type": " int ",
   "help": " (1-7) Balances speed vs precision. Larger values sacrifice a bit of potential resolution for significant speed increases. Set to 1 when pushing resolution. default=5 "
 },
 {
   "count": 2,
   "prog": "e2refinemulti.py ",
   "option": " ['--classautomask'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will apply an automask to the class-average during iterative alignment for better accuracy. The final class averages are unmasked. "
 },
 {
   "count": 2,
   "prog": "e2refinemulti.py ",
   "option": " ['--treeincomplete'] ",
   "default": "0",
   "type": " int ",
   "help": " Used only in binary tree classification. Incompleteness of the tree on each level.Default=0 "
 },
 {
   "count": 2,
   "prog": "e2refinemulti.py ",
   "option": " ['--m3dsetsf'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=auto. Name of a file containing a structure factor to apply after refinement "
 },
 {
   "count": 1,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--path', '--newpath'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to the classified results (output). Default = multinoali_XX "
 },
 {
   "count": 1,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--models', '--model'] ",
   "default": " None ",
   "type": " str ",
   "help": " Comma separated list of reference maps used for classification. If a single map is provided, data will be split into two groups based on similarity to the single map. "
 },
 {
   "count": 2,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--thresh'] ",
   "default": "0",
   "type": " float ",
   "help": " Phase Residual cutoff. Particles with a higher phase residual will not be included in the refinement  "
 },
 {
   "count": 2,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--randomizemodel'] ",
   "default": "0",
   "type": " None ",
   "help": " Optionally randomize the phases of the initial model to this resolution (in Angstroms) "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--ctfcorrect'] ",
   "default": " False ",
   "type": " None ",
   "help": " (T/F)Do CTF Correction? "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--dataphaseflipped'] ",
   "default": " False ",
   "type": " None ",
   "help": " (T/F)Has the data been phase flipped already? "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--ignoretofirstpeak'] ",
   "default": " False ",
   "type": " None ",
   "help": " (T/F)Ignore CTF's until the first peak? "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--particle_mask_diameter'] ",
   "default": "-1",
   "type": " float ",
   "help": " Diameter of the soft circular image mask (in Angstroms) "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--solventmask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Location of the mask to be used "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--offsetrange'] ",
   "default": "10",
   "type": " float ",
   "help": " Offset search range (pix) "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--offsetstep'] ",
   "default": "2",
   "type": " float ",
   "help": " Offset search step (pix) "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--randomizemodel'] ",
   "default": "0",
   "type": " None ",
   "help": " Optionally randomize the phases of the initial model to this resolution (in Angstroms) "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--ctfcorrect'] ",
   "default": " False ",
   "type": " None ",
   "help": " (T/F)Do CTF Correction? "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--dataphaseflipped'] ",
   "default": " False ",
   "type": " None ",
   "help": " (T/F)Has the data been phase flipped already? "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--ignoretofirstpeak'] ",
   "default": " False ",
   "type": " None ",
   "help": " (T/F)Ignore CTF's until the first peak? "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--particle_mask_diameter'] ",
   "default": "-1",
   "type": " float ",
   "help": " Diameter of the soft spherical image mask in angstroms "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--solventmask'] ",
   "default": "  ",
   "type": " str ",
   "help": " Location of the mask to be used "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--offsetrange'] ",
   "default": "10",
   "type": " float ",
   "help": " Offset search range (pix) "
 },
 {
   "count": 2,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--offsetstep'] ",
   "default": "2",
   "type": " float ",
   "help": " Offset search step (pix) "
 },
 {
   "count": 2,
   "prog": "e2refinevariance.py ",
   "option": " ['--usefilt'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify a particle data file that has been low pass or Wiener filtered. Has a one to one correspondence with your particle data. If specified will be used in projection matching routines, and elsewhere. "
 },
 {
   "count": 2,
   "prog": "e2refinevariance.py ",
   "option": " ['--nmodels'] ",
   "default": "10",
   "type": " int ",
   "help": " The number of different bootstrap models to generate for the variance computation. Default=10 "
 },
 {
   "count": 2,
   "prog": "e2refinevariance.py ",
   "option": " ['--iteration'] ",
   "default": "-1",
   "type": " int ",
   "help": " The refinement iteration to use as a basis for the variance map "
 },
 {
   "count": 2,
   "prog": "e2refinevariance.py ",
   "option": " ['--m3dsetsf'] ",
   "default": " False ",
   "type": " None ",
   "help": " The standard deviation alternative to the --m3dkeep argument "
 },
 {
   "count": 2,
   "prog": "e2segment3d.py ",
   "option": " ['--txtout'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of file to write center of segments in text format (n x y z, with coordinates in pixels, 0,0,0 in the corner) "
 },
 {
   "count": 2,
   "prog": "e2segment3d.py ",
   "option": " ['--edgefile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Write an edge file for pathwalker.py. Only avaliable while using existing secondary structures. "
 },
 {
   "count": 2,
   "prog": "e2simmx.py ",
   "option": " ['--colmasks'] ",
   "default": " None ",
   "type": " str ",
   "help": " File containing one mask for each column (projection) image, to be used when refining row (particle) image alignments. "
 },
 {
   "count": 2,
   "prog": "e2simmx2stage.py ",
   "option": " ['--colmasks'] ",
   "default": " None ",
   "type": " str ",
   "help": " File containing one mask for each column (projection) image, to be used when refining row (particle) image alignments. "
 },
 {
   "count": 2,
   "prog": "e2spa_refine.py ",
   "option": " ['--ptcl'] ",
   "default": "  ",
   "type": " str ",
   "help": " particle input "
 },
 {
   "count": 2,
   "prog": "e2spa_refine_multi.py ",
   "option": " ['--ptcl'] ",
   "default": "  ",
   "type": " str ",
   "help": " particle input "
 },
 {
   "count": 2,
   "prog": "e2speedtest.py ",
   "option": " ['--short'] ",
   "default": " False ",
   "type": " None ",
   "help": " Fewer iterations, mainly for profiling "
 },
 {
   "count": 2,
   "prog": "e2spt_align.py ",
   "option": " ['--breaksymsym'] ",
   "default": " None ",
   "type": " str ",
   "help": " the symmetry to use for breaksym. setting sym to c6 and this to c2 results in a c3 structure. default is the same as sym "
 },
 {
   "count": 2,
   "prog": "e2spt_align.py ",
   "option": " ['--test180'] ",
   "default": " False ",
   "type": " None ",
   "help": " Test for improved alignment with 180 degree rotations even during refine alignment "
 },
 {
   "count": 2,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--curve'] ",
   "default": " False ",
   "type": " None ",
   "help": " . "
 },
 {
   "count": 2,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--nslices'] ",
   "default": "61",
   "type": " int ",
   "help": " This will determine the tilt step between slices, depending on tiltrange. For example, to simulate a 2 deg tilt step supply --nslices=61 --tiltrange=60. Recall that --tiltrange goes from - to + the supplied value, and that there is a central slice or projection at 0 deg, for symmetrical tilt series. "
 },
 {
   "count": 2,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--tomogram'] ",
   "default": "  ",
   "type": " str ",
   "help": " Name of the tomogram. "
 },
 {
   "count": 2,
   "prog": "e2spt_average.py ",
   "option": " ['--outfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Normally even/odd and overall outputs automatically generated. If specified, only overall file written with this specified filename. Suppresses postprocessing. "
 },
 {
   "count": 2,
   "prog": "e2spt_average.py ",
   "option": " ['--wedgesigma'] ",
   "default": "3",
   "type": " float ",
   "help": " Threshold for identifying missing data in Fourier space in terms of standard deviation of each Fourier shell. Default 3.0 "
 },
 {
   "count": 2,
   "prog": "e2spt_average.py ",
   "option": " ['--listfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify a filename containing a list of integer particle numbers to include in the average, one per line, first is 0. Additional exclusions may apply. "
 },
 {
   "count": 2,
   "prog": "e2spt_average.py ",
   "option": " ['--symalimasked'] ",
   "default": " None ",
   "type": " str ",
   "help": " This will translationally realign each asymmetric unit to the specified (usually masked) reference  "
 },
 {
   "count": 2,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--wedgesigma'] ",
   "default": "3",
   "type": " float ",
   "help": " Threshold for identifying missing data in Fourier space in terms of standard deviation of each Fourier shell. Default 3.0 "
 },
 {
   "count": 2,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--listfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify a filename containing a list of integer particle numbers to include in the average, one per line, first is 0. Additional exclusions may apply. "
 },
 {
   "count": 2,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--maskclass'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask each reference before classification "
 },
 {
   "count": 2,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--iterstop'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0. (Not used). The program is called to convergence by default (all particles merge into one final average). To stop at an intermediate iteration, provide this parameter. For example, --iterstop=1, will only allow the algorithm to complete 1 iteration; --iterstop=2 will allow it to go through 2, etc. "
 },
 {
   "count": 2,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--inmemory'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If on, this option will read the entire tomogram into memory. Much faster than reading 'from disk', but you must have enough RAM! "
 },
 {
   "count": 2,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--refpreprocess'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This will preprocess the reference identically to the particles. It is off by default, but it is internally turned on when no reference is supplied. It should probably be off when using a crystal structure (with all positive densities) turned to EM density as an initial model, but it should be on when using an EM map. "
 },
 {
   "count": 2,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--refrandphase'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0 (off). Resolution to phase randomize the reference to (or the two copies of the reference if --goldstandardoff is NOT supplied [gold standard refinement is on by default]. "
 },
 {
   "count": 2,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--resultmx'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=None. Specify an output image to store the result matrix. This is in the same format as the classification matrix. http://blake.bcm.edu/emanwiki/EMAN2/ClassmxFiles "
 },
 {
   "count": 2,
   "prog": "e2spt_classify.py ",
   "option": " ['--localfilter'] ",
   "default": " False ",
   "type": " None ",
   "help": " use tophat local "
 },
 {
   "count": 2,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--outputstem'] ",
   "default": "  ",
   "type": " str ",
   "help": " Stem common to all   output image stacks. For example, if --outputstem=myvirus and --save2d is provided,    the phase-flipped images for each subtiltseries wille be saved to myvirus_subtiltptclXXXX.hdf.   If --save3d is provided, the stack of reconstructed subvolumes will be saved to myvirus_stack3d.hdf "
 },
 {
   "count": 2,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--icethickness'] ",
   "default": "0",
   "type": " int ",
   "help": " This corresponds   to the Z dimension in pixels of the reconstructed raw tomogram (uncropped), at the same binning   (sampling) as the provided tiltseries, images or subtiltseries.   This value MUST be provided, only if --subtiltsdir is given.    "
 },
 {
   "count": 2,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--autofit'] ",
   "default": " False ",
   "type": " None ",
   "help": " Runs automated   CTF fitting on the input images, based on tiling. "
 },
 {
   "count": 2,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--icethicknessauto'] ",
   "default": " False ",
   "type": " None ",
   "help": "    If --subtiltsdir is provided (and if --icethickness is *not* provided), the thickness of the    specimen in Z will be calculated by computing the difference between the largest    and the smallest Z coordinate found in the header of the subtiltseries, plus the size of the specimen, calculated from --radius. "
 },
 {
   "count": 2,
   "prog": "e2spt_evalrefine.py ",
   "option": " ['--timing'] ",
   "default": " False ",
   "type": " None ",
   "help": " Report on the time required for each step of each refinement run "
 },
 {
   "count": 2,
   "prog": "e2spt_evalrefine.py ",
   "option": " ['--timingbypath'] ",
   "default": " False ",
   "type": " None ",
   "help": " Report on the CPU time required in each refine_xx folder "
 },
 {
   "count": 2,
   "prog": "e2spt_evalrefine.py ",
   "option": " ['--resolution_all'] ",
   "default": " False ",
   "type": " None ",
   "help": " generates resolution plot with the last iteration of all refine_xx directories "
 },
 {
   "count": 2,
   "prog": "e2spt_evalrefine.py ",
   "option": " ['--resolution_vsref'] ",
   "default": " None ",
   "type": " str ",
   "help": " Computes the FSC between the last iteration of each refine_xx directory and a specified reference map. Map must be aligned, but will be rescaled if necessary. "
 },
 {
   "count": 2,
   "prog": "e2spt_evalsubtlt.py ",
   "option": " ['--loadali2d'] ",
   "default": " None ",
   "type": " str ",
   "help": " previous 2d alignment "
 },
 {
   "count": 2,
   "prog": "e2spt_extract.py ",
   "option": " ['--wiener'] ",
   "default": " False ",
   "type": " None ",
   "help": " wiener filter the particles using ctf information.. "
 },
 {
   "count": 2,
   "prog": "e2spt_extract.py ",
   "option": " ['--dotest'] ",
   "default": " False ",
   "type": " None ",
   "help": " only make 1 batch of subtomograms for testing "
 },
 {
   "count": 2,
   "prog": "e2spt_extract.py ",
   "option": " ['--tltkeep'] ",
   "default": "1",
   "type": " float ",
   "help": " keep a fraction of tilt images with good score determined from tomogram reconstruction "
 },
 {
   "count": 2,
   "prog": "e2spt_extract.py ",
   "option": " ['--rmbeadthr'] ",
   "default": "-1",
   "type": " float ",
   "help": " remove 2d particles with high contrast object beyond N sigma at 100A. Note that this may result in generating fewer particles than selected. Default is -1 (include all particles). 0.5 might be a good choice for removing gold beads but may need some testing... "
 },
 {
   "count": 2,
   "prog": "e2spt_extract.py ",
   "option": " ['--append'] ",
   "default": " False ",
   "type": " None ",
   "help": " append to existing files. "
 },
 {
   "count": 2,
   "prog": "e2spt_extract.py ",
   "option": " ['--postxf'] ",
   "default": " None ",
   "type": " str ",
   "help": " a file listing post transforms (see http://eman2.org/e2tomo_more), or for simple symmetry, <sym>,<cx>,<cy>,<cz> where the coordinates specify the center of a single subunit "
 },
 {
   "count": 2,
   "prog": "e2spt_extractfromseg.py ",
   "option": " ['--thresh'] ",
   "default": "1",
   "type": " float ",
   "help": " Threshold of density value for particle extraction. "
 },
 {
   "count": 2,
   "prog": "e2spt_extractfromseg.py ",
   "option": " ['--sort'] ",
   "default": " False ",
   "type": " None ",
   "help": " Sort particles by segmentation density. "
 },
 {
   "count": 2,
   "prog": "e2spt_hac.py ",
   "option": " ['--iterstop'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0. (Not used). The program is called to convergence by default (all particles merge into one final average). To stop at an intermediate iteration, provide this parameter. For example, --iterstop=1, will only allow the algorithm to complete 1 iteration; --iterstop=2 will allow it to go through 2, etc. "
 },
 {
   "count": 2,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--inputstem'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Aligned tilt series. String common to all files to be processed, in the current folder. For example, if you have many subtiltseries named subt00.hdf, subt01.hdf, ...subt99.hdf, you would supply --stem=subt to have all these processed. "
 },
 {
   "count": 2,
   "prog": "e2spt_isr.py ",
   "option": " ['--inputstem'] ",
   "default": "  ",
   "type": " str ",
   "help": " Alternative to supplying --input. This is a string common to multiple files to be processed in the CURRENT directory. The common string doesn't need to be at a particular location in the filenames. For example, a series of files \"tiltA.hdf, tiltB.hdf, tiltC.hdf\" could have either 'hdf', '.hdf', 't,','ti', 'til', 'tilt', etc., as a common string. The key is to choose a string shared ONLY by the files of interest. The files should be multiple subtiltseries in .hdf format; each file should correspond to an individual subtiltseries for a different particle: That is, each file should be a subtiltseries corresponding to an individual subtomogram, as extracted by e2spt_subtilt.py, or as simulated by e2spt_simulation.py "
 },
 {
   "count": 2,
   "prog": "e2spt_mapptclstotomo.py ",
   "option": " ['--postxf'] ",
   "default": "  ",
   "type": " str ",
   "help": " extra shift after alignment "
 },
 {
   "count": 2,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--dotest'] ",
   "default": "-1",
   "type": " int ",
   "help": " test using N random particles "
 },
 {
   "count": 2,
   "prog": "e2spt_preproc.py ",
   "option": " ['--nopath'] ",
   "default": " False ",
   "type": " None ",
   "help": " If supplied, this option will save results in the directory where the command is run. A directory to store the results will not be made. "
 },
 {
   "count": 2,
   "prog": "e2spt_project.py ",
   "option": " ['--symalimasked'] ",
   "default": " None ",
   "type": " str ",
   "help": " This will translationally realign each asymmetric unit to the specified (usually masked) reference  "
 },
 {
   "count": 2,
   "prog": "e2spt_recompute.py ",
   "option": " ['--tomograms'] ",
   "default": "  ",
   "type": " str ",
   "help": " Comma separated list of tomograms with REC extension from which all particles in --stacks came from. "
 },
 {
   "count": 2,
   "prog": "e2spt_refine.py ",
   "option": " ['--localfilter'] ",
   "default": " False ",
   "type": " None ",
   "help": " Deprecated. Please use --tophat "
 },
 {
   "count": 2,
   "prog": "e2spt_refine.py ",
   "option": " ['--realign'] ",
   "default": " False ",
   "type": " None ",
   "help": " realigns the average to the initial reference to prevent drift in C1 refinements "
 },
 {
   "count": 2,
   "prog": "e2spt_refine.py ",
   "option": " ['--test180'] ",
   "default": " False ",
   "type": " None ",
   "help": " Test for improved alignment with 180 degree rotations even during refine alignment "
 },
 {
   "count": 2,
   "prog": "e2spt_refine.py ",
   "option": " ['--scipy'] ",
   "default": " False ",
   "type": " None ",
   "help": " test scipy refinement "
 },
 {
   "count": 2,
   "prog": "e2spt_refine.py ",
   "option": " ['--breaksymsym'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify a different symmetry for breaksym. "
 },
 {
   "count": 1,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--parallel', '-P'] ",
   "default": " thread:4 ",
   "type": " str ",
   "help": " Run in parallel, specify type:<option>=<value>:<option>=<value>. See http://blake.bcm.edu/emanwiki/EMAN2/Parallel "
 },
 {
   "count": 2,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--curve'] ",
   "default": " False ",
   "type": " None ",
   "help": " curve refinement. still testing "
 },
 {
   "count": 2,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--loadali2d'] ",
   "default": " None ",
   "type": " str ",
   "help": " load previous 2d alignment "
 },
 {
   "count": 2,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--smoothN'] ",
   "default": "15",
   "type": " int ",
   "help": " number of neighboring particles used for smoothing. default 15 "
 },
 {
   "count": 2,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--maskclass'] ",
   "default": " None ",
   "type": " str ",
   "help": " Mask file applied to 3D classification references in each iteration. Not applied to the average. "
 },
 {
   "count": 2,
   "prog": "e2spt_refinemulti.py ",
   "option": " ['--scipy'] ",
   "default": " False ",
   "type": " None ",
   "help": " test scipy refinement "
 },
 {
   "count": 2,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--refpreprocess'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This will preprocess the reference identically to the particles. It is off by default, but it is internally turned on when no reference is supplied. It should probably be off when using a crystal structure (with all positive densities) turned to EM density as an initial model, but it should be on when using an EM map. "
 },
 {
   "count": 2,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--refrandphase'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0. Resolution to phase-randomize the reference to. "
 },
 {
   "count": 2,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--notmatchimgs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=True. This option prevents applying filter.match.to to one image so that it matches the other's spectral profile during preprocessing for alignment purposes. "
 },
 {
   "count": 2,
   "prog": "e2spt_sgd.py ",
   "option": " ['--filterto'] ",
   "default": "0.02",
   "type": " float ",
   "help": " Fiter map to frequency after each iteration. Default is 0.02 "
 },
 {
   "count": 2,
   "prog": "e2spt_sgd.py ",
   "option": " ['--batchsize'] ",
   "default": "12",
   "type": " int ",
   "help": " SGD batch size "
 },
 {
   "count": 2,
   "prog": "e2spt_simulation.py ",
   "option": " ['--icethickness'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0. Thickness of the specimen to simulate, in microns (e.g., 0.4 would be 400 nm); --icethickness will be used to calculate the size of the tomogram in Z in PIXELS for the simulated tomogram. This parameter will also be used to assign a random coordinate in Z to each subtomogram. "
 },
 {
   "count": 2,
   "prog": "e2spt_simulation.py ",
   "option": " ['--nslices'] ",
   "default": "61",
   "type": " int ",
   "help": " Default=61. This will determine the tilt step between slices, depending on tiltrange. For example, to simulate a 2 deg tilt step supply --nslices=61 --tiltrange=60. Recall that --tiltrange goes from - to + the supplied value, and that there is a central slice or projection at 0 deg, for symmetrical tilt series. "
 },
 {
   "count": 2,
   "prog": "e2spt_stat.py ",
   "option": " ['--bins'] ",
   "default": "100",
   "type": " int ",
   "help": " Number of bins to use in the histogram "
 },
 {
   "count": 2,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--tomogram'] ",
   "default": "  ",
   "type": " str ",
   "help": " Path to raw, unbinned tomogram. "
 },
 {
   "count": 2,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--icethicknessauto'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If supplied, the thickness of the tomogram in Z will be calculated by computing the difference between the largest and the smallest Z coordinate found in the --coords3d coordinates file. "
 },
 {
   "count": 2,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--smoothN'] ",
   "default": "15",
   "type": " int ",
   "help": " number of neighboring particles used for smoothing. default 15 "
 },
 {
   "count": 2,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--reference'] ",
   "default": "  ",
   "type": " None ",
   "help": " Specify a 3D reference volume. This should be 'light contrast', ie - positive isosurface. "
 },
 {
   "count": 2,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--nptcl'] ",
   "default": "500",
   "type": " int ",
   "help": " maximum number of particles "
 },
 {
   "count": 2,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--refineastep'] ",
   "default": "1",
   "type": " float ",
   "help": " Mean angular variation for refine alignment "
 },
 {
   "count": 2,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--padby'] ",
   "default": "1.5",
   "type": " float ",
   "help": " pad by factor. default is 1.5 "
 },
 {
   "count": 2,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--refineastep'] ",
   "default": "2",
   "type": " float ",
   "help": " Mean angular variation for refine alignment "
 },
 {
   "count": 2,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--seedmap'] ",
   "default": " False ",
   "type": " None ",
   "help": " seed "
 },
 {
   "count": 2,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--padby'] ",
   "default": "2",
   "type": " float ",
   "help": " pad by factor. default is 2 "
 },
 {
   "count": 2,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--anglesindxinfilename'] ",
   "default": " None ",
   "type": " int ",
   "help": " Default=None. The filename of the images will be split at any occurence of the following delimiters: '_', '-', '+', '[' , ']' , ',' , ' ' (the two last ones are a comma and a blank space). Provide the index (position) of the angle in the split filename. For example, if the filename of an image is \"my_specimen-oct-10-2015_-50_deg-from_k2 camera.mrc\", it will be split into ['my','specimen','oct','10','2015','','50','deg','from','k2','camera','mrc']. The angle '-50', is at position 6 (starting from 0). Therefore, you would provide --anglesindxinfilename=6, assuming all images to be stacked/processed are similarly named. No worries about the minus sign disappearing. The program will look at whether there's a minus sign immediately preceeding the position where the angle info is. "
 },
 {
   "count": 2,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--highesttilt'] ",
   "default": "0",
   "type": " float ",
   "help": " Highest tilt angle. If not supplied, it will be assumed to be 1* --tiltrange. "
 },
 {
   "count": 2,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--lowesttilt'] ",
   "default": "0",
   "type": " float ",
   "help": " Lowest tilt angle. If not supplied, it will be assumed to be -1* --tiltrange. "
 },
 {
   "count": 2,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--normalizeimod'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This will apply 'newstack -float 2' to the input stack. Requires IMOD. Does not apply to --unstack or --restack. "
 },
 {
   "count": 2,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--stackregardless'] ",
   "default": " False ",
   "type": " None ",
   "help": " \"Stack images found with the common string provided through --stem2stack, even if the number of images does not match the predicted number of tilt angles. "
 },
 {
   "count": 2,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--tiltstep'] ",
   "default": "0",
   "type": " float ",
   "help": " Step between tilts. Required if using --stem2stack. "
 },
 {
   "count": 2,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--alltiltseries'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use all tilt series in the folder. Acceptable file extensions include hdf, mrc, mrcs, st. "
 },
 {
   "count": 2,
   "prog": "e2spt_trajfromrefine.py ",
   "option": " ['--nptcl'] ",
   "default": "500",
   "type": " int ",
   "help": " number of particle per average. default is 500 "
 },
 {
   "count": 2,
   "prog": "e2stacksort.py ",
   "option": " ['--iterative'] ",
   "default": " False ",
   "type": " None ",
   "help": " Iterative approach for achieving a good 'consensus alignment' among the set of particles "
 },
 {
   "count": 2,
   "prog": "e2stacksort.py ",
   "option": " ['--invar'] ",
   "default": " False ",
   "type": " None ",
   "help": " Sorting and alignment using invariants. "
 },
 {
   "count": 2,
   "prog": "e2symsearch3d.py ",
   "option": " ['--nopath'] ",
   "default": " False ",
   "type": " None ",
   "help": " If supplied, this option will save results in the directory where the command is run. A directory to store the results will not be made. "
 },
 {
   "count": 2,
   "prog": "e2symsearch3d.py ",
   "option": " ['--notmatchimgs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=True. This option prevents applying filter.match.to to one image so that it matches the other's spectral profile during preprocessing for alignment purposes. "
 },
 {
   "count": 2,
   "prog": "e2tilefile.py ",
   "option": " ['--dump'] ",
   "default": " False ",
   "type": " None ",
   "help": " Dump the tile dictionary from the file "
 },
 {
   "count": 2,
   "prog": "e2tiltseries.py ",
   "option": " ['--tilts'] ",
   "default": " False ",
   "type": " None ",
   "help": " Write results to 'tiltseries' directory in current project. "
 },
 {
   "count": 2,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--untiltdata'] ",
   "default": " None ",
   "type": " str ",
   "help": " Stack of untilted images "
 },
 {
   "count": 2,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--tiltdata'] ",
   "default": " None ",
   "type": " str ",
   "help": " Stack of tilted images "
 },
 {
   "count": 2,
   "prog": "e2tomo_stackframes.py ",
   "option": " ['--extension'] ",
   "default": " .mrc ",
   "type": " str ",
   "help": " default=.mrc. Valid choices are .mrcs, .hdf, .tiff "
 },
 {
   "count": 2,
   "prog": "e2tomo_stackframes.py ",
   "option": " ['--outputstem'] ",
   "default": " stack ",
   "type": " str ",
   "help": " default=stack. Output filename stem/root to write stacked frames out to; e.g., \"stack_01\", \"stack_02\", \"stack_03\", etc. Explicitly choose an extension/format by supplying --extension; e.g., --extension=.hdf, and the output will be 'stack_01_angle+02.hdf','stack_02_angle+00.hdf','stack_03_angle-02.hdf', etc, etc. "
 },
 {
   "count": 2,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--anglesindxinfilename'] ",
   "default": " None ",
   "type": " int ",
   "help": " Default=None. The filename of the images will be split at any occurence of the following delimiters: '_', '-', '+', '[' , ']' , ',' , ' ' (the two last ones are a comma and a blank space). Provide the index (position) of the angle in the split filename. For example, if the filename of an image is \"my_specimen-oct-10-2015_-50_deg-from_k2 camera.mrc\", it will be split into ['my','specimen','oct','10','2015','','50','deg','from','k2','camera','mrc']. The angle '-50', is at position 6 (starting from 0). Therefore, you would provide --anglesindxinfilename=6, assuming all images to be stacked/processed are similarly named. No worries about the minus sign disappearing. The program will look at whether there's a minus sign immediately preceeding the position where the angle info is. "
 },
 {
   "count": 2,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--highesttilt'] ",
   "default": "0",
   "type": " float ",
   "help": " Highest tilt angle. If not supplied, it will be assumed to be 1* --tiltrange. "
 },
 {
   "count": 2,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--lowesttilt'] ",
   "default": "0",
   "type": " float ",
   "help": " Lowest tilt angle. If not supplied, it will be assumed to be -1* --tiltrange. "
 },
 {
   "count": 2,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--stackregardless'] ",
   "default": " False ",
   "type": " None ",
   "help": " \"Stack images found with the common string provided through --stem2stack, even if the number of images does not match the predicted number of tilt angles. "
 },
 {
   "count": 2,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--tiltstep'] ",
   "default": "0",
   "type": " float ",
   "help": " Step between tilts. Required if using --stem2stack. "
 },
 {
   "count": 2,
   "prog": "e2tomogram.py ",
   "option": " ['--alltiltseries'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use all tilt series in the folder. Acceptable file extensions include hdf, mrc, mrcs, st. "
 },
 {
   "count": 2,
   "prog": "e2tomogram.py ",
   "option": " ['--mdoc'] ",
   "default": "  ",
   "type": " str ",
   "help": " Specify a SerialEM .mdoc file or a folder containing same-named .mdoc files "
 },
 {
   "count": 2,
   "prog": "e2tomogram.py ",
   "option": " ['--tltkeep'] ",
   "default": "0.9",
   "type": " float ",
   "help": " Fraction of tilts to keep in the reconstruction. "
 },
 {
   "count": 2,
   "prog": "e2tomogram.py ",
   "option": " ['--filterto'] ",
   "default": "0.45",
   "type": " float ",
   "help": " filter to abs. "
 },
 {
   "count": 2,
   "prog": "e2tomogram.py ",
   "option": " ['--rmbeadthr'] ",
   "default": "-1",
   "type": " float ",
   "help": " Density value threshold (of sigma) for removing beads. high contrast objects beyond this value will be removed. default is -1 for not removing. try 10 for removing fiducials "
 },
 {
   "count": 2,
   "prog": "e2tomopreproc.py ",
   "option": " ['--normalizeimod'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This will apply 'newstack -float 2' to the input stack. Requires IMOD. "
 },
 {
   "count": 2,
   "prog": "e2tomoseg_buildtrainset.py ",
   "option": " ['--ncopy'] ",
   "default": "10",
   "type": " int ",
   "help": " Number of copies for NEGATIVE samples. (number of copies of particles is calculated accordingly)  "
 },
 {
   "count": 2,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--ncopy'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of copies for each particle "
 },
 {
   "count": 2,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--tomograms'] ",
   "default": " None ",
   "type": " str ",
   "help": " Tomograms input. "
 },
 {
   "count": 2,
   "prog": "e2tomoseg_preproc.py ",
   "option": " ['--proctag'] ",
   "default": " preproc ",
   "type": " None ",
   "help": " Tag added to the name of each tomogram when using the proc options. Default is 'preproc'. "
 },
 {
   "count": 2,
   "prog": "e2tvrecon.py ",
   "option": " ['--beta'] ",
   "default": "1",
   "type": " float ",
   "help": " Specify the total-variation    penalization/regularization weight parameter 'beta'. The default is 5.0. "
 },
 {
   "count": 2,
   "prog": "e2tvrecon.py ",
   "option": " ['--inmemory'] ",
   "default": " False ",
   "type": " None ",
   "help": " If provided,   this option will keep certain files open in memory instead of writing them and   reading from disk every time. While this can be faster, it is very memory-intensive. "
 },
 {
   "count": 1,
   "prog": "e2RCTboxer.py ",
   "option": " ['--write_boxes'] ",
   "default": " False ",
   "type": " None ",
   "help": " Write coordinate file (eman1 dbbox) files "
 },
 {
   "count": 1,
   "prog": "e2a2d_average.py ",
   "option": " ['--scorebestset'] ",
   "default": "0",
   "type": " int ",
   "help": " Will extract the N particles with the best scores to make a new set "
 },
 {
   "count": 1,
   "prog": "e2a2d_average.py ",
   "option": " ['--scorebands'] ",
   "default": "0",
   "type": " int ",
   "help": " If specified will generate averages over N bands of 'score' values, including only particles in each band. "
 },
 {
   "count": 1,
   "prog": "e2a2d_average.py ",
   "option": " ['--scorebandsali'] ",
   "default": "0",
   "type": " int ",
   "help": " If specified will generate averages over N bands of 'score' values, including only particles in each band, and iteratively realigning in each band. "
 },
 {
   "count": 1,
   "prog": "e2a2d_average.py ",
   "option": " ['--scoreprogressive'] ",
   "default": "0",
   "type": " int ",
   "help": " If specified will generate progressive averages over N bands of 'score' values, including all particles starting with the best through the progressive bands. "
 },
 {
   "count": 1,
   "prog": "e2a2d_stat.py ",
   "option": " ['--multicmp'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set will apply a range of different comparators to the aligned particle data and generate a multicolumn text file "
 },
 {
   "count": 1,
   "prog": "e2align2d.py ",
   "option": " ['--refn'] ",
   "default": "0",
   "type": " int ",
   "help": " Number of the reference image in 'ref'. Default=0 "
 },
 {
   "count": 1,
   "prog": "e2align3d.py ",
   "option": " ['--maskrad'] ",
   "default": "-1",
   "type": " int ",
   "help": " Mask the recon using a spherical Gaussian mask (-1 = None), default=-1.0 "
 },
 {
   "count": 1,
   "prog": "e2align3d.py ",
   "option": " ['--maskfoff'] ",
   "default": "0.1",
   "type": " float ",
   "help": " Fall offf of the Gaussian mask, default=0.1 "
 },
 {
   "count": 1,
   "prog": "e2align3d.py ",
   "option": " ['--nsolns'] ",
   "default": "1",
   "type": " int ",
   "help": " number of peaks in the global search to refine, default=1.0 "
 },
 {
   "count": 1,
   "prog": "e2align3d.py ",
   "option": " ['--famps'] ",
   "default": "1",
   "type": " float ",
   "help": " fraction of Fourier amps to exclude from recons. 0 means that this option is not used, default=0.0 "
 },
 {
   "count": 1,
   "prog": "e2align3d.py ",
   "option": " ['--prec'] ",
   "default": "0.01",
   "type": " float ",
   "help": " Precision to determine what solutions are the 'same' used only statistics output, default=0.01 "
 },
 {
   "count": 1,
   "prog": "e2align3d.py ",
   "option": " ['--dphi'] ",
   "default": "30",
   "type": " float ",
   "help": " step size for the inplane angle phi, default=30.0 "
 },
 {
   "count": 1,
   "prog": "e2align3d.py ",
   "option": " ['--phi0'] ",
   "default": "0",
   "type": " float ",
   "help": " lower bound for the inplane angle phi, default=0.0 "
 },
 {
   "count": 1,
   "prog": "e2align3d.py ",
   "option": " ['--phi1'] ",
   "default": "359",
   "type": " float ",
   "help": " Upper bound for the inplane angle phi, default=359.0 "
 },
 {
   "count": 1,
   "prog": "e2align3d.py ",
   "option": " ['--dotrans'] ",
   "default": "1",
   "type": " int ",
   "help": " Do translational search, default=1 "
 },
 {
   "count": 1,
   "prog": "e2align3d.py ",
   "option": " ['--rcmp'] ",
   "default": " ccc ",
   "type": " str ",
   "help": " comparitor and params to use for the 3D refiner, default='ccc' "
 },
 {
   "count": 1,
   "prog": "e2basis.py ",
   "option": " ['--normcomponent'] ",
   "default": " False ",
   "type": " None ",
   "help": " Normalize the dot product for each component of the output vector. If the basis spans the input vector, then the projected vector length will be 1, otherwise it will be less than 1. "
 },
 {
   "count": 1,
   "prog": "e2basis.py ",
   "option": " ['--mean1'] ",
   "default": " False ",
   "type": " None ",
   "help": " Indicates that the first image in the basis set is actually the mean image, which should be subtracted prior to projection. Output from e2msa requires this flag. "
 },
 {
   "count": 1,
   "prog": "e2basis.py ",
   "option": " ['--recalcmean'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will recompute the mean from the input set and subtract before projection. Useful if a different normalization is used than in the original basis file. "
 },
 {
   "count": 1,
   "prog": "e2basis.py ",
   "option": " ['--oneout'] ",
   "default": " False ",
   "type": " None ",
   "help": " Output is a single 2-D image rather than a set of 1-D images "
 },
 {
   "count": 1,
   "prog": "e2basis.py ",
   "option": " ['--basislist'] ",
   "default": " None ",
   "type": " str ",
   "help": " List of basis vectors to use, comma delimited. "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--cleanup'] ",
   "default": " False ",
   "type": " None ",
   "help": " This option will clean up the database cache so files can safely be moved or accessed on another computer via NFS. "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--delete'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will delete (or at least empty) the named database(s) "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--all'] ",
   "default": " False ",
   "type": " None ",
   "help": " List per-particle info "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--long'] ",
   "default": " False ",
   "type": " None ",
   "help": " Long listing "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--filt'] ",
   "default": " None ",
   "type": " str ",
   "help": " Only include dictionary names containing the specified string "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--filtexclude'] ",
   "default": " None ",
   "type": " str ",
   "help": " Exclude dictionary names containing the specified string "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--match'] ",
   "default": " None ",
   "type": " str ",
   "help": " Only include dictionaries matching the provided Python regular expression "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--smalldump'] ",
   "default": " False ",
   "type": " None ",
   "help": " Lists contents of an entire database, but only list 2 items per dictionary to better see headers "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--extractplots'] ",
   "default": " False ",
   "type": " None ",
   "help": " If a database contains sets of plots, such as bdb:refine_xx#convergence.results, this will extract the plots as text files. "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--nocache'] ",
   "default": " False ",
   "type": " None ",
   "help": " Don't use the database cache for this operation "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--makevstack'] ",
   "default": " None ",
   "type": " str ",
   "help": " Creates a 'virtual' BDB stack with its own metadata, but the binary data taken from the (filtered) list of stacks "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--appendvstack'] ",
   "default": " None ",
   "type": " str ",
   "help": " Appends to/creates a 'virtual' BDB stack with its own metadata, but the binary data taken from the (filtered) list of stacks "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--exlist'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify the name of a file with a list of images to exclude in creation of virtual stacks. Please see source for details. "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--restore'] ",
   "default": " None ",
   "type": " str ",
   "help": " Write changes in the derived virtual stack back to the original stack "
 },
 {
   "count": 1,
   "prog": "e2bdb.py ",
   "option": " ['--checkctf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Verifies that all images in the file contain CTF information, and gives some basic statistics "
 },
 {
   "count": 1,
   "prog": "e2boxer.py ",
   "option": " ['--unboxedonly'] ",
   "default": " False ",
   "type": " None ",
   "help": " Only include image files without existing box locations "
 },
 {
   "count": 1,
   "prog": "e2boxer.py ",
   "option": " ['--ptclsize'] ",
   "default": "-1",
   "type": " int ",
   "help": " Longest axis of particle in pixels (diameter, not radius) "
 },
 {
   "count": 1,
   "prog": "e2boxer.py ",
   "option": " ['--no_ctf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Disable CTF determination "
 },
 {
   "count": 1,
   "prog": "e2boxer.py ",
   "option": " ['--autopick'] ",
   "default": " None ",
   "type": " str ",
   "help": " Perform automatic particle picking. Provide mode and parameter string, eg - auto_local:threshold=5.5 "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--exclude_edges'] ",
   "default": " False ",
   "type": " None ",
   "help": " Don't generate output for any particles extending outside the micrograph "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--exclude_bad'] ",
   "default": " False ",
   "type": " None ",
   "help": " Don't generate output for any particles marked as exclude "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--dbls'] ",
   "default": " None ",
   "type": " str ",
   "help": " data base list storage, used by the workflow. You can ignore this argument. "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--autoboxer'] ",
   "default": " None ",
   "type": " str ",
   "help": " A key of the swarm_boxers dict in the local directory, used by the workflow. "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--gauss_autoboxer'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of autoboxed file whose autoboxing parameters (obtained via some previous run of Gauss autoboxer via the GUI) should be used for automatic boxing. "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--do_ctf'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of file whose ctf estimation parameters (obtained via some previous run of Gauss autoboxer via the GUI) should be used for automatic ctf estimation. "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--cter'] ",
   "default": " False ",
   "type": " None ",
   "help": " CTF estimation using cter "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--indir'] ",
   "default": " . ",
   "type": " str ",
   "help": " Directory containing micrographs to be processed. "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--nameroot'] ",
   "default": "  ",
   "type": " str ",
   "help": " Prefix of micrographs to be processed. "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--micsuffix'] ",
   "default": "  ",
   "type": " str ",
   "help": " A string denoting micrograph type. For example 'mrc', 'hdf', 'ser' ... "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--wn'] ",
   "default": "256",
   "type": " int ",
   "help": " Size of window to use (should be slightly larger than particle box size) "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--kboot'] ",
   "default": "16",
   "type": " int ",
   "help": " kboot "
 },
 {
   "count": 1,
   "prog": "e2boxer_old.py ",
   "option": " ['--MPI'] ",
   "default": " False ",
   "type": " None ",
   "help": " use MPI version "
 },
 {
   "count": 1,
   "prog": "e2buildsets.py ",
   "option": " ['--withflipped'] ",
   "default": " False ",
   "type": " None ",
   "help": " Only include images with phase-flipped counterparts! "
 },
 {
   "count": 1,
   "prog": "e2buildsets.py ",
   "option": " ['--withinvar'] ",
   "default": " False ",
   "type": " None ",
   "help": " Only include images with _invar counterparts! "
 },
 {
   "count": 1,
   "prog": "e2buildsets.py ",
   "option": " ['--minbfactor'] ",
   "default": "0",
   "type": " float ",
   "help": " Files with a B-factor lower than specified will be skipped "
 },
 {
   "count": 1,
   "prog": "e2buildsets.py ",
   "option": " ['--maxbfactor'] ",
   "default": "5000",
   "type": " float ",
   "help": " Files with a B-factor higher than specified will be skipped "
 },
 {
   "count": 1,
   "prog": "e2buildstacks.py ",
   "option": " ['--guess'] ",
   "default": " False ",
   "type": " None ",
   "help": " Guess how to split micrographs into tilt series and the order of images in each tilt series from file names. Tilt angles must be incuded in file names. May and may not work depending on the file name format... "
 },
 {
   "count": 1,
   "prog": "e2classaverage.py ",
   "option": " ['--oneclass'] ",
   "default": " None ",
   "type": " int ",
   "help": " Create only a single class-average. Specify the number. "
 },
 {
   "count": 1,
   "prog": "e2classaverage.py ",
   "option": " ['--storebad'] ",
   "default": " False ",
   "type": " None ",
   "help": " Even if a class-average fails, write to the output. Forces 1->1 numbering in output "
 },
 {
   "count": 1,
   "prog": "e2classaverage.py ",
   "option": " ['--decayedge'] ",
   "default": " False ",
   "type": " None ",
   "help": " Applies an edge decay to zero on the output class-averages. A very good idea if you plan on 3-D reconstruction. "
 },
 {
   "count": 1,
   "prog": "e2classaverage.py ",
   "option": " ['--setsfref'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will impose the 1-D structure factor of the reference on the class-average (recommended when a reference is available) "
 },
 {
   "count": 1,
   "prog": "e2classaverage.py ",
   "option": " ['--bootstrap'] ",
   "default": " False ",
   "type": " None ",
   "help": " Ignored. Present for historical reasons only. "
 },
 {
   "count": 1,
   "prog": "e2classaverage.py ",
   "option": " ['--idxcache'] ",
   "default": " False ",
   "type": " None ",
   "help": " Ignored. Present for historical reasons. "
 },
 {
   "count": 1,
   "prog": "e2classaverage.py ",
   "option": " ['--dbpath'] ",
   "default": " . ",
   "type": " None ",
   "help": " Ignored. Present for historical reasons. "
 },
 {
   "count": 1,
   "prog": "e2classaverage.py ",
   "option": " ['--resample'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, will perform bootstrap resampling on the particle data for use in making variance maps. "
 },
 {
   "count": 1,
   "prog": "e2classesbyref.py ",
   "option": " ['--classinfo'] ",
   "default": " None ",
   "type": " str ",
   "help": " Store results in a classinfo_xx.json style file "
 },
 {
   "count": 1,
   "prog": "e2classextract.py ",
   "option": " ['--refinemulti'] ",
   "default": " False ",
   "type": " None ",
   "help": " Extracts particles based on the model_id header value in each class-average, normally produced by e2refinemulti "
 },
 {
   "count": 1,
   "prog": "e2classextract.py ",
   "option": " ['--classlist'] ",
   "default": " None ",
   "type": " str ",
   "help": " Filename of a text file containing a (comma or whitespace separated) list of class average numbers to operate on.  "
 },
 {
   "count": 1,
   "prog": "e2classextract.py ",
   "option": " ['--orientedparticles'] ",
   "default": " None ",
   "type": " str ",
   "help": " Filename of the set (.lst file) with the particles used for the --orientcls file "
 },
 {
   "count": 1,
   "prog": "e2classextract.py ",
   "option": " ['--orientcls'] ",
   "default": " None ",
   "type": " str ",
   "help": " Filename of a cls_result_xx or classmx_xx file.  "
 },
 {
   "count": 1,
   "prog": "e2classextract.py ",
   "option": " ['--orientclassn'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify a comma separated list of class numbers to extract in oriented particles mode. "
 },
 {
   "count": 1,
   "prog": "e2classextract.py ",
   "option": " ['--input_set'] ",
   "default": " None ",
   "type": " str ",
   "help": " Normally the set used to create the class-averages is used as input. Use this with another version of the same set of particles, for example '__ctf_flip_proc' instead of '__ctf_flip'  "
 },
 {
   "count": 1,
   "prog": "e2classextract.py ",
   "option": " ['--evenoddmerge'] ",
   "default": " False ",
   "type": " None ",
   "help": " with --orientedparticles, if cls_result_xx is specified, will include both _even and _odd particles in the output. "
 },
 {
   "count": 1,
   "prog": "e2classextract.py ",
   "option": " ['--noderef'] ",
   "default": " False ",
   "type": " None ",
   "help": " If particle file was .lst, normally the output .lst will reference the original image file. With this option, the output will reference the .lst file instead, creating a lst pointing to another lst. "
 },
 {
   "count": 1,
   "prog": "e2classify.py ",
   "option": " ['--simvec'] ",
   "default": " False ",
   "type": " None ",
   "help": " Instead of using the class for the peak value, uses the pattern of similarities for each orientation for assignment. "
 },
 {
   "count": 1,
   "prog": "e2classifykmeans.py ",
   "option": " ['--sigma'] ",
   "default": " False ",
   "type": " None ",
   "help": " with --average, this will also produce standard deviation images for each average "
 },
 {
   "count": 1,
   "prog": "e2classifykmeans.py ",
   "option": " ['--onein'] ",
   "default": " False ",
   "type": " None ",
   "help": " Read 1-d input images from a single 2-D image (oneout in e2basis.py, default out e2msa.py) "
 },
 {
   "count": 1,
   "prog": "e2classifykmeans.py ",
   "option": " ['--oneinali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Read 1-d input images from a single 2-D image where the first 4 elements on each row are da,dx,dy,flip "
 },
 {
   "count": 1,
   "prog": "e2classifykmeans.py ",
   "option": " ['--normavg'] ",
   "default": " False ",
   "type": " None ",
   "help": " Normalize averages "
 },
 {
   "count": 1,
   "prog": "e2classifykmeans.py ",
   "option": " ['--clsmx'] ",
   "default": " None ",
   "type": " str ",
   "help": " Standard EMAN2 output suitable for use with e2classaverage, etc. "
 },
 {
   "count": 1,
   "prog": "e2classifykmeans.py ",
   "option": " ['--clsfiles'] ",
   "default": " False ",
   "type": " None ",
   "help": " Write EMAN 1 style cls files with members of each class "
 },
 {
   "count": 1,
   "prog": "e2classifykmeans.py ",
   "option": " ['--mininclass'] ",
   "default": "2",
   "type": " int ",
   "help": " Try to eliminate classes with fewer than specified members. Default=2 "
 },
 {
   "count": 1,
   "prog": "e2classifykmeans.py ",
   "option": " ['--outlierclass'] ",
   "default": " False ",
   "type": " None ",
   "help": " If selected, classes with fewer than mininclass particles will move permanently to an outlier class (the last class) "
 },
 {
   "count": 1,
   "prog": "e2classifykmeans.py ",
   "option": " ['--original'] ",
   "default": " None ",
   "type": " str ",
   "help": " If the input stack was derived from another stack, you can provide the name of the original stack here "
 },
 {
   "count": 1,
   "prog": "e2classifykmeans.py ",
   "option": " ['--axes'] ",
   "default": " None ",
   "type": " str ",
   "help": " Works only for 1-D input images. Specify a range, eg 0-5 to indicate which components to use from each vector. Inclusive. default=all "
 },
 {
   "count": 1,
   "prog": "e2classifyligand.py ",
   "option": " ['--ref1'] ",
   "default": " None ",
   "type": " str ",
   "help": " Rather than using a mask, ref1/ref2 permit using a pair of volumes for classification. "
 },
 {
   "count": 1,
   "prog": "e2classifyligand.py ",
   "option": " ['--ref2'] ",
   "default": " None ",
   "type": " str ",
   "help": " Rather than using a mask, ref1/ref2 permit using a pair of volumes for classification. "
 },
 {
   "count": 1,
   "prog": "e2classifyligand.py ",
   "option": " ['--pairmask'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will use the ref1/ref2 pair to generate a mask which is applied after subtracting ref1 from the particle "
 },
 {
   "count": 1,
   "prog": "e2classifyligand.py ",
   "option": " ['--alistacks'] ",
   "default": "-10000000000",
   "type": " float ",
   "help": " If sum of cmp results is less than the spefified value, will save the aligned particle to a per-class stack "
 },
 {
   "count": 1,
   "prog": "e2classifyligand.py ",
   "option": " ['--plotout'] ",
   "default": " plot_ligand.txt ",
   "type": " str ",
   "help": " Name of a text file for the classification plot. "
 },
 {
   "count": 1,
   "prog": "e2classifyligand.py ",
   "option": " ['--badgroup'] ",
   "default": " False ",
   "type": " None ",
   "help": " Split the data into 4 groups rather than 2. The extra two groups contain particles more likely to be bad. "
 },
 {
   "count": 1,
   "prog": "e2classifyligand.py ",
   "option": " ['--badqualsig'] ",
   "default": "0.5",
   "type": " float ",
   "help": " When identifying 'bad' particles, particles with similarities >mean+sigma*badqualsig will be considered bad. Default 0.5 "
 },
 {
   "count": 1,
   "prog": "e2classifyligand.py ",
   "option": " ['--badsepsig'] ",
   "default": "0.25",
   "type": " float ",
   "help": " When identifying 'bad' particles, if s1/s2 are the similarities to reference 1/2, then those where |s1-s2| < sigma*badsepsig will be excluded. Default 0.25  "
 },
 {
   "count": 1,
   "prog": "e2classifyligand.py ",
   "option": " ['--splitparticles'] ",
   "default": " False ",
   "type": " None ",
   "help": " Specify this to write new files containing the classified particles "
 },
 {
   "count": 1,
   "prog": "e2classifyligand.py ",
   "option": " ['--tstcls'] ",
   "default": "-1",
   "type": " int ",
   "help": " Will generate tst.hdf containing test images for a specified class-number "
 },
 {
   "count": 1,
   "prog": "e2classifytree.py ",
   "option": " ['--nodes'] ",
   "default": " nodes.hdf ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 1,
   "prog": "e2classifytree.py ",
   "option": " ['--incomplete'] ",
   "default": "0",
   "type": " int ",
   "help": " The degree of incomplete allowed in the tree on each level "
 },
 {
   "count": 1,
   "prog": "e2classptcl.py ",
   "option": " ['--vstack'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will output to a bdb virtual stack instead of copying the image data. Input images must have been BDB for this to work. "
 },
 {
   "count": 1,
   "prog": "e2classvsproj.py ",
   "option": " ['--ang'] ",
   "default": "10",
   "type": " float ",
   "help": " Angle between projections if 3Dmap provided "
 },
 {
   "count": 1,
   "prog": "e2classvsproj.py ",
   "option": " ['--savesim'] ",
   "default": " None ",
   "type": " str ",
   "help": " Save all of the similarity results to a text file. (ptcl#,proj#,alt,az,sim) "
 },
 {
   "count": 1,
   "prog": "e2compress.py ",
   "option": " ['--bits'] ",
   "default": "10",
   "type": " int ",
   "help": " Bits to retain in the output file, 0 or 2-16. 0 is lossless floating point compression. <0 will store completely uncompressed "
 },
 {
   "count": 1,
   "prog": "e2compress.py ",
   "option": " ['--compresslevel'] ",
   "default": " None ",
   "type": " int ",
   "help": " Compression level to use when writing. No impact on image quality, but large impact on speed. Default = 1 "
 },
 {
   "count": 1,
   "prog": "e2compress.py ",
   "option": " ['--nooutliers'] ",
   "default": " False ",
   "type": " None ",
   "help": " will set --range to eliminate a few of the most extreme values from both ends of the histogram "
 },
 {
   "count": 1,
   "prog": "e2compress.py ",
   "option": " ['--sigrange'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify <minsig>,<maxsig>, eg- 4,4 Number of standard deviations below and above the mean to retain in the output. Default is not to truncate. 4-5 is usually safe. "
 },
 {
   "count": 1,
   "prog": "e2compress.py ",
   "option": " ['--outpath'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify a destination folder for the compressed files. This will avoid overwriting existing files. "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--onlynew'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will skip any files for which __ctf_flip files already exist. "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--onlynoinvar'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will skip any files for which __ctf_flip_invar files already exist. "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--sortdefocus'] ",
   "default": " False ",
   "type": " None ",
   "help": " Sorts the micrographs in order by defocus "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--chunk'] ",
   "default": " None ",
   "type": " str ",
   "help": " <chunksize>,<nchunk>. Will process files in groups of chunksize, and process the <nchunk>th group. eg - 100,3 will read files 300-399  "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--wholeimage'] ",
   "default": " False ",
   "type": " None ",
   "help": " Display an additional curve using the whole micrograph, not just particles. "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--zerook'] ",
   "default": " False ",
   "type": " None ",
   "help": " Normally particles with zero value on the edge are considered to be bad. This overrides that behavior, primarily for simulated data. "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--useframedf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use defocus/astig from whole frame even if particle-based value is present "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--bgmask'] ",
   "default": "0",
   "type": " int ",
   "help": " Background is computed using a soft mask of the center/edge of each particle with the specified radius. Default radius is boxsize/2.6. "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--fixnegbg'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will perform a final background correction to avoid slight negative values near zeroes "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--computesf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will determine the structure factor*envelope for the aggregate set of images "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--autohp'] ",
   "default": " False ",
   "type": " None ",
   "help": " Automatic high pass filter of the SNR only to remove initial sharp peak, phase-flipped data is not directly affected (default false) "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--nonorm'] ",
   "default": " False ",
   "type": " None ",
   "help": " Suppress per image real-space normalization "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--nosmooth'] ",
   "default": " False ",
   "type": " None ",
   "help": " Disable smoothing of the background (running-average of the log with adjustment at the zeroes of the CTF) "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--refinebysnr'] ",
   "default": " False ",
   "type": " None ",
   "help": " Refines the defocus value by looking at the high resolution smoothed SNR. Requires good starting defocus. Important: also replaces the SNR with a smoothed version. "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--phaseflip'] ",
   "default": " False ",
   "type": " None ",
   "help": " Perform phase flipping after CTF determination and writes to specified file. "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--phasefliphp'] ",
   "default": " False ",
   "type": " None ",
   "help": " Perform phase flipping with auto-high pass filter (deprecated) "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--phaseflipsmall'] ",
   "default": " False ",
   "type": " None ",
   "help": " Produce an output set with 1/2 size particles for faster initial model work (deprecated) "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--phaseflipproc'] ",
   "default": " None ",
   "type": " None ",
   "help": " If specified _proc particles will be generated. Typical = filter.lowpass.gauss:cutoff_freq=.07 "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--phaseflipproc2'] ",
   "default": " None ",
   "type": " None ",
   "help": " If specified _proc particles will be generated. Typical = filter.highpass.gauss:cutoff_freq=.005 "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--phaseflipproc3'] ",
   "default": " None ",
   "type": " None ",
   "help": " If specified _proc particles will be generated. Typical = math.meanshrink:n=2 "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--phaseflipproc4'] ",
   "default": " None ",
   "type": " None ",
   "help": " If specified _proc particles will be generated. "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--phaseflipproc5'] ",
   "default": " None ",
   "type": " None ",
   "help": " If specified _proc particles will be generated. "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--storeparm'] ",
   "default": " False ",
   "type": " None ",
   "help": " Output files will include CTF info. CTF parameters are used from the database, rather than values that may be present in the input image header. Critical to use this when generating output ! "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--oversamp'] ",
   "default": "1",
   "type": " int ",
   "help": " Oversampling factor "
 },
 {
   "count": 1,
   "prog": "e2ctf.py ",
   "option": " ['--classify'] ",
   "default": "0",
   "type": " int ",
   "help": " Highly experimental ! Subclassify particles (hopefully by defocus) into n groups. "
 },
 {
   "count": 1,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--noisemin'] ",
   "default": "-1",
   "type": " float ",
   "help": " Minimum resolution to examine for determining the noise parameters. "
 },
 {
   "count": 1,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--noisemax'] ",
   "default": "-1",
   "type": " float ",
   "help": " Maximum resolution to examine for determining the noise parameters. "
 },
 {
   "count": 1,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--bf'] ",
   "default": "0",
   "type": " float ",
   "help": " Set constant B-factor (as defined in EMAN1) for all images. "
 },
 {
   "count": 1,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--df'] ",
   "default": " False ",
   "type": " None ",
   "help": " Calculate defocus from entire CCD frame. "
 },
 {
   "count": 1,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--dfval'] ",
   "default": "0",
   "type": " float ",
   "help": " Set constant defocus for all images (positive is underfocus). "
 },
 {
   "count": 1,
   "prog": "e2ctf2eman1.py ",
   "option": " ['--ctfcoverage'] ",
   "default": " False ",
   "type": " None ",
   "help": " Create a map showing the integrated SNR for the combined data. "
 },
 {
   "count": 1,
   "prog": "e2ctf_auto.py ",
   "option": " ['--hires'] ",
   "default": " False ",
   "type": " None ",
   "help": " Perform CTF processing for projects targeting 2-6 A resolution "
 },
 {
   "count": 1,
   "prog": "e2ctf_auto.py ",
   "option": " ['--midres'] ",
   "default": " False ",
   "type": " None ",
   "help": " Perform CTF processing for projects targeting 7-15 A resolution "
 },
 {
   "count": 1,
   "prog": "e2ctf_auto.py ",
   "option": " ['--lores'] ",
   "default": " False ",
   "type": " None ",
   "help": " Perform CTF processing for projects targeting 15-30 A resolution "
 },
 {
   "count": 1,
   "prog": "e2ctf_auto.py ",
   "option": " ['--missingonly'] ",
   "default": " False ",
   "type": " None ",
   "help": " Operates only on images with missing __ctf_flip_invar files, for cases where a previous run failed before completion "
 },
 {
   "count": 1,
   "prog": "e2ctf_auto.py ",
   "option": " ['--outputonly'] ",
   "default": " False ",
   "type": " None ",
   "help": " Skips all of the initial steps, and just generates the final output, assuming previous steps completed successfully "
 },
 {
   "count": 1,
   "prog": "e2ctffind3util.py ",
   "option": " ['--importrelionstar'] ",
   "default": " False ",
   "type": " None ",
   "help": " Import CTFFIND3 data in Relion STAR format. Put STAR files in 'ctffind3' folder "
 },
 {
   "count": 1,
   "prog": "e2ctffind3util.py ",
   "option": " ['--importctffind3'] ",
   "default": " False ",
   "type": " None ",
   "help": " Import ctffind3 data? "
 },
 {
   "count": 1,
   "prog": "e2ctffind3util.py ",
   "option": " ['--importctffind4'] ",
   "default": " False ",
   "type": " None ",
   "help": " Import ctffind4 data? "
 },
 {
   "count": 1,
   "prog": "e2ctffind3util.py ",
   "option": " ['--defocusstep'] ",
   "default": "0",
   "type": " float ",
   "help": " The step width for grid search (microns) "
 },
 {
   "count": 1,
   "prog": "e2ctffind3util.py ",
   "option": " ['--runctffind3'] ",
   "default": " False ",
   "type": " None ",
   "help": " Run ctffind3 on the selected micrographs? "
 },
 {
   "count": 1,
   "prog": "e2ctffind3util.py ",
   "option": " ['--runctffind4'] ",
   "default": " False ",
   "type": " None ",
   "help": " Run ctffind4 on the selected micrographs? "
 },
 {
   "count": 1,
   "prog": "e2ctffind3util.py ",
   "option": " ['--windowsize'] ",
   "default": "0",
   "type": " int ",
   "help": " The amplitude contrast of the micrographs "
 },
 {
   "count": 1,
   "prog": "e2ctfsim.py ",
   "option": " ['--samples'] ",
   "default": "256",
   "type": " int ",
   "help": " Number of samples in the plotted curve "
 },
 {
   "count": 1,
   "prog": "e2ctfsim.py ",
   "option": " ['--apply'] ",
   "default": " None ",
   "type": " str ",
   "help": " A 2-D image file which the CTF will be applied to in real-time "
 },
 {
   "count": 1,
   "prog": "e2ddd_external.py ",
   "option": " ['--program'] ",
   "default": " imod_alignframes ",
   "type": " str ",
   "help": " Use this external program to align frames. Choose between imod_alignframes and ucsf_motioncor2. Note, programs must be accessible from your PATH environment variable. "
 },
 {
   "count": 1,
   "prog": "e2ddd_external.py ",
   "option": " ['--defect_file'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify the camera defects file. "
 },
 {
   "count": 1,
   "prog": "e2ddd_external.py ",
   "option": " ['--mc2_rotgain'] ",
   "default": "0",
   "type": " int ",
   "help": " Rotates the gain 90 degress counter clockwise X times. Rotation is applied before flipping. "
 },
 {
   "count": 1,
   "prog": "e2ddd_external.py ",
   "option": " ['--mc2_flipgain'] ",
   "default": "0",
   "type": " int ",
   "help": " A value of 1 flips gain image vertically, 2 flips gain image horizontally. Default is 0. "
 },
 {
   "count": 1,
   "prog": "e2ddd_external.py ",
   "option": " ['--imod_rotflipgain'] ",
   "default": "0",
   "type": " int ",
   "help": " Rotates the gain 90 degress counter clockwise X times. If value is greater than 3, gain image is flipped about the y axis before rotation. "
 },
 {
   "count": 1,
   "prog": "e2ddd_external.py ",
   "option": " ['--device_num'] ",
   "default": "0",
   "type": " str ",
   "help": " When possible, use this device to process movie frames. Default is GPU. "
 },
 {
   "count": 1,
   "prog": "e2ddd_external.py ",
   "option": " ['--binby'] ",
   "default": " None ",
   "type": " int ",
   "help": " The degree of binning for final image. Default is 1, i.e. no binning. Note that this option takes only integer values. "
 },
 {
   "count": 1,
   "prog": "e2ddd_external.py ",
   "option": " ['--mc2_patchX'] ",
   "default": " None ",
   "type": " int ",
   "help": " Use this many patches along X with MotionCor2. Default is 1, i.e. whole-frame alignment. "
 },
 {
   "count": 1,
   "prog": "e2ddd_external.py ",
   "option": " ['--mc2_patchY'] ",
   "default": " None ",
   "type": " int ",
   "help": " Use this many patches along Y with MotionCor2. Default is 1, i.e. whole-frame alignment. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--ref_label'] ",
   "default": "  ",
   "type": " str ",
   "help": " Optional: Specify a label for the averaged dark and gain references when using multiple, individual frames. A labeled will be written as movierefs/dark_<label>.hdf and movierefs/gain_<label>.hdf. Note: This option is ignored when using a single reference image/stack. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--rotate_dark'] ",
   "default": "0",
   "type": " str ",
   "help": " Rotate dark reference by 0, 90, 180, or 270 degrees. Default is 0. Transformation order is rotate then reverse. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--reverse_dark'] ",
   "default": " False ",
   "type": " None ",
   "help": " Flip dark reference along y axis. Default is False. Transformation order is rotate then reverse. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--k2'] ",
   "default": " False ",
   "type": " None ",
   "help": " Perform gain image correction on gain images from a Gatan K2. Note, these are the reciprocal of typical DDD gain images. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--de64'] ",
   "default": " False ",
   "type": " None ",
   "help": " Perform gain image correction on DE64 data. Note, these should not be normalized. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--rotate_gain'] ",
   "default": "0",
   "type": " str ",
   "help": " Rotate gain reference by 0, 90, 180, or 270 degrees. Default is 0. Transformation order is rotate then reverse. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--reverse_gain'] ",
   "default": " False ",
   "type": " None ",
   "help": " Flip gain reference along y axis (about x axis). Default is False. Transformation order is rotate then reverse. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--gain_darkcorrected'] ",
   "default": " False ",
   "type": " None ",
   "help": " Do not dark correct gain image. False by default. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--invert_gain'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use reciprocal of input gain image "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--bad_columns'] ",
   "default": "  ",
   "type": " str ",
   "help": " Comma separated list of camera defect columns "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--bad_rows'] ",
   "default": "  ",
   "type": " str ",
   "help": " Comma separated list of camera defect rows "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--align_frames'] ",
   "default": " False ",
   "type": " None ",
   "help": " Perform whole-frame alignment of the input stacks "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--round'] ",
   "default": " float ",
   "type": " None ",
   "help": " If float (default), apply subpixel frame shifts. If integer, use integer shifts. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--allali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Average of all aligned frames. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--rangeali'] ",
   "default": "  ",
   "type": " str ",
   "help": " Average frames 'n1-n2' "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--goodali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Average of good aligned frames. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--bestali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Average of best aligned frames. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--optbox'] ",
   "default": "512",
   "type": " int ",
   "help": " Box size to use during alignment optimization. Default is 512. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--optstep'] ",
   "default": "448",
   "type": " int ",
   "help": " Step size to use during alignment optimization. Default is 448. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--optalpha'] ",
   "default": "0.1",
   "type": " float ",
   "help": " Penalization to apply during robust regression. Default is 0.1. If 0.0, unpenalized least squares will be performed (i.e., no trajectory smoothing). "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--optccf'] ",
   "default": " robust ",
   "type": " str ",
   "help": " Use this approach to determine relative frame translations. Note: 'robust' utilizes a bimodal Gaussian to robustly determine CCF peaks between pairs of frames in the presence of a fixed background. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--frames'] ",
   "default": " False ",
   "type": " None ",
   "help": " Write corrected stack of frames. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--ext'] ",
   "default": " hdf ",
   "type": " str ",
   "help": " Save frames with this extension. Default is 'hdf'. "
 },
 {
   "count": 1,
   "prog": "e2ddd_movie.py ",
   "option": " ['--fixbadpixels'] ",
   "default": " False ",
   "type": " None ",
   "help": " Tries to identify bad pixels in the dark/gain reference, and fills images in with sane values instead "
 },
 {
   "count": 1,
   "prog": "e2ddd_particles.py ",
   "option": " ['--filefilt'] ",
   "default": " None ",
   "type": " str ",
   "help": " Only processes image stacks where the filename contains the specified string. Mostly used for debugging. "
 },
 {
   "count": 1,
   "prog": "e2ddd_particles.py ",
   "option": " ['--frac'] ",
   "default": " None ",
   "type": " str ",
   "help": " Processes a fraction of the data, used automatically by --threads. <n>,<ntot> "
 },
 {
   "count": 1,
   "prog": "e2display.py ",
   "option": " ['--pdb'] ",
   "default": " None ",
   "type": " str ",
   "help": " <pdb file> Show PDB structure. "
 },
 {
   "count": 1,
   "prog": "e2display.py ",
   "option": " ['--singleimage'] ",
   "default": " False ",
   "type": " None ",
   "help": " Display a stack in a single image view "
 },
 {
   "count": 1,
   "prog": "e2display.py ",
   "option": " ['--server'] ",
   "default": " False ",
   "type": " None ",
   "help": " Launch a display server which can communicate with other EMAN3 programs "
 },
 {
   "count": 1,
   "prog": "e2display.py ",
   "option": " ['--serverport'] ",
   "default": "31980",
   "type": " int ",
   "help": " Specify the port to listen to, needed for multiple users on one machine, default=31980 "
 },
 {
   "count": 1,
   "prog": "e2display.py ",
   "option": " ['--plot'] ",
   "default": " False ",
   "type": " None ",
   "help": " Data file(s) should be plotted rather than displayed in 2-D "
 },
 {
   "count": 1,
   "prog": "e2display.py ",
   "option": " ['--hist'] ",
   "default": " False ",
   "type": " None ",
   "help": " Data file(s) should be plotted as a histogram rather than displayed in 2-D. "
 },
 {
   "count": 1,
   "prog": "e2display.py ",
   "option": " ['--plot3d'] ",
   "default": " False ",
   "type": " None ",
   "help": " Data file(s) should be plotted rather than displayed in 3-D "
 },
 {
   "count": 1,
   "prog": "e2display.py ",
   "option": " ['--fullrange'] ",
   "default": " False ",
   "type": " None ",
   "help": " A specialized flag that disables auto contrast for the display of particles stacks and 2D images only. "
 },
 {
   "count": 1,
   "prog": "e2display.py ",
   "option": " ['--newwidget'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use the new 3D widgetD. Highly recommended!!!! "
 },
 {
   "count": 1,
   "prog": "e2emx.py ",
   "option": " ['--export_whole_project'] ",
   "default": " False ",
   "type": " None ",
   "help": " This option will create an emx directory, where it will export the eman2 project into EMX format "
 },
 {
   "count": 1,
   "prog": "e2emx.py ",
   "option": " ['--import_emx'] ",
   "default": " None ",
   "type": " str ",
   "help": " Import emx information and corresponding micrographs "
 },
 {
   "count": 1,
   "prog": "e2emx.py ",
   "option": " ['--refinedefocus'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will use EMAN2 CTF fitting to refine the defocus by SNR optimization (+-0.1 micron from the current values, no astigmatism adjustment) "
 },
 {
   "count": 1,
   "prog": "e2emx.py ",
   "option": " ['--refitdefocus'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will use EMAN2 CTF fitting to refit the defocus values (+-0.1 micron, astigmatism unchanged) "
 },
 {
   "count": 1,
   "prog": "e2emx.py ",
   "option": " ['--writeimages'] ",
   "default": " False ",
   "type": " None ",
   "help": " If specified, micrographs and particles will be written to the emx directory. "
 },
 {
   "count": 1,
   "prog": "e2enrich.py ",
   "option": " ['--nenrich'] ",
   "default": "54",
   "type": " int ",
   "help": " Number of additional particles to average with each particle. Default=5 "
 },
 {
   "count": 1,
   "prog": "e2enrich.py ",
   "option": " ['--redoinvar'] ",
   "default": " None ",
   "type": " None ",
   "help": " Recomputes invariants "
 },
 {
   "count": 1,
   "prog": "e2erasefiducials.py ",
   "option": " ['--keepdust'] ",
   "default": " False ",
   "type": " None ",
   "help": " Do not remove 'dust' from mask (include objects smaller than gold fiducials). "
 },
 {
   "count": 1,
   "prog": "e2erasefiducials.py ",
   "option": " ['--goldsize'] ",
   "default": "30",
   "type": " float ",
   "help": " Diameter (in pixels) of gold fiducials to erase. "
 },
 {
   "count": 1,
   "prog": "e2erasefiducials.py ",
   "option": " ['--oversample'] ",
   "default": "4",
   "type": " int ",
   "help": " Oversample noise image to smooth transitions from regions with different noise. "
 },
 {
   "count": 1,
   "prog": "e2erasefiducials.py ",
   "option": " ['--nsigmas'] ",
   "default": "3",
   "type": " float ",
   "help": " Default=3.0. Number of standard deviations above the mean to determine pixels to mask out (erase). "
 },
 {
   "count": 1,
   "prog": "e2euler_refine.py ",
   "option": " ['--ref_volume'] ",
   "default": " None ",
   "type": " None ",
   "help": " The reference volume for orientation determination. "
 },
 {
   "count": 1,
   "prog": "e2eulerxplor.py ",
   "option": " ['--eulerdata'] ",
   "default": " None ",
   "type": " str ",
   "help": " File for Eulerdata, Ryan style, if none is given, data is read from the DB. "
 },
 {
   "count": 1,
   "prog": "e2evalrefine.py ",
   "option": " ['--resolution'] ",
   "default": " False ",
   "type": " None ",
   "help": " generates a resolution and convergence plot for a single refinement run. "
 },
 {
   "count": 1,
   "prog": "e2evalrefine.py ",
   "option": " ['--evalptclqual'] ",
   "default": " False ",
   "type": " None ",
   "help": " Evaluates the particle-map agreement using the refine_xx folder name. This may be used to identify bad particles. "
 },
 {
   "count": 1,
   "prog": "e2evalrefine.py ",
   "option": " ['--evalclassqual'] ",
   "default": " False ",
   "type": " None ",
   "help": " Evaluates the class-average-projection agreement using the refine_xx folder name. "
 },
 {
   "count": 1,
   "prog": "e2evalrefine.py ",
   "option": " ['--extractorientptcl'] ",
   "default": " None ",
   "type": " str ",
   "help": " Extracts the particles from a refinement with per-particle orientation information. If HDF output, will store as xform_align3d in header. "
 },
 {
   "count": 1,
   "prog": "e2evalrefine.py ",
   "option": " ['--anisotropy'] ",
   "default": "-1",
   "type": " int ",
   "help": " Specify a class-number (more particles better). Will use that class to evaluate magnification anisotropy in the data.  "
 },
 {
   "count": 1,
   "prog": "e2evalrefine.py ",
   "option": " ['--evalclassdetail'] ",
   "default": " False ",
   "type": " None ",
   "help": " If specified with evalclassqual, will generate individual FRC curves for each class average in the even subset "
 },
 {
   "count": 1,
   "prog": "e2evalrefine.py ",
   "option": " ['--includeprojs'] ",
   "default": " False ",
   "type": " None ",
   "help": " If specified with --evalptclqual, projections will be written to disk for easy comparison. "
 },
 {
   "count": 1,
   "prog": "e2extractsubparticles.py ",
   "option": " ['--subunitmask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Required. When applied to the 3-D volume, this mask contains the subunit being extracted. 'soft' edges are permitted "
 },
 {
   "count": 1,
   "prog": "e2extractsubparticles.py ",
   "option": " ['--outermask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Optional. If specified, this mask is projected into 2-D and used to mask out noise outside the subunit. If not specified a thresholded subunitmask is used. Only useful with --masked.  "
 },
 {
   "count": 1,
   "prog": "e2extractsubparticles.py ",
   "option": " ['--masked'] ",
   "default": " False ",
   "type": " None ",
   "help": " If specified, each output subparticle will be masked based on the projection mask. Recommended. "
 },
 {
   "count": 1,
   "prog": "e2extractsubparticles.py ",
   "option": " ['--newbox'] ",
   "default": "-1",
   "type": " int ",
   "help": " New box size for extracted regions "
 },
 {
   "count": 1,
   "prog": "e2filtertool.py ",
   "option": " ['--safemode'] ",
   "default": " False ",
   "type": " None ",
   "help": " Safe mode without the timer... "
 },
 {
   "count": 1,
   "prog": "e2filtertool.py ",
   "option": " ['--idx'] ",
   "default": "-1",
   "type": " int ",
   "help": " index for an image in a stack "
 },
 {
   "count": 1,
   "prog": "e2fsc.py ",
   "option": " ['--overlap'] ",
   "default": "4",
   "type": " int ",
   "help": " Amount of oversampling to use in local resolution windows. Larger value -> larger output map "
 },
 {
   "count": 1,
   "prog": "e2fsc_local.py ",
   "option": " ['--winsize'] ",
   "default": "17",
   "type": " int ",
   "help": "  "
 },
 {
   "count": 1,
   "prog": "e2fsc_local.py ",
   "option": " ['--cut'] ",
   "default": "0.2",
   "type": " float ",
   "help": "  "
 },
 {
   "count": 1,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--localsizea'] ",
   "default": "50",
   "type": " int ",
   "help": " Size in Angstroms of the local region to compute the resolution in "
 },
 {
   "count": 1,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--normin'] ",
   "default": " normalize.edgemean ",
   "type": " str ",
   "help": " Apply a real space normalization to each input before FSC. Default normalize.edgemean. Use 'none' to disable. "
 },
 {
   "count": 1,
   "prog": "e2fsc_real_local.py ",
   "option": " ['--sampfscs'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, full fsc curves are stored for a range of specific locations within the volume "
 },
 {
   "count": 1,
   "prog": "e2gmm_analysis.py ",
   "option": " ['--midinput'] ",
   "default": " None ",
   "type": " str ",
   "help": " middle layer input "
 },
 {
   "count": 1,
   "prog": "e2gmm_analysis.py ",
   "option": " ['--decoder'] ",
   "default": " None ",
   "type": " str ",
   "help": " decoder input "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--modelout'] ",
   "default": "  ",
   "type": " str ",
   "help": " output trained model file. only used when --projs is provided "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--projs'] ",
   "default": "  ",
   "type": " str ",
   "help": " projections with orientations (in hdf header or comment column of lst file) to train model "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--evalmodel'] ",
   "default": "  ",
   "type": " str ",
   "help": " generate model projection images to the given file name "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--evalsize'] ",
   "default": "-1",
   "type": " int ",
   "help": " Box size for the projections for evaluation. "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--ptclsin'] ",
   "default": "  ",
   "type": " str ",
   "help": " particles input for alignment "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--ptclsout'] ",
   "default": "  ",
   "type": " str ",
   "help": " aligned particle output "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--sigmareg'] ",
   "default": "0.5",
   "type": " float ",
   "help": " regularizer for the sigma of gaussian width. Larger value means all Gaussian functions will have essentially the same width. Smaller value may help compensating local resolution difference. "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--ampreg'] ",
   "default": "0",
   "type": " float ",
   "help": " regularizer for the Gaussian amplitudes in the first 1/2 of the iterations. Large values will encourage all Gaussians to have similar amplitudes. default = 0 "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--npts'] ",
   "default": "-1",
   "type": " int ",
   "help": " number of points to initialize.  "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--batchsz'] ",
   "default": "32",
   "type": " int ",
   "help": " batch size "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--maxboxsz'] ",
   "default": "64",
   "type": " int ",
   "help": " maximum fourier box size to use. 2 x target Fourier radius.  "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--heter'] ",
   "default": " False ",
   "type": " None ",
   "help": " heterogeneity analysis. "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--conv'] ",
   "default": " False ",
   "type": " None ",
   "help": " use convolutional network for heterogeneity analysis. "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--gradout'] ",
   "default": "  ",
   "type": " str ",
   "help": " gradient output "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--gradin'] ",
   "default": "  ",
   "type": " str ",
   "help": " reading from gradient output instead of recomputing "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--midout'] ",
   "default": "  ",
   "type": " str ",
   "help": " middle layer output "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--decoderout'] ",
   "default": " None ",
   "type": " str ",
   "help": " Save the trained decoder model. Filename should be .h5 or .tf "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--pas'] ",
   "default": "110",
   "type": " str ",
   "help": " choose whether to adjust position, amplitude, sigma. use 3 digit 0/1 input. default is 110, i.e. only adjusting position and amplitude "
 },
 {
   "count": 1,
   "prog": "e2gmm_refine.py ",
   "option": " ['--nmid'] ",
   "default": "4",
   "type": " int ",
   "help": " size of the middle layer "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--ptcl-images-stack-mode'] ",
   "default": " multiple ",
   "type": " str ",
   "help": " Options for saving particle images to stack files. 'single' uses one stack file, 'multiple' (default) uses one stack file per helix, 'none' uses a file for each particle and is always used when the output file format does not support image stacks. "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--db-add-hcoords'] ",
   "default": " None ",
   "type": " str ",
   "help": " Append any unique helix coordinates to the database from the specified file (in EMAN1 *.box format). Use --helix-width to specify a width for all boxes. "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--db-set-hcoords'] ",
   "default": " None ",
   "type": " str ",
   "help": " Replaces the helix coordinates in the database with the coordinates from the specified file (in EMAN1 *.box format). Use --helix-width to specify a width for all boxes. "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--ptcl-overlap'] ",
   "default": "-1",
   "type": " int ",
   "help": " Particle overlap in pixels "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--ptcl-length'] ",
   "default": "-1",
   "type": " int ",
   "help": " Particle length in pixels "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--ptcl-width'] ",
   "default": "-1",
   "type": " int ",
   "help": " Particle width in pixels "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--ptcl-not-rotated'] ",
   "default": " False ",
   "type": " None ",
   "help": " Particles are oriented as on the micrograph. They are square with length max(ptcl_length, ptcl_width). "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--ptcl-norm-edge-mean'] ",
   "default": " False ",
   "type": " None ",
   "help": " Apply the normalize.edgemean processor to each particle. "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--gridding'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use a gridding method for rotation operations on particles. Requires particles to be square. "
 },
 {
   "count": 1,
   "prog": "e2helixboxer.py ",
   "option": " ['--save-ext'] ",
   "default": " hdf ",
   "type": " str ",
   "help": " The default file extension to use when saving 'particle' images. This is simply a convenience for improved workflow. If a format other than HDF is used, metadata will be lost when saving. "
 },
 {
   "count": 1,
   "prog": "e2iminfo.py ",
   "option": " ['--nameonly'] ",
   "default": " False ",
   "type": " None ",
   "help": " Only display the matching filenames. No other info. "
 },
 {
   "count": 1,
   "prog": "e2import.py ",
   "option": " ['--import_movies'] ",
   "default": " False ",
   "type": " None ",
   "help": " Import DDD movies "
 },
 {
   "count": 1,
   "prog": "e2import.py ",
   "option": " ['--darkrefs'] ",
   "default": "  ",
   "type": " None ",
   "help": " Specify a comma separated list of dark refereence stacks/images to import. Files will be placed in movierefs_raw. See --importation for additional options. "
 },
 {
   "count": 1,
   "prog": "e2import.py ",
   "option": " ['--gainrefs'] ",
   "default": "  ",
   "type": " None ",
   "help": " Specify a comma separated list of gain refereence stacks/images to import. Files will be placed in movierefs_raw. See --importation for additional options. "
 },
 {
   "count": 1,
   "prog": "e2import.py ",
   "option": " ['--import_tiltseries'] ",
   "default": " False ",
   "type": " None ",
   "help": " Import tiltseries "
 },
 {
   "count": 1,
   "prog": "e2import.py ",
   "option": " ['--import_tomos'] ",
   "default": " False ",
   "type": " None ",
   "help": " Import tomograms for segmentation and/or subtomogram averaging "
 },
 {
   "count": 1,
   "prog": "e2import.py ",
   "option": " ['--removesub'] ",
   "default": " None ",
   "type": " str ",
   "help": " If set will exclude the specified string from imported filenames "
 },
 {
   "count": 1,
   "prog": "e2import.py ",
   "option": " ['--import_particles'] ",
   "default": " False ",
   "type": " None ",
   "help": " Import particles "
 },
 {
   "count": 1,
   "prog": "e2import.py ",
   "option": " ['--import_eman1'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will import a phase-flipped particle stack from EMAN1 "
 },
 {
   "count": 1,
   "prog": "e2import.py ",
   "option": " ['--importation'] ",
   "default": " copy ",
   "type": " None ",
   "help": " Specify import mode: move, copy or link "
 },
 {
   "count": 1,
   "prog": "e2import.py ",
   "option": " ['--import_boxes'] ",
   "default": " False ",
   "type": " None ",
   "help": " Import boxes "
 },
 {
   "count": 1,
   "prog": "e2import.py ",
   "option": " ['--box_type'] ",
   "default": " boxes ",
   "type": " None ",
   "help": " Type of boxes to import, normally boxes, but for tilted data use tiltedboxes, and untiltedboxes for the tilted  particle partner "
 },
 {
   "count": 1,
   "prog": "e2initialmodel.py ",
   "option": " ['--tries'] ",
   "default": "10",
   "type": " int ",
   "help": " The number of different initial models to generate in search of a good one "
 },
 {
   "count": 1,
   "prog": "e2initialmodel.py ",
   "option": " ['--randorient'] ",
   "default": " False ",
   "type": " None ",
   "help": " Instead of seeding with a random volume, seeds by randomizing input orientations "
 },
 {
   "count": 1,
   "prog": "e2initialmodel.py ",
   "option": " ['--maskproc'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=none. If specified, this mask will be performed after the built-in automask, eg - mask.soft to remove the core of a virus "
 },
 {
   "count": 1,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--ntry'] ",
   "default": "10",
   "type": " int ",
   "help": " The number of different initial models to generate in search of a good one "
 },
 {
   "count": 1,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--lrdecay'] ",
   "default": "1",
   "type": " float ",
   "help": " Learning rate multiplier after each iteration. "
 },
 {
   "count": 1,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--addnoise'] ",
   "default": "3",
   "type": " float ",
   "help": " Add noise on particles at each iteration. Stablize convergence for some reason. "
 },
 {
   "count": 1,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--writetmp'] ",
   "default": " False ",
   "type": " None ",
   "help": " Write output for each iteration "
 },
 {
   "count": 1,
   "prog": "e2initialmodel_sgd.py ",
   "option": " ['--fullcov'] ",
   "default": " False ",
   "type": " None ",
   "help": " Assume the input particles covers most of the orientation of the model. This gives better performance when the model is relatively feature-less, but is more likely to fail when there are incorrect particles in the input. "
 },
 {
   "count": 1,
   "prog": "e2make3d.py ",
   "option": " ['--startweight'] ",
   "default": "1",
   "type": " float ",
   "help": " This is the starting model weight "
 },
 {
   "count": 1,
   "prog": "e2make3dpar.py ",
   "option": " ['--fillangle'] ",
   "default": "0",
   "type": " float ",
   "help": " An angular range used for both alt & az over which the projection should be averaged. Generally the angular step used when making projections. "
 },
 {
   "count": 1,
   "prog": "e2make3dpar.py ",
   "option": " ['--savenorm'] ",
   "default": " None ",
   "type": " str ",
   "help": " If set, will save the normalization volume showing Fourier space filling to the specified file "
 },
 {
   "count": 1,
   "prog": "e2make3dpar.py ",
   "option": " ['--altedgemask'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set, assumes tomographic data with a thin specimen, and masks out the +-X edges based on the alt Euler angle. "
 },
 {
   "count": 1,
   "prog": "e2make3dpar.py ",
   "option": " ['--sqrt_wt'] ",
   "default": " False ",
   "type": " None ",
   "help": " Normally class-averages are weighted into the reconstruction based on the number of particles in the average. This option causes the sqrt of the number of particles to be used instead. "
 },
 {
   "count": 1,
   "prog": "e2make3dpar.py ",
   "option": " ['--itermask'] ",
   "default": " None ",
   "type": " str ",
   "help": " Used in iterative mode to define a mask to apply between iterations. The resulting reconstruction won't be masked per-se, but will be biased towards lower densities outside the mask. "
 },
 {
   "count": 1,
   "prog": "e2make3dpar.py ",
   "option": " ['--usessnr'] ",
   "default": " False ",
   "type": " None ",
   "help": " Makes use of the class_ssnr header data to weight each slice during insertion, instead of the default behavior of just using the number of particles in the average as a global weight. "
 },
 {
   "count": 1,
   "prog": "e2make3dpar.py ",
   "option": " ['--noradcor'] ",
   "default": " False ",
   "type": " None ",
   "help": " Normally a radial correction will be applied based on the --mode used. This option disables that correction. "
 },
 {
   "count": 1,
   "prog": "e2make3dpar.py ",
   "option": " ['--seedweight'] ",
   "default": "1",
   "type": " float ",
   "help": " If seedmap specified, this is how strongly the seedmap will bias existing values. 1 is default, and is equivalent to a one particle weight. "
 },
 {
   "count": 1,
   "prog": "e2make3dpar.py ",
   "option": " ['--seedweightmap'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify a full map of weights for the seed. This must be in the same format as the --savenorm output map. "
 },
 {
   "count": 1,
   "prog": "e2make3dpar.py ",
   "option": " ['--useseedasref'] ",
   "default": " False ",
   "type": " None ",
   "help": " use seed map as reference to weight the particles. "
 },
 {
   "count": 1,
   "prog": "e2maskbyclass.py ",
   "option": " ['--nofullresok'] ",
   "default": " False ",
   "type": " None ",
   "help": " Overrides the requirement that the class-averages be made from _fullres particle images. "
 },
 {
   "count": 1,
   "prog": "e2maskbyclass.py ",
   "option": " ['--redobispec'] ",
   "default": " False ",
   "type": " None ",
   "help": " Recomputes bispectra from masked particles "
 },
 {
   "count": 1,
   "prog": "e2maskbyclass.py ",
   "option": " ['--redoharmonic'] ",
   "default": " False ",
   "type": " None ",
   "help": " Recomputes harmonic power from masked particles "
 },
 {
   "count": 1,
   "prog": "e2match.py ",
   "option": " ['--img2process'] ",
   "default": "  ",
   "type": " str ",
   "help": " Path to the stack    that needs to be processed to match img2match. If you want to process multiple stacks    or files, just separate them by commas --imgs2process=vo1.mrc,vol2.hdf,file.pdb "
 },
 {
   "count": 1,
   "prog": "e2match.py ",
   "option": " ['--img2match'] ",
   "default": "  ",
   "type": " str ",
   "help": " Path to the image or stack of images which --img2process will match after processing. Not compulsory if --apix is provided. "
 },
 {
   "count": 1,
   "prog": "e2match.py ",
   "option": " ['--sharpfiltres'] ",
   "default": "0",
   "type": " float ",
   "help": " If specified, the edited img2process will be sharply filtered to this resolution. "
 },
 {
   "count": 1,
   "prog": "e2msa.py ",
   "option": " ['--nomean'] ",
   "default": " False ",
   "type": " None ",
   "help": " Suppress writing the average image as the first output image "
 },
 {
   "count": 1,
   "prog": "e2msa.py ",
   "option": " ['--nomeansub'] ",
   "default": " False ",
   "type": " None ",
   "help": " Suppress subtracting the mean from each input image, also implies --nomean "
 },
 {
   "count": 1,
   "prog": "e2msa.py ",
   "option": " ['--projin'] ",
   "default": " None ",
   "type": " str ",
   "help": " When generating subspace projections, use this file instead of the input used for the MSA "
 },
 {
   "count": 1,
   "prog": "e2msa.py ",
   "option": " ['--simmx'] ",
   "default": " None ",
   "type": " str ",
   "help": " Will use transformations from simmx on each particle prior to analysis "
 },
 {
   "count": 1,
   "prog": "e2parallel.py ",
   "option": " ['--scratchdir'] ",
   "default": " /tmp ",
   "type": " str ",
   "help": " Internal use only. Used by the MPI client "
 },
 {
   "count": 1,
   "prog": "e2parallel.py ",
   "option": " ['--taskin'] ",
   "default": " None ",
   "type": " str ",
   "help": " Internal use only. Used when executing local threaded tasks. "
 },
 {
   "count": 1,
   "prog": "e2parallel.py ",
   "option": " ['--taskout'] ",
   "default": " None ",
   "type": " str ",
   "help": " Internal use only. Used when executing local threaded tasks. "
 },
 {
   "count": 1,
   "prog": "e2parallel.py ",
   "option": " ['--loadmodule'] ",
   "default": "  ",
   "type": " str ",
   "help": " load module "
 },
 {
   "count": 1,
   "prog": "e2parallel.py ",
   "option": " ['--usethreads'] ",
   "default": "-1",
   "type": " int ",
   "help": " max thread to use. only used for producing occupancy in mpi mode. default is the same as threads/mpi option given "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--mapfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Density map file "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--end'] ",
   "default": " None ",
   "type": " int ",
   "help": " End ATOM "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--mapweight'] ",
   "default": "1000",
   "type": " float ",
   "help": " Weight of density, to balance between geometry and density score "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--mapthresh'] ",
   "default": "0",
   "type": " float ",
   "help": " Density threshold, bonds on density lower than threshold is not prefered "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--dmin'] ",
   "default": "2",
   "type": " float ",
   "help": " Mininum Ca-Ca length "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--dmax'] ",
   "default": "10",
   "type": " float ",
   "help": " Maximum Ca-Ca length "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--noise'] ",
   "default": "0",
   "type": " float ",
   "help": " Add Gaussian Noise "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--solver'] ",
   "default": " None ",
   "type": " str ",
   "help": " Run TSP Solver: concorde or lkh "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--atomtype'] ",
   "default": " CA ",
   "type": " str ",
   "help": " Load Atom Type. Default: 'CA'. Options: 'C' or 'all' "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--chain'] ",
   "default": " None ",
   "type": " str ",
   "help": " Load Chain. Default: load all chains "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--fixed'] ",
   "default": " None ",
   "type": " str ",
   "help": " Same as --edgefile. "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--iterations'] ",
   "default": "1",
   "type": " int ",
   "help": " Iterations "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--json'] ",
   "default": "1",
   "type": " int ",
   "help": " If writing output pdb, also write JSON metadata. Default: 1. Options: 0, 1 "
 },
 {
   "count": 1,
   "prog": "e2pathwalker.py ",
   "option": " ['--subunit'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of subunits. "
 },
 {
   "count": 1,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--het'] ",
   "default": " False ",
   "type": " None ",
   "help": " Include HET atoms in the map "
 },
 {
   "count": 1,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--info'] ",
   "default": " False ",
   "type": " None ",
   "help": " If this is specified, information on the PDB file is displayed, no conversion is performed. "
 },
 {
   "count": 1,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--full'] ",
   "default": " False ",
   "type": " None ",
   "help": " Apply non-crystallographic symmetry to obtain 'full' structure. "
 },
 {
   "count": 1,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--quiet'] ",
   "default": " False ",
   "type": " None ",
   "help": " Verbose is the default "
 },
 {
   "count": 1,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--quick'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use a slight approximation to the Gaussian during insertion. Does not support B-factors. "
 },
 {
   "count": 1,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--addpdbbfactor'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use the bfactor/temperature factor as the atom blurring radius, equivalent to Gaussian lowpass with 1/e width at 1/bfactor "
 },
 {
   "count": 1,
   "prog": "e2pdb2mrc.py ",
   "option": " ['--omit'] ",
   "default": "0",
   "type": " float ",
   "help": " Randomly omit this percentage of atoms in the output map. "
 },
 {
   "count": 1,
   "prog": "e2pdbviewer.py ",
   "option": " ['--pdbfiles'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify one or mode pdb files you   wish to view "
 },
 {
   "count": 1,
   "prog": "e2plotEulers.py ",
   "option": " ['--pointwidth'] ",
   "default": "1",
   "type": " float ",
   "help": " The relative scale of the points plotted. The absoule size is dpenedent on particle count "
 },
 {
   "count": 1,
   "prog": "e2plotEulers.py ",
   "option": " ['--norticklabels'] ",
   "default": " False ",
   "type": " None ",
   "help": " Disable radius tick labels "
 },
 {
   "count": 1,
   "prog": "e2plotEulers.py ",
   "option": " ['--nothetaticklabels'] ",
   "default": " False ",
   "type": " None ",
   "help": " Disable Theta tick labels "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--avgseq'] ",
   "default": "0",
   "type": " int ",
   "help": " Averages sets of N sequential frames. eg - if N=4 and the input contains 100 images, the output would be 25 images "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--calcsf'] ",
   "default": " None ",
   "type": " str ",
   "help": " calculate a radial structure factor for the image and write it to the output file, must specify apix. divide into <n> angular bins "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--calccont'] ",
   "default": " False ",
   "type": " None ",
   "help": " Compute the low resolution azimuthal contrast of each image and put it in the header as eval_contrast_lowres. Larger values imply more 'interesting' images. "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--fftavg'] ",
   "default": " None ",
   "type": " str ",
   "help": " Incoherent Fourier average of all images and write a single power spectrum image "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--addfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Adds the volume to another volume of identical size "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--select'] ",
   "default": " None ",
   "type": " str ",
   "help": " Works only on the images in named selection set from bdb:select "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--randomn'] ",
   "default": "0",
   "type": " int ",
   "help": " Selects a random subset of N particles from the file to operate on. "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--interlv'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specifies a 2nd input file. Output will be 2 files interleaved. "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--extractboxes'] ",
   "default": " False ",
   "type": " None ",
   "help": " Extracts box locations from the image header to produce a set of .box files for only the particles in the .lst files "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--mraprep'] ",
   "default": " False ",
   "type": " None ",
   "help": " this is an experimental option "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--outnorescale'] ",
   "default": " False ",
   "type": " None ",
   "help": " If specified, floating point values will not be rescaled when writing data as integers. Values outside of range are truncated. "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--mrc16bit'] ",
   "default": " False ",
   "type": " None ",
   "help": " (deprecated, use --outmode instead) output as 16 bit MRC file "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--mrc8bit'] ",
   "default": " False ",
   "type": " None ",
   "help": " (deprecated, use --outmode instead) output as 8 bit MRC file "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--rotavg'] ",
   "default": " False ",
   "type": " None ",
   "help": " Compute the 1-D rotational average of each image as a final step before writing the output "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--setsfpairs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Applies the radial structure factor of the 1st image to the 2nd, the 3rd to the 4th, etc "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--split'] ",
   "default": " None ",
   "type": " int ",
   "help": " Splits the input file into a set of n output files "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--headertransform'] ",
   "default": " None ",
   "type": " int ",
   "help": " This will take the xform.align2d header value from each particle, and apply it. Pass 0 to perform the transform or 1 to perform the inverse. "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--plane'] ",
   "default": " xy ",
   "type": " str ",
   "help": " Change the plane of image processing, useful for processing 3D mrcs as 2D images. "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--swap'] ",
   "default": " False ",
   "type": " None ",
   "help": " Swap the byte order "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--threed2threed'] ",
   "default": " False ",
   "type": " None ",
   "help": " Process 3D image as a stack of 2D slices, then output as a 3D image "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--threed2twod'] ",
   "default": " False ",
   "type": " None ",
   "help": " Process 3D image as a stack of 2D slices, then output as a 2D stack "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--twod2threed'] ",
   "default": " False ",
   "type": " None ",
   "help": " Process a stack of 2D images, then output as a 3D image. "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--unstacking'] ",
   "default": " False ",
   "type": " None ",
   "help": " Process a stack of 2D images, then output as a series of numbered single image files "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--eer2x'] ",
   "default": " False ",
   "type": " None ",
   "help": " Render EER file on 8k grid. "
 },
 {
   "count": 1,
   "prog": "e2proc2d.py ",
   "option": " ['--eer4x'] ",
   "default": " False ",
   "type": " None ",
   "help": " Render EER file on 16k grid. "
 },
 {
   "count": 1,
   "prog": "e2proc2dmulti.py ",
   "option": " ['--autoinvert'] ",
   "default": " False ",
   "type": " None ",
   "help": " Automatically decides whether to invert each stack of images to make particles white (EMAN2 convention). Decision is made for an entire stack. Non-inverted images will NOT BET PROCESSED AT ALL ! "
 },
 {
   "count": 1,
   "prog": "e2proc3d_huge.py ",
   "option": " ['--streaksubtract'] ",
   "default": " None ",
   "type": " str ",
   "help": " This will subtract the histogram peak value along a single axis in the volume. "
 },
 {
   "count": 1,
   "prog": "e2procheader.py ",
   "option": " ['--addfilename'] ",
   "default": " False ",
   "type": " None ",
   "help": " Adds the original filename of a file or stack to the header of each particle. This only works for .hdf files. "
 },
 {
   "count": 1,
   "prog": "e2procheader.py ",
   "option": " ['--params'] ",
   "default": " None ",
   "type": " str ",
   "help": " Comma separated pairs of parameter:value. The parameter will be changed to the value specified. "
 },
 {
   "count": 1,
   "prog": "e2procheader.py ",
   "option": " ['--refheader'] ",
   "default": " None ",
   "type": " str ",
   "help": " If supplied, the header of this image will be copied to the header of all images in --input. "
 },
 {
   "count": 1,
   "prog": "e2procheader.py ",
   "option": " ['--stem'] ",
   "default": " None ",
   "type": " str ",
   "help": " Some parameters have common stems. For example, 'origin_x', 'origin_y', 'origin\"x'. Supply the stem and all parameters containing it will be modified. "
 },
 {
   "count": 1,
   "prog": "e2procheader.py ",
   "option": " ['--stemval'] ",
   "default": " None ",
   "type": " str ",
   "help": " New value for all parameters containing --stem. "
 },
 {
   "count": 1,
   "prog": "e2procheader.py ",
   "option": " ['--valtype'] ",
   "default": " str ",
   "type": " str ",
   "help": " Type of the value to enforce. It can be: str, float, int, list, or transform. "
 },
 {
   "count": 1,
   "prog": "e2procjson.py ",
   "option": " ['--allinfo'] ",
   "default": " False ",
   "type": " None ",
   "help": " Uses all of the .json files in info/ rather than specifying a list on the command line "
 },
 {
   "count": 1,
   "prog": "e2procjson.py ",
   "option": " ['--listkeys'] ",
   "default": " False ",
   "type": " None ",
   "help": " Lists all of the keys in all of the specified info files "
 },
 {
   "count": 1,
   "prog": "e2procjson.py ",
   "option": " ['--remaplstkeys'] ",
   "default": " False ",
   "type": " None ",
   "help": " For JSON files where the keys are image name,# pairs referencing a .lst file, will replace each key with the original image "
 },
 {
   "count": 1,
   "prog": "e2procjson.py ",
   "option": " ['--extractkey'] ",
   "default": " None ",
   "type": " str ",
   "help": " This will extract a single named value from each specified file. Output will be multicolumn if the referenced label is an object, such as CTF. "
 },
 {
   "count": 1,
   "prog": "e2procjson.py ",
   "option": " ['--extractspt'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will extract the parameters from a particle_parms JSON file in SPT projects as a multicolumn text file. "
 },
 {
   "count": 1,
   "prog": "e2procjson.py ",
   "option": " ['--removekey'] ",
   "default": " None ",
   "type": " str ",
   "help": " DANGER! This will remove all data associated with the named key from all listed .json files. "
 },
 {
   "count": 1,
   "prog": "e2procjson.py ",
   "option": " ['--setoption'] ",
   "default": " None ",
   "type": " str ",
   "help": " Set a single option in application preferences, eg - display2d.autocontrast:true "
 },
 {
   "count": 1,
   "prog": "e2procjson.py ",
   "option": " ['--listoptions'] ",
   "default": " False ",
   "type": " None ",
   "help": " List all currently set user application preferences "
 },
 {
   "count": 1,
   "prog": "e2proclst.py ",
   "option": " ['--create'] ",
   "default": " None ",
   "type": " str ",
   "help": " to use this option, the input files should be image files. Specify an .lst or .lsx file to create here (e.g., --create mylst.lst) with references to all of the images in the inputs. "
 },
 {
   "count": 1,
   "prog": "e2proclst.py ",
   "option": " ['--eosplit'] ",
   "default": " False ",
   "type": " None ",
   "help": " Will generate _even and _odd .lst files for each specified input .lst file "
 },
 {
   "count": 1,
   "prog": "e2proclst.py ",
   "option": " ['--dereforig'] ",
   "default": " None ",
   "type": " str ",
   "help": " Extract the data_source and data_n parameters from each image in the file and create a new .lst file referencing the original image(s) "
 },
 {
   "count": 1,
   "prog": "e2proclst.py ",
   "option": " ['--mergesort'] ",
   "default": " None ",
   "type": " str ",
   "help": " Specify the output name here. This will merge all of the input .lst files into a single (resorted) output "
 },
 {
   "count": 1,
   "prog": "e2proclst.py ",
   "option": " ['--mergeeo'] ",
   "default": " False ",
   "type": " None ",
   "help": " Merge even odd lst. "
 },
 {
   "count": 1,
   "prog": "e2proclst.py ",
   "option": " ['--numaslist'] ",
   "default": " None ",
   "type": " str ",
   "help": " extract the particle indexes (numbers) only from an lst file into a text file (one number per line). "
 },
 {
   "count": 1,
   "prog": "e2proclst.py ",
   "option": " ['--refile'] ",
   "default": " None ",
   "type": " str ",
   "help": " similar to retype, but replaces the full filename of the source image file with the provided string "
 },
 {
   "count": 1,
   "prog": "e2proclst.py ",
   "option": " ['--nocomments'] ",
   "default": " False ",
   "type": " None ",
   "help": " Removes the comments from each line of the lst file. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--animorph'] ",
   "default": " None ",
   "type": " str ",
   "help": " This will use a morph vector file (segment3d) to morph atom positions,#P [animorph=<n>,<apix>,<vecfile>] "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--matrix'] ",
   "default": " 0,0,0,0,0,0,0,0,0,0,0,0 ",
   "type": " str ",
   "help": " transform matrix. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--rot'] ",
   "default": " None ",
   "type": " str ",
   "help": " Rotate map. Specify az,alt,phi or convention:par=val:par=val:...  eg - mrc:psi=22:theta=15:omega=7 "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--type'] ",
   "default": " eman ",
   "type": " str ",
   "help": " convention type "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--az'] ",
   "default": "0",
   "type": " float ",
   "help": " az in eman convention. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--alt'] ",
   "default": "0",
   "type": " float ",
   "help": " alt in eman convention. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--phi'] ",
   "default": "0",
   "type": " float ",
   "help": " phi. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--alpha'] ",
   "default": "0",
   "type": " float ",
   "help": " alpha in imagic convention. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--gamma'] ",
   "default": "0",
   "type": " float ",
   "help": " gamma in imagic convention. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--theta'] ",
   "default": "0",
   "type": " float ",
   "help": " theta. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--psi'] ",
   "default": "0",
   "type": " float ",
   "help": " psi in spider convention. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--xtilt'] ",
   "default": "0",
   "type": " float ",
   "help": " xtilt in xyz convention. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--ytilt'] ",
   "default": "0",
   "type": " float ",
   "help": " ytilt in xyz convention. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--ztilt'] ",
   "default": "0",
   "type": " float ",
   "help": " ztilt in xyz convention. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--omega'] ",
   "default": "0",
   "type": " float ",
   "help": " omega. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--e0'] ",
   "default": "0",
   "type": " float ",
   "help": " e0 in quaternion convention. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--e1'] ",
   "default": "0",
   "type": " float ",
   "help": " e1 in quaternion convention. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--e2'] ",
   "default": "0",
   "type": " float ",
   "help": " e2 in quaternion convention. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--e3'] ",
   "default": "0",
   "type": " float ",
   "help": " e3 in quaternion convention. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--n1'] ",
   "default": "0",
   "type": " float ",
   "help": " n1. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--n2'] ",
   "default": "0",
   "type": " float ",
   "help": " n2. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--n3'] ",
   "default": "0",
   "type": " float ",
   "help": " n3. "
 },
 {
   "count": 1,
   "prog": "e2procpdb.py ",
   "option": " ['--q'] ",
   "default": "0",
   "type": " float ",
   "help": " q in sgirot convention. "
 },
 {
   "count": 1,
   "prog": "e2proctxt.py ",
   "option": " ['--sortcomment'] ",
   "default": " False ",
   "type": " None ",
   "help": " Sorts rows based on per-row comment (after #) before merging "
 },
 {
   "count": 1,
   "prog": "e2procxml.py ",
   "option": " ['--fscxml2txt'] ",
   "default": " False ",
   "type": " None ",
   "help": " Convert the input XML FSC file into a text file "
 },
 {
   "count": 1,
   "prog": "e2procxml.py ",
   "option": " ['--fsctxt2xml'] ",
   "default": " FSC Plot ",
   "type": " str ",
   "help": " Convert the input text FSC file into an xml file. The value provided is the title of the graph. For example: --fsctxt2xml=\"My Graph Title\" "
 },
 {
   "count": 1,
   "prog": "e2project3d.py ",
   "option": " ['--smear'] ",
   "default": "0",
   "type": " int ",
   "help": " Used in conjunction with --phitoo, this will rotationally smear between phi steps. The user must specify the amount of smearing (typically 2-10) "
 },
 {
   "count": 1,
   "prog": "e2projectupdate21.py ",
   "option": " ['--yes'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will skip the 'are you sure' question, and proceed with the conversion "
 },
 {
   "count": 1,
   "prog": "e2ptcltrace.py ",
   "option": " ['--printbad'] ",
   "default": "180",
   "type": " float ",
   "help": " Print the particle number if the orientation mismatch is larger than the specified angle in the last pair of files "
 },
 {
   "count": 1,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--filterout'] ",
   "default": " False ",
   "type": " None ",
   "help": " Filters output particles to match projections "
 },
 {
   "count": 1,
   "prog": "e2ptclvsmap.py ",
   "option": " ['--angstep'] ",
   "default": "9",
   "type": " float ",
   "help": " Angular separation of projections. Default 9.0 degrees. "
 },
 {
   "count": 1,
   "prog": "e2rawdata.py ",
   "option": " ['--edgenorm'] ",
   "default": " False ",
   "type": " None ",
   "help": " Edge normalize "
 },
 {
   "count": 1,
   "prog": "e2rawdata.py ",
   "option": " ['--xraypixel'] ",
   "default": " False ",
   "type": " None ",
   "help": " Filter X-ray pixels "
 },
 {
   "count": 1,
   "prog": "e2rawdata.py ",
   "option": " ['--ctfest'] ",
   "default": " False ",
   "type": " None ",
   "help": " Perform CTF fitting on the (tiled) frame "
 },
 {
   "count": 1,
   "prog": "e2rawdata.py ",
   "option": " ['--moverawdata'] ",
   "default": " False ",
   "type": " None ",
   "help": " Move raw data to directory ./raw_micrographs after filtration "
 },
 {
   "count": 1,
   "prog": "e2rct.py ",
   "option": " ['--classavg'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of classavg file created by e2refine2d.py "
 },
 {
   "count": 1,
   "prog": "e2rct.py ",
   "option": " ['--stagetilt'] ",
   "default": "0",
   "type": " float ",
   "help": " Amount of tiliting of the cryo stage, default=0, get the stage tilt from particle attributes. Only possible if e2RCTboxer was used for particle picking "
 },
 {
   "count": 1,
   "prog": "e2rct.py ",
   "option": " ['--careject'] ",
   "default": " None ",
   "type": " str ",
   "help": " class averages to reject, default=None "
 },
 {
   "count": 1,
   "prog": "e2rct.py ",
   "option": " ['--minproj'] ",
   "default": "1",
   "type": " int ",
   "help": " Minimum number of projections/images in a class average, for a class average to be used for a reconstruction, default=auto "
 },
 {
   "count": 1,
   "prog": "e2rct.py ",
   "option": " ['--avgrcts'] ",
   "default": " False ",
   "type": " None ",
   "help": " If set recons from each CA will be alinged and averaged. "
 },
 {
   "count": 1,
   "prog": "e2rct.py ",
   "option": " ['--aligngran'] ",
   "default": "10",
   "type": " float ",
   "help": " Fineness of global search in e2align3d.py, default=10.0 "
 },
 {
   "count": 1,
   "prog": "e2rct.py ",
   "option": " ['--weightrecons'] ",
   "default": " False ",
   "type": " None ",
   "help": " Weight the reconstruction by particle numbers. "
 },
 {
   "count": 1,
   "prog": "e2refine2d.py ",
   "option": " ['--naliref'] ",
   "default": "5",
   "type": " int ",
   "help": " Number of alignment references to when determining particle orientations "
 },
 {
   "count": 1,
   "prog": "e2refine2d.py ",
   "option": " ['--centeracf'] ",
   "default": " False ",
   "type": " None ",
   "help": " This option has been removed in favor of a new centering algorithm "
 },
 {
   "count": 1,
   "prog": "e2refine2d.py ",
   "option": " ['--initial'] ",
   "default": " None ",
   "type": " str ",
   "help": " File containing starting class-averages. If not specified, will generate starting averages automatically "
 },
 {
   "count": 1,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--alignsort'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will align and sort the final class-averages based on mutual similarity. "
 },
 {
   "count": 1,
   "prog": "e2refine2d_bispec.py ",
   "option": " ['--basisrefs'] ",
   "default": " None ",
   "type": " str ",
   "help": " Will use a set of existing class-averages/projections to generate the Eigenbasis for classification. This must be an image stack with the same dimensions as the particle data. "
 },
 {
   "count": 1,
   "prog": "e2refine_easy.py ",
   "option": " ['--inputavg'] ",
   "default": " None ",
   "type": " str ",
   "help": " Optional file containing alternate version of the particles to use for reconstruction after alignment "
 },
 {
   "count": 1,
   "prog": "e2refine_easy.py ",
   "option": " ['--startfrom'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to an existing refine_xx directory to continue refining from. Alternative to --input and --model. "
 },
 {
   "count": 1,
   "prog": "e2refine_easy.py ",
   "option": " ['--nogoldfinal'] ",
   "default": " False ",
   "type": " None ",
   "help": " If selected, the final iteration will turn off gold-standard behavior and both halves will be refined from the same model. Normally used with --tophat=local. "
 },
 {
   "count": 1,
   "prog": "e2refine_easy.py ",
   "option": " ['--norandomphase'] ",
   "default": " False ",
   "type": " None ",
   "help": " Suppress independent phase randomization of input map. Only appropriate if input map has been preprocessed in some suitable fashion. "
 },
 {
   "count": 1,
   "prog": "e2refine_easy.py ",
   "option": " ['--m3dold'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use the traditional e2make3d program instead of the new e2make3dpar program "
 },
 {
   "count": 1,
   "prog": "e2refine_easy.py ",
   "option": " ['--eulerrefine'] ",
   "default": " False ",
   "type": " None ",
   "help": " Refines Euler angles of class-averages before reconstruction "
 },
 {
   "count": 1,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--ncmult'] ",
   "default": "1.05",
   "type": " float ",
   "help": " Specify how much to multiply noise cutoff during flattening amplitude correction. Default is 1.05. "
 },
 {
   "count": 1,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--mergelowres'] ",
   "default": "-1",
   "type": " float ",
   "help": " merge low resolution information of the two subset. "
 },
 {
   "count": 1,
   "prog": "e2refine_postprocess.py ",
   "option": " ['--underfilter'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will shift the computed Wiener filter to be about 10%% more resolution than has been achieved. "
 },
 {
   "count": 1,
   "prog": "e2refine_split.py ",
   "option": " ['--usebasis'] ",
   "default": "0",
   "type": " int ",
   "help": " Select which Eigenimage to use for separation. With novarimax, n=0 is highest energy. "
 },
 {
   "count": 1,
   "prog": "e2refinefromfrealign.py ",
   "option": " ['--icosahedral_symmetry'] ",
   "default": " False ",
   "type": " None ",
   "help": " Does it have icosahedral symmetry? "
 },
 {
   "count": 1,
   "prog": "e2refinemulti.py ",
   "option": " ['--mapfragment'] ",
   "default": " False ",
   "type": " None ",
   "help": " Generate initial maps by randomly removing portions of the input map rather than by phase randomizing. "
 },
 {
   "count": 1,
   "prog": "e2refinemulti.py ",
   "option": " ['--randclassify'] ",
   "default": " False ",
   "type": " None ",
   "help": " Generate initial maps by randomly assigning the particles in each class to each model after the first iteration. "
 },
 {
   "count": 1,
   "prog": "e2refinemulti.py ",
   "option": " ['--randphase'] ",
   "default": " False ",
   "type": " None ",
   "help": " Generate initial maps by randomizing the phase of the given model. "
 },
 {
   "count": 1,
   "prog": "e2refinemulti.py ",
   "option": " ['--models'] ",
   "default": " None ",
   "type": " str ",
   "help": " The map to use as a starting point for refinement "
 },
 {
   "count": 1,
   "prog": "e2refinemulti.py ",
   "option": " ['--nosingle'] ",
   "default": " False ",
   "type": " None ",
   "help": " Normally the multi-model refinement will be followed by N single model refinements automatically. If this is set the job will finish after making the split data sets. "
 },
 {
   "count": 1,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--oldpath'] ",
   "default": " None ",
   "type": " str ",
   "help": " Path to the original refinement (input, required) "
 },
 {
   "count": 1,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--randomphase'] ",
   "default": "0",
   "type": " float ",
   "help": " Randomize initial model to certain frequency. "
 },
 {
   "count": 1,
   "prog": "e2refinemultinoali.py ",
   "option": " ['--nomask'] ",
   "default": " False ",
   "type": " None ",
   "help": " no mask "
 },
 {
   "count": 1,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--fbeaut'] ",
   "default": " False ",
   "type": " None ",
   "help": " (T/F)Apply extra real space symmetry averaging and masking to beautify final map prior to output "
 },
 {
   "count": 1,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--ffilt'] ",
   "default": " False ",
   "type": " None ",
   "help": " (T/F)Apply Single Particle Wiener filter to final reconstruction "
 },
 {
   "count": 1,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--fstat'] ",
   "default": " False ",
   "type": " None ",
   "help": " (T/F)Calculate additional statistics in resolution table at end (QFACT, SSNR, CC, etc.). T Uses more than 50 percent more memory. "
 },
 {
   "count": 1,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--reslow'] ",
   "default": "200",
   "type": " float ",
   "help": " Resolution of the data included in the alignment. This is the low resolution value. ex:200 "
 },
 {
   "count": 1,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--reshigh'] ",
   "default": "25",
   "type": " float ",
   "help": " Resolution of the data included in the alignment. This is the high resolution value. ex:25 "
 },
 {
   "count": 1,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--rrec'] ",
   "default": "10",
   "type": " float ",
   "help": " Resolution of reconstruction in angstroms. It is the resolution to which the reconstruction is calculated. "
 },
 {
   "count": 1,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--rclas'] ",
   "default": "10",
   "type": " float ",
   "help": " High resloution limit used for classification "
 },
 {
   "count": 1,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--interp'] ",
   "default": "0",
   "type": " str ",
   "help": " Type of interpolation: 0 - Nearest Neighbor, 1 - Trilinear Interpolation (More Time-Consuming) "
 },
 {
   "count": 1,
   "prog": "e2refinetofrealign.py ",
   "option": " ['--imem'] ",
   "default": "1",
   "type": " str ",
   "help": " Memory Usage: 0 - Least Memory, 3 - Most memory "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--numclasses'] ",
   "default": "8",
   "type": " int ",
   "help": " # of classes "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--numiter'] ",
   "default": "25",
   "type": " int ",
   "help": " # of iterations to refine "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--regparam'] ",
   "default": "1",
   "type": " float ",
   "help": " Regularization Parameter T (weights experimental data vs. prior "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--maskzeroes'] ",
   "default": " False ",
   "type": " None ",
   "help": " (T/F) For individual particles, the area outside a circle with the radius of the particle will be set to zeros prior to taking the Fourier transform "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--inplaneang'] ",
   "default": " None ",
   "type": " float ",
   "help": " In-plane angular sampling "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--verbosity'] ",
   "default": "1",
   "type": " int ",
   "help": " Set the level of verbosity for the code "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion2d.py ",
   "option": " ['--echo'] ",
   "default": " False ",
   "type": " None ",
   "help": " Echo Relion Command to terminal only "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--greyscale'] ",
   "default": " False ",
   "type": " None ",
   "help": " Is the reference map in greyscale? "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--symmgroup'] ",
   "default": " C ",
   "type": " None ",
   "help": " Symmetry group "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--symmnumber'] ",
   "default": "1",
   "type": " int ",
   "help": " Symmetry number "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--healpix'] ",
   "default": "7.5",
   "type": " str ",
   "help": " Angular Sampling Interval (Degrees) "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--auto_healpix'] ",
   "default": "1.8",
   "type": " str ",
   "help": " Local angular search value "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--maxmemory'] ",
   "default": " None ",
   "type": " float ",
   "help": " Maximum memory (in GB) available for each thread "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--amplitudecontrast'] ",
   "default": "0.07",
   "type": " float ",
   "help": " Amplitude Contrast value for the micrographs "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--intensitycorrection'] ",
   "default": " False ",
   "type": " None ",
   "help": " (T/F)Perform intensity-scale corrections on image groups? "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--print_symmetry'] ",
   "default": " False ",
   "type": " None ",
   "help": " Print all symmetry transformation matrices, and exit "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--nearest_neighbor'] ",
   "default": " False ",
   "type": " None ",
   "help": " Perform nearest-neighbor instead of linear Fourier-space interpolation "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--limit_tilt'] ",
   "default": "-91",
   "type": " int ",
   "help": " Limited tilt angle: positive for keeping side views, negative for keeping top views "
 },
 {
   "count": 1,
   "prog": "e2refinetorelion3d.py ",
   "option": " ['--onlyflipphase'] ",
   "default": " False ",
   "type": " None ",
   "help": " (T/F)Only flip phases? "
 },
 {
   "count": 1,
   "prog": "e2refinevariance.py ",
   "option": " ['--shrink3d'] ",
   "default": "0",
   "type": " int ",
   "help": " Shrink the class-averages and make a downsampled variance map "
 },
 {
   "count": 1,
   "prog": "e2refinevariance.py ",
   "option": " ['--reslimit'] ",
   "default": "10",
   "type": " float ",
   "help": " Low-pass filter the individual maps to target the variance to the specified resolution in A. Variance maps cannot be filtered as a post-processing operation. Default = 10 "
 },
 {
   "count": 1,
   "prog": "e2refinevariance.py ",
   "option": " ['--volfiles'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will bypass the construction of the individual resampled models, and use files previously generated with the --keep3d options "
 },
 {
   "count": 1,
   "prog": "e2refinevariance.py ",
   "option": " ['--m3diter'] ",
   "default": "4",
   "type": " int ",
   "help": " The number of times the 3D reconstruction should be iterated "
 },
 {
   "count": 1,
   "prog": "e2refinevariance.py ",
   "option": " ['--keep3d'] ",
   "default": " False ",
   "type": " None ",
   "help": " Keep all of the individual 3-D models used to make the variance map. This make take substantial disk space. "
 },
 {
   "count": 1,
   "prog": "e2relionsubsettoset.py ",
   "option": " ['--origname'] ",
   "default": " False ",
   "type": " None ",
   "help": " Adds the original STAR name as a comment on each image "
 },
 {
   "count": 1,
   "prog": "e2scannereval.py ",
   "option": " ['--nopad'] ",
   "default": " False ",
   "type": " None ",
   "help": " No padding between boxes "
 },
 {
   "count": 1,
   "prog": "e2segment3d.py ",
   "option": " ['--segout'] ",
   "default": " None ",
   "type": " str ",
   "help": " Output stack for individual segmented volumes "
 },
 {
   "count": 1,
   "prog": "e2segment3d.py ",
   "option": " ['--chimeraout'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of file to write center of segments in UCSF Chimera marker format. "
 },
 {
   "count": 1,
   "prog": "e2segment3d.py ",
   "option": " ['--pdbout'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of file to write center of segments in PDB format. "
 },
 {
   "count": 1,
   "prog": "e2segment3d.py ",
   "option": " ['--shifttocenter'] ",
   "default": " False ",
   "type": " None ",
   "help": " Shift the output pdb to center of the density map "
 },
 {
   "count": 1,
   "prog": "e2segment3d.py ",
   "option": " ['--helixfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Start with existing secondary structure. "
 },
 {
   "count": 1,
   "prog": "e2segment3d.py ",
   "option": " ['--asymunit'] ",
   "default": " False ",
   "type": " None ",
   "help": " Write points of only one asymmetrical unit. "
 },
 {
   "count": 1,
   "prog": "e2simmx.py ",
   "option": " ['--init'] ",
   "default": " False ",
   "type": " None ",
   "help": " Initialize the output matrix file before performing 'range' calculations "
 },
 {
   "count": 1,
   "prog": "e2simmx.py ",
   "option": " ['--fillzero'] ",
   "default": " False ",
   "type": " None ",
   "help": " Checks the existing output file, and fills only matrix elements which are exactly zero. "
 },
 {
   "count": 1,
   "prog": "e2simmx2stage.py ",
   "option": " ['--finalstage'] ",
   "default": " False ",
   "type": " None ",
   "help": " Assume that existing preliminary particle classifications are correct, and only recompute final local orientations "
 },
 {
   "count": 1,
   "prog": "e2spa_align.py ",
   "option": " ['--minrespx'] ",
   "default": "4",
   "type": " int ",
   "help": " skip the first x pixel in fourier space "
 },
 {
   "count": 1,
   "prog": "e2spa_make3d.py ",
   "option": " ['--tidrange'] ",
   "default": " -1,-1 ",
   "type": " str ",
   "help": " range of tilt id to include "
 },
 {
   "count": 1,
   "prog": "e2spa_make3d.py ",
   "option": " ['--clsid'] ",
   "default": " None ",
   "type": " str ",
   "help": " only reconstruct a class of particles "
 },
 {
   "count": 1,
   "prog": "e2spa_make3d.py ",
   "option": " ['--listsel'] ",
   "default": " None ",
   "type": " str ",
   "help": " only reconstruct particles of indices from the given list "
 },
 {
   "count": 1,
   "prog": "e2spa_refine.py ",
   "option": " ['--startiter'] ",
   "default": "0",
   "type": " int ",
   "help": " iter "
 },
 {
   "count": 1,
   "prog": "e2speedtest.py ",
   "option": " ['--slow'] ",
   "default": " False ",
   "type": " None ",
   "help": " rtf_slow alignment "
 },
 {
   "count": 1,
   "prog": "e2speedtest.py ",
   "option": " ['--best'] ",
   "default": " False ",
   "type": " None ",
   "help": " rtf_best alignment "
 },
 {
   "count": 1,
   "prog": "e2speedtest.py ",
   "option": " ['--old'] ",
   "default": " False ",
   "type": " None ",
   "help": " old rtf+refine aligner "
 },
 {
   "count": 1,
   "prog": "e2speedtest.py ",
   "option": " ['--bispec'] ",
   "default": " False ",
   "type": " None ",
   "help": " new rtf with usebispec "
 },
 {
   "count": 1,
   "prog": "e2speedtest.py ",
   "option": " ['--low'] ",
   "default": " False ",
   "type": " None ",
   "help": " low level test "
 },
 {
   "count": 1,
   "prog": "e2speedtest.py ",
   "option": " ['--size'] ",
   "default": "192",
   "type": " int ",
   "help": " Size of particles, 192 default for comparisons "
 },
 {
   "count": 1,
   "prog": "e2speedtest.py ",
   "option": " ['--simpleout'] ",
   "default": " False ",
   "type": " None ",
   "help": " Simpler 2 column output file (appends) "
 },
 {
   "count": 1,
   "prog": "e2spt_align.py ",
   "option": " ['--nsoln'] ",
   "default": "1",
   "type": " int ",
   "help": " number of solutions to keep at low resolution for the aligner "
 },
 {
   "count": 1,
   "prog": "e2spt_align.py ",
   "option": " ['--flcf'] ",
   "default": " False ",
   "type": " None ",
   "help": " use slower aligner (experimental) "
 },
 {
   "count": 1,
   "prog": "e2spt_align.py ",
   "option": " ['--scipytest'] ",
   "default": " False ",
   "type": " None ",
   "help": " test scipy optimizer. "
 },
 {
   "count": 1,
   "prog": "e2spt_align_subtlt.py ",
   "option": " ['--plst'] ",
   "default": " None ",
   "type": " str ",
   "help": " list of 2d particle with alignment parameters. will reconstruct before alignment. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--rotsearch'] ",
   "default": " False ",
   "type": " None ",
   "help": " At each translation position, vary euler angles as well when searching for particles. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--pruneccc'] ",
   "default": " False ",
   "type": " None ",
   "help": " Pruned based on ccc mean and sigma. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--nbins'] ",
   "default": "0",
   "type": " int ",
   "help": " Used for histogram plot. Default=0 (not used). Number of bins for histogram. If not provided, the optimal bin number will be automatically calculated based on bin-width, computed using Scott's normal reference rule, width = (3.5*std)/cuberoot(n), where 'std' is the standard deviation of the distribution of scores and n is the number of values considered. Then, bins will be nbins = (max(scores) - min(scores)) / width. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--inverttomo'] ",
   "default": " False ",
   "type": " None ",
   "help": " Multiply --tomogram subsections by -1 to invert the contrast BEFORE looking for particles. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--inverttemplate'] ",
   "default": " False ",
   "type": " None ",
   "help": " Multiply --template subsections by -1 to invert the contrast BEFORE looking for particles. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--simtemplatesn'] ",
   "default": "0",
   "type": " int ",
   "help": " Number of orientations to simulate templates (that is, --template will be put into --simtemplatesn different orientations, and a 'subtomogram' will be simulated for each through projections by calling e2spt_simulation.py using the information in --angles or --tiltrange and --nslices. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--savepreprocessed'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Will save the intermediate steps of preprocessing of the tomogram. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--pruneprj'] ",
   "default": " False ",
   "type": " None ",
   "help": " Generate a projection along the z-axis of potential particles, and compare to a projection of the template. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--goldstack'] ",
   "default": "  ",
   "type": " str ",
   "help": " Name of the stack containing a few gold particles picked from the tomogram. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--ptclstack'] ",
   "default": "  ",
   "type": " str ",
   "help": " Name of the stack containing a few sample particles picked from the tomogram, used to create an initial template.                with which to search for particles throughout the tomogram. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--template'] ",
   "default": " None ",
   "type": " str ",
   "help": " Default=None. Path to file containing the template    to search for particles throughout the tomogram. Alternatively, provide --template=sphere    to generate a spherical template from scratch. This requires also setting --boxsize and --ptclradius.   You can also provide --template=cylinder, which generates a solid or hollow cylinder,   depending on which of the following options you specify:   --template=cylinder:radius=r:height=h:radiusinner=ri:heightinner=hi.   radiusinner and heightinner MUST be specified together, and must be smaller   than radius and height; otherwise they will be defaulted to radius/2 and height/2. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--backgroundstack'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of the stack containing a few boxes picked from regions of the tomogram where there where no particles,                 no gold, and no carbon. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--carbonstack'] ",
   "default": " None ",
   "type": " str ",
   "help": " Name of the stack containing a few boxes picked from the grid hole (or carbon). "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--shrinktomo'] ",
   "default": "0",
   "type": " int ",
   "help": " Requires IMOD. Default=0 (no shrinking). Integer factor by which the tomogram will be shrunk. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--subsettrans'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Subset of particles to keep/consider after translational alignment. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--dilutionfactor'] ",
   "default": "4",
   "type": " int ",
   "help": " Default=4. Determines how many particles will be pre-picked as putative particles. For example, if                 if the tomogram is broken up into subregions of volume V to look for particles in each                 and --dilutionfactor=1, then, the number of best-correlating subvolumes from the subregion                 that will be initially selected as potential particles will be n=V/(pv*D) where 'pv' is the volume of one particle                 calculated based on --particleradius or --boxsize, or the template's boxsize ['nx']; 'D' is the dilution factor;                 therefore, the larger D is, the fewer locations that will be initially picked as potential particles (before any pruning). "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--ptclradius'] ",
   "default": "0",
   "type": " int ",
   "help": " The estimated radius of the particle in pixels. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--gridradius'] ",
   "default": "0",
   "type": " int ",
   "help": " Radius of the grid in pixels. Supply this parameter only if also supplying --mask. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--gridoffset'] ",
   "default": "  ",
   "type": " str ",
   "help": " x,y amount of pixels to translate the cylindrical mask if the carbon hole in your tomogram is off center.          The left bottom corner would be 0,0. Supply this parameter only if also supplying          --mask and the grid hole is not centered in the tomogram. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--test'] ",
   "default": " False ",
   "type": " None ",
   "help": " N.A. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--templatethreshold'] ",
   "default": "0",
   "type": " float ",
   "help": " A binary threshold will be applied to the template which will zero out all the densities below the supplied value,              and will make the densities above the supplied value equal to one. "
 },
 {
   "count": 1,
   "prog": "e2spt_autoboxer.py ",
   "option": " ['--goldthreshtomo'] ",
   "default": " False ",
   "type": " None ",
   "help": " Zero out all densities above mean of max and min. "
 },
 {
   "count": 1,
   "prog": "e2spt_average.py ",
   "option": " ['--skippostp'] ",
   "default": " False ",
   "type": " None ",
   "help": " Skip post process steps (fsc, mask and filters) "
 },
 {
   "count": 1,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--simthr2'] ",
   "default": "0",
   "type": " float ",
   "help": " Simlarity score for the best matching final alignment. Scaling may be different due to resolution limit. Default 0 "
 },
 {
   "count": 1,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--shrinkcompare'] ",
   "default": "0",
   "type": " int ",
   "help": " Shrink factor for classification only (for speed) "
 },
 {
   "count": 1,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--nolstout'] ",
   "default": " False ",
   "type": " None ",
   "help": " Skip writting lst output. "
 },
 {
   "count": 1,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--sample'] ",
   "default": "-1",
   "type": " int ",
   "help": " use only N samples. "
 },
 {
   "count": 1,
   "prog": "e2spt_average_multi.py ",
   "option": " ['--randnclass'] ",
   "default": "-1",
   "type": " int ",
   "help": " split into N random classes. ignore refs "
 },
 {
   "count": 1,
   "prog": "e2spt_binarytree.py ",
   "option": " ['--nseedlimit'] ",
   "default": "0",
   "type": " int ",
   "help": " Maximum number of particles   to use. For example, if you supply a stack with 150 subtomograms, the program will   automatically select 128 as the limit to use because it's the largest power of 2 that is   smaller than 150. But if you provide, say --nseedlimit=100, then the number of particles   used will be 64, because it's the largest power of 2 that is still smaller than 100. "
 },
 {
   "count": 1,
   "prog": "e2spt_boxer.py ",
   "option": " ['--box2d'] ",
   "default": " False ",
   "type": " None ",
   "help": " Boxing 2D particls from tomograms. "
 },
 {
   "count": 1,
   "prog": "e2spt_boxer.py ",
   "option": " ['--box3d'] ",
   "default": " False ",
   "type": " None ",
   "help": " Boxing 3D particls from tomograms (default). "
 },
 {
   "count": 1,
   "prog": "e2spt_boxer_old.py ",
   "option": " ['--bruteaverage'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If specified, this will generate an \"as is\" average of all the subvolumes (no alignment performed). This can be useful to see if, on average, particles correspond to the desired specimen and are reasonably centered. "
 },
 {
   "count": 1,
   "prog": "e2spt_buildsets.py ",
   "option": " ['--spliteo'] ",
   "default": " False ",
   "type": " None ",
   "help": " split even/odd set so there is no overlap of particles from the two sets. "
 },
 {
   "count": 1,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--saveallpeaks'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If set, this will save the alignment information and score for all examined peaks --npeakstorefine during coarse alignment. "
 },
 {
   "count": 1,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--goldstandardoff'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This will PREVENT splitting the dataset provided through --input into two groups, and the entire dataset will be refined together. If this parameter is NOT supplied (and thus the refinement is 'gold standard') and --ref is supplied, two copies of the reference will be generated and randomphase-lowpass filtered to the resolution specified through --refrandphase. "
 },
 {
   "count": 1,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--recompute'] ",
   "default": " False ",
   "type": " None ",
   "help": " default=False. This parameter requires --classmx and will recompute averages (for example, even and odd) based on the classmx file and the alignment parameters specified therein for each particle. No refinements will follow. This is exclusively for recomputing averages. "
 },
 {
   "count": 1,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--donotaverage'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If e2spt_refinemulti.py is calling e2spt_classaverage.py, the latter need not average any particles, but rather only yield the alignment results. "
 },
 {
   "count": 1,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--refinemultireftag'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=''. DO NOT USE THIS PARAMETER. It is passed on from e2spt_refinemulti.py if needed. "
 },
 {
   "count": 1,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--translateonly'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This will force the aligner to not do any rotations and thus serves for translational centering. Specify search values through --search, otherwise its default value will be used. "
 },
 {
   "count": 1,
   "prog": "e2spt_classaverage.py ",
   "option": " ['--inputaliparams'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. .json file containing a dict of transforms to apply to 'pre-align' the particles. "
 },
 {
   "count": 1,
   "prog": "e2spt_classify.py ",
   "option": " ['--refs'] ",
   "default": " None ",
   "type": " str ",
   "help": " 3D reference volumes "
 },
 {
   "count": 1,
   "prog": "e2spt_classify.py ",
   "option": " ['--tarres'] ",
   "default": "20",
   "type": " float ",
   "help": " target resolution "
 },
 {
   "count": 1,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--layers'] ",
   "default": "2",
   "type": " int ",
   "help": " number of 1 pixel layers about the center to use for the projection in each direction (size in reduced image if --shrink used), ie 0->1, 1->3, 2->5. Default=2 "
 },
 {
   "count": 1,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--hp'] ",
   "default": "-1",
   "type": " float ",
   "help": " Apply a high-pass filter at the specified resolution when generating projections. Specify as resolution in A, eg - 100 "
 },
 {
   "count": 1,
   "prog": "e2spt_classify_byproj.py ",
   "option": " ['--lp'] ",
   "default": "-1",
   "type": " float ",
   "help": " Apply a low-pass filter at the specified resolution when generating projections. Specify the resolution in A, eg - 25 "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--skipstripping'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Comma-separated list of image indexes to exclude from strip-based fitting (in this case, only global defocus tiling the entire image wil be measured). "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--imagestem'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. If the images to apply ctf correction on are already unstacked and are individual mrc files, supply a common string to all of them. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--excludeedges'] ",
   "default": " False ",
   "type": " None ",
   "help": " Ignore 'excedent' (smaller than the width of a strip) at the edge of micrographs after dividing them into strips. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--mintiles'] ",
   "default": "0",
   "type": " int ",
   "help": " Minimum number of 'good tiles' in strip to consider it. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--defocusvariationlimit'] ",
   "default": "0.1",
   "type": " float ",
   "help": " default=0.1. total variation in defocus (in micrometers) tolerated within a strip and still consider it a region of 'constant defocus'. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--infodir'] ",
   "default": "  ",
   "type": " str ",
   "help": " Folder typically produced by e2evalimage.py or previous runs of this program containing info.json files, one per tilt image in a tilt series. Each .json file should contain the fitted ctf and all associated parameters for each tilt image. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--subtiltsdir'] ",
   "default": "  ",
   "type": " str ",
   "help": " Provide a directory containing individual stacks, where each stack is a 'mini tilt series' or a 'subtilt series' for single particles. Then, each image for each particle in the dir will be phase-phlipped using the ctf parameters you provide. If each image in the subtilt series is at a different defocus, then the parameters should be provided through --ctfparamsfile, whith a different defocus value per row. (There should be as many rows as images in each subtiltseries). "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--save3d'] ",
   "default": " False ",
   "type": " None ",
   "help": " If on, the CTF   corrected subtiltseries will be reconstrcuted into subvolumes and save into a stack.   Options --reconstructor, --pad2d, --pad3d are used if --save3d is on. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--save2d'] ",
   "default": " False ",
   "type": " None ",
   "help": " If on, the CTF   corrected subtiltseries will be saved as 2-D imag stacks [one per particle]. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--savestriptiles'] ",
   "default": " False ",
   "type": " None ",
   "help": " Saves   all tiles for all strips, for all images, in one stack per strip. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--saveffts'] ",
   "default": " False ",
   "type": " None ",
   "help": " Saves   ffts of each average of tiles per strip, for all images. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--firstfitglobal'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False.   Supplying this option will tile the entire image first (for each tilt angle) and find the average   defocus. Then it will use that value to provide an educated 'guess' during stripe-by-stripe    fitting for each image. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--stripstep'] ",
   "default": "0",
   "type": " int ",
   "help": " This will determine the   amount of strips and the overlap between them for defocus estimation. The default    is half the tilesize. For example, for a 4000x4000 pixels image, a tile size of   400 would yield 20, not 10 strips, by default. If --stripstep=1 were provided, the   image would be devided into 4000-400=3600 strips. The first strip would go from pixel   0 to pixel 400, the second strip from pixel 1 to pixel 401, the third from pixel 2   to 402, etc... up to the las strip going from pixel 3600 to 4000. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--framexsize'] ",
   "default": "0",
   "type": " int ",
   "help": " This correspond to the X   size in pixes of the images/frames in the raw tilt series; that is, the size of the entire frame   along the X axis (perpendicular to the direction of the tilt axis in the aligned tilt series).   It is used to calculate the distance of each particle (subtiltseries) to the tilt axis, since   this will induce different shifts in defocus in 3-D for the actual particles. Particles   right at the tilt axis don't move \"up\" or \"down\" as they are tilted.   This MUST be provided if --subtiltsdir is provided.   Othwerwise, it will be read from the header of the images provided. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--phaseflipwhole'] ",
   "default": " False ",
   "type": " None ",
   "help": " This    will perform phase flipping on the entire image for each image in an aligned tilt    series using the CTF parameters supplied. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--phaseflipstrips'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will   perform phase flipping on images of an aligned tilt series on a strip-by-strip basis,   assuming the supplied ctf parameters correspond to the proper values at the tilt axis,   either the same values for all images (--defocus,--ampcont,--cs,--apix,--voltage,--bfactor)   or a different set for each (--ctfparamsfile), taking into account the tilt angle for    each image (--tltfile), which should be supplied through an IMOD-like .tlt file. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--prunetest'] ",
   "default": "0.1",
   "type": " float ",
   "help": " Default=0.1.   Decimal number that indicates the percentage of --tilesize (in terms of side length)    to tolerate of 'bad' values (i.e., empty regions of constant density) at the corners,    and still include the tile for CTF fitting. For example, if --tilesize=256, and   --prunetest=0.1, a box of ~25-26 pixels each corner of every tile will be analyzed   and if the standard deviation of any of the corners is 0, the tile will be excluded.   To turn off this option supply --prunetest=-1.0. The program automatically adjusts    things so that the minimum size of regions at the corners to check will be 4x4 pixels. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--ctfparamsfile'] ",
   "default": "  ",
   "type": " str ",
   "help": " This should be a text file   with ctf parameters in the following format;   defocus=value voltage=value cs=value apix=value bfactor=value ampcont=value   A single space should separate each parameter from the next.   Do not write any unit symbols for the values; just the numerical value.   Defocus should be in microns, voltage in kV, apix in angstroms per pixel, and ampcont (amplitude contrast)   should be a decimal; for example, 0.1 for 10 percent amplitude contrast.   IF you want to use DIFFERENT PARAMETERS PER IMAGE, then the file must contain   multiple rows with the different values.   The first row will be used to phase flip the first image,   the second row to phase flip the second, etc. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--defocilist'] ",
   "default": "  ",
   "type": " str ",
   "help": " Text file containing   a single column of defocus values in microns. The file should have as many   defocus values as images in the tiltseries or subtiltseries supplied. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--nozcorrection'] ",
   "default": " False ",
   "type": " None ",
   "help": " If you    turn on this option and --subtiltsdir is provided, the position in Z of each subtomogram   will not be considered for CTF correction "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--defocustop'] ",
   "default": " False ",
   "type": " None ",
   "help": " Assumes the signal for defocus measurement (e.g., carbon film) is at the top layer of the tomogram. "
 },
 {
   "count": 1,
   "prog": "e2spt_ctf_old.py ",
   "option": " ['--defocusbottom'] ",
   "default": " False ",
   "type": " None ",
   "help": " Assumes the signal for defocus measurement (e.g., carbon film) is at the top layer of the tomogram. "
 },
 {
   "count": 1,
   "prog": "e2spt_evalrefine.py ",
   "option": " ['--jsonortcmp'] ",
   "default": " False ",
   "type": " None ",
   "help": " Compare the particle orientations from two .json files. Provide the path to 2 json files as arguments to the command. "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--boxsz_unbin'] ",
   "default": "-1",
   "type": " int ",
   "help": " box size in unbinned tomogram "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--newlabel'] ",
   "default": "  ",
   "type": " str ",
   "help": " Label of output particles. Same as original particle label by default. "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--padtwod'] ",
   "default": "2",
   "type": " float ",
   "help": " padding factor "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--noctf'] ",
   "default": " False ",
   "type": " None ",
   "help": " skip ctf correction. "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--alltomograms'] ",
   "default": " False ",
   "type": " None ",
   "help": " use all tomograms. "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--curves'] ",
   "default": "-1",
   "type": " int ",
   "help": " specify curve id to extract particles from saved curves.  "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--curves_overlap'] ",
   "default": "0.5",
   "type": " float ",
   "help": " fraction of overlap when generating particle along curves. default is 0.5 "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--jsonali'] ",
   "default": "  ",
   "type": " str ",
   "help": " re-extract particles using a particle_param_xx json file from a spt alignment "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--mindist'] ",
   "default": "10",
   "type": " float ",
   "help": " minimum distance between particles in A. for reextraction only "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--postproc'] ",
   "default": "  ",
   "type": " str ",
   "help": " processor after 3d particle reconstruction "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--postmask'] ",
   "default": "  ",
   "type": " str ",
   "help": " masking after 3d particle reconstruction. The mask is transformed if json  "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--norewrite'] ",
   "default": " False ",
   "type": " None ",
   "help": " skip existing files. do not rewrite. "
 },
 {
   "count": 1,
   "prog": "e2spt_extract.py ",
   "option": " ['--skip3d'] ",
   "default": " False ",
   "type": " None ",
   "help": " do not make 3d particles. only generate 2d particles and 3d header.  "
 },
 {
   "count": 1,
   "prog": "e2spt_extractfromseg.py ",
   "option": " ['--featurename'] ",
   "default": "  ",
   "type": " str ",
   "help": " name of the current feature to extract "
 },
 {
   "count": 1,
   "prog": "e2spt_extractfromseg.py ",
   "option": " ['--random'] ",
   "default": "-1",
   "type": " int ",
   "help": " Specifying N will randomly seed N particles on density above threshold. default is -1, means only choosing peaks. Useful for non-globular particles "
 },
 {
   "count": 1,
   "prog": "e2spt_extractfromseg.py ",
   "option": " ['--massthresh'] ",
   "default": "20",
   "type": " float ",
   "help": " Threshold of total mass of each continous object to be considered a particle.  "
 },
 {
   "count": 1,
   "prog": "e2spt_extractfromseg.py ",
   "option": " ['--edge'] ",
   "default": "4",
   "type": " int ",
   "help": " mininmum distance to the edge of tomogram "
 },
 {
   "count": 1,
   "prog": "e2spt_hac.py ",
   "option": " ['--groups'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=0 (not used; data not split). This parameter will split the data into a user defined number of groups. For purposes of gold-standard FSC computation later, select --group=2. "
 },
 {
   "count": 1,
   "prog": "e2spt_hac.py ",
   "option": " ['--clusters'] ",
   "default": "1",
   "type": " int ",
   "help": " Number of clusters to group the data in after the 1st iteration, based on correlation. "
 },
 {
   "count": 1,
   "prog": "e2spt_hac.py ",
   "option": " ['--exclusive_class_min'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0.0 (not used). The minimum multiplicity (number of particles that went into an average) to look for mutually exclusive classes/averages. Two classes are mutually exclusive when non of the members in one are present in the other. In HAC (hierarchical ascendant classification or \"all vs all\" alignments, classes MERGE, so a class from a later round will be composed of classes from earlier rounds. Some classes remain un-merged for many rounds. If set, this parameter will extract classes with a minimum number of particles (from whatever round/iteration they were generated in) whose members are not present in any other of the extracted classes. The mutually exclusive classes will be put into a separate sub-directory starting with the character 'me_classes'. "
 },
 {
   "count": 1,
   "prog": "e2spt_hac.py ",
   "option": " ['--minscore'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0 (which means this option is off by default and not used). Percent of the maximum score to use as a threshold for the minimum score to allow. For example, if the best pair in the first iteration yielded a score of -15.0, and you supply --minscore=0.9, any pair-wise alignments with a score worse than -15*0.9 = -13.5 will be forbidden. Remember that 'more negative' is 'better' in EMAN2. "
 },
 {
   "count": 1,
   "prog": "e2spt_hac.py ",
   "option": " ['--maxmergenum'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (which means this option is off by default and not used). This is the maximum number of particles ('multiplicity') that any two given averages can have to be allowed to merge. For example, if at some point (some given iteration in the algorithm) a particular average \"A\" is an average of 10 particles, and --maxmergenum=8, this average \"A\" will only be allowed to merge with other averages that have 8 particles or less in them. This maintains \"big classes\" in a mutually exclusive state. For example, if --maxmergenum=1, particles will merge pair-wise in the first round; but after that averages with more than one particle will NOT merge each other, because they will contain 2 or more particles, which exceeds 'maxmergenum'. So in subsequent iterations, the averages formed in the first iteration will continue to take up raw particles or new averages (between single raw particles) might emerge; but \"large averages\" never inter-merge "
 },
 {
   "count": 1,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--averagehalves'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This will average the even and odd volumes. "
 },
 {
   "count": 1,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--nonewpath'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If True, a new --path directory will not be made. Therefore, whatever is sepcified in --path will be used as the output directory. Note that this poses the risk of overwriting data. "
 },
 {
   "count": 1,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--savehalftiltseries'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If this parameter is on, the odd and even subtiltseries will be saved. "
 },
 {
   "count": 1,
   "prog": "e2spt_intrafsc.py ",
   "option": " ['--savehalfvolumes'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If this parameter is on, the odd and even volumes will be saved. "
 },
 {
   "count": 1,
   "prog": "e2spt_isr.py ",
   "option": " ['--inputdir'] ",
   "default": "  ",
   "type": " str ",
   "help": " Alternative to --input and --inputstem. Path to a directory containing individual subtiltseries stacks. "
 },
 {
   "count": 1,
   "prog": "e2spt_isr.py ",
   "option": " ['--savevols'] ",
   "default": " False ",
   "type": " None ",
   "help": " This option will save the reconstructed volumes at each iteration. "
 },
 {
   "count": 1,
   "prog": "e2spt_isr.py ",
   "option": " ['--outxsize'] ",
   "default": "0",
   "type": " int ",
   "help": " Clip the output volume in x to this size. The default size is the nx size of the input images. "
 },
 {
   "count": 1,
   "prog": "e2spt_isr.py ",
   "option": " ['--outysize'] ",
   "default": "0",
   "type": " int ",
   "help": " Clip the output volume in y to this size. The default size is the ny size of the input images. "
 },
 {
   "count": 1,
   "prog": "e2spt_isr.py ",
   "option": " ['--outzsize'] ",
   "default": "0",
   "type": " int ",
   "help": " Clip the output volume in z to this size. The default size is the nx size of the input images. "
 },
 {
   "count": 1,
   "prog": "e2spt_mapptclstotomo.py ",
   "option": " ['--avg'] ",
   "default": "  ",
   "type": " str ",
   "help": " 3D volume to insert. spt_xx/threed_xx if unspecified "
 },
 {
   "count": 1,
   "prog": "e2spt_mapptclstotomo.py ",
   "option": " ['--new'] ",
   "default": " False ",
   "type": " None ",
   "help": " new pipeline format "
 },
 {
   "count": 1,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--nclass'] ",
   "default": "2",
   "type": " int ",
   "help": " Number of classes. Default is 2. "
 },
 {
   "count": 1,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--nowedgefill'] ",
   "default": " False ",
   "type": " None ",
   "help": " Do not fill the missing wedge before classification. "
 },
 {
   "count": 1,
   "prog": "e2spt_pcasplit.py ",
   "option": " ['--clean'] ",
   "default": " False ",
   "type": " None ",
   "help": " remove outliers before PCA. "
 },
 {
   "count": 1,
   "prog": "e2spt_recompute.py ",
   "option": " ['--stacks'] ",
   "default": "  ",
   "type": " str ",
   "help": " Comma separated list of HDF image stacks to process. "
 },
 {
   "count": 1,
   "prog": "e2spt_recompute.py ",
   "option": " ['--usetomograms'] ",
   "default": " False ",
   "type": " None ",
   "help": " \"Re-extract particles from the original tomogram. "
 },
 {
   "count": 1,
   "prog": "e2spt_recompute.py ",
   "option": " ['--useinverseali'] ",
   "default": " False ",
   "type": " None ",
   "help": " \"Use the inverse of the value stored in xform.align3d in the header of each particle. "
 },
 {
   "count": 1,
   "prog": "e2spt_refine.py ",
   "option": " ['--pkeep'] ",
   "default": "0.8",
   "type": " float ",
   "help": " fraction of particles to keep "
 },
 {
   "count": 1,
   "prog": "e2spt_refine.py ",
   "option": " ['--symalimask'] ",
   "default": " None ",
   "type": " str ",
   "help": " This will translationally realign each asymmetric unit to the previous map masked by the specified mask. While this invokes symalimasked in e2spt_average, this isn't the same, it is a mask, not a masked reference.  "
 },
 {
   "count": 1,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--iters'] ",
   "default": " p,p,p,t,r,p,r,d ",
   "type": " str ",
   "help": " iterations. Types of refinement separated by comma. p - 3d particle translation-rotation. t - subtilt translation. r - subtilt translation-rotation. d - subtilt defocus. Default is p,p,p,t,r,p,r,d "
 },
 {
   "count": 1,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--startres'] ",
   "default": "-1",
   "type": " float ",
   "help": " starting maximum resolution. required when goldstandard is not specified "
 },
 {
   "count": 1,
   "prog": "e2spt_refine_new.py ",
   "option": " ['--ssnrwt'] ",
   "default": " False ",
   "type": " None ",
   "help": " weight particles by SSNR accroding to references "
 },
 {
   "count": 1,
   "prog": "e2spt_refinemsa.py ",
   "option": " ['--filter'] ",
   "default": "0",
   "type": " int ",
   "help": " Resolution (integer, in Angstroms) at which you want to apply a gaussian lowpass filter to the tomogram prior to loading it for boxing "
 },
 {
   "count": 1,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--parm'] ",
   "default": "  ",
   "type": " str ",
   "help": " particle_parms_xx.json file from spt_refine, this provides both the input particles and alignment parameters "
 },
 {
   "count": 1,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--strucfac'] ",
   "default": " None ",
   "type": " str ",
   "help": " Structure factor file "
 },
 {
   "count": 1,
   "prog": "e2spt_refinemulti_noali.py ",
   "option": " ['--randsym'] ",
   "default": " False ",
   "type": " None ",
   "help": " randomize symmetry unit assignment at the begining. seems to be helpful for high symmetry without obvious asymetrical features.. "
 },
 {
   "count": 1,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--refgenmethod'] ",
   "default": " bt ",
   "type": " str ",
   "help": " Method for generating the initial reference(s). Options are 'bt', for binary tree (see e2spt_binarytree.py), 'hac', for hierarchical ascendant classification (see e2spt_hac.py), or 'ssa' for self-symmetry alignment (see e2symsearch3d.py). Default=bt "
 },
 {
   "count": 1,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--subset4ref'] ",
   "default": " None ",
   "type": " int ",
   "help": "  Size of the subset of particles to use for generating each reference. Default=0, which means all particles in each subgroup will be used (for example, if --input has 100 particles and --nref is 10, 10 references will be generated using 10 particles for each). If --ref not provided, the program generates an --nref number of references from --input. "
 },
 {
   "count": 1,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--syms'] ",
   "default": "  ",
   "type": " str ",
   "help": " List comma-separated symmetries to apply separately on the different references. For example, if you provide --syms=d8,d7 and provide 2 references via --nref=2 or supply two references via --refs=r1.hdf,r2.hdf, d8 symmetry will be applied to the first reference and d7 to the second after each iteration of refinement (the final average in one iteration becomes a reference for the next). "
 },
 {
   "count": 1,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--hacref'] ",
   "default": "0",
   "type": " int ",
   "help": " WARNING: MIGHT BE BUGGY OR NOT WORKING. Mulst supply references through --ref. Default=0 (not used by default). Size of the SUBSET of particles to use to build an initial reference by calling e2spt_hac.py which does Hierarchical Ascendant Classification (HAC) or 'all vs all' alignments. "
 },
 {
   "count": 1,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--ssaref'] ",
   "default": "0",
   "type": " int ",
   "help": " WARNING: MIGHT BE BUGGY OR NOT WORKING. Mulst supply references through --ref. Default=0 (not used by default). Size of the SUBSET of particles to use to build an initial reference by calling e2symsearch3d.py, which does self-symmetry alignments. You must provide --sym different than c1 for this to make any sense. "
 },
 {
   "count": 1,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--btref'] ",
   "default": "0",
   "type": " int ",
   "help": " WARNING: MIGHT BE BUGGY OR NOT WORKING. Mulst supply references through --ref. Default=0 (internally turned on and set to 64). Size of the SUBSET of particles to use to build an initial reference by calling e2spt_binarytree.py. By default, the largest power of two smaller than the number of particles in --input will be used. For example, if you supply a stack with 150 subtomograms, the program will automatically select 128 as the limit to use because it's the largest power of 2 that is smaller than 150. But if you provide, say --btref=100, then the number of particles used will be 64, because it's the largest power of 2 that is still smaller than 100. "
 },
 {
   "count": 1,
   "prog": "e2spt_refinemulti_old.py ",
   "option": " ['--inixforms'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. .json file containing a dict of transform to apply before reference generation "
 },
 {
   "count": 1,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--nocolor'] ",
   "default": " False ",
   "type": " None ",
   "help": " Turns the ouput png(s) into grey scale figures. Instead of using different colors to distinguish between various curves on the same plot, this option will have the program automatically use different markers in black and white for each curve. "
 },
 {
   "count": 1,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--averagefscs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Averages FSC curves if --input contains multiple images. "
 },
 {
   "count": 1,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--smooththresh'] ",
   "default": "100",
   "type": " float ",
   "help": " If --smooth is provided the curve will be smoothed only up to this resolution. Default is 100. "
 },
 {
   "count": 1,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--polydegree'] ",
   "default": " None ",
   "type": " int ",
   "help": " Degree of the polynomial to fit. "
 },
 {
   "count": 1,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--plotonly'] ",
   "default": " None ",
   "type": " str ",
   "help": " FSC curves to plot in separate plots. Skips fsc curve generation. Provide .txt. files separated by commas --plotonly=file1.txt,file2.txt,file3.txt etc... "
 },
 {
   "count": 1,
   "prog": "e2spt_resolutionplot.py ",
   "option": " ['--singleplot'] ",
   "default": " False ",
   "type": " None ",
   "help": " It --plotonly provided, all FSC curves will be on the same plot/figure "
 },
 {
   "count": 1,
   "prog": "e2spt_sgd.py ",
   "option": " ['--fourier'] ",
   "default": " False ",
   "type": " None ",
   "help": " gradient descent in fourier space "
 },
 {
   "count": 1,
   "prog": "e2spt_sgd.py ",
   "option": " ['--nbatch'] ",
   "default": "10",
   "type": " int ",
   "help": " Number of batches per iteration "
 },
 {
   "count": 1,
   "prog": "e2spt_sgd.py ",
   "option": " ['--writemovie'] ",
   "default": " False ",
   "type": " None ",
   "help": " write all temporary files as a stack "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--dualaxis'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Simulate subtomograms made of two independent and orthogonal tilt series. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--gridholesize'] ",
   "default": "1",
   "type": " float ",
   "help": " Default=1.0. Size of the carbon hole in micrometers for the simulated grid (this will determine the shifts in defocus for each particle at each tilt angle, depending on the position of the particle respect to the tilt axis; the tilt axis by convention goes parallel to Y through the middle of the tomogram. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--nosim'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If on, the program will generate stacks of \"perfect particles\" in different random orientations, but with no missing wedge, no noise, no ctf parameters, etc. The output randstack.hdf will be identical to simptcls.hdf "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--notrandomize'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This will prevent the simulated particles from being rotated and translated into random orientations. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--nptcls'] ",
   "default": "10",
   "type": " int ",
   "help": " Default=10. Number of simulated subtomograms to generate per reference model supplied. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--preferredside'] ",
   "default": " None ",
   "type": " float ",
   "help": " Default=None. Standard deviation in degrees to use to generate a set of orientations with a mean altitude equal to 90 degrees. Works in conjuction with --preferredtop, in which case half of the particles will be biased towards 'top' view orientations and half towards 'side' view orientations. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--preferredtop'] ",
   "default": " None ",
   "type": " float ",
   "help": " Default=None. Standard deviation in degrees to use to generate a set of orientations with a mean altitude equal to 180 and 0 degrees (half of the particles will be oriented around mean alt=0, half around mean alat=180). Works in conjuction with --preferredside, in which case half of the particles will be biased towards 'top' view orientations and half towards 'side' view orientations. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--randstack'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. If you already have a stack of particles (presumably in random orientations) you can supply it here. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--savenoise'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If on, it saves the noise stack for each particle. This can be useful for testing alignment under varying SNR, so that the same noise (just at a different ratio/level) is tested. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--saveorthostack'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If on, --nptcls is ignored and you get 3 subtomograms (simulated from the model supplied) which are orthogonal to each other. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--saverandstack'] ",
   "default": " True ",
   "type": " None ",
   "help": " Default=True. DEPREPCATED. [This option is on by default and there's no way to turn it off. The stack of randomly oriented particles before simulating the missing wedge WILL be saved]. Save the stack of randomly oriented particles, before subtomogram simulation (before the missing wedge and noise are added). "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--saveprjs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Save the projections (the 'tilt series') for each simulated subtomogram. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--savetlt'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Save a text file with .tlt extension (as in IMOD) containing the tilt angles for the simulated tomogram and/or subtomograms. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--savemissingtilts'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Save tilt images corresponding to the missing wedge region. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--snr'] ",
   "default": " None ",
   "type": " float ",
   "help": " Default=None. Number smaller than 1.0 to make the final SNR in each tilt image. This will be calculated as SNR=sgima_signal/sigma_noise. 0.5 might be a good number assuming typical cryoEM-SPA images have SNR of 0.1 or less, and cryoET tilt series are collected with 4-6x the dose as cryoEM-SPA images. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--simref'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. This will make a simulated particle in the same orientation as the original --input, saved to its own separate file. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--set2tiltaxis'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Simulate particles along the tilt axis only. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--txrange'] ",
   "default": " None ",
   "type": " int ",
   "help": " Default=None. Maximum number of pixels to randomly translate each subtomogram in X. The random translation will be picked between -txrange and +txrange. Default value is set by --trange, but --txrange will overwrite it if specified. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--txerror'] ",
   "default": " None ",
   "type": " int ",
   "help": " Default=None. Range of random translation error in pixels to perturb individual 2-D images in each subtiltseries by along x. The random translation perturbation will be picked between -txerror and +txerror. Default value is set by --terror, but --txerror will overwrite it if specified. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--tyrange'] ",
   "default": " None ",
   "type": " int ",
   "help": " Default=None. Maximum number of pixels to randomly translate each subtomogram in Y. The random translation will be picked between -tyrange and +tyrange. Default value is set by --trange, but --txrange will overwrite it if specified. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--tyerror'] ",
   "default": " None ",
   "type": " int ",
   "help": " Default=None. Range of random translation error in pixels to perturb individual 2-D images in each subtiltseries by along y. The random translation perturbation will be picked between -tyerror and +tyerror. Default value is set by --terror, but --tyerror will overwrite it if specified. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--tzrange'] ",
   "default": " None ",
   "type": " int ",
   "help": " Default=None. Maximum number of pixels to randomly translate each subtomogram in Z. The random translation will be picked between -tzrange and +tzrange. Default value is set by --trange, but --txrange will overwrite it if specified. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--trange'] ",
   "default": " None ",
   "type": " int ",
   "help": " Default=None. Maximum number of pixels to randomly translate each subtomogram in all X, Y and Z. The random translation will be picked between -transrage and +trange; --txrange, --tyrange and --tzrange overwrite --trange for each specified direction. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--terror'] ",
   "default": " None ",
   "type": " int ",
   "help": " Default=None. Range of random translation error in pixels to perturb individual 2-D images in each subtiltseries by along x, y and z. The random translation perturbation will be picked between -terror and +terror. If set, this will overwrite --txerror, --tyerror and --tzerror. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--applyctf'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False (off). If on, it applies ctf to the projections in the simulated tilt series based on defocus, cs, and voltage parameters. "
 },
 {
   "count": 1,
   "prog": "e2spt_simulation.py ",
   "option": " ['--applyfocusdepth'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False (off). If on, this will assign different 'z-height' values to different particles "
 },
 {
   "count": 1,
   "prog": "e2spt_stat.py ",
   "option": " ['--maskref'] ",
   "default": " None ",
   "type": " str ",
   "help": " File containing the reference to compare the masked volumes with (required with --mask) "
 },
 {
   "count": 1,
   "prog": "e2spt_structfac.py ",
   "option": " ['--sfout'] ",
   "default": " sf.txt ",
   "type": " str ",
   "help": " output "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_from_imod.py ",
   "option": " ['--edf'] ",
   "default": "  ",
   "type": " str ",
   "help": " IMOD .edf file name. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_from_imod.py ",
   "option": " ['--unbin'] ",
   "default": "-1",
   "type": " float ",
   "help": " Unbin factor from input particles/tomogram to raw tilt. If unspecified, the program will calculate from the Apix of the header. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_from_imod.py ",
   "option": " ['--defcol'] ",
   "default": "2",
   "type": " int ",
   "help": " Which column of ctf file is the defocus "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_from_imod.py ",
   "option": " ['--weight'] ",
   "default": " False ",
   "type": " None ",
   "help": " Weight the particles by the variance of defocus. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_from_imod.py ",
   "option": " ['--ctffile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Estimated CTF "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--coords3d'] ",
   "default": "  ",
   "type": " str ",
   "help": " File in .txt format containing the coordinates of particles determined from the reconstructed tomogram of the supplied tiltseries. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--coords2d'] ",
   "default": "  ",
   "type": " str ",
   "help": " File in .txt format containing the coordinates of particles determined from the aligned 0 tilt image in the supplied tiltseries. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--zerotiltindx'] ",
   "default": "-1",
   "type": " int ",
   "help": " The default is the image at the middle of the stack. Since the stack might have more images to the left or the right of the actual 0-tilt (or lowest tilt) image, you can explicitly provide the index of the lowest tilt image here. This is used for tracking images. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--centerzerotilt'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If specified, this option will center the zerotilt (or least tilted image) for each particle by using as a reference a sharp-circle of radius=box/2 or the value specified through --radius. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--excludeedge'] ",
   "default": "0",
   "type": " float ",
   "help": " Integer number of pixels away from the edge of each image in the tilt series to not extract particles from. For example, if you specify 100, and the images are 4096x4096 pixels, any particle with its center lying between 0 and 200 or 3896 and 4096 will nto be extracted. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--saveanglestacks'] ",
   "default": "  ",
   "type": " str ",
   "help": " Default=None. Comma separated values of tilt angle indexes for which you want to save all particles as a stack. For example, if you want all particles from the 0 tilt image, you would provide the index for that image in the tilt series. In a tilt series with 61 images (1-61), the 0 tilt image is probably image number 31, so you would say --saveanglestakcs=31, and all the particles from the 0 tilt image would be put into a single HDF stack. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--tiltaxislocation'] ",
   "default": "-1",
   "type": " int ",
   "help": " By default, the tilt axis will be assumed to run through the middle of the tomogram in X, parallel to the Y axis. For example, if the dimensions of the tomogram are 4096x3000x500, the tilt axis will be assumed to be at X=2048. Provide a different integer number to change the location of the tilt axis (it will still be assumed to be parallel to Y though). "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--tiltaxisptcls'] ",
   "default": "-1",
   "type": " int ",
   "help": " Specifies the distance from the tilt axis to consider particles for extraction. By default, all particles will be extracted. However, if you provide, for example, --tiltaxisptls=10, only particles with centers -10 to 10 pixels away from the tilt axis will be extracted. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--ntiltslow'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). If you supply an even number 1 will be added to it (for example, 4 will be turned into 5). If --ntiltslow>0, it specifies the number of tiltimages to keep in each subtiltseries, starting from the zero-tilt image and incorporating particles from right and left, one at a time. For example, in a tiltseries from -60 to 60 degress with a step size of 2 degrees, --ntiltslow=5 would keep tiltimages at angles 0,2,-2,-4,-4. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--ntiltslowneg'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). If --ntiltslowneg>0, it specifies the number of tiltimages to keep in each subtiltseries, starting from the zero-tilt image and progressively incorporating particles from negatively tilted images only. For example, in a tiltseries from -60 to 60 degress with a step size of 2 degrees, --ntiltslowneg=5 would keep tiltimages at angles 0,-2,-4,-6,-8. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--ntiltslowpos'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). If --ntiltslowpos>0, it specifies the number of tiltimages to keep in each subtiltseries, starting from the zero-tilt image and progressively incorporating particles from positively tilted images only. For example, in a tiltseries from -60 to 60 degress with a step size of 2 degrees, --ntiltslowpos=5 would keep tiltimages at angles 0,+2,+4,+6,+8. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--tomosides'] ",
   "default": "  ",
   "type": " str ",
   "help": " Comma separated values for the tomogram dimensions. Alternatively, provide the path to the tomogram itself through --tomogram. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--zshift'] ",
   "default": " half ",
   "type": " str ",
   "help": " By default, the tomogram will be shifted -half the ice thickness so that the middle of the tomogram is at z=0. Provide a positive or negative integer to shift the z position by a different amount "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--invertangles'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. If True, this will multiple all angles by -1, in case the directionality is messed up. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--subtractbackground'] ",
   "default": " False ",
   "type": " None ",
   "help": " (Experimental. Not working yet). This will extract a box from the tomogram much larger than the subtomogram. Projections will be generated. You MUST provide --tomogram for this. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--track'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False (not used). If supplied, this option will track particles from one tilt image to another. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtilt_old.py ",
   "option": " ['--trackytoo'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False (not used). In theory, particles should not drift in Y with tilt angle. Still, this option can turn Y tracking on. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--refine_trans'] ",
   "default": " False ",
   "type": " None ",
   "help": " do translational alignment. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--refine_rot'] ",
   "default": " False ",
   "type": " None ",
   "help": " do translational-rotational alignment. better to start from an existing translational alignment. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--refine_defocus'] ",
   "default": " False ",
   "type": " None ",
   "help": " do defocus refinement. need aliptcls input. doesn't work with refine_trans or rot yet.. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--aliptcls2d'] ",
   "default": "  ",
   "type": " str ",
   "help": " optional aliptcls input. the program can start search from the position from last run. "
 },
 {
   "count": 1,
   "prog": "e2spt_subtlt_local.py ",
   "option": " ['--aliptcls3d'] ",
   "default": "  ",
   "type": " str ",
   "help": " optional aliptcls input. "
 },
 {
   "count": 1,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--dthr'] ",
   "default": "-1",
   "type": " float ",
   "help": " distance threshold "
 },
 {
   "count": 1,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--vthr'] ",
   "default": "2",
   "type": " float ",
   "help": " value threshold (n sigma) "
 },
 {
   "count": 1,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--rmedge'] ",
   "default": " False ",
   "type": " None ",
   "help": " Remove particles on the edge. "
 },
 {
   "count": 1,
   "prog": "e2spt_tempmatch.py ",
   "option": " ['--rmgold'] ",
   "default": " False ",
   "type": " None ",
   "help": " Remove particles near gold fiducial. "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--niters'] ",
   "default": "4",
   "type": " int ",
   "help": " Run this many iterations. Default is 4. "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--nogs'] ",
   "default": " False ",
   "type": " None ",
   "help": " Skip gold standard. This is not a great idea... "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--buildsetonly'] ",
   "default": " False ",
   "type": " None ",
   "help": " will only prepare particle set for the refinement but skip the actual refinement process. "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--reproject'] ",
   "default": " False ",
   "type": " None ",
   "help": " Reproject 3D particles into 2D particles. "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--reprj_offset'] ",
   "default": "  ",
   "type": " str ",
   "help": " Offset translation before reprojection "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--reprj_clip'] ",
   "default": "-1",
   "type": " int ",
   "help": " clip after reprojection "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltrefine.py ",
   "option": " ['--localnorm'] ",
   "default": " False ",
   "type": " None ",
   "help": " local normalization. do not use yet.... "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--threedout'] ",
   "default": " None ",
   "type": " str ",
   "help": " map output "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--savepath'] ",
   "default": " False ",
   "type": " None ",
   "help": " save alignment path in a json file for testing. "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--ctfweight'] ",
   "default": " False ",
   "type": " None ",
   "help": " weight by ctf "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltrefine_oneiter.py ",
   "option": " ['--skipm3d'] ",
   "default": " False ",
   "type": " None ",
   "help": " skip make3d. only output aligned list "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--bidirectional'] ",
   "default": " False ",
   "type": " None ",
   "help": " This will assume the first image is at 0 degrees and will stack images from --lowerend through 0, and then will stack the rest from 0+tiltstep throgh --upperend. If --negativetiltseries is supplied, images will be stacked from --upperend through 0, then from 0-tiltstep through --lowerend. "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--mirroraxis'] ",
   "default": "  ",
   "type": " str ",
   "help": " Options are x or y, and the mirrored copy of the 2-D images will be generated before being put into the tilt series. "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--negativetiltseries'] ",
   "default": " False ",
   "type": " None ",
   "help": " This indicates that the tilt series goes from -tiltrange to +tiltrange, or 0 to -tiltrange, then +tiltstep to +tiltrange if --bidirectional is specified. "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--restack'] ",
   "default": "  ",
   "type": " str ",
   "help": " .hdf, or 3D .st, .mrc, .ali, or .mrcs stack file to restack. This option can be used with --include or --exclude to unstack only specific images. Recall that the FIRST image INDEX is 0 (but unstacked image will be numbered from 1). --exclude=1,5-7,10,12,15-19 will exclude images 1,5,6,7,10,12,15,16,17,18,19 "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--replacestring'] ",
   "default": "  ",
   "type": " str ",
   "help": " default=None. Comma separated strings to replace in the input filenames with an underscore. For example, if --stem2stack=data, and this triggers the program to find images named 'data[1].mrc', 'data[2].mrc', etc., supplying --replacestring=[,] will first change the filename of the images to 'data_1_.mrc, data_2_.mrc, etc. "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--stem2stack'] ",
   "default": "  ",
   "type": " str ",
   "help": " String common to all the files to put into an .st stack, which is in .MRC format; for example, --stem2stack=.hdf will process all .hdf files in the current directory. If not specified, all valid EM imagefiles in the current directory will be put into an .st stack. "
 },
 {
   "count": 1,
   "prog": "e2spt_tiltstacker.py ",
   "option": " ['--unstack'] ",
   "default": "  ",
   "type": " str ",
   "help": " .hdf, or 3D .st, .mrc, .ali, or .mrcs stack file to unstack. This option can be used with --include or --exclude to unstack only specific images. Recall that the FIRST image INDEX is 0 (but unstacked image will be numbered from 1). --exclude=1,5-7,10,12,15-19 will exclude images 1,5,6,7,10,12,15,16,17,18,19 "
 },
 {
   "count": 1,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--dfrange'] ",
   "default": " 2.0,7.0,0.02 ",
   "type": " str ",
   "help": " Search range of defocus (start, end, step). default is 2., 7, 0.02 "
 },
 {
   "count": 1,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--psrange'] ",
   "default": " 10,15,5 ",
   "type": " str ",
   "help": " phase shift range (start, end, step). default is 10, 15, 5 "
 },
 {
   "count": 1,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--stepx'] ",
   "default": "20",
   "type": " int ",
   "help": " Number of tiles to generate on x-axis (different defocus) "
 },
 {
   "count": 1,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--stepy'] ",
   "default": "40",
   "type": " int ",
   "help": " Number of tiles to generate on y-axis (same defocus) "
 },
 {
   "count": 1,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--checkhand'] ",
   "default": " False ",
   "type": " None ",
   "help": " Check the handedness of tomogram. "
 },
 {
   "count": 1,
   "prog": "e2spt_tomoctf.py ",
   "option": " ['--bgcurve'] ",
   "default": " None ",
   "type": " str ",
   "help": " load a curve of background power spectrum to substract for ctf estimation. "
 },
 {
   "count": 1,
   "prog": "e2spt_trajfromrefine.py ",
   "option": " ['--ali3dold'] ",
   "default": " None ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 1,
   "prog": "e2spt_trajfromrefine.py ",
   "option": " ['--ali3dnew'] ",
   "default": " None ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 1,
   "prog": "e2spt_trajfromrefine.py ",
   "option": " ['--ali2d'] ",
   "default": " None ",
   "type": " str ",
   "help": "  "
 },
 {
   "count": 1,
   "prog": "e2spt_trajfromrefine.py ",
   "option": " ['--nframe'] ",
   "default": "5",
   "type": " int ",
   "help": " number of frames in the trajectory "
 },
 {
   "count": 1,
   "prog": "e2spt_trajfromrefine.py ",
   "option": " ['--nstd'] ",
   "default": "2",
   "type": " float ",
   "help": " build trajectories from -n x std to n x std of eigenvalues. default is 2 "
 },
 {
   "count": 1,
   "prog": "e2spt_wedge.py ",
   "option": " ['--wedgeangle'] ",
   "default": "60",
   "type": " float ",
   "help": " Missing wedge angle "
 },
 {
   "count": 1,
   "prog": "e2spt_wedge.py ",
   "option": " ['--wedgei'] ",
   "default": "0.05",
   "type": " float ",
   "help": " Missingwedge begining "
 },
 {
   "count": 1,
   "prog": "e2spt_wedge.py ",
   "option": " ['--wedgef'] ",
   "default": "0.5",
   "type": " float ",
   "help": " Missingwedge ending "
 },
 {
   "count": 1,
   "prog": "e2spt_wedge.py ",
   "option": " ['--nogui'] ",
   "default": " False ",
   "type": " None ",
   "help": " Do not launch the GUI and set the average of the missing wedge statistics on all the volumes. "
 },
 {
   "count": 1,
   "prog": "e2spt_wedge.py ",
   "option": " ['--averagestats'] ",
   "default": " False ",
   "type": " None ",
   "help": " Do not launch the GUI and set the average of the missing wedge statistics on all the volumes. "
 },
 {
   "count": 1,
   "prog": "e2spt_wedgefill.py ",
   "option": " ['--fillimage'] ",
   "default": "  ",
   "type": " str ",
   "help": " the iamge to use to fill in the missing wedge of the images in --input. Ideally, this is the average of the aligned images in --input, or the reference the images in --input were aligned to. "
 },
 {
   "count": 1,
   "prog": "e2spt_wedgefill.py ",
   "option": " ['--fillwithnoise'] ",
   "default": " False ",
   "type": " None ",
   "help": " this will fill the missing wedge with gaussian noise. --matchto will be turned on by default if this option is supplied. "
 },
 {
   "count": 1,
   "prog": "e2spt_wedgefill.py ",
   "option": " ['--matchto'] ",
   "default": " False ",
   "type": " None ",
   "help": " this will match the power spectrum of each image in --input to that --fillimage so that things are properly normalized. "
 },
 {
   "count": 1,
   "prog": "e2ssehunter.py ",
   "option": " ['--atoms'] ",
   "default": " none ",
   "type": " str ",
   "help": " pseudoatoms file "
 },
 {
   "count": 1,
   "prog": "e2ssehunter.py ",
   "option": " ['--atomswt'] ",
   "default": "1",
   "type": " float ",
   "help": " pseudoatom weight "
 },
 {
   "count": 1,
   "prog": "e2ssehunter.py ",
   "option": " ['--coeff'] ",
   "default": " none ",
   "type": " str ",
   "help": " helix correlation file "
 },
 {
   "count": 1,
   "prog": "e2ssehunter.py ",
   "option": " ['--coeffwt'] ",
   "default": "1",
   "type": " float ",
   "help": " helix correlation weight "
 },
 {
   "count": 1,
   "prog": "e2ssehunter.py ",
   "option": " ['--skeleton'] ",
   "default": " none ",
   "type": " str ",
   "help": " skeleton file "
 },
 {
   "count": 1,
   "prog": "e2ssehunter.py ",
   "option": " ['--skeletonwt'] ",
   "default": "1",
   "type": " float ",
   "help": " skeleton weight "
 },
 {
   "count": 1,
   "prog": "e2ssehunter.py ",
   "option": " ['--helixlength'] ",
   "default": "16.2",
   "type": " float ",
   "help": " helix length om angstroms "
 },
 {
   "count": 1,
   "prog": "e2ssehunter.py ",
   "option": " ['--da'] ",
   "default": "5",
   "type": " float ",
   "help": " helix angular search step "
 },
 {
   "count": 1,
   "prog": "e2ssematch.py ",
   "option": " ['--maxbad'] ",
   "default": "2",
   "type": " int ",
   "help": " Maximumum number of unassigned helices "
 },
 {
   "count": 1,
   "prog": "e2ssematch.py ",
   "option": " ['--minhelix'] ",
   "default": "6",
   "type": " int ",
   "help": " Minimum residues in a helix "
 },
 {
   "count": 1,
   "prog": "e2ssematch.py ",
   "option": " ['--maxpairerr'] ",
   "default": "10",
   "type": " float ",
   "help": " Maximum error match between pairs of helices, default=50 "
 },
 {
   "count": 1,
   "prog": "e2ssematch.py ",
   "option": " ['--skelpath'] ",
   "default": " None ",
   "type": " str ",
   "help": " Optional (recommended) output from the e2skelpath.py program "
 },
 {
   "count": 1,
   "prog": "e2stackanim.py ",
   "option": " ['--pingpong'] ",
   "default": " False ",
   "type": " None ",
   "help": " Cycle through the sequence forwards then backwards "
 },
 {
   "count": 1,
   "prog": "e2stackanim.py ",
   "option": " ['--contrast'] ",
   "default": "1",
   "type": " float ",
   "help": " Relative setting. Try 0.75 if images too bright. Default 1.0  "
 },
 {
   "count": 1,
   "prog": "e2stacksort.py ",
   "option": " ['--reverse'] ",
   "default": " False ",
   "type": " None ",
   "help": " Sort in order of least mutual similarity "
 },
 {
   "count": 1,
   "prog": "e2stacksort.py ",
   "option": " ['--byptcl'] ",
   "default": " False ",
   "type": " None ",
   "help": " Sort in order of number of particles represented in each class-average. No alignment, shrinking, etc. is performed "
 },
 {
   "count": 1,
   "prog": "e2stacksort.py ",
   "option": " ['--bykurtosis'] ",
   "default": " False ",
   "type": " None ",
   "help": " Sort by image Kurtosis. No alignment, shrinking, etc. is performed "
 },
 {
   "count": 1,
   "prog": "e2stacksort.py ",
   "option": " ['--byheader'] ",
   "default": " None ",
   "type": " str ",
   "help": " Uses the named header parameter to sort the images "
 },
 {
   "count": 1,
   "prog": "e2stacksort.py ",
   "option": " ['--useali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Save aligned particles to the output file, note that if used with shrink= this will store the reduced aligned particles "
 },
 {
   "count": 1,
   "prog": "e2stacksort.py ",
   "option": " ['--seqali'] ",
   "default": " False ",
   "type": " None ",
   "help": " Align each particle to the previous particle before saving with rotate_translate_tree. No flip in alignment. Aligns stack #2 instead if provided. "
 },
 {
   "count": 1,
   "prog": "e2stacksort.py ",
   "option": " ['--seqalicen'] ",
   "default": " False ",
   "type": " None ",
   "help": " Align each particle to the previous particle before saving, with a postalignment recentering. No flip in alignment. Aligns stack #2 instead if provided. "
 },
 {
   "count": 1,
   "prog": "e2stacksort.py ",
   "option": " ['--nsort'] ",
   "default": "0",
   "type": " int ",
   "help": " Number of output particles to generate (mainly for reverse mode) "
 },
 {
   "count": 1,
   "prog": "e2stacksort.py ",
   "option": " ['--ninput'] ",
   "default": "0",
   "type": " int ",
   "help": " Number of input particles to read (first n in the file) "
 },
 {
   "count": 1,
   "prog": "e2symbest.py ",
   "option": " ['--rtp'] ",
   "default": " False ",
   "type": " None ",
   "help": " make a rotational footprint "
 },
 {
   "count": 1,
   "prog": "e2symbest.py ",
   "option": " ['--imask'] ",
   "default": " None ",
   "type": " int ",
   "help": " Inside mask radius "
 },
 {
   "count": 1,
   "prog": "e2symsearch3d.py ",
   "option": " ['--nopreprocprefft'] ",
   "default": " False ",
   "type": " None ",
   "help": " Turns off all preprocessing that happens only once before alignment (--normproc, --mask, --maskfile, --clip, --threshold; i.e., all preprocessing excepting filters --highpass, --lowpass, --preprocess, and --shrink. "
 },
 {
   "count": 1,
   "prog": "e2symsearch3d.py ",
   "option": " ['--avgiter'] ",
   "default": "1",
   "type": " int ",
   "help": " Default=1. If --keep is different from 1.0 and --average is on, the initial average will include all the particles, but then the percent specified byoptions.keep will be kept (the rest thrown away) and a new average will be computed. If --avgiter > 1, this new average will be compared again against all the particles. The procedure will be repeated for however many iterations --avgiter is given, or the process will stop automatically if in two consecutive rounds exactly the same particles are kept "
 },
 {
   "count": 1,
   "prog": "e2symsearch3d.py ",
   "option": " ['--steps'] ",
   "default": "10",
   "type": " int ",
   "help": " Number of steps (for the MC). Default=10. "
 },
 {
   "count": 1,
   "prog": "e2symsearch3d.py ",
   "option": " ['--symmetrize'] ",
   "default": " False ",
   "type": " None ",
   "help": " Symmetrize volume after alignment. "
 },
 {
   "count": 1,
   "prog": "e2tilefile.py ",
   "option": " ['--build'] ",
   "default": " None ",
   "type": " str ",
   "help": " Build a new tile file from the specified image "
 },
 {
   "count": 1,
   "prog": "e2tilefile.py ",
   "option": " ['--buildpspec'] ",
   "default": " None ",
   "type": " float ",
   "help": " Builds 1D and 2D power spectra for the images when building, Value is A/pix for image. "
 },
 {
   "count": 1,
   "prog": "e2tilefile.py ",
   "option": " ['--display'] ",
   "default": "  ",
   "type": " str ",
   "help": " Displays a specific tile (level,x,y)) "
 },
 {
   "count": 1,
   "prog": "e2tileimage.py ",
   "option": " ['--xmin'] ",
   "default": "-1",
   "type": " int ",
   "help": " Start tiling on this x-pixel. If -1, will start one boxsize inward. "
 },
 {
   "count": 1,
   "prog": "e2tileimage.py ",
   "option": " ['--xmax'] ",
   "default": "-1",
   "type": " int ",
   "help": " Generate tiles in x-direction until this many pixels. If -1, will tile the entire image. "
 },
 {
   "count": 1,
   "prog": "e2tileimage.py ",
   "option": " ['--xstep'] ",
   "default": "256",
   "type": " int ",
   "help": " Step length in x-direction. If less than --boxsize, tiles will overlap. Default is 256. "
 },
 {
   "count": 1,
   "prog": "e2tileimage.py ",
   "option": " ['--ymin'] ",
   "default": "-1",
   "type": " int ",
   "help": " Start tiling on this y-pixel. If -1, will start one boxsize inward. "
 },
 {
   "count": 1,
   "prog": "e2tileimage.py ",
   "option": " ['--ymax'] ",
   "default": "-1",
   "type": " int ",
   "help": " Generate tiles in y-direction until this many pixels. If -1, will tile the entire image. "
 },
 {
   "count": 1,
   "prog": "e2tileimage.py ",
   "option": " ['--ystep'] ",
   "default": "256",
   "type": " int ",
   "help": " Step length in y-direction. If less than --boxsize, tiles will overlap. Default is 256. "
 },
 {
   "count": 1,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--volume'] ",
   "default": " None ",
   "type": " str ",
   "help": " 3D volume to validate "
 },
 {
   "count": 1,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--maxtiltangle'] ",
   "default": "180",
   "type": " float ",
   "help": " Maximum tiltangle permitted when finding tilt distances "
 },
 {
   "count": 1,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--quaternion'] ",
   "default": " False ",
   "type": " None ",
   "help": " Use Quaterions for tilt distance computation "
 },
 {
   "count": 1,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--docontourplot'] ",
   "default": " False ",
   "type": " None ",
   "help": " Compute a contour plot "
 },
 {
   "count": 1,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--radcut'] ",
   "default": "-1",
   "type": " float ",
   "help": " For use in the GUI, truncate the polar plot after R. -1 = no truncation "
 },
 {
   "count": 1,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--planethres'] ",
   "default": "360",
   "type": " float ",
   "help": " Maximum out of plane threshold for the tiltaxis. 0 = perfectly in plane, 1 = normal to plane "
 },
 {
   "count": 1,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--datalabelscolor'] ",
   "default": " #00ff00 ",
   "type": " str ",
   "help": " Set the color of the data labels. Any vaild matplotlib color is ok "
 },
 {
   "count": 1,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--datalabels'] ",
   "default": " False ",
   "type": " None ",
   "help": " Add data labels to the plot "
 },
 {
   "count": 1,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--colorzaxis'] ",
   "default": " False ",
   "type": " None ",
   "help": " Color scatter dots by Z axis "
 },
 {
   "count": 1,
   "prog": "e2tiltvalidate.py ",
   "option": " ['--eulerfile'] ",
   "default": " None ",
   "type": " str ",
   "help": " Euler angles file, to create tiltdistance from pre-aligned particles. Format is: imgnum, name, az, alt, phi "
 },
 {
   "count": 1,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--savefft'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Saves the average of the ffts of the tiles for an image or its strips. "
 },
 {
   "count": 1,
   "prog": "e2tomo_ctfraw.py ",
   "option": " ['--tiltangle'] ",
   "default": " None ",
   "type": " float ",
   "help": " Default=None. Single 2D image or image stack to calculate CTF for. "
 },
 {
   "count": 1,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--gpus'] ",
   "default": "-1",
   "type": " str ",
   "help": " default=-1 (all available GPUs will be used). To select specific GPUs to use, provide them as a comma-separated list of integers. "
 },
 {
   "count": 1,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--highpasspixels'] ",
   "default": "4",
   "type": " int ",
   "help": " Default=4. Number of Fourier pixels to zero out during highpass filtering AFTER reconstruction (postprocessing). Provide 'None' or '0' to disactivate. "
 },
 {
   "count": 1,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--iconpreproc'] ",
   "default": " False ",
   "type": " None ",
   "help": " default=False. If on, this will trigger a call to ICONPreProcess on the .st file supplied through --tiltseries. "
 },
 {
   "count": 1,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--lowpassresolution'] ",
   "default": "100",
   "type": " float ",
   "help": " Default=100. Resolution in angstroms to lowpass filter the tomogram AFTER reconstruction (postprocessing). Type 'None' or '0' to disactivate. "
 },
 {
   "count": 1,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--sizez'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Output size in Z for the reconstructed tomogram. This should be the same as the --thickness value provided during tiltseries preprocessing, or larger (it's good to make sure the entire reconstruction will fit in the reconstruction volume without being too tight). If running a reconstruction of the .ali file and both --thickness and --sizez are provided, the latter will supersede the former. "
 },
 {
   "count": 1,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--skipgolderasing'] ",
   "default": " False ",
   "type": " None ",
   "help": " default=False. If on, this will call IMOD to generate a new aligned tiltseries after ICONPreProcess, and then ICON-GPU will be automatically called to perform the reconstruction. Typically, one would NOT use this option as it is useful to delete the gold fiducials prior to reconstruction. "
 },
 {
   "count": 1,
   "prog": "e2tomo_icongpu.py ",
   "option": " ['--thickness'] ",
   "default": "0",
   "type": " int ",
   "help": " default=0. Thickness of the specimen as seen in a preliminary weighted back projection reconstruction from IMOD (through how many slices in Z are there specimen densities?). "
 },
 {
   "count": 1,
   "prog": "e2tomo_mwfill.py ",
   "option": " ['--train'] ",
   "default": " None ",
   "type": " str ",
   "help": " train on tomo "
 },
 {
   "count": 1,
   "prog": "e2tomo_mwfill.py ",
   "option": " ['--nsample'] ",
   "default": "2000",
   "type": " int ",
   "help": " number of samples "
 },
 {
   "count": 1,
   "prog": "e2tomo_mwfill.py ",
   "option": " ['--applyto'] ",
   "default": " None ",
   "type": " str ",
   "help": " apply to tomo "
 },
 {
   "count": 1,
   "prog": "e2tomo_stackframes.py ",
   "option": " ['--inputstring'] ",
   "default": " .mrc ",
   "type": " str ",
   "help": " default=.mrc. String common to all images to be processed. E.g., with '.mrc' as the default, all files in the directory ending in '.mrc' (or containing this as part of the filename) will be analyzed. "
 },
 {
   "count": 1,
   "prog": "e2tomo_stackframes.py ",
   "option": " ['--nframes'] ",
   "default": "0",
   "type": " int ",
   "help": " default=0 (not used). Number of expected frames per tilt angle, used to check whether errors occur in the stacking of images. "
 },
 {
   "count": 1,
   "prog": "e2tomo_stackframes.py ",
   "option": " ['--twodstack'] ",
   "default": " False ",
   "type": " None ",
   "help": " default=False (not used). Produces a stack of 2D images (Z number of images of X,Y size under the same \"virutal stack\" file name). By default, the output stack will be a 3D stack (a single image of size X,Y,Z, where Z is equal to the number of stacked frames). "
 },
 {
   "count": 1,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--exclude_extremes'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Will exclude images with a mean value 3 standard deviations away from the \"mean of means\" of all images. "
 },
 {
   "count": 1,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--precheckfiles'] ",
   "default": " False ",
   "type": " None ",
   "help": " \"Make sure that only valid images found by --input=* are processed -if unreadable or bad images are fed to the program, it might crash. "
 },
 {
   "count": 1,
   "prog": "e2tomo_tiltstacker.py ",
   "option": " ['--tag'] ",
   "default": " None ",
   "type": " str ",
   "help": " \"String to append to the beginning of the tiltseries output filename. The default is filename is 'stack.st'; if tag=xxx, the output will be 'xxx_stack.st'  "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--zeroid'] ",
   "default": "-1",
   "type": " int ",
   "help": " Index of the center tilt. Ignored when rawtlt is provided. "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--tltstep'] ",
   "default": "2",
   "type": " float ",
   "help": " Step between tilts. Ignored when rawtlt is provided. Default is 2.0. "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--npk'] ",
   "default": "20",
   "type": " int ",
   "help": " Number of landmarks to use (such as gold fiducials). Default is 20. "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--tltax'] ",
   "default": " None ",
   "type": " float ",
   "help": " Angle of the tilt axis. Note the angle stored internally will have an opposite sign. The program will calculate one if this option is not provided. "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--tltrange'] ",
   "default": " None ",
   "type": " str ",
   "help": " Include only tilts between 'START' and 'STOP', i.e. -40.0,40.0. Default behavior is to include all tilts. "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--bytile'] ",
   "default": " False ",
   "type": " None ",
   "help": " make final tomogram by tiles..  "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--notmp'] ",
   "default": " False ",
   "type": " None ",
   "help": " Do not write temporary files. "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--pkkeep'] ",
   "default": "0.9",
   "type": " float ",
   "help": " Fraction of landmarks to keep in the tracking. "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--clipz'] ",
   "default": "-1",
   "type": " int ",
   "help": " Z thickness of the final tomogram output. default is -1, (5/16 of tomogram length) "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--bxsz'] ",
   "default": "32",
   "type": " int ",
   "help": " Box size of the particles for tracking. Default is 32. Maybe helpful to use a larger one for fiducial-less cases.. "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--pk_maxval'] ",
   "default": "-5",
   "type": " float ",
   "help": " Maximum Density value of landmarks (n sigma). Default is -5 "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--pk_mindist'] ",
   "default": "0.125",
   "type": " float ",
   "help": " Minimum distance between landmarks, as fraction of micrograph length. Default is 0.125 "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--correctrot'] ",
   "default": " False ",
   "type": " None ",
   "help": " correct for global rotation and position sample flat in tomogram. "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--moretile'] ",
   "default": " False ",
   "type": " None ",
   "help": " Sample more tiles during reconstruction. Slower, but reduce boundary artifacts when the sample is thick "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--tmppath'] ",
   "default": " None ",
   "type": " str ",
   "help": " Temporary path "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--dryrun'] ",
   "default": " False ",
   "type": " None ",
   "help": " skip final reconstruction "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--patchtrack'] ",
   "default": "-1",
   "type": " int ",
   "help": " use patch tracking before landmark based alignment. input 0/1/2 as the number of patch tracking iterations. "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--posz'] ",
   "default": " False ",
   "type": " None ",
   "help": " auto positioning along z axis "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--xdrift'] ",
   "default": " False ",
   "type": " None ",
   "help": " apply extra correction for drifting along x axis "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--reconmode'] ",
   "default": " trilinear ",
   "type": " str ",
   "help": " Intepolation mode for reconstruction. default is trilinear. check e2help.py for details. Not recommended to change. "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--badone'] ",
   "default": " False ",
   "type": " None ",
   "help": " Remove one bad tilt during coarse alignment. seem to work better with smaller maxshift... "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--flip'] ",
   "default": " False ",
   "type": " None ",
   "help": " Flip the tomogram by rotating the tilt axis. need --load existing alignment "
 },
 {
   "count": 1,
   "prog": "e2tomogram.py ",
   "option": " ['--autoclipxy'] ",
   "default": " False ",
   "type": " None ",
   "help": " Optimize the x-y shape of the tomogram to fit in the tilt images. only works in bytile reconstruction. useful for non square cameras. "
 },
 {
   "count": 1,
   "prog": "e2tomopreproc.py ",
   "option": " ['--dontcleanup'] ",
   "default": " False ",
   "type": " None ",
   "help": " If specified, intermediate files will be kept. "
 },
 {
   "count": 1,
   "prog": "e2tomopreproc.py ",
   "option": " ['--erasegold'] ",
   "default": "  ",
   "type": " None ",
   "help": " Default=False. Runs erase_gold.py on the stack. "
 },
 {
   "count": 1,
   "prog": "e2tomopreproc.py ",
   "option": " ['--maskbyangle'] ",
   "default": " False ",
   "type": " None ",
   "help": " Default=False. Requires --tltfile. This will mask out from tilted images the info that isn't present at the 0 tilt angle. It uses the tomo.tiltedgemask processor (type 'e2help.py processors' at the commandline to read a description of the processor and its parameters). Provide --maskbyanglefalloff and --maskbyanglesigma to modify the default parameters. "
 },
 {
   "count": 1,
   "prog": "e2tomopreproc.py ",
   "option": " ['--maskbyanglefalloff'] ",
   "default": "4",
   "type": " int ",
   "help": " Default=4. Number of pixels over which --maskbyangle will fall off to zero. "
 },
 {
   "count": 1,
   "prog": "e2tomopreproc.py ",
   "option": " ['--maskbyanglesigma'] ",
   "default": "2",
   "type": " float ",
   "help": " Default=2.0. Number of sigmas for the width of the gaussian fall off in --maskbyangle and --maskbyanglefalloff "
 },
 {
   "count": 1,
   "prog": "e2tomopreproc.py ",
   "option": " ['--lowpassfrac'] ",
   "default": "0",
   "type": " float ",
   "help": " Default=0.0 (not used). Fraction of Nyquist to lowpass at. The processor used is filter.lowpass.tanh "
 },
 {
   "count": 1,
   "prog": "e2tomopreproc.py ",
   "option": " ['--highpasspix'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0 (not used). Number of Fourier pixels to apply highpass filter at. The processor used is filter.highpass.gauss. "
 },
 {
   "count": 1,
   "prog": "e2tomopreproc.py ",
   "option": " ['--prenadminite'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0. Requires IMOD to be installed. Used to apply prenad filtering to a tiltseries. This is the --minite parameter in IMOD's preNAD program (minimum number of iterations). "
 },
 {
   "count": 1,
   "prog": "e2tomopreproc.py ",
   "option": " ['--prenadmaxite'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0. Requires IMOD to be installed. Used to apply prenad filtering to a tiltseries. This is the --maxite parameter in IMOD's preNAD program (maximum number of iterations). "
 },
 {
   "count": 1,
   "prog": "e2tomopreproc.py ",
   "option": " ['--prenadsigma'] ",
   "default": "0",
   "type": " int ",
   "help": " Default=0. Requires IMOD to be installed. Used to apply prenad filtering to a tiltseries. This is the --sigma parameter in IMOD's preNAD program (initial sigma for 'smoothing structure tensor'). "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_buildtrainset.py ",
   "option": " ['--boxing'] ",
   "default": " False ",
   "type": " None ",
   "help": " Boxing particles. "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_buildtrainset.py ",
   "option": " ['--segment'] ",
   "default": " False ",
   "type": " None ",
   "help": " Segment particles. "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_buildtrainset.py ",
   "option": " ['--buildset'] ",
   "default": " False ",
   "type": " None ",
   "help": " Segment particles. "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_buildtrainset.py ",
   "option": " ['--particles_raw'] ",
   "default": " None ",
   "type": " str ",
   "help": " Input raw particle file "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_buildtrainset.py ",
   "option": " ['--particles_label'] ",
   "default": " None ",
   "type": " str ",
   "help": " Input labels for particle file "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_buildtrainset.py ",
   "option": " ['--boxes_negative'] ",
   "default": " None ",
   "type": " str ",
   "help": " Input boxes of negative samples "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_buildtrainset.py ",
   "option": " ['--trainset_output'] ",
   "default": " None ",
   "type": " str ",
   "help": " output file name of the training set.Default is the input particle file name plus _trainset.hdf "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_buildtrainset.py ",
   "option": " ['--validset'] ",
   "default": "0",
   "type": " float ",
   "help": " Propotion of particles in validation set. Default is 0.2  "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--trainset'] ",
   "default": " None ",
   "type": " None ",
   "help": " Training set. "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--from_trained'] ",
   "default": " None ",
   "type": " str ",
   "help": " Train from an existing network "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--nnet'] ",
   "default": " None ",
   "type": " str ",
   "help": " Trained network input (nnet_save_xx.hdf) "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--nettag'] ",
   "default": "  ",
   "type": " str ",
   "help": " Tag of the output neural net file. Will use the tag of good particles in training set by default. "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--batch'] ",
   "default": "20",
   "type": " int ",
   "help": " Batch size for the stochastic gradient descent. Default is 20. "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--nkernel'] ",
   "default": " 40,40,1 ",
   "type": " str ",
   "help": " Number of kernels for each layer, from input to output. The number of kernels in the last layer must be 1.  "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--ksize'] ",
   "default": " 15,15,15 ",
   "type": " str ",
   "help": " Width of kernels of each layer, the numbers must be odd. Note the number of layers should be the same as the nkernel option.  "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--poolsz'] ",
   "default": " 2,1,1 ",
   "type": " str ",
   "help": " Pooling size for each layer. Note the number of layers should be the same as the nkernel option.  "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--trainout'] ",
   "default": " False ",
   "type": " None ",
   "help": " Output the result of the training set "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--training'] ",
   "default": " False ",
   "type": " None ",
   "help": " Doing training "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--applying'] ",
   "default": " False ",
   "type": " None ",
   "help": " Applying the neural network on tomograms "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_convnet.py ",
   "option": " ['--outtag'] ",
   "default": "  ",
   "type": " str ",
   "help": " Tag of the segmentation output. When left empty, the segmentation will be saved to 'segmentations/<tomogram name>__<neural network tag>_seg.hdf'. When set, the output will be written to 'segmentations/<tomogram name>__<outtag>.hdf' "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_preproc.py ",
   "option": " ['--proc1'] ",
   "default": " filter.lowpass.gauss:cutoff_abs=.25 ",
   "type": " None ",
   "help": " If specified _proctag files will be generated. Typical = filter.lowpass.gauss:cutoff_abs=.25 "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_preproc.py ",
   "option": " ['--proc2'] ",
   "default": " filter.highpass.gauss:cutoff_pixels=5 ",
   "type": " None ",
   "help": " If specified _proctag tomograms will be generated. Typical = filter.highpass.gauss:cutoff_pixels=5 "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_preproc.py ",
   "option": " ['--proc3'] ",
   "default": " normalize ",
   "type": " None ",
   "help": " If specified _proctag tomograms will be generated. "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_preproc.py ",
   "option": " ['--proc4'] ",
   "default": " threshold.clampminmax.nsigma:nsigma=3 ",
   "type": " None ",
   "help": " If specified _proctag tomograms will be generated. Typical = threshold.clampminmax.nsigma:nsigma=3 "
 },
 {
   "count": 1,
   "prog": "e2tomoseg_preproc.py ",
   "option": " ['--proc5'] ",
   "default": "  ",
   "type": " None ",
   "help": " If specified _proctag tomograms will be generated. "
 },
 {
   "count": 1,
   "prog": "e2tvrecon.py ",
   "option": " ['--subpix'] ",
   "default": "1",
   "type": " int ",
   "help": " Specify the number of linear    subdivisions used to compute the projection of one image pixel onto a detector pixel. "
 },
 {
   "count": 1,
   "prog": "e2tvrecon.py ",
   "option": " ['--savesinograms'] ",
   "default": " False ",
   "type": " None ",
   "help": " If provided,   this option will save the sinogram for each 2-D slice (along Y) in the reconstruction    to disk. "
 },
 {
   "count": 1,
   "prog": "e2tvrecon.py ",
   "option": " ['--saveslices'] ",
   "default": " False ",
   "type": " None ",
   "help": " If provided,   this option will save each reconstructed 2-D slice (along Y) to disk. "
 }
]