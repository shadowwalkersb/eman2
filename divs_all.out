FILENAME:  ./doc/latex/rm_preamble.py
FILENAME:  ./doc/modular_class_html/docgen.py
FILENAME:  ./eman_fixer/__init__.py
FILENAME:  ./eman_fixer/__main__.py
FILENAME:  ./eman_fixer/find_pattern.py
FILENAME:  ./eman_fixer/fix_eman_div.py
FILENAME:  ./examples/alignbystars.py
FIXER: lineno: 60:  img.get_xsize()/2
FIXER: lineno: 60:  img.get_ysize()/2
FIXER: lineno: 75:  x/s
FIXER: lineno: 75:  y/s
FIXER: lineno: 103:  img.get_xsize()/2
FIXER: lineno: 103:  img.get_ysize()/2
FIXER: lineno: 150:  1.0/scale
FIXER: lineno: 164:  1.0/scale
FILENAME:  ./examples/alignnrg.py
FIXER: lineno: 113:  len(out1[0])/2
FILENAME:  ./examples/average.py
FIXER: lineno: 17:  1.0/(len(argv)-1)
FILENAME:  ./examples/avsub.py
FIXER: lineno: 16:  im1["nx"]/256
FIXER: lineno: 17:  im1["ny"]/256
FILENAME:  ./examples/boxscale.py
FILENAME:  ./examples/breakbrick.py
FIXER: lineno: 62:  self.sx/2
FIXER: lineno: 163:  self.sx/2
FIXER: lineno: 163:  self.sy/2
FILENAME:  ./examples/build_ali_lst.py
FIXER: lineno: 40:  apix0/apix1
FILENAME:  ./examples/clstoclsmx.py
FILENAME:  ./examples/cmpspeedtest.py
FIXER: lineno: 48:  float(n)/f(c,n)
FILENAME:  ./examples/comparepairs.py
FIXER: lineno: 55:  l[0].cmp("optvariance",l[1],{"radweight":1})/l[0].get_xsize()
FIXER: lineno: 67:  j/len(cmps)
FILENAME:  ./examples/compute_deconvolution.py
FILENAME:  ./examples/convnet_pickparticle.py
FIXER: lineno: 141:   train_set_x.get_value(borrow=True).shape[0] / batch_size
FIXER: lineno: 218:  (np.mean(img)-mid_mean)/mid_std
FIXER: lineno: 224:  (convnet.outsize-shape[0])/2
FIXER: lineno: 224:  (convnet.outsize-shape[0])/2
FIXER: lineno: 226:  float(shape[0]+8)/float(convnet.outsize)
FIXER: lineno: 243:  nptcls/bigbatch
FIXER: lineno: 353:  (e["nx"]-shape)/2
FIXER: lineno: 353:  (e["ny"]-shape)/2
FIXER: lineno: 369:  float(newshp)/float(shape)
FIXER: lineno: 370:  float(newshp)/float(shape)
FIXER: lineno: 371:  (shape-newshp)/2
FIXER: lineno: 371:  (shape-newshp)/2
FIXER: lineno: 372:  (e["nx"]-ori_shape[0])/2
FIXER: lineno: 372:  (e["ny"]-ori_shape[1])/2
FIXER: lineno: 396:  (e["nx"]-ori_shape[0])/2
FIXER: lineno: 396:  (e["ny"]-ori_shape[1])/2
FIXER: lineno: 410:  float(shape)/float(newshp)
FIXER: lineno: 525:  input_shape[2]/poolsz
FIXER: lineno: 525:  input_shape[3]/poolsz
FIXER: lineno: 601:  input_shape[2]/poolsz
FIXER: lineno: 601:  input_shape[3]/poolsz
FIXER: lineno: 631:  6. / (fan_in + fan_out)
FIXER: lineno: 658:  (filter_shape[2]-1)/2
FIXER: lineno: 690:  (self.filter_shape[2]-1)/2
FILENAME:  ./examples/crystal_index.py
FIXER: lineno: 113:  orig["nx"]/8
FIXER: lineno: 135:  nimg.shape[0]/2.
FIXER: lineno: 135:  nx/2.
FIXER: lineno: 140:   1/(apix*nx)
FIXER: lineno: 141:  nx/2
FIXER: lineno: 142:  1/(ds*exper_max_radius)
FIXER: lineno: 147:   1/(resolutions*ds)
FIXER: lineno: 147:   nx/2.
FIXER: lineno: 161:  (r**2-options.diameter)/r**2
FIXER: lineno: 164:   1/(r*ds)
FIXER: lineno: 217:  min_distance/10.
FIXER: lineno: 267:  min_distance/10.0
FIXER: lineno: 273:   1/(refine_apix*nx)
FIXER: lineno: 279:  min_distance/10.0
FIXER: lineno: 289:   1/(best_refine_apix*nx)
FIXER: lineno: 301:  nx/2
FIXER: lineno: 301:  nx/2
FIXER: lineno: 302:  nx/2
FIXER: lineno: 302:  nx/2
FIXER: lineno: 311:   1/(r*ds)
FIXER: lineno: 314:  nx/2
FIXER: lineno: 314:  nx/2
FIXER: lineno: 316:  nx/2
FIXER: lineno: 316:  nx/2
FIXER: lineno: 324:  nn/2
FIXER: lineno: 324:  nn/2
FIXER: lineno: 324:  nn/2
FIXER: lineno: 324:  nn/2
FIXER: lineno: 333:   (np.cos(theta)**2)/(2*sigma_x**2)
FIXER: lineno: 333:   (np.sin(theta)**2)/(2*sigma_y**2)
FIXER: lineno: 334:   -(np.sin(2*theta))/(4*sigma_x**2)
FIXER: lineno: 334:   (np.sin(2*theta))/(4*sigma_y**2)
FIXER: lineno: 335:   (np.sin(theta)**2)/(2*sigma_x**2)
FIXER: lineno: 335:   (np.cos(theta)**2)/(2*sigma_y**2)
FIXER: lineno: 345:  bs/2
FIXER: lineno: 345:  bs/2
FIXER: lineno: 348:  bs/2
FIXER: lineno: 348:  bs/2
FIXER: lineno: 348:  bs/2
FIXER: lineno: 348:  bs/2
FIXER: lineno: 349:  bs/2.
FIXER: lineno: 349:  bs/2.
FIXER: lineno: 355:   bs/2
FIXER: lineno: 356:   bs/2
FIXER: lineno: 365:   const/a
FIXER: lineno: 366:   const/b
FIXER: lineno: 367:   const/c
FIXER: lineno: 374:  len(astars)/2
FIXER: lineno: 375:  len(bstars)/2
FIXER: lineno: 376:  len(cstars)/2
FIXER: lineno: 378:   astars / astar
FIXER: lineno: 379:   bstars / bstar
FIXER: lineno: 380:   cstars / cstar
FIXER: lineno: 418:   np.sum(dist)/len(dist)
FIXER: lineno: 443:   close/2.
FILENAME:  ./examples/ctf_first_zero.py
FIXER: lineno: 21:  1/s
FILENAME:  ./examples/ctf_test.py
FIXER: lineno: 18:  1.0/(ctf.apix*2*256)
FILENAME:  ./examples/cudaerrors.py
FILENAME:  ./examples/cudaspeedtest.py
FIXER: lineno: 70:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 106:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 107:  cra/gra
FIXER: lineno: 108:  car/gar
FIXER: lineno: 128:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 147:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 166:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 186:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 205:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 276:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 296:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 320:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 338:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 357:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 377:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 397:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 416:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 435:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 454:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 472:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 490:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 510:   cpu_times[-1]/gpu_times[-1]
FIXER: lineno: 569:   cpu_times[-1]/gpu_times[-1]
FILENAME:  ./examples/ddd_simulation.py
FIXER: lineno: 78:  x/mag
FILENAME:  ./examples/denoiseautoencoder.py
FIXER: lineno: 64:  i/options.shrink
FIXER: lineno: 109:   train_set_x.get_value(borrow=True).shape[0] / batch_size
FIXER: lineno: 328:  6. / (n_hidden + n_visible)
FIXER: lineno: 329:  6. / (n_hidden + n_visible)
FIXER: lineno: 481:  6. / (n_in + n_out)
FIXER: lineno: 482:  6. / (n_in + n_out)
FILENAME:  ./examples/diffractsim.py
FILENAME:  ./examples/displaydemo.py
FILENAME:  ./examples/drawshape.py
FIXER: lineno: 105:  np.sqrt((dx)**2+(dy)**2)/2.
FIXER: lineno: 106:  dx/2.
FIXER: lineno: 107:  dy/2.
FILENAME:  ./examples/e2alignmenttest.py
FIXER: lineno: 211:  az_error/options.num
FIXER: lineno: 212:  dx_error/options.num
FIXER: lineno: 213:  dy_error/options.num
FIXER: lineno: 217:  refine_az_error/float(options.num-flip_errors)
FIXER: lineno: 218:  refine_dx_error/float(options.num-flip_errors)
FIXER: lineno: 219:  refine_dy_error/float(options.num-flip_errors)
FILENAME:  ./examples/e2aligntest.py
FIXER: lineno: 86:  (v[axes.find("x")]-16)/2.0
FIXER: lineno: 87:  (v[axes.find("y")]-16)/2.0
FIXER: lineno: 88:  (v[axes.find("z")]-16)/2.0
FILENAME:  ./examples/e2boxer_movie.py
FIXER: lineno: 86:  boxsize/2
FILENAME:  ./examples/e2boxinfo_rescale.py
FILENAME:  ./examples/e2compare2pdb.py
FILENAME:  ./examples/e2convnet_classifyptcls.py
FIXER: lineno: 53:  float(bxsz)/float(sz)
FIXER: lineno: 124:  float(bxsz)/float(sz)
FIXER: lineno: 161:  nref_target/nref
FIXER: lineno: 209:   len(data) / batch_size
FIXER: lineno: 249:  -nx/2
FIXER: lineno: 249:  -nx/2
FILENAME:  ./examples/e2ctf2emx.py
FIXER: lineno: 18:  ctf.dfdiff/2.0
FIXER: lineno: 19:  ctf.dfdiff/2.0
FILENAME:  ./examples/e2cylinder.py
FIXER: lineno: 198:   box/2.0
FIXER: lineno: 203:   box/2.0
FILENAME:  ./examples/e2ddd_powspec.py
FIXER: lineno: 106:  1.0/N
FIXER: lineno: 117:  1.0/N
FIXER: lineno: 137:  (img1["nx"]-fullbox)/2
FIXER: lineno: 138:  (img1["ny"]-fullbox)/2
FIXER: lineno: 188:  1.0/(img["apix_x"]*img["ny"])
FIXER: lineno: 189:  .25/ds
FIXER: lineno: 189:  img["ny"]/2
FIXER: lineno: 216:  ctf.zero(i)/ds
FIXER: lineno: 247:  zeroes[0]/2
FILENAME:  ./examples/e2ddd_ptclaligner.py
FIXER: lineno: 73:  boxsize/2
FIXER: lineno: 73:  boxsize/2
FILENAME:  ./examples/e2extractctf.py
FILENAME:  ./examples/e2extractequalorient.py
FILENAME:  ./examples/e2fftsynth.py
FIXER: lineno: 190:  nx/2
FIXER: lineno: 192:  nx/2
FIXER: lineno: 196:  nx/4
FIXER: lineno: 197:  nx/4
FIXER: lineno: 202:  nx/4
FIXER: lineno: 202:  nx/2
FIXER: lineno: 213:  nx/4
FIXER: lineno: 213:  nx/2
FIXER: lineno: 213:  nx/4.0
FIXER: lineno: 214:  nx/2
FIXER: lineno: 214:  nx/2.0
FIXER: lineno: 233:  nx/16
FIXER: lineno: 244:  nx/2
FIXER: lineno: 248:  nx/4
FIXER: lineno: 248:  nx/2
FIXER: lineno: 249:  nx/2
FIXER: lineno: 261:  fft[0]/2.0
FIXER: lineno: 262:  fft["nx"]/2
FIXER: lineno: 262:  fft["nx"]/2
FIXER: lineno: 262:  fft[fft["nx"]/2-1]/2.0
FIXER: lineno: 265:  fft["nx"]/2
FIXER: lineno: 296:  xn/float(oversamp)
FILENAME:  ./examples/e2figureplot.py
FILENAME:  ./examples/e2fixheader.py
FILENAME:  ./examples/e2framestats.py
FIXER: lineno: 82:  1.0/(200.0*ctf.dsbg)
FIXER: lineno: 83:  1.0/(20.0*ctf.dsbg)
FIXER: lineno: 84:  1.0/(10.0*ctf.dsbg)
FIXER: lineno: 85:  1.0/(4.0*ctf.dsbg)
FIXER: lineno: 86:  sum(ctf.snr[r1:r2])/(r2-r1)
FIXER: lineno: 87:  sum(ctf.snr[r2:r3])/(r3-r2)
FIXER: lineno: 88:  sum(ctf.snr[r3:r4])/(r4-r3)
FILENAME:  ./examples/e2fscallxtal.py
FILENAME:  ./examples/e2helixcoords2boxes.py
FIXER: lineno: 29:  options.boxsize/2
FILENAME:  ./examples/e2itercmd.py
FILENAME:  ./examples/e2maskimod.py
FIXER: lineno: 141:  u/d
FILENAME:  ./examples/e2melonball.py
FIXER: lineno: 146:   (2*maskcx - inputhdr['nx'])/2
FIXER: lineno: 146:   (2*maskcx - inputhdr['ny'])/2
FIXER: lineno: 146:   (2*maskcx - inputhdr['nz'])/2
FIXER: lineno: 277:   mask['nx']/2.0
FIXER: lineno: 278:   mask['ny']/2.0
FIXER: lineno: 279:   mask['nz']/2.0
FIXER: lineno: 299:   mask['nx']/2.0
FIXER: lineno: 299:   mask['ny']/2.0
FIXER: lineno: 299:   mask['nz']/2.0
FIXER: lineno: 371:   box/2.0
FIXER: lineno: 371:   box/2.0
FIXER: lineno: 378:   (sx*2 - paddedbox)/2
FIXER: lineno: 378:    (sy*2 - paddedbox)/2
FIXER: lineno: 378:    (sz*2 - paddedbox)/2
FIXER: lineno: 399:   bigscoop['nx']/2
FIXER: lineno: 400:   bigscoop['ny']/2
FIXER: lineno: 401:   bigscoop['nz']/2
FIXER: lineno: 452:   vol['nx']/2
FIXER: lineno: 453:   vol['ny']/2
FIXER: lineno: 454:   vol['nz']/2
FIXER: lineno: 456:   (2*volxc - size)/2
FIXER: lineno: 456:   (2*volyc - size)/2
FIXER: lineno: 456:   (2*volzc - size)/2
FILENAME:  ./examples/e2moviealigner.py
FIXER: lineno: 101:  hdr['nx'] / bs
FIXER: lineno: 101:  hdr['ny'] / bs
FIXER: lineno: 191:  self.hdr['nx'] / boxsize
FIXER: lineno: 192:  self.hdr['ny'] / boxsize
FIXER: lineno: 194:  boxsize/2
FIXER: lineno: 194:  boxsize/2
FIXER: lineno: 340:  s/2
FIXER: lineno: 355:  vi/2
FIXER: lineno: 520:  sigd["sigma"]/10.0
FIXER: lineno: 551:  sigg["sigma"]/10.0
FIXER: lineno: 558:  1.0/gain["mean"]
FILENAME:  ./examples/e2moviealigner2.py
FIXER: lineno: 61:  hdr['nx'] / bs
FIXER: lineno: 61:  hdr['ny'] / bs
FIXER: lineno: 122:  self.hdr['nimg']/3
FIXER: lineno: 171:  1./8.
FIXER: lineno: 172:  7./8.
FIXER: lineno: 227:  1.0/(img["apix_x"]*self.bs)
FIXER: lineno: 228:  .25/ds
FIXER: lineno: 228:  img["ny"]/2
FIXER: lineno: 247:  ctf.zero(i)/ds
FIXER: lineno: 270:  zeros[0]/2
FIXER: lineno: 387:  sigd["sigma"]/10.0
FIXER: lineno: 414:  sigg["sigma"]/10.0
FIXER: lineno: 422:  1.0/gain["mean"]
FILENAME:  ./examples/e2moviealigner3.py
FIXER: lineno: 56:  hdr['nx'] / options.boxsize
FIXER: lineno: 56:  hdr['ny'] / options.boxsize
FIXER: lineno: 261:  -maxshift/2
FIXER: lineno: 261:  maxshift/2
FIXER: lineno: 350:  sigd["sigma"]/10.0
FIXER: lineno: 377:  sigg["sigma"]/10.0
FIXER: lineno: 385:  1.0/gain["mean"]
FILENAME:  ./examples/e2movieboxer.py
FIXER: lineno: 146:  box/2
FIXER: lineno: 146:  box/2
FILENAME:  ./examples/e2omitmaps.py
FILENAME:  ./examples/e2orthoproject.py
FILENAME:  ./examples/e2pathwalker_auto.py
FILENAME:  ./examples/e2plot_de_motion.py
FIXER: lineno: 120:   ( math.fabs(anglesin[0]) + math.fabs(anglesin[-1]) )/len(anglesin)
FILENAME:  ./examples/e2plotfig.py
FIXER: lineno: 279:  d/max(dminusmin)
FILENAME:  ./examples/e2procnd_par.py
FIXER: lineno: 32:  num/nthd
FILENAME:  ./examples/e2ptclfsc_multi.py
FIXER: lineno: 118:  nx/20
FIXER: lineno: 126:  1.0/restarget
FIXER: lineno: 127:  nx/2
FIXER: lineno: 128:  nx/2.2
FIXER: lineno: 204:   len(fsc)/3
FIXER: lineno: 207:   sum(fsc[rings[k]:rings[k+1]])/(rings[k+1]-rings[k])
FILENAME:  ./examples/e2ptclzvssim.py
FIXER: lineno: 159:  (im["mean"]-im["minimum"])/im2["sigma_nonzero"]
FIXER: lineno: 253:  nsnr/6
FIXER: lineno: 253:  nsnr/6
FIXER: lineno: 253:  sum(snr[3:nsnr/6])/(nsnr/6-3)
FIXER: lineno: 253:  nsnr/8
FIXER: lineno: 253:  nsnr/3
FIXER: lineno: 253:  nsnr/3
FIXER: lineno: 253:  nsnr/8
FIXER: lineno: 253:  sum(snr[nsnr/8:nsnr/3])/(nsnr/3-nsnr/8)
FIXER: lineno: 253:  nsnr/3
FIXER: lineno: 253:  nsnr/3
FIXER: lineno: 253:  sum(snr[nsnr/3:nsnr*2/3])/(nsnr*2/3-nsnr/3)
FIXER: lineno: 291:  pi/180.0
FIXER: lineno: 292:  numpy.sqrt(ary[colbfac-1])/100.0
FILENAME:  ./examples/e2pw_pathrefine.py
FIXER: lineno: 183:   (np.max(pv)-minp)/ngray
FIXER: lineno: 229:  dd/(np.max(dd)+1)
FIXER: lineno: 235:  float(gap)/realgap
FIXER: lineno: 236:  mult/gap
FIXER: lineno: 378:  path/apix
FIXER: lineno: 400:  path/apix
FIXER: lineno: 552:  (19.-abs(i-j))/20.
FIXER: lineno: 565:  ppw[0][2]/float(len(path))
FILENAME:  ./examples/e2pwhelixfit.py
FIXER: lineno: 95:  len(hlx)/8
FIXER: lineno: 118:  (l1.dot(l2))/(l1.length()*l2.length())
FILENAME:  ./examples/e2pwsheetfit.py
FIXER: lineno: 90:  (m-1)/2
FIXER: lineno: 101:  1.0/(sig*sqrt(2.0*pi))
FIXER: lineno: 101:  -(x*x)/(2.0*sig*sig)
FIXER: lineno: 132:  np.dot(l1,l2)/(np.linalg.norm(l1)*np.linalg.norm(l2))
FILENAME:  ./examples/e2pwstructuremodify.py
FIXER: lineno: 23:  abs(np.dot(c,crossab))/np.linalg.norm(crossab)
FIXER: lineno: 76:  SX/2
FIXER: lineno: 76:  SY/2
FIXER: lineno: 76:  SZ/2
FIXER: lineno: 109:  (x[1]-x[0])/midp
FIXER: lineno: 112:  midp/2
FIXER: lineno: 155:  np.dot(da,db)/(distance(posb,posi)*distance(posf,posi))
FIXER: lineno: 170:  wd/2
FIXER: lineno: 172:  wm/mrcp
FIXER: lineno: 236:  points[i]/np.array([apix_x,apix_y,apix_z])
FIXER: lineno: 248:  (ncent[i]+ncent[i+1])/2
FIXER: lineno: 251:  (ncent[j]+ncent[j+1])/2
FIXER: lineno: 271:  (1+csbd[i]+i+1)/2
FIXER: lineno: 316:  (posi+posf)/2
FILENAME:  ./examples/e2reboxer.py
FIXER: lineno: 103:  box/2
FIXER: lineno: 103:  box/2
FILENAME:  ./examples/e2simmxptclqual.py
FILENAME:  ./examples/e2simmxsort.py
FILENAME:  ./examples/e2simrecon.py
FIXER: lineno: 120:  1.0/(options.apix*nz)
FIXER: lineno: 126:  sqrt(pspec[i]*(1.0-fscl[i])/(fscl[i]))/(4000.0)
FILENAME:  ./examples/e2simulate.py
FIXER: lineno: 62:  ns/2
FIXER: lineno: 88:  (xt-edg*xb)/xb
FIXER: lineno: 89:  (yt-edg*yb)/yb
FILENAME:  ./examples/e2slicer.py
FIXER: lineno: 174:  1.0/shnyquist
FIXER: lineno: 195:   nz/2
FIXER: lineno: 203:  nx/2
FIXER: lineno: 217:   ny/2
FIXER: lineno: 240:  1.0/shnyquist
FIXER: lineno: 246:   nz/2
FIXER: lineno: 247:  nx/2
FIXER: lineno: 248:   ny/2
FILENAME:  ./examples/e2split3dstack.py
FILENAME:  ./examples/e2spt_autocenter.py
FIXER: lineno: 209:  eb/2.0
FIXER: lineno: 209:  (eb/2.0 - maxccfpmxC[0])/2.0
FIXER: lineno: 210:  eb/2.0
FIXER: lineno: 210:  (eb/2.0 - maxccfpmyC[1])/2.0
FIXER: lineno: 243:  eb/2.0
FIXER: lineno: 243:   (eb/2.0 - maxccfpmxCside[0])/2.0
FIXER: lineno: 244:  eb/2.0
FIXER: lineno: 422:  pb/2.0
FIXER: lineno: 423:  pb/2.0
FIXER: lineno: 446:  pb/2.0
FIXER: lineno: 446:   (pb/2.0 - maxccfpsideC[0])/2.0
FIXER: lineno: 447:  pb/2.0
FILENAME:  ./examples/e2spt_bfactorplot.py
FIXER: lineno: 216:   len( fsc )/3
FIXER: lineno: 219:  x/apix
FIXER: lineno: 264:   (ne+no)/2
FIXER: lineno: 363:   nfinal/options.step
FIXER: lineno: 518:   nfinal/options.step
FILENAME:  ./examples/e2spt_boxer22.py
FIXER: lineno: 372:  self.datasize[2]/2
FIXER: lineno: 396:  self.datasize[2]/2
FIXER: lineno: 416:  bs/2
FIXER: lineno: 416:  bz/2
FIXER: lineno: 416:  bs/2
FIXER: lineno: 422:  bs/2
FIXER: lineno: 422:  bz/2
FIXER: lineno: 422:  bs/2
FIXER: lineno: 431:  bs/2
FIXER: lineno: 431:  bs/2
FIXER: lineno: 431:  bz/2
FIXER: lineno: 433:  bs/2
FIXER: lineno: 433:  bs/2
FIXER: lineno: 433:  bz/2
FIXER: lineno: 598:  int(float(i))/self.shrink
FIXER: lineno: 712:  self.datasize[0]/2
FIXER: lineno: 713:  self.datasize[1]/2
FIXER: lineno: 726:  bs/2
FIXER: lineno: 726:  bs/2
FIXER: lineno: 735:  bs/2
FIXER: lineno: 735:  bs/2
FIXER: lineno: 758:  self.nlayers()/2
FIXER: lineno: 758:  (self.nlayers()+1)/2
FIXER: lineno: 767:  1.0/self.wfilt.getValue()
FIXER: lineno: 774:  self.nlayers()/2
FIXER: lineno: 774:  (self.nlayers()+1)/2
FIXER: lineno: 780:  1.0/self.wfilt.getValue()
FIXER: lineno: 807:   bs/2
FIXER: lineno: 810:  bs/2
FIXER: lineno: 824:  self.nlayers()/2
FIXER: lineno: 824:  (self.nlayers()+1)/2
FIXER: lineno: 834:  1.0/self.wfilt.getValue()
FIXER: lineno: 863:  self.get_boxsize(box[5])/2
FIXER: lineno: 957:  self.get_boxsize(box[5])/2
FIXER: lineno: 1087:  i/2
FIXER: lineno: 1184:  i/2
FIXER: lineno: 1217:  self.xzdown[0]/2
FIXER: lineno: 1224:  self.xzdown[0]/2
FIXER: lineno: 1265:  i/2
FIXER: lineno: 1526:  1.0/self.wfilt.getValue()
FILENAME:  ./examples/e2spt_boxer_old.py
FIXER: lineno: 433:  (2*x-boxsize)/2
FIXER: lineno: 433:  (2*y-boxsize)/2
FIXER: lineno: 433:   (2*z-boxsize)/2
FIXER: lineno: 501:  (2*x - boxsize)/2
FIXER: lineno: 501:  (2*y - boxsize)/2
FIXER: lineno: 501:   (2*z - boxsize)/2
FIXER: lineno: 802:   options.boxsize/4.0
FIXER: lineno: 1153:  1.0/self.wfilt.getValue()
FIXER: lineno: 1373:  self.datasize[2]/2
FIXER: lineno: 1397:  self.datasize[2]/2
FIXER: lineno: 1406:  bs/2
FIXER: lineno: 1406:  bs/2
FIXER: lineno: 1406:  bs/2
FIXER: lineno: 1412:  bs/2
FIXER: lineno: 1412:  bs/2
FIXER: lineno: 1412:  bs/2
FIXER: lineno: 1421:  bs/2
FIXER: lineno: 1421:  bs/2
FIXER: lineno: 1421:  bs/2
FIXER: lineno: 1423:  bs/2
FIXER: lineno: 1423:  bs/2
FIXER: lineno: 1423:  bs/2
FIXER: lineno: 1575:  int(float(i))/self.shrink
FIXER: lineno: 1584:  int(float(i))/self.shrink
FIXER: lineno: 1761:  self.boxsize()/2
FIXER: lineno: 1775:  (rvmin[0]+rvmax[0])/2
FIXER: lineno: 1775:  (rvmin[1]+rvmax[1])/2
FIXER: lineno: 1775:  (rvmin[2]+rvmax[2])/2
FIXER: lineno: 1798:  self.datasize[0]/2
FIXER: lineno: 1799:  self.datasize[1]/2
FIXER: lineno: 1816:  bs/2
FIXER: lineno: 1816:  bs/2
FIXER: lineno: 1816:  bs/2
FIXER: lineno: 1816:  bs/2
FIXER: lineno: 1818:  i/2
FIXER: lineno: 1822:  i/2
FIXER: lineno: 1826:  bs/2
FIXER: lineno: 1826:  bs/2
FIXER: lineno: 1836:  bs/2
FIXER: lineno: 1836:  bs/2
FIXER: lineno: 1836:  bs/2
FIXER: lineno: 1836:  bs/2
FIXER: lineno: 1838:  i/2
FIXER: lineno: 1842:  i/2
FIXER: lineno: 1846:  bs/2
FIXER: lineno: 1846:  bs/2
FIXER: lineno: 1858:  i/2
FIXER: lineno: 1861:  i/2
FIXER: lineno: 1874:  self.nlayers()/2
FIXER: lineno: 1874:  (self.nlayers()+1)/2
FIXER: lineno: 1883:  1.0/self.wfilt.getValue()
FIXER: lineno: 1890:  self.nlayers()/2
FIXER: lineno: 1890:  (self.nlayers()+1)/2
FIXER: lineno: 1896:  1.0/self.wfilt.getValue()
FIXER: lineno: 1922:   bs/2
FIXER: lineno: 1922:   bs/2
FIXER: lineno: 1924:  i/2
FIXER: lineno: 1928:  i/2
FIXER: lineno: 1934:   bs/2
FIXER: lineno: 1950:  self.nlayers()/2
FIXER: lineno: 1950:  (self.nlayers()+1)/2
FIXER: lineno: 1960:  1.0/self.wfilt.getValue()
FIXER: lineno: 1986:  self.boxsize()/2
FIXER: lineno: 1986:  self.boxsize()/2
FIXER: lineno: 1987:  self.boxsize()/2
FIXER: lineno: 1987:  self.boxsize()/2
FIXER: lineno: 1988:  self.boxsize()/2
FIXER: lineno: 1988:  self.boxsize()/2
FIXER: lineno: 2049:  n/2
FIXER: lineno: 2053:  n/2
FIXER: lineno: 2148:  self.boxsize()/2
FIXER: lineno: 2234:  i/2
FIXER: lineno: 2268:  self.xydown[0]/2
FIXER: lineno: 2275:  self.xydown[0]/2
FIXER: lineno: 2325:  i/2
FIXER: lineno: 2358:  self.xzdown[0]/2
FIXER: lineno: 2365:  self.xzdown[0]/2
FIXER: lineno: 2406:  i/2
FIXER: lineno: 2439:  self.zydown[0]/2
FIXER: lineno: 2446:  self.zydown[0]/2
FIXER: lineno: 2514:  1.0/options.lowpass
FIXER: lineno: 2571:  1.0/options.lowpass
FILENAME:  ./examples/e2spt_coeffplot.py
FIXER: lineno: 112:   1.0/nyquist
FIXER: lineno: 206:   scores[k] / maxv2
FIXER: lineno: 230:  1.0/3.0
FIXER: lineno: 231:   (3.5*std)/cuberoot
FIXER: lineno: 234:   ( max(scores) - min( scores )) / width
FIXER: lineno: 303:   (scores[i]-mean)/std
FIXER: lineno: 325:   (maxi-scores[i])/std
FIXER: lineno: 397:  n/2.0
FIXER: lineno: 408:   N/options.groups
FIXER: lineno: 468:  1/options.cutoff
FIXER: lineno: 468:  newN/(1/options.cutoff)
FILENAME:  ./examples/e2spt_coordsrefactor.py
FILENAME:  ./examples/e2spt_ctf_old.py
FIXER: lineno: 374:   ptclnx/2.0
FIXER: lineno: 1046:   framexsize/2.0
FIXER: lineno: 1081:   ( maxz + minz ) / 2.0
FIXER: lineno: 1131:  sum(defocuserrors)/len(defocuserrors)
FIXER: lineno: 1154:  sum(globalAvgDefErrors)/len(globalAvgDefErrors)
FIXER: lineno: 1254:   img['nx']/2
FIXER: lineno: 1255:   img['ny']/2
FIXER: lineno: 1257:   (2*imgxc - size)/2
FIXER: lineno: 1257:   (2*imgyc - size)/2
FIXER: lineno: 1271:   vol['nx']/2
FIXER: lineno: 1272:   vol['ny']/2
FIXER: lineno: 1273:   vol['nz']/2
FIXER: lineno: 1275:   (2*volxc - sizex)/2
FIXER: lineno: 1275:   (2*volyc - sizey)/2
FIXER: lineno: 1275:   (2*volzc - sizez)/2
FIXER: lineno: 1460:   img['nx']/2
FIXER: lineno: 1461:   img['ny']/2
FIXER: lineno: 1476:  (2*xc - sizex)/2
FIXER: lineno: 1476:  (2*yc - sizey)/2
FIXER: lineno: 1625:  1.0/(nbx*options.tilesize**2)
FIXER: lineno: 1681:  ffta.get_ysize()/2
FIXER: lineno: 1704:   1.0/( options.apix * options.tilesize )
FIXER: lineno: 1737:  ctf.zero(0)/(ds*2)
FIXER: lineno: 1860:   nx/2.0
FIXER: lineno: 1866:   img['nx']/2
FIXER: lineno: 1866:  options.tilesize/2.0
FIXER: lineno: 1868:   img['nx']/2
FIXER: lineno: 1898:   (globaldefocus+centerdefocus)/2.0
FIXER: lineno: 1925:   img['nx']/2
FIXER: lineno: 1939:   nx/2.0
FIXER: lineno: 1947:   nx/2.0
FIXER: lineno: 1955:   icethickness / numpy.cos( math.radians( angle ) )
FIXER: lineno: 1959:   nx/2.0
FIXER: lineno: 1960:   nx/2.0
FIXER: lineno: 1991:   nx/micrographwidth
FIXER: lineno: 2028:   excedent/2
FIXER: lineno: 2031:   excedent/2
FIXER: lineno: 2041:   ( nx - options.tilesize ) / options.stripstep
FIXER: lineno: 2093:   micrographwidth/2
FIXER: lineno: 2101:   icethicknessm / math.cos( math.radians(angle) )
FIXER: lineno: 2105:   img['nx']/2.0
FIXER: lineno: 2140:   (defocusmin+defocusmax)/2
FIXER: lineno: 2204:  len(imgdefocuses)/2
FIXER: lineno: 2205:   (globaldefocus+middef)/2.0
FIXER: lineno: 2235:   sum( [  math.sqrt(angerrors[a]*angerrors[a]) for a in list(angerrors.keys()) ] ) /len( angerrors )
FIXER: lineno: 2386:   sum( ydata )/len(ydata)
FIXER: lineno: 2490:   sizerangey/sizerangex
FIXER: lineno: 2494:   sizerangex/sizerangey
FIXER: lineno: 2530:   yrange/20
FIXER: lineno: 2542:   xrange/20
FIXER: lineno: 2549:  ptclnx/2
FIXER: lineno: 2629:  ctf.zero(0)/(ds*2)
FIXER: lineno: 2641:  ctf.zero(i)/ds
FILENAME:  ./examples/e2spt_eval_orient.py
FIXER: lineno: 72:  xfd["alt"]/10.0001
FILENAME:  ./examples/e2spt_extract_align.py
FILENAME:  ./examples/e2spt_icethicknessplot.py
FIXER: lineno: 613:   pad/2
FILENAME:  ./examples/e2spt_make3d.py
FIXER: lineno: 21:  -(pad-boxsize)/2
FIXER: lineno: 21:  -(pad-boxsize)/2
FIXER: lineno: 29:  (pad-boxsize)/2
FIXER: lineno: 29:   (pad-boxsize)/2
FIXER: lineno: 29:   (pad-boxsize)/2
FILENAME:  ./examples/e2spt_meanintensityplot.py
FIXER: lineno: 179:   (stds[0]*stds[0])/n1
FIXER: lineno: 179:   (stds[1]*stds[1])/n2
FIXER: lineno: 179:   ( means[0]-means[1] )/ np.sqrt( (stds[0]*stds[0])/n1 + (stds[1]*stds[1])/n2 )
FIXER: lineno: 249:   float(intensitiesNormalizedMin[x]) / imax
FIXER: lineno: 265:   vol['nx']/2
FIXER: lineno: 266:   vol['ny']/2
FIXER: lineno: 267:   vol['nz']/2
FIXER: lineno: 269:   (2*volxc - size)/2
FIXER: lineno: 269:   (2*volyc - size)/2
FIXER: lineno: 269:   (2*volzc - size)/2
FIXER: lineno: 278:   img['nx']/2
FIXER: lineno: 279:   img['ny']/2
FIXER: lineno: 282:   (2*imgxc - size)/2
FIXER: lineno: 282:   (2*imgyc - size)/2
FIXER: lineno: 568:  1.0/3.0
FIXER: lineno: 570:   (3.5*std)/cuberoot
FIXER: lineno: 573:   (max(intensities) - min(intensities)) / width
FILENAME:  ./examples/e2spt_radialdensityplot.py
FIXER: lineno: 230:   values[v]/maxv
FIXER: lineno: 427:  a['nx']/2
FIXER: lineno: 521:  a['nx']/2
FILENAME:  ./examples/e2spt_reconfromtilts.py
FILENAME:  ./examples/e2spt_rotationalplot.py
FIXER: lineno: 417:  1.0/nsym
FIXER: lineno: 457:   values[ele][k] / maxv2
FIXER: lineno: 724:   sum(widths)/2
FILENAME:  ./examples/e2spt_stackdif.py
FILENAME:  ./examples/e2spt_subtilt_old.py
FIXER: lineno: 413:   tomox/2.0
FIXER: lineno: 415:   options.tiltaxislocation/2.0
FIXER: lineno: 435:   nimgsOriginal/2
FIXER: lineno: 584:   box / 4.0
FIXER: lineno: 603:   middleslice['nx'] /2.0
FIXER: lineno: 604:   middleslice['nx'] /2.0
FIXER: lineno: 626:   middleslice['nx']/2.0
FIXER: lineno: 627:   middleslice['ny']/2.0
FIXER: lineno: 901:   finalimg['nx']/2.0
FIXER: lineno: 902:   finalimg['ny']/2.0
FIXER: lineno: 957:   tomox/2.0
FIXER: lineno: 1005:  icethickness/2.0
FIXER: lineno: 1011:   icethickness/2.0
FIXER: lineno: 1035:   tomox/2.0
FIXER: lineno: 1045:   float(options.boxsize)/2.0
FIXER: lineno: 1048:   options.boxsize/2.0
FIXER: lineno: 1061:   (2*xt-options.boxsize)/2
FIXER: lineno: 1061:   (2*yt-options.boxsize)/2
FIXER: lineno: 1118:   refp['nx']/2.0
FIXER: lineno: 1119:   refp['ny']/2.0
FIXER: lineno: 1203:   (2*xc-bgboxsize)/2
FIXER: lineno: 1203:   (2*yc-bgboxsize)/2
FIXER: lineno: 1203:   (2*zc-bgboxsize)/2
FIXER: lineno: 1247:   options.boxsize / options.shrink
FIXER: lineno: 1248:   bgboxsize / options.shrink
FIXER: lineno: 1250:   (wholebox['nx'] - finalbox)/2
FIXER: lineno: 1250:   (wholebox['ny'] - finalbox)/2
FIXER: lineno: 1250:   (wholebox['nz'] - finalbgbox)/2
FIXER: lineno: 1281:   finalbox/3.0
FILENAME:  ./examples/e2spt_test.py
FILENAME:  ./examples/e2spt_timetest.py
FIXER: lineno: 234:   cnums/gnums
FIXER: lineno: 854:  float(options.coarsestep)/2.0
FIXER: lineno: 856:  float(options.coarsestep)/2.0
FIXER: lineno: 888:  float(options.coarsestep)/2.0
FIXER: lineno: 1007:   x1/x2
FIXER: lineno: 1012:   x2/x1
FILENAME:  ./examples/e2spt_tomogramfiltrator.py
FILENAME:  ./examples/e2spt_tomosimjobs.py
FIXER: lineno: 424:  (2 * options.tiltrangelowerlimit) / options.tiltstep
FIXER: lineno: 665:  (2 * tiltrange) / tiltstep
FILENAME:  ./examples/e2spt_transformdistance.py
FIXER: lineno: 199:   sum(angularDistances)/len(angularDistances)
FIXER: lineno: 200:   sum(translations)/len(translations)
FILENAME:  ./examples/e2spt_variance.py
FIXER: lineno: 124:   sum(ptcls)/len(ptcls)
FIXER: lineno: 136:   variance/len(ptcls)
FILENAME:  ./examples/e2starfiletoboxfile.py
FIXER: lineno: 41:  options.boxsize/2
FIXER: lineno: 100:  bs/2
FIXER: lineno: 100:  bs/2
FIXER: lineno: 118:  bs/2
FIXER: lineno: 118:  bs/2
FILENAME:  ./examples/e2starfiletolstfile.py
FILENAME:  ./examples/e2symtest2d.py
FIXER: lineno: 17:  360.0/i
FIXER: lineno: 17:  360.0/i
FIXER: lineno: 25:  csum/n
FIXER: lineno: 26:  csum/n
FILENAME:  ./examples/e2tomo_ctf_old.py
FIXER: lineno: 1039:  nx/options.tilesize
FIXER: lineno: 1040:  ny/options.tilesize
FIXER: lineno: 1043:  nx/options.correctionwidth
FIXER: lineno: 1067:   ( 2*startx + xpixels )/ 2
FIXER: lineno: 1077:   nx/2.0
FIXER: lineno: 1098:   options.tilesize/2
FIXER: lineno: 1115:   (2*starty + ypixels) / 2
FIXER: lineno: 1273:  options.tilesize/2
FIXER: lineno: 1334:  1.0/(nbx*options.tilesize**2)
FIXER: lineno: 1390:   1.0/( options.apix * options.tilesize )
FIXER: lineno: 1402:  ffta.get_ysize()/2
FIXER: lineno: 1486:   len(angles)/2.0
FIXER: lineno: 1719:   nx/2.0
FIXER: lineno: 1735:   allowabledz/10000
FIXER: lineno: 1736:   allowabledz/apix
FIXER: lineno: 1744:   allowabledz/10000
FIXER: lineno: 1745:   allowabledz/apix
FIXER: lineno: 1774:   imghdr['nx']/2
FIXER: lineno: 1788:   nx/2.0
FIXER: lineno: 1803:   options.thickness / numpy.cos( math.radians( angle ) )
FIXER: lineno: 1810:   options.thickness / numpy.cos( math.radians( angle ) )
FIXER: lineno: 1816:  numpy.cos( math.radians (angle) ) / numpy.sin( math.radians (angle) )
FIXER: lineno: 1848:   nx/micrographwidth
FIXER: lineno: 1891:   excedent/2
FIXER: lineno: 1894:   excedent/2
FIXER: lineno: 1904:   ( nx - options.tilesize ) / stripfitstep
FIXER: lineno: 1938:   micrographwidth/2.0
FIXER: lineno: 1939:   micrographwidth/2.0
FIXER: lineno: 1960:   icethicknessm / math.cos( math.radians(angle) )
FIXER: lineno: 1964:   imghdr['nx']/2.0
FIXER: lineno: 1999:   (defocusmin+defocusmax)/2
FIXER: lineno: 2095:   sum( [  math.sqrt(angerrors[a]*angerrors[a]) for a in list(angerrors.keys()) ] ) /len( angerrors )
FIXER: lineno: 2249:   sum( ydata )/len(ydata)
FIXER: lineno: 2350:   sizerangey/sizerangex
FIXER: lineno: 2354:   sizerangex/sizerangey
FIXER: lineno: 2390:   yrange/20
FIXER: lineno: 2402:   xrange/20
FIXER: lineno: 2409:  ptclnx/2
FIXER: lineno: 2478:  ctf.zero(0)/(ds*2)
FIXER: lineno: 2487:  ctf.zero(i)/ds
FIXER: lineno: 2522:   img['nx']/2
FIXER: lineno: 2526:   img['ny']/2
FIXER: lineno: 2530:   (2*imgxc - sizex)/2
FIXER: lineno: 2530:   (2*imgyc - sizey)/2
FILENAME:  ./examples/e2tomo_icongpu.py
FIXER: lineno: 232:   float(outsize)/4.0
FIXER: lineno: 273:  1.0/options.lowpassresolution
FIXER: lineno: 283:  1.0/options.lowpassresolution
FIXER: lineno: 371:   float(outsize)/float(upperlimit)
FILENAME:  ./examples/e2tomogram_old.py
FIXER: lineno: 55:  (padbox-box)/2
FIXER: lineno: 57:  (sx-2*bigpad)/box
FIXER: lineno: 58:  (sy-2*bigpad)/box
FIXER: lineno: 59:  (sx-padbox)/float(nx-1)
FIXER: lineno: 60:  (sy-padbox)/float(ny-1)
FIXER: lineno: 64:  nx/2
FIXER: lineno: 64:  ny/2
FIXER: lineno: 79:  box/2
FIXER: lineno: 94:  padbox/2
FIXER: lineno: 94:  padbox/2
FIXER: lineno: 96:  padbox/2
FIXER: lineno: 96:  padbox/2
FIXER: lineno: 104:  nx/2
FIXER: lineno: 104:  ny/2
FIXER: lineno: 104:  bigpad/2
FIXER: lineno: 104:  sx/2
FIXER: lineno: 104:  bigpad/2
FIXER: lineno: 104:  sy/2
FIXER: lineno: 104:  padbox/2
FIXER: lineno: 104:  padbox/2
FIXER: lineno: 123:  len(vals)/2
FIXER: lineno: 168:  a.get_xsize()/2
FIXER: lineno: 168:  rgnp[2]/2
FIXER: lineno: 168:  a.get_ysize()/2
FIXER: lineno: 168:  rgnp[2]/2
FIXER: lineno: 179:  nimg/2
FIXER: lineno: 179:  nimg/2
FIXER: lineno: 215:  -len(vec)/4
FIXER: lineno: 219:  len(vec3)/2
FIXER: lineno: 228:  nimg/2
FIXER: lineno: 235:  rgnp[3]/2
FIXER: lineno: 254:  ccf.get_xsize()/2
FIXER: lineno: 254:  ccf.get_ysize()/2
FIXER: lineno: 258:  im1.get_xsize()/2
FIXER: lineno: 258:  im1.get_ysize()/2
FIXER: lineno: 261:  rgnp[2]/2
FIXER: lineno: 261:  im2.get_xsize()/2
FIXER: lineno: 261:  rgnp[2]/2
FIXER: lineno: 261:  im2.get_ysize()/2
FIXER: lineno: 275:  (a[3]+b[3])/2.0
FIXER: lineno: 275:  (a[4]+b[4])/2.0
FIXER: lineno: 280:  nimg/2
FIXER: lineno: 289:  1.0/(1.0+p[4])
FIXER: lineno: 290:  1.0/(1.0+p[4])
FIXER: lineno: 291:  1.0/(1.0+p[4])
FIXER: lineno: 292:  sum[0]/norm
FIXER: lineno: 292:  sum[1]/norm
FIXER: lineno: 299:  1.0/(1.0+p[4])
FIXER: lineno: 300:  1.0/(1.0+p[4])
FIXER: lineno: 301:  1.0/(1.0+p[4])
FIXER: lineno: 302:  sum[0]/norm
FIXER: lineno: 302:  sum[1]/norm
FIXER: lineno: 325:  a.get_xsize()/4
FIXER: lineno: 336:  a.get_xsize()/64
FIXER: lineno: 336:  a.get_xsize()/2
FIXER: lineno: 337:  a.get_ysize()/2
FIXER: lineno: 346:  nimg/2
FILENAME:  ./examples/e2tomoseg.py
FIXER: lineno: 277:  self.datasize[2]/2
FIXER: lineno: 301:  self.datasize[2]/2
FIXER: lineno: 310:  bs/2
FIXER: lineno: 310:  bs/2
FIXER: lineno: 310:  bs/2
FIXER: lineno: 316:  bs/2
FIXER: lineno: 316:  bs/2
FIXER: lineno: 316:  bs/2
FIXER: lineno: 325:  bs/2
FIXER: lineno: 325:  bs/2
FIXER: lineno: 325:  bs/2
FIXER: lineno: 327:  bs/2
FIXER: lineno: 327:  bs/2
FIXER: lineno: 327:  bs/2
FIXER: lineno: 460:  int(float(i))/self.shrink
FIXER: lineno: 469:  int(float(i))/self.shrink
FIXER: lineno: 632:  self.boxsize()/2
FIXER: lineno: 646:  (rvmin[0]+rvmax[0])/2
FIXER: lineno: 646:  (rvmin[1]+rvmax[1])/2
FIXER: lineno: 646:  (rvmin[2]+rvmax[2])/2
FIXER: lineno: 671:  self.datasize[0]/2
FIXER: lineno: 672:  self.datasize[1]/2
FIXER: lineno: 689:  bs/2
FIXER: lineno: 689:  bs/2
FIXER: lineno: 689:  bs/2
FIXER: lineno: 689:  bs/2
FIXER: lineno: 691:  i/2
FIXER: lineno: 695:  i/2
FIXER: lineno: 699:  bs/2
FIXER: lineno: 699:  bs/2
FIXER: lineno: 709:  bs/2
FIXER: lineno: 709:  bs/2
FIXER: lineno: 709:  bs/2
FIXER: lineno: 709:  bs/2
FIXER: lineno: 711:  i/2
FIXER: lineno: 715:  i/2
FIXER: lineno: 719:  bs/2
FIXER: lineno: 719:  bs/2
FIXER: lineno: 731:  i/2
FIXER: lineno: 734:  i/2
FIXER: lineno: 747:  self.nlayers()/2
FIXER: lineno: 747:  (self.nlayers()+1)/2
FIXER: lineno: 756:  1.0/self.wfilt.getValue()
FIXER: lineno: 763:  self.nlayers()/2
FIXER: lineno: 763:  (self.nlayers()+1)/2
FIXER: lineno: 769:  1.0/self.wfilt.getValue()
FIXER: lineno: 795:   bs/2
FIXER: lineno: 795:   bs/2
FIXER: lineno: 797:  i/2
FIXER: lineno: 801:  i/2
FIXER: lineno: 807:   bs/2
FIXER: lineno: 823:  self.nlayers()/2
FIXER: lineno: 823:  (self.nlayers()+1)/2
FIXER: lineno: 833:  1.0/self.wfilt.getValue()
FIXER: lineno: 857:  self.boxsize()/2
FIXER: lineno: 857:  self.boxsize()/2
FIXER: lineno: 858:  self.boxsize()/2
FIXER: lineno: 858:  self.boxsize()/2
FIXER: lineno: 859:  self.boxsize()/2
FIXER: lineno: 859:  self.boxsize()/2
FIXER: lineno: 920:  n/2
FIXER: lineno: 924:  n/2
FIXER: lineno: 1019:  self.boxsize()/2
FIXER: lineno: 1102:  i/2
FIXER: lineno: 1136:  self.xydown[0]/2
FIXER: lineno: 1143:  self.xydown[0]/2
FIXER: lineno: 1192:  i/2
FIXER: lineno: 1225:  self.xzdown[0]/2
FIXER: lineno: 1232:  self.xzdown[0]/2
FIXER: lineno: 1272:  i/2
FIXER: lineno: 1305:  self.zydown[0]/2
FIXER: lineno: 1312:  self.zydown[0]/2
FIXER: lineno: 2154:  1.0/self.wfilt.getValue()
FILENAME:  ./examples/e2tvrecon2d.py
FIXER: lineno: 297:   1./subpix
FIXER: lineno: 298:   1./subpix
FIXER: lineno: 300:   (l_x - 2*offset) / float(l_det)
FIXER: lineno: 306:  Xlab / subpix
FIXER: lineno: 306:   Ylab / subpix
FIXER: lineno: 316:  (l_x - 2*offset)/float(l_det)
FIXER: lineno: 345:   l_x / 2.
FIXER: lineno: 358:  (x - orig) / dx
FIXER: lineno: 359:  (x - orig - floor_x * dx) / dx
FIXER: lineno: 453:   .9/ (l * n_angles)
FIXER: lineno: 470:   (1 + np.sqrt(1 + 4 * t_old**2))/2.
FIXER: lineno: 551:   1./ (8 * weight)
FIXER: lineno: 555:   (t - 1) / t_new
FILENAME:  ./examples/em_sim.py
FIXER: lineno: 31:  (d0*d1-f0*d1-f0*d0)/(d0-f0)
FIXER: lineno: 61:   1./15
FIXER: lineno: 62:  1./15
FIXER: lineno: 69:   1./15
FIXER: lineno: 167:  -np.arange(gwidth, dtype=float)**2/gsig**2
FIXER: lineno: 177:  2e-12/mpix
FIXER: lineno: 186:  sz/2
FIXER: lineno: 186:  -(np.arange(sz, dtype=float)-sz/2+5)**2/5
FIXER: lineno: 187:  sz/2
FIXER: lineno: 187:  -(np.arange(sz, dtype=float)-sz/2-5)**2/5
FIXER: lineno: 188:  sz/2
FIXER: lineno: 188:  -(np.arange(sz, dtype=float)-sz/2-15)**2/5
FIXER: lineno: 189:  sz/2
FIXER: lineno: 189:  -(np.arange(sz, dtype=float)-sz/2+15)**2/5
FIXER: lineno: 210:  sz/2
FIXER: lineno: 228:  1/iz**2
FIXER: lineno: 230:  1/dst**2
FIXER: lineno: 246:  int((1-ap)*sz)/2
FIXER: lineno: 247:  (1-ap)/2.
FIXER: lineno: 253:  .1/2.
FIXER: lineno: 270:  1/dst**2
FIXER: lineno: 295:  sz/2
FIXER: lineno: 297:  sz/2
FIXER: lineno: 305:  sz/2
FIXER: lineno: 305:   abs(a0)/np.max(abs(a0))
FIXER: lineno: 320:  sz/2
FIXER: lineno: 320:  sz/2
FIXER: lineno: 325:  (aa[bd[0]]+aa[bd[1]])/2.
FIXER: lineno: 338:  a0ft/rf
FIXER: lineno: 356:  2e-12/mpix
FIXER: lineno: 359:  -sz/2
FIXER: lineno: 359:  sz/2
FIXER: lineno: 359:   -sz/2
FIXER: lineno: 359:  sz/2
FIXER: lineno: 374:  sz/2
FIXER: lineno: 384:  (xap-x0)**2/sigx
FIXER: lineno: 384:  (yap-y0)**2/sigy
FIXER: lineno: 391:  1/dst**2
FIXER: lineno: 404:  2e-12/mpix
FIXER: lineno: 420:  -sz/2
FIXER: lineno: 420:  sz/2
FIXER: lineno: 420:   -sz/2
FIXER: lineno: 420:  sz/2
FIXER: lineno: 422:  sz/2
FIXER: lineno: 426:  1/dst**2
FIXER: lineno: 438:  int((1-ap)*sz)/2
FIXER: lineno: 445:  1/dst**2
FIXER: lineno: 468:  np.pi/3.
FIXER: lineno: 510:  1./l[1]
FIXER: lineno: 510:  1./d0
FIXER: lineno: 510:  1./bign
FIXER: lineno: 517:  1./(l[1])
FIXER: lineno: 517:  1./d0
FIXER: lineno: 517:  1./(1./(l[1])-1./d0)
FIXER: lineno: 524:  w/d1
FIXER: lineno: 537:  d0/abs(w)
FIXER: lineno: 597:  (l1-l[0])/d1
FIXER: lineno: 600:  (ymax-l[0])/d1
FIXER: lineno: 604:  1./w
FIXER: lineno: 610:  (s0-s1)/(s0-l[0])
FIXER: lineno: 639:  np.pi/4.
FIXER: lineno: 644:  np.pi/4.
FIXER: lineno: 672:   diff_f[1]/diff_f[0]
FIXER: lineno: 681:  1./focal
FIXER: lineno: 681:  (1./focal)/400.
FIXER: lineno: 682:  np.pi/2.
FIXER: lineno: 709:  scale/2.
FIXER: lineno: 724:  scale/2.
FIXER: lineno: 747:  scale/2.
FIXER: lineno: 751:  dy/2.
FIXER: lineno: 768:  scale/2.
FIXER: lineno: 773:  dy/2.
FIXER: lineno: 773:  dy/2.
FIXER: lineno: 774:  -dy/2.
FIXER: lineno: 774:  -dy/2.
FIXER: lineno: 774:  dy/2.
FIXER: lineno: 784:  dy/2.
FIXER: lineno: 784:  dy/2.
FIXER: lineno: 785:  -dy/2.
FIXER: lineno: 785:  -dy/2.
FIXER: lineno: 785:  dy/2.
FIXER: lineno: 803:  winsz[0]/2.
FIXER: lineno: 803:   winsz[1]/2.
FIXER: lineno: 852:  0.01/max(.01, dy)
FIXER: lineno: 884:  (d0*d1-f0*d1-f0*d0)/(d0-f0)
FIXER: lineno: 887:  (d0*d1-d0*f1)/(d1-f1+d0)
FILENAME:  ./examples/exhaustivealicmp.py
FIXER: lineno: 66:  options.xy0/options.dxy
FIXER: lineno: 67:  360.0/options.dalpha
FILENAME:  ./examples/extractfsc.py
FILENAME:  ./examples/extracthelp.py
FILENAME:  ./examples/extractptclfromseg.py
FIXER: lineno: 43:  tomo["apix_x"]/raw["apix_x"]
FIXER: lineno: 68:  raw["nx"]/2
FIXER: lineno: 68:   raw["ny"]/2
FIXER: lineno: 68:   raw["nz"]/2
FIXER: lineno: 78:  bxsz/2
FIXER: lineno: 96:  zthick/2
FIXER: lineno: 101:  options.apix/shrink
FIXER: lineno: 139:  float(tm["nz"])/e["nz"]
FIXER: lineno: 140:  tm["nx"]/e["nx"]
FIXER: lineno: 167:  options.boxsz/4
FILENAME:  ./examples/feiraw2hdf.py
FILENAME:  ./examples/fftspeed.py
FIXER: lineno: 65:  200000/size
FIXER: lineno: 68:  2000/(size*size)
FIXER: lineno: 79:  (t1-t0)/reps
FILENAME:  ./examples/filespeedtest.py
FILENAME:  ./examples/findcenter.py
FIXER: lineno: 107:   nx / 2
FIXER: lineno: 148:   ptcl.get_attr('sigma') / 20.0
FIXER: lineno: 200:   (np.max(parr.nonzero(),axis=1) + np.min(parr.nonzero(),axis=1))/2.
FILENAME:  ./examples/findholesinmap.py
FIXER: lineno: 37:  1./options.filter_res
FILENAME:  ./examples/focalpairalign.py
FILENAME:  ./examples/gmm_heterog.py
FIXER: lineno: 64:  realsz/2
FIXER: lineno: 137:  (options.nframe-1)/2.
FIXER: lineno: 137:  mvlen/((options.nframe-1)/2.)
FIXER: lineno: 246:  (options.nframe-1)/2.
FIXER: lineno: 246:   mvlen/((options.nframe-1)/2.)
FIXER: lineno: 485:  nsym/2
FIXER: lineno: 486:  nsym/2
FIXER: lineno: 526:  -T.sum(d,axis=3)/(model["width"])
FIXER: lineno: 532:  sz/2
FIXER: lineno: 546:  3.14/2
FIXER: lineno: 573:  sz/2
FIXER: lineno: 587:  (-(x-pos[iy,0])**2 -(y-pos[iy,1])**2)/(15)
FILENAME:  ./examples/histogram.py
FIXER: lineno: 40:  float(lz)/(lz+gz)
FIXER: lineno: 41:  float(gz)/(lz+gz)
FILENAME:  ./examples/initmodel_sgd.py
FIXER: lineno: 23:  -(pad-boxsize)/2
FIXER: lineno: 23:  -(pad-boxsize)/2
FIXER: lineno: 30:  (pad-boxsize)/2
FIXER: lineno: 30:  (pad-boxsize)/2
FIXER: lineno: 30:  (pad-boxsize)/2
FIXER: lineno: 32:  boxsize/3.0
FIXER: lineno: 32:  boxsize/12.0
FIXER: lineno: 55:  boxsize/5
FIXER: lineno: 69:  boxsize/5
FIXER: lineno: 85:  boxsize/5
FIXER: lineno: 103:  boxsize/5
FIXER: lineno: 201:  boxsize/6
FIXER: lineno: 201:  boxsize/20
FIXER: lineno: 201:  boxsize/20
FILENAME:  ./examples/local_correlation.py
FIXER: lineno: 30:  b["sigma"]/4
FILENAME:  ./examples/make3dpar_rawptcls.py
FIXER: lineno: 256:  (output["nx"]-outsize[0])/2
FIXER: lineno: 256:  (output["ny"]-outsize[1])/2
FIXER: lineno: 256:  (output["nz"]-outsize[2])/2
FIXER: lineno: 394:  1.0/(elem["weight"]+.00001)
FIXER: lineno: 430:  (ret.get_xsize()-pad[0])/2
FIXER: lineno: 430:  (ret.get_ysize()-pad[1])/2
FIXER: lineno: 444:  max(pad)/2.0
FIXER: lineno: 446:  fillangle/astep
FIXER: lineno: 454:  fillangle/(den-1)
FIXER: lineno: 491:  -fillangle/2.0
FIXER: lineno: 491:  fillangle/2.0
FIXER: lineno: 492:  -fillangle/2.0
FIXER: lineno: 492:  fillangle/2.0
FIXER: lineno: 493:  fillangle/4.0
FIXER: lineno: 493:  -(dalt**2+daz**2)/(fillangle/4.0)**2
FILENAME:  ./examples/makebigfromseq.py
FIXER: lineno: 63:  c2.get_attr("sigma")/5.0
FIXER: lineno: 64:  c2.get_attr("sigma")/5.0
FIXER: lineno: 69:  i1.get_xsize()/2
FIXER: lineno: 70:  i1.get_ysize()/2
FIXER: lineno: 118:  -(sz[0]-avg.get_xsize())/2
FIXER: lineno: 118:  -(sz[1]-avg.get_ysize())/2
FIXER: lineno: 122:  -(sz[0]-mask.get_xsize())/2
FIXER: lineno: 122:  -(sz[1]-mask.get_ysize())/2
FIXER: lineno: 134:  -(sz[0]-a.get_xsize())/2
FIXER: lineno: 134:  -(sz[1]-a.get_ysize())/2
FIXER: lineno: 166:  -(sz[0]-a.get_xsize())/2
FIXER: lineno: 166:  -(sz[1]-a.get_ysize())/2
FILENAME:  ./examples/mergeproject.py
FILENAME:  ./examples/mergeproject2.py
FILENAME:  ./examples/mergetomoseg.py
FILENAME:  ./examples/minicircle_stat.py
FIXER: lineno: 61:  1.0/eigvv[0][i]
FIXER: lineno: 86:  p2["nx"]/2
FIXER: lineno: 95:  shp[2]/shp[1]
FIXER: lineno: 95:  shp[1]/shp[0]
FIXER: lineno: 95:  shp[2]/shp[0]
FIXER: lineno: 96:  shp[2]/shp[1]
FIXER: lineno: 96:  shp[1]/shp[0]
FIXER: lineno: 96:  shp[2]/shp[0]
FILENAME:  ./examples/morphboxer.py
FIXER: lineno: 282:  box_size/2
FIXER: lineno: 283:  box_size/2
FIXER: lineno: 287:  particle.get_xsize()/2
FIXER: lineno: 287:  particle.get_ysize()/2
FILENAME:  ./examples/mouse_and_key_modifiers.py
FILENAME:  ./examples/movie_analyzer.py
FIXER: lineno: 180:  len(frames_hictrst)/2
FIXER: lineno: 308:  nfs/4
FIXER: lineno: 528:   trans / apix
FIXER: lineno: 989:  1.0/(img["apix_x"]*img["nx"])
FIXER: lineno: 990:  .25/ds
FIXER: lineno: 990:  img["ny"]/2
FIXER: lineno: 1009:  ctf.zero(i)/ds
FIXER: lineno: 1025:  zeros[0]/2
FILENAME:  ./examples/movie_ccf.py
FIXER: lineno: 62:  box/2
FIXER: lineno: 63:  box/2
FIXER: lineno: 69:  len(fsc)/3
FIXER: lineno: 182:  ccfs[(0,1)]["nx"]/2
FIXER: lineno: 183:  len(locs)/2
FIXER: lineno: 188:  float(n-fabs(i-j))/n
FIXER: lineno: 205:  100/scale
FIXER: lineno: 206:  int(floor(i*10+.5))/10.0
FIXER: lineno: 209:  1.0/scale
FIXER: lineno: 216:  csum2[(0,1)]["nx"]/2
FIXER: lineno: 219:  float(n-fabs(i-j))/n
FILENAME:  ./examples/movietools.py
FIXER: lineno: 22:  1.0/(sqrt(i+1.0))
FIXER: lineno: 26:  1.0/sqrt(n)
FIXER: lineno: 31:  ref["nx"]/4
FIXER: lineno: 42:  img["ny"]/2
FIXER: lineno: 43:  i/img["nx"]**2
FIXER: lineno: 52:  nx/2
FIXER: lineno: 52:  nx/2
FIXER: lineno: 62:  nx/4
FIXER: lineno: 62:  nx/12
FIXER: lineno: 110:  nx/2
FIXER: lineno: 111:  ny/2
FILENAME:  ./examples/mpi_test.py
FILENAME:  ./examples/pathwalker_helixfit.py
FIXER: lineno: 88:  len(hlx)/8
FILENAME:  ./examples/pickptcl_2cls.py
FIXER: lineno: 74:  float(bxsz)/float(sz)
FIXER: lineno: 111:  nref_target/nref
FIXER: lineno: 140:  sz/2
FIXER: lineno: 140:  sz/2
FIXER: lineno: 159:   len(data) / batch_size
FIXER: lineno: 200:  -nx/2
FIXER: lineno: 200:  -nx/2
FIXER: lineno: 213:  float(bxsz)/float(sz)
FIXER: lineno: 220:  micrograph["nx"]/shrinkfac
FIXER: lineno: 221:  micrograph["ny"]/shrinkfac
FIXER: lineno: 264:  (sw-nx)/2
FIXER: lineno: 264:  (sw-ny)/2
FIXER: lineno: 342:  sz/4
FIXER: lineno: 374:  float(bxsz)/float(sz)
FIXER: lineno: 379:  hdr["nx"]/shrinkfac
FIXER: lineno: 380:  hdr["ny"]/shrinkfac
FILENAME:  ./examples/pickrnaparticle.py
FIXER: lineno: 80:  cnts[i]/1
FIXER: lineno: 80:  cnts[i+1]/1
FILENAME:  ./examples/plotfsc.py
FIXER: lineno: 59:  (0.143-d[1][si])/(d[1][si-1]-d[1][si])
FIXER: lineno: 62:  1.0/lastres
FIXER: lineno: 63:  (lastres*4+d[0][-1])/5.0
FILENAME:  ./examples/prepare_eulerxplor_from_spt.py
FILENAME:  ./examples/projection_manifold.py
FILENAME:  ./examples/rdisttest.py
FIXER: lineno: 15:  aa["nx"]/2
FILENAME:  ./examples/reconstruct_fill.py
FIXER: lineno: 24:  90.0/da
FIXER: lineno: 36:  90.0/da
FIXER: lineno: 38:  size/2
FIXER: lineno: 39:  size/2
FIXER: lineno: 40:  size/2
FIXER: lineno: 41:  -size/2
FIXER: lineno: 41:  size/2
FIXER: lineno: 42:  -size/2
FIXER: lineno: 42:  size/2
FIXER: lineno: 43:  size/2
FIXER: lineno: 45:  size/2
FIXER: lineno: 47:  size/2
FIXER: lineno: 47:  size/2
FIXER: lineno: 48:  size/2
FIXER: lineno: 48:  size/2
FIXER: lineno: 51:  size/2
FILENAME:  ./examples/recoverctf.py
FILENAME:  ./examples/redo_convergence.py
FIXER: lineno: 76:   len(fsc)/3
FIXER: lineno: 79:  x/apix
FIXER: lineno: 128:   len(fsc)/3
FIXER: lineno: 132:  x/apix
FILENAME:  ./examples/refine_tomo.py
FIXER: lineno: 82:  sz/2
FIXER: lineno: 86:   sz/2
FIXER: lineno: 86:   sz/2
FIXER: lineno: 87:  sz/2
FIXER: lineno: 88:  sz/2
FIXER: lineno: 232:  1.0/30.
FIXER: lineno: 249:  sz/2
FILENAME:  ./examples/refinetomo_buildptcls.py
FIXER: lineno: 61:  len(tltsum)/2
FIXER: lineno: 61:   tltsum[len(tltsum)/2]/2
FILENAME:  ./examples/refinetomo_easy.py
FIXER: lineno: 50:  1.0/(tarres)
FILENAME:  ./examples/removebad.py
FILENAME:  ./examples/ringfit.py
FIXER: lineno: 94:  1.0/eigvv[0][i]
FIXER: lineno: 133:  math.pi/nowbp
FIXER: lineno: 133:  (nowbp*math.sin(math.pi/nowbp))/(math.pi)
FIXER: lineno: 142:  totlen/nowbp
FIXER: lineno: 174:  (s[0]+s[1])/2
FIXER: lineno: 187:  math.pi/nowbp
FIXER: lineno: 187:  (nowbp*math.sin(math.pi/nowbp))/(math.pi)
FIXER: lineno: 190:  totlen/nowbp
FIXER: lineno: 199:  i/stepsz
FIXER: lineno: 204:  (now_potential-old_potential)/old_potential
FIXER: lineno: 289:  1.0/eigvv[0][i]
FIXER: lineno: 309:  shape[2]/shape[1]
FIXER: lineno: 309:  shape[1]/shape[0]
FIXER: lineno: 309:  shape[2]/shape[0]
FIXER: lineno: 310:  shape[2]/shape[1]
FIXER: lineno: 310:  shape[1]/shape[0]
FIXER: lineno: 310:  shape[2]/shape[0]
FILENAME:  ./examples/ringsim.py
FIXER: lineno: 25:  i/1000
FIXER: lineno: 38:  i/1000
FILENAME:  ./examples/ringstat.py
FIXER: lineno: 99:  1.0/eigvv[0][i]
FIXER: lineno: 121:  area/2
FIXER: lineno: 135:  d/10
FIXER: lineno: 165:  1.0/eigvv[0][i]
FIXER: lineno: 181:  shp[2]/shp[1]
FIXER: lineno: 181:  shp[1]/shp[0]
FIXER: lineno: 183:  shp[i]/finalimg["mean"]
FILENAME:  ./examples/shrinkbigimage.py
FIXER: lineno: 81:  nx/2
FILENAME:  ./examples/simtomo.py
FILENAME:  ./examples/sizes.py
FIXER: lineno: 28:  im.get_xsize()/2
FIXER: lineno: 39:  mx[1]/mx[0]
FIXER: lineno: 39:  mx[2]/(mx[0]-1)
FIXER: lineno: 39:  mx[3]/(mx[0]+1)
FIXER: lineno: 39:  (mx[1]+mx[2]+mx[3])/(mx[1]/mx[0]+mx[2]/(mx[0]-1)+mx[3]/(mx[0]+1))
FIXER: lineno: 48:  mx[1]/mx[0]
FIXER: lineno: 75:  im.get_xsize()/2
FIXER: lineno: 75:  im.get_xsize()/2
FIXER: lineno: 76:  sum(peaks)/len(peaks)
FILENAME:  ./examples/sortsimilar.py
FIXER: lineno: 54:  l[0].cmp("optvariance",l[1],{"matchamp":1})/l[0].get_xsize()
FILENAME:  ./examples/speedprofile.py
FIXER: lineno: 53:  data[i].get_xsize()/2
FIXER: lineno: 67:   (time.time()-start)/NTT
FIXER: lineno: 75:  16000/i
FIXER: lineno: 76:  t/base
FIXER: lineno: 77:  t/base
FILENAME:  ./examples/spt_tomoctf.py
FIXER: lineno: 26:  bxsz/2
FIXER: lineno: 27:  1.0/(apix*bxsz)
FIXER: lineno: 28:  .25/ds
FIXER: lineno: 28:  bxsz/2
FIXER: lineno: 31:   12.2639 / np.sqrt(voltage * 1000.0 + 0.97845 * voltage * voltage)
FIXER: lineno: 35:  ampcnt/100.0
FIXER: lineno: 54:   bxsz/4
FIXER: lineno: 67:  (np.round(x,2)-defmin)/defstep
FIXER: lineno: 89:  rawimg["nx"]/2.
FIXER: lineno: 90:  bxsz/2
FIXER: lineno: 104:  bxsz/2
FIXER: lineno: 105:  bxsz/2
FIXER: lineno: 105:  bxsz/2
FIXER: lineno: 110:  bxsz/2
FILENAME:  ./examples/stackpixelstat.py
FIXER: lineno: 19:  1.0/len(a)
FIXER: lineno: 40:  len(frc)/3
FILENAME:  ./examples/tasktest.py
FILENAME:  ./examples/telescope.py
FILENAME:  ./examples/test_eman_tiny.py
FIXER: lineno: 41:  sz/2
FIXER: lineno: 41:  pad/2
FIXER: lineno: 41:   sz/2
FIXER: lineno: 41:  pad/2
FIXER: lineno: 47:  (pad-sz)/2
FIXER: lineno: 47:   (pad-sz)/2
FIXER: lineno: 47:   (pad-sz)/2
FILENAME:  ./examples/testscaleali.py
FILENAME:  ./examples/timerdemo.py
FILENAME:  ./examples/tomospeedtest.py
FILENAME:  ./examples/tomotrackbox.py
FIXER: lineno: 263:  self.imageparm["nz"]/2
FIXER: lineno: 313:  good_size(dx*2)/2
FIXER: lineno: 336:  good_size(dx*2)/2
FIXER: lineno: 368:  (refshape[6]+refshape[4])/2.0
FIXER: lineno: 368:  (refshape[7]+refshape[5])/2.0
FIXER: lineno: 417:  1.0/(len(stack))
FIXER: lineno: 418:  -(pad-boxsize)/2
FIXER: lineno: 418:  -(pad-boxsize)/2
FIXER: lineno: 421:  len(stack)/2
FIXER: lineno: 424:  360.0/(boxsize*pi)
FIXER: lineno: 425:   angstep/fullsamp
FIXER: lineno: 426:  angstep/fullsamp
FIXER: lineno: 426:  1.0/(floor(angstep/fullsamp))
FIXER: lineno: 438:  90.0/samp
FIXER: lineno: 438:  90.0/samp
FIXER: lineno: 457:  (a-stack[ii]["alt"])/angstep
FIXER: lineno: 458:  -(pad-boxsize)/2
FIXER: lineno: 458:  -(pad-boxsize)/2
FIXER: lineno: 458:  -(pad-boxsize)/2
FIXER: lineno: 458:  -(pad-boxsize)/2
FIXER: lineno: 471:  (pad-boxsize)/2
FIXER: lineno: 471:  (pad-boxsize)/2
FIXER: lineno: 471:  (pad-boxsize)/2
FIXER: lineno: 489:  1.0/len(stack)
FIXER: lineno: 490:  -(pad-boxsize)/2
FIXER: lineno: 490:  -(pad-boxsize)/2
FIXER: lineno: 522:  len(stack)/2
FIXER: lineno: 531:  -(pad-boxsize)/2
FIXER: lineno: 531:  -(pad-boxsize)/2
FIXER: lineno: 539:  -(pad-boxsize)/2
FIXER: lineno: 539:  -(pad-boxsize)/2
FIXER: lineno: 554:  len(scores)/2
FIXER: lineno: 554:  len(scores)/2
FIXER: lineno: 554:  len(scores)/2
FIXER: lineno: 562:  -(pad-boxsize)/2
FIXER: lineno: 562:  -(pad-boxsize)/2
FIXER: lineno: 571:  (pad-boxsize)/2
FIXER: lineno: 571:  (pad-boxsize)/2
FIXER: lineno: 571:  (pad-boxsize)/2
FIXER: lineno: 578:  self.imageparm["nx"]/2
FIXER: lineno: 584:  sz/2
FIXER: lineno: 584:  sz/2
FIXER: lineno: 584:  sz/2
FIXER: lineno: 584:  sz/2
FIXER: lineno: 585:  sz/2
FIXER: lineno: 585:  sz/2
FIXER: lineno: 599:  (sz-sz2)/2
FIXER: lineno: 599:  (sz-sz2)/2
FIXER: lineno: 602:  (sz2-sz)/2
FIXER: lineno: 602:  (sz2-sz)/2
FIXER: lineno: 604:  sz/2
FIXER: lineno: 608:  sz/2
FIXER: lineno: 623:  len(stack)/2
FILENAME:  ./examples/transalignavg.py
FIXER: lineno: 82:  nx/2
FILENAME:  ./examples/transalignavg2.py
FIXER: lineno: 58:  -(nx-im["nx"])/2
FIXER: lineno: 58:  -(ny-im["ny"])/2
FIXER: lineno: 61:  ref0["nx"]/4.0
FILENAME:  ./examples/UnitTestGetComplexAt2D.py
FIXER: lineno: 37:  nx/2
FIXER: lineno: 109:  N/2
FIXER: lineno: 110:  N/2
FIXER: lineno: 111:  N/2
FIXER: lineno: 111:  N/2
FIXER: lineno: 115:   N/2
FIXER: lineno: 116:  N/2
FIXER: lineno: 158:   N/2
FIXER: lineno: 159:  N/2
FIXER: lineno: 203:  nx/2
FIXER: lineno: 270:  (N+1)/2
FIXER: lineno: 314:  (N+1)/2
FIXER: lineno: 322:  (N+1)/2
FILENAME:  ./examples/UnitTestGetComplexAt3D.py
FIXER: lineno: 39:  nx/2
FIXER: lineno: 114:  N/2
FIXER: lineno: 115:  N/2
FIXER: lineno: 116:  N/2
FIXER: lineno: 116:  N/2
FIXER: lineno: 120:   N/2
FIXER: lineno: 121:  N/2
FIXER: lineno: 163:   N/2
FIXER: lineno: 164:  N/2
FIXER: lineno: 206:  nx/2
FIXER: lineno: 282:  (N+1)/2
FIXER: lineno: 326:  (N+1)/2
FILENAME:  ./libpyEM/Anneal.py
FIXER: lineno: 158:  -dE/T
FIXER: lineno: 304:  elapsed / step
FIXER: lineno: 325:  self.Tmax / self.Tmin
FIXER: lineno: 336:   self.steps / self.updates
FIXER: lineno: 347:  -dE / T
FIXER: lineno: 364:   accepts / trials
FIXER: lineno: 364:   improves / trials
FIXER: lineno: 399:  -dE / T
FIXER: lineno: 408:   float(accepts) / steps
FIXER: lineno: 408:   float(improves) / steps
FIXER: lineno: 428:  T / 1.5
FIXER: lineno: 441:  T / 1.5
FILENAME:  ./libpyEM/EMAN2.py
FIXER: lineno: 816:  s1/10.0
FIXER: lineno: 816:  s2/10.0
FIXER: lineno: 841:  size[0]/72.0
FIXER: lineno: 841:  size[1]/72.0
FIXER: lineno: 962:   float(mt[1])/1000000.0
FIXER: lineno: 965:   float(ma[1])/1000000.0
FIXER: lineno: 978:   float(total_strings[1])/1000000000.0
FIXER: lineno: 987:   float(used_strings[1])/1000000000.0
FIXER: lineno: 1176:  secs/86400
FIXER: lineno: 1178:  secs/3600
FIXER: lineno: 1180:  secs/60
FIXER: lineno: 1619:  size[0]/2
FIXER: lineno: 1619:  n_array[0]/2.0
FIXER: lineno: 1619:  size[1]/2
FIXER: lineno: 1619:  n_array[1]/2.0
FIXER: lineno: 1643:  size[0]/2
FIXER: lineno: 1645:  size[0]/2
FIXER: lineno: 1668:  size[0]/10
FIXER: lineno: 1680:  size[0]/10
FIXER: lineno: 1716:  size[0]/7.0
FIXER: lineno: 1719:  size[0]/7.0
FIXER: lineno: 1719:  size[1]/7.0
FIXER: lineno: 1720:  size[0]/11.0
FIXER: lineno: 1724:  -size[0]/7.0
FIXER: lineno: 1724:  size[1]/7.0
FIXER: lineno: 1728:  -size[0]/7.0
FIXER: lineno: 1728:  -size[1]/7.0
FIXER: lineno: 1732:  size[0]/7.0
FIXER: lineno: 1732:  -size[1]/7.0
FIXER: lineno: 1740:  size[0]/2
FIXER: lineno: 1746:  size[0]/3
FIXER: lineno: 1746:  size[1]/5
FIXER: lineno: 1746:  size[2]/4
FIXER: lineno: 1750:  size[0]/2
FIXER: lineno: 1750:  size[1]/16
FIXER: lineno: 1750:  size[2]/16
FIXER: lineno: 1752:  size[2]/6
FIXER: lineno: 1753:  size[0]/2
FIXER: lineno: 1753:  size[1]/16
FIXER: lineno: 1753:  size[2]/16
FIXER: lineno: 1755:  -size[2]/6
FIXER: lineno: 1756:  size[0]/2
FIXER: lineno: 1756:  size[1]/16
FIXER: lineno: 1756:  size[2]/16
FIXER: lineno: 1759:  -size[0]/8
FIXER: lineno: 1759:  size[1]/4
FIXER: lineno: 1760:  size[0]/16
FIXER: lineno: 1760:  size[1]/2
FIXER: lineno: 1760:  size[2]/16
FIXER: lineno: 1763:  size[0]/8
FIXER: lineno: 1763:  -size[1]/3.5
FIXER: lineno: 1764:  size[0]/16
FIXER: lineno: 1764:  size[1]/2
FIXER: lineno: 1764:  size[2]/16
FIXER: lineno: 1770:  size[0]/6
FIXER: lineno: 1770:  size[0]/5
FIXER: lineno: 1770:  size[0]/3
FIXER: lineno: 1773:  size[0]/6
FIXER: lineno: 1773:  size[0]/6
FIXER: lineno: 1773:  size[0]/3
FIXER: lineno: 1776:  size[0]/3
FIXER: lineno: 1776:  size[0]/3
FIXER: lineno: 1776:  size[0]/6
FILENAME:  ./libpyEM/EMAN2_cppwrap.py
FILENAME:  ./libpyEM/EMAN2_utils.py
FIXER: lineno: 72:   vec/np.sqrt(np.sum(vec**2))
FIXER: lineno: 74:  vec.T/np.sqrt(np.sum(vec**2,axis=1))
FIXER: lineno: 98:  (P - A) / numpy.linalg.norm(P - A)
FIXER: lineno: 98:   (B - A) / numpy.linalg.norm(B - A)
FIXER: lineno: 98:   np.pi / 2
FIXER: lineno: 100:  (P - B) / numpy.linalg.norm(P - B)
FIXER: lineno: 100:   (A - B) / numpy.linalg.norm(A - B)
FIXER: lineno: 100:   np.pi / 2
FIXER: lineno: 102:   numpy.linalg.norm(np.cross((P-A), (P-B))) / numpy.linalg.norm(A - B)
FIXER: lineno: 117:   ret[n - 1:] / n
FIXER: lineno: 124:  np.dot(a,b)/(norm(a)*norm(b))
FIXER: lineno: 145:  bxsz/2
FIXER: lineno: 146:  1.0/(apix*bxsz)
FIXER: lineno: 147:  .25/ds
FIXER: lineno: 147:  bxsz/2
FIXER: lineno: 150:   12.2639 / np.sqrt(voltage * 1000.0 + 0.97845 * voltage * voltage)
FIXER: lineno: 154:  ampcnt/100.0
FIXER: lineno: 167:  len(ft)/2
FIXER: lineno: 169:  np.pi/2
FIXER: lineno: 169:  wedge/2
FIXER: lineno: 186:   np.pi/180.
FIXER: lineno: 187:  nx/2.
FIXER: lineno: 188:  ny/2.
FIXER: lineno: 190:  nx/2.
FIXER: lineno: 191:  ny/2.
FILENAME:  ./libpyEM/EMAN2db.py
FILENAME:  ./libpyEM/EMAN2jsondb.py
FILENAME:  ./libpyEM/EMAN2PAR.py
FIXER: lineno: 1093:  (len(p)-1)/1024
FIXER: lineno: 1099:  (len(p)-1)/1024
FILENAME:  ./libpyEM/EMAN2star.py
FILENAME:  ./libpyEM/mpi_eman.py
FILENAME:  ./libpyEM/qtgui/em3Dfonts.py
FIXER: lineno: 164:  (ifevalref+1)/2
FIXER: lineno: 165:  (ifevalref+1)/2
FIXER: lineno: 166:  (ifevalref+1)/2
FIXER: lineno: 172:  len(spfac)/2
FIXER: lineno: 184:  (tvar[0]-tvar[3])/2
FIXER: lineno: 184:  (tvar[1]-tvar[4]-(((spfac[i-1])*self.lspacing)-0))/2
FIXER: lineno: 184:  -(tvar[2]-tvar[5])/2
FILENAME:  ./libpyEM/qtgui/em3Dhelloworld.py
FIXER: lineno: 126:   2.0/(n+1)
FILENAME:  ./libpyEM/qtgui/emanimationutil.py
FIXER: lineno: 99:   1.0/self.time_interval
FIXER: lineno: 113:   (1+ (tanh(-4+float(i)/(self.n-1)*8)))/2.0
FIXER: lineno: 117:  float(i)/(self.n-1)
FIXER: lineno: 415:   (sin(t2)*self.start_point + sin(t1)*self.end_point)/self.sinangle
FILENAME:  ./libpyEM/qtgui/emapplication.py
FILENAME:  ./libpyEM/qtgui/emboxerbase.py
FIXER: lineno: 227:  nx/shrink
FIXER: lineno: 228:  ny/shrink
FIXER: lineno: 236:  nx/old_shrink
FIXER: lineno: 237:  ny/old_shrink
FIXER: lineno: 238:   (oldxsize-xsize)/2
FIXER: lineno: 238:   (oldysize-ysize)/2
FIXER: lineno: 240:   float(xsize)/float(oldxsize)
FIXER: lineno: 247:  float(xsize)/float(oldxsize)
FIXER: lineno: 250:  float(xsize)/float(oldxsize)
FIXER: lineno: 342:  box_size/2
FIXER: lineno: 342:  box_size/2
FIXER: lineno: 344:  box_size/2
FIXER: lineno: 344:  box_size/2
FIXER: lineno: 363:  box_size/2
FIXER: lineno: 363:  box_size/2
FIXER: lineno: 363:  box_size/2
FIXER: lineno: 363:  box_size/2
FIXER: lineno: 368:  box_size/2
FIXER: lineno: 368:  box_size/2
FIXER: lineno: 368:  box_size/2
FIXER: lineno: 368:  box_size/2
FIXER: lineno: 890:  box_size/2
FIXER: lineno: 891:  box_size/2
FIXER: lineno: 895:  particle.get_xsize()/2
FIXER: lineno: 895:  particle.get_ysize()/2
FIXER: lineno: 1454:  box.x/subsample_rate
FIXER: lineno: 1455:  box.y/subsample_rate
FIXER: lineno: 1488:  box_size/2
FIXER: lineno: 1488:  box_size/2
FIXER: lineno: 1488:  box_size/2
FIXER: lineno: 1488:  box_size/2
FIXER: lineno: 1522:  box_size/2
FIXER: lineno: 1522:  box_size/2
FIXER: lineno: 1522:  box_size/2
FIXER: lineno: 1522:  box_size/2
FIXER: lineno: 1527:  box_size/2
FIXER: lineno: 1528:  box_size/2
FIXER: lineno: 1564:  float(self.box_size)/float(TEMPLATE_MIN)
FIXER: lineno: 1640:  x/sr
FIXER: lineno: 1640:  y/sr
FIXER: lineno: 1644:  self.box_size/(2*sr)
FIXER: lineno: 1699:  self.box_size/(2*sr)
FIXER: lineno: 1701:  box.x/sr
FIXER: lineno: 1701:  box.y/sr
FIXER: lineno: 1707:  x/self.get_subsample_rate()
FIXER: lineno: 1708:  y/self.get_subsample_rate()
FIXER: lineno: 1710:  radius/self.get_subsample_rate()
FIXER: lineno: 1877:  box.x/subsample_rate
FIXER: lineno: 1878:  box.y/subsample_rate
FILENAME:  ./libpyEM/qtgui/embrowse.py
FILENAME:  ./libpyEM/qtgui/embrowser.py
FIXER: lineno: 1738:  val/1000000000
FIXER: lineno: 1739:  val/1000000
FIXER: lineno: 1740:  val/1000
FILENAME:  ./libpyEM/qtgui/emdataitem3d.py
FIXER: lineno: 314:   1.0/(max-min)
FIXER: lineno: 383:   math.log(interior_diagonal)/math.log(2)
FIXER: lineno: 384:   diag/2
FIXER: lineno: 474:  1.0/nx
FIXER: lineno: 474:   1.0/ny
FIXER: lineno: 474:   1.0/nz
FIXER: lineno: 576:  -nz/2.0
FIXER: lineno: 576:   nz/2.0
FIXER: lineno: 577:  -nx/2.0
FIXER: lineno: 577:   nx/2.0
FIXER: lineno: 578:  -ny/2.0
FIXER: lineno: 578:   ny/2.0
FIXER: lineno: 690:   (self.isothr - self.mean)/self.sigma
FIXER: lineno: 757:   1.0/(max - min)
FIXER: lineno: 776:   interior_diagonal/2
FIXER: lineno: 816:  1.0/nx
FIXER: lineno: 816:   1.0/ny
FIXER: lineno: 816:   1.0/nz
FIXER: lineno: 934:  (self.item3d().isothr+self.item3d().maxden)/2
FIXER: lineno: 1024:  cmrange/50.0
FIXER: lineno: 1025:  cmrange/50.0
FIXER: lineno: 1026:  cmrange/2.0
FIXER: lineno: 1290:   (self.isothr - self.mean)/self.sigma
FIXER: lineno: 1306:   data.get_xsize()/2.0
FIXER: lineno: 1308:  data.get_xsize()/2.0
FIXER: lineno: 1309:  data.get_ysize()/2.0
FIXER: lineno: 1310:  data.get_zsize()/2.0
FIXER: lineno: 1513:  scenegraph.camera.getWidth()/2.0
FIXER: lineno: 1514:  scenegraph.camera.getHeight()/2.0
FIXER: lineno: 1628:  -self.parent.data.get_xsize()/2.0
FIXER: lineno: 1628:  -self.parent.data.get_ysize()/2.0
FIXER: lineno: 1628:  -self.parent.data.get_zsize()/2.0
FILENAME:  ./libpyEM/qtgui/emdatastorage.py
FIXER: lineno: 240:  180.0/pi
FIXER: lineno: 240:  0.18/pi
FIXER: lineno: 791:   valid_properties[pd.property][1][units] / valid_properties[pd.property][1][defaultunits]
FILENAME:  ./libpyEM/qtgui/emfoldhunterstat.py
FIXER: lineno: 172:  (float(item[30:38].strip()))/apix_x
FIXER: lineno: 173:  (float(item[38:46].strip()))/apix_y
FIXER: lineno: 174:  (float(item[46:54].strip()))/apix_z
FIXER: lineno: 219:  float(points[(p)])/apix_x
FIXER: lineno: 220:  float(points[(p+1)])/apix_y
FIXER: lineno: 221:  float(points[(p+2)])/apix_z
FIXER: lineno: 237:  sumValues/atomCount
FIXER: lineno: 242:  1/(s2iso*10.)
FIXER: lineno: 246:  includeValue/atomCount
FIXER: lineno: 268:  float(remainder_volume)/MRC_volume
FIXER: lineno: 320:  (calc1[cCount]-s1_mean)/s1_std
FIXER: lineno: 321:  (calc2[cCount]-s2_mean)/s2_std
FIXER: lineno: 322:  (calc3[cCount]-s3_mean)/s3_std
FILENAME:  ./libpyEM/qtgui/emform.py
FIXER: lineno: 1894:   float(self.table_widget.width())/cumulative_width
FIXER: lineno: 2100:  len(params)/3
FIXER: lineno: 2101:  len(params)/3
FILENAME:  ./libpyEM/qtgui/emglobjects.py
FIXER: lineno: 424:  length/2.0
FIXER: lineno: 606:   (PM_inv[0,2]*xNDC1 + PM_inv[1,2]*yNDC1 + PM_inv[3,2])/(-PM_inv[2,2])
FIXER: lineno: 608:   (PM_inv[0,2]*xNDC2 + PM_inv[1,2]*yNDC2 + PM_inv[3,2])/(-PM_inv[2,2])
FIXER: lineno: 613:   1.0/(xNDC1*self.P_inv[0,3]+yNDC1*self.P_inv[1,3]+zNDC1*self.P_inv[2,3]+self.P_inv[3,3])
FIXER: lineno: 614:   1.0/(xNDC2*self.P_inv[0,3]+yNDC2*self.P_inv[1,3]+zNDC2*self.P_inv[2,3]+self.P_inv[3,3])
FIXER: lineno: 652:   (PM_inv[0,2]*xNDC + PM_inv[1,2]*yNDC + PM_inv[3,2])/(-PM_inv[2,2])
FIXER: lineno: 655:   1.0/(xNDC*self.P_inv[0,3]+yNDC*self.P_inv[1,3]+zNDC*self.P_inv[2,3]+self.P_inv[3,3])
FIXER: lineno: 793:  length/2.0
FIXER: lineno: 969:   (PM_inv[0,2]*xNDC1 + PM_inv[1,2]*yNDC1 + PM_inv[3,2])/(-PM_inv[2,2])
FIXER: lineno: 971:   (PM_inv[0,2]*xNDC2 + PM_inv[1,2]*yNDC2 + PM_inv[3,2])/(-PM_inv[2,2])
FIXER: lineno: 976:   1.0/(xNDC1*self.P_inv[0,3]+yNDC1*self.P_inv[1,3]+zNDC1*self.P_inv[2,3]+self.P_inv[3,3])
FIXER: lineno: 977:   1.0/(xNDC2*self.P_inv[0,3]+yNDC2*self.P_inv[1,3]+zNDC2*self.P_inv[2,3]+self.P_inv[3,3])
FIXER: lineno: 1015:   (PM_inv[0,2]*xNDC + PM_inv[1,2]*yNDC + PM_inv[3,2])/(-PM_inv[2,2])
FIXER: lineno: 1018:   1.0/(xNDC*self.P_inv[0,3]+yNDC*self.P_inv[1,3]+zNDC*self.P_inv[2,3]+self.P_inv[3,3])
FIXER: lineno: 1232:  1.0/self.scale
FIXER: lineno: 1232:  1.0/self.scale
FIXER: lineno: 1232:  1.0/self.scale
FIXER: lineno: 1273:   1.0/self.mag_factor
FIXER: lineno: 1416:  1.0/self.scale
FIXER: lineno: 1592:   1.0/self.mag_factor
FIXER: lineno: 2087:  -width/2.0
FIXER: lineno: 2087:  -height/2.0
FIXER: lineno: 2087:  -depth/2.0
FIXER: lineno: 2107:   rx/float(self.gl_widget.width())
FIXER: lineno: 2108:   ry/float(self.gl_widget.height())
FIXER: lineno: 2342:   float(width)/float(height)
FILENAME:  ./libpyEM/qtgui/emhist.py
FIXER: lineno: 449:  self.width()/72.0
FIXER: lineno: 449:  self.height()/72.0
FIXER: lineno: 590:  (-(self.scrlim[2]*log(x)) + (self.scrlim[0] + self.scrlim[2])*log(10)*log10(self.plotlim[0])-self.scrlim[0]*log(10)*log10(self.plotlim[0] +self.plotlim[2])) /(log(10)*(log10(self.plotlim[0]) - log10(self.plotlim[0] + self.plotlim[2])))
FIXER: lineno: 592:  (self.scrlim[3]*log(y) + self.height()*log(10.0)*log10(self.plotlim[1])-self.scrlim[1]*log(10.0)*log10(self.plotlim[1])-self.scrlim[3]*log(10.0)*log10(self.plotlim[1]) - self.height()*log(10.0)*log10(self.plotlim[1]+self.plotlim[3]) + self.scrlim[1]*log(10)*log10(self.plotlim[1]+self.plotlim[3])) / (log(10)*(log10(self.plotlim[1]) - log10(self.plotlim[1]+self.plotlim[3])))
FIXER: lineno: 796:  xmin/1.1
FIXER: lineno: 812:  ymin/1.1
FILENAME:  ./libpyEM/qtgui/emimage.py
FILENAME:  ./libpyEM/qtgui/emimage2d.py
FIXER: lineno: 129:   1.0/self.mag
FIXER: lineno: 413:   len(data)/2
FIXER: lineno: 506:   float(w)/data[0]
FIXER: lineno: 507:   float(h)/data[1]
FIXER: lineno: 525:  1.0/self.scale
FIXER: lineno: 662:  self.height()/2
FIXER: lineno: 664:  self.width()/2
FIXER: lineno: 665:  self.width()/2
FIXER: lineno: 665:  self.height()/2
FIXER: lineno: 679:  self.width()/2
FIXER: lineno: 679:  self.height()/2
FIXER: lineno: 687:  self.width()/2.0
FIXER: lineno: 687:  self.width()/2.0
FIXER: lineno: 687:  self.height()/2.0
FIXER: lineno: 687:  self.height()/2.0
FIXER: lineno: 919:  self.origin[0] / self.scale
FIXER: lineno: 920:  self.origin[1] / self.scale
FIXER: lineno: 959:  self.origin[0]/self.scale
FIXER: lineno: 959:  self.origin[1]/self.scale
FIXER: lineno: 962:  self.origin[0]/self.scale
FIXER: lineno: 962:  self.origin[1]/self.scale
FIXER: lineno: 968:  self.origin[0]/self.scale
FIXER: lineno: 968:  self.origin[1]/self.scale
FIXER: lineno: 970:  self.origin[0]/self.scale
FIXER: lineno: 970:  self.origin[1]/self.scale
FIXER: lineno: 972:  self.origin[0]/self.scale
FIXER: lineno: 972:  self.origin[1]/self.scale
FIXER: lineno: 997:   self.width()/2.0
FIXER: lineno: 998:   self.height()/2.0
FIXER: lineno: 1047:  w/bpp
FIXER: lineno: 1084:  self.origin[0]/scale
FIXER: lineno: 1084:  self.origin[1]/scale
FIXER: lineno: 1142:  self.origin[0]/self.scale
FIXER: lineno: 1142:  self.origin[1]/self.scale
FIXER: lineno: 1248:   - (display_width-pixel_x)/2.0
FIXER: lineno: 1249:   - (display_height-pixel_y)/2.0
FIXER: lineno: 1253:   - (display_width-pixel_x)/2.0
FIXER: lineno: 1254:    - (display_height-pixel_y)/2.0
FIXER: lineno: 1263:  pi/180.0
FIXER: lineno: 1336:  (x1+x2)/2.0
FIXER: lineno: 1336:   (y1+y2)/2.0
FIXER: lineno: 1337:  (x1-x2)/2.0
FIXER: lineno: 1337:   (y1-y2)/2.0
FIXER: lineno: 1347:  (x1+x2)/2.0
FIXER: lineno: 1347:   (y1+y2)/2.0
FIXER: lineno: 1348:  (x1-x2)/2.0
FIXER: lineno: 1348:   (y1-y2)/2.0
FIXER: lineno: 1352:   (x1+x2)/2.0
FIXER: lineno: 1352:   (y1+y2)/2.0
FIXER: lineno: 1543:  self.origin[0]/self.scale
FIXER: lineno: 1544:  self.origin[1]/self.scale
FIXER: lineno: 1546:   (v0+origin_x)/self.scale
FIXER: lineno: 1546:   (self.height()-(v1-origin_y))/self.scale
FIXER: lineno: 1547:  (v0[0]+origin_x)/self.scale
FIXER: lineno: 1547:  (self.height()-(v0[1]-origin_y))/self.scale
FIXER: lineno: 1557:  self.origin[0]/self.scale
FIXER: lineno: 1558:  self.origin[1]/self.scale
FIXER: lineno: 1592:  sz/2
FIXER: lineno: 1592:  sz/2
FIXER: lineno: 1592:  (sz+1)/2
FIXER: lineno: 1592:  (sz+1)/2
FIXER: lineno: 1595:  sz/2
FIXER: lineno: 1595:  sz/2
FIXER: lineno: 1689:  xs/2
FIXER: lineno: 1689:  xs/2
FIXER: lineno: 1690:  xs/2
FIXER: lineno: 1691:  ys/2
FIXER: lineno: 1691:  ys/2
FIXER: lineno: 1692:  ys/2
FIXER: lineno: 1744:   1.0/20.0
FIXER: lineno: 1745:   event.delta()/120.0
FIXER: lineno: 1751:   self.height()/sqrt(self.scale)
FIXER: lineno: 1757:   self.width()/sqrt(self.scale)
FIXER: lineno: 2267:  fft["ny"]/2
FIXER: lineno: 2268:  1.0/(fft["ny"]*data["apix_x"])
FIXER: lineno: 2269:  fft["ny"]/2
FIXER: lineno: 2288:  1.0/len(self.target().list_data)
FIXER: lineno: 2289:  fft["ny"]/2
FIXER: lineno: 2290:  1.0/(fft["ny"]*self.target().get_data()["apix_x"])
FIXER: lineno: 2291:  fft["ny"]/2
FIXER: lineno: 2520:  (self.mins.value-self.maxs.value)/(2.0*(self.lowlim-self.highlim))
FIXER: lineno: 2527:  (self.lowlim+self.highlim)/2.0
FIXER: lineno: 2528:  (self.lowlim+self.highlim)/2.0
FILENAME:  ./libpyEM/qtgui/emimage3d.py
FIXER: lineno: 294:   float(self.width())/float(self.height())
FIXER: lineno: 298:  -self.xwidth/2.0
FIXER: lineno: 298:  self.xwidth/2.0
FIXER: lineno: 298:  -self.yheight/2.0
FIXER: lineno: 298:  self.yheight/2.0
FIXER: lineno: 301:   float(self.width())/float(self.height())
FIXER: lineno: 441:   height/float(self.last_window_height)
FIXER: lineno: 442:   width/float(self.last_window_width)
FIXER: lineno: 463:  image.get_ysize()/2.0
FIXER: lineno: 463:   (image.get_ysize()/2.0)/tan(fov/2.0*pi/180.0)
FIXER: lineno: 491:   (model.isothr - self.data["mean"])/self.data["sigma"]
FIXER: lineno: 589:  -self.xwidth/2.0
FIXER: lineno: 589:  -self.yheight/2.0
FIXER: lineno: 589:   self.xwidth/2.0
FIXER: lineno: 589:  self.yheight/2.0
FILENAME:  ./libpyEM/qtgui/emimage3diso.py
FIXER: lineno: 163:  -self.data.get_xsize()/2.0
FIXER: lineno: 163:  -self.data.get_ysize()/2.0
FIXER: lineno: 163:  -self.data.get_zsize()/2.0
FILENAME:  ./libpyEM/qtgui/emimage3dmorph.py
FILENAME:  ./libpyEM/qtgui/emimage3dslice.py
FIXER: lineno: 144:   1.0/(max-min)
FIXER: lineno: 171:   data.get_zsize()/2
FIXER: lineno: 172:   data.get_zsize()/2
FIXER: lineno: 174:   data.get_ysize()/2
FIXER: lineno: 176:   data.get_xsize()/2
FIXER: lineno: 200:   180.0/pi
FIXER: lineno: 247:   float(self.slice)/float(n)
FIXER: lineno: 334:  -self.data.get_xsize()/2.0
FIXER: lineno: 334:  -self.data.get_ysize()/2.0
FIXER: lineno: 334:  -self.data.get_zsize()/2.0
FIXER: lineno: 425:   1.0/self.vdtools.getCurrentScale()
FILENAME:  ./libpyEM/qtgui/emimage3dsym.py
FIXER: lineno: 119:   (value-self.min_score)/self.interval
FIXER: lineno: 243:   (val-mn)/(diff)
FIXER: lineno: 508:   (triangles[0][2]+triangles[0][1])/2.0
FIXER: lineno: 624:   (sin(angle-timeangle)*p1Copy + sin(timeangle)*p2Copy)/sinangle
FIXER: lineno: 640:  dz/length
FIXER: lineno: 1255:   float(self.width())/float(self.height())
FILENAME:  ./libpyEM/qtgui/emimage3dvol.py
FIXER: lineno: 243:  -self.data.get_xsize()/2.0
FIXER: lineno: 243:  -self.data.get_ysize()/2.0
FIXER: lineno: 243:  -self.data.get_zsize()/2.0
FIXER: lineno: 419:   180.0/pi
FIXER: lineno: 474:  n/2
FILENAME:  ./libpyEM/qtgui/emimagemx.py
FIXER: lineno: 95:   xsep/2
FIXER: lineno: 97:  len(view_data)/float(self.visiblecols)
FIXER: lineno: 104:  view_width/(rendered_image_width+self.min_sep)
FIXER: lineno: 117:  -y/(h+2)
FIXER: lineno: 119:  float(view_height-yoff)/(h+2)
FIXER: lineno: 120:  float(view_height-y)/(h+2)
FIXER: lineno: 122:  float(len(view_data))/visiblecols
FIXER: lineno: 123:  -y/(h+2)
FIXER: lineno: 140:  view_width/(rendered_image_width+self.min_sep)
FIXER: lineno: 141:  view_height/(rendered_image_height+self.min_sep)
FIXER: lineno: 243:   1.0/self.mag
FIXER: lineno: 338:  width/2
FIXER: lineno: 338:  height/2
FIXER: lineno: 694:   len(self.data)/self.matrix_panel.visiblecols
FIXER: lineno: 804:  len(self.data)/nrep
FIXER: lineno: 912:  float(self.height())/self.data.get_ysize()
FIXER: lineno: 912:  float(self.view_width())/self.data.get_xsize()
FIXER: lineno: 985:  vec[0]/h
FIXER: lineno: 985:  vec[1]/h
FIXER: lineno: 1105:  1.0/self.scale
FIXER: lineno: 1180:  tw/2.0
FIXER: lineno: 1180:  th/2.0
FIXER: lineno: 1181:  tw/2.0
FIXER: lineno: 1181:  th/2.0
FIXER: lineno: 1206:   w/2.0
FIXER: lineno: 1207:   h/2.0
FIXER: lineno: 1425:   w/2.0
FIXER: lineno: 1426:   h/2.0
FIXER: lineno: 1490:  self.height()/2
FIXER: lineno: 1493:  self.view_width()/2
FIXER: lineno: 1493:  self.height()/2
FIXER: lineno: 1495:  hypot(self.targetorigin[0]-self.origin[0],self.targetorigin[1]-self.origin[1])/20.0
FIXER: lineno: 1536:  (absloc[0]-data[0])/self.scale
FIXER: lineno: 1536:  (absloc[1]-data[1])/self.scale
FIXER: lineno: 1685:   image.get_xsize()/2
FIXER: lineno: 1686:   image.get_ysize()/2
FIXER: lineno: 2000:  self.width/2
FIXER: lineno: 2004:  self.arrow_height/self.arrow_width
FIXER: lineno: 2044:  -float(current_y)/adjusted_height
FIXER: lineno: 2101:  self.width/2
FIXER: lineno: 2110:  self.width/2
FIXER: lineno: 2162:   dy/float(self.scroll_bar_height)
FIXER: lineno: 2540:  (self.mins.value-self.maxs.value)/(2.0*(self.lowlim-self.highlim))
FIXER: lineno: 2548:  (self.lowlim+self.highlim)/2.0
FIXER: lineno: 2549:  (self.lowlim+self.highlim)/2.0
FIXER: lineno: 2923:  self.cache_max/2
FIXER: lineno: 3043:   self.cache_size/2
FIXER: lineno: 3173:   self.cache_size/2
FIXER: lineno: 3229:   self.cache_size/2
FIXER: lineno: 3312:  self.nz/2
FILENAME:  ./libpyEM/qtgui/emimageutil.py
FIXER: lineno: 392:  self.norm/255
FILENAME:  ./libpyEM/qtgui/emitem3d.py
FILENAME:  ./libpyEM/qtgui/emlights.py
FIXER: lineno: 107:   (sin(angle-timeangle)*p1Copy + sin(timeangle)*p2Copy)/sinangle
FIXER: lineno: 122:  dz/length
FIXER: lineno: 165:  self.radius/10.0
FIXER: lineno: 165:  self.radius/10.0
FIXER: lineno: 165:  self.radius/10.0
FIXER: lineno: 193:  self.radius/10.0
FIXER: lineno: 193:  self.radius/10.0
FIXER: lineno: 193:  self.radius/10.0
FIXER: lineno: 290:   (top-bot)/(n-1)
FIXER: lineno: 352:   (top-bot)/(n-1)
FIXER: lineno: 353:  1.0/n
FILENAME:  ./libpyEM/qtgui/empdbitem3d.py
FIXER: lineno: 478:  dz/length
FILENAME:  ./libpyEM/qtgui/empdbvaltool.py
FILENAME:  ./libpyEM/qtgui/empdbviewer.py
FIXER: lineno: 806:  dz/length
FILENAME:  ./libpyEM/qtgui/emplot2d.py
FIXER: lineno: 533:  self.width()/72.0
FIXER: lineno: 533:  self.height()/72.0
FIXER: lineno: 665:  (-(self.scrlim[2]*log(x)) + (self.scrlim[0] + self.scrlim[2])*log(10)*log10(self.plotlim[0])-self.scrlim[0]*log(10)*log10(self.plotlim[0] +self.plotlim[2])) /(log(10)*(log10(self.plotlim[0]) - log10(self.plotlim[0] + self.plotlim[2])))
FIXER: lineno: 667:  (self.scrlim[3]*log(y) + self.height()*log(10.0)*log10(self.plotlim[1])-self.scrlim[1]*log(10.0)*log10(self.plotlim[1])-self.scrlim[3]*log(10.0)*log10(self.plotlim[1]) - self.height()*log(10.0)*log10(self.plotlim[1]+self.plotlim[3]) + self.scrlim[1]*log(10)*log10(self.plotlim[1]+self.plotlim[3])) / (log(10)*(log10(self.plotlim[1]) - log10(self.plotlim[1]+self.plotlim[3])))
FIXER: lineno: 792:  len(cmts)/2
FIXER: lineno: 861:  1.0/lc[0]
FIXER: lineno: 885:  1.0/lc[0]
FIXER: lineno: 944:  xmin/1.1
FIXER: lineno: 957:  ymin/1.1
FIXER: lineno: 1109:   self.width()/2.0
FIXER: lineno: 1110:   self.height()/2.0
FIXER: lineno: 1129:  self.width() / 2
FIXER: lineno: 1129:  self.height() / 2
FIXER: lineno: 1155:   rad/(2.0*self.plotlim[3]/scaling)
FIXER: lineno: 1192:   self.width()/2.0
FIXER: lineno: 1193:   self.height()/2.0
FIXER: lineno: 1219:  sigmaAngSin/pcount
FIXER: lineno: 1219:  sigmaAngCos/pcount
FIXER: lineno: 1220:   sigmaRad/pcount
FIXER: lineno: 1227:  sigmaAngSin/pcount
FIXER: lineno: 1228:  sigmaAngSin/pcount
FIXER: lineno: 1229:  sigmaRad/pcount
FIXER: lineno: 1230:  varAngSin/pcount
FIXER: lineno: 1230:  varAngCos/pcount
FIXER: lineno: 1231:  varRad/pcount
FIXER: lineno: 1370:  self.width()/72.0
FIXER: lineno: 1370:  self.height()/72.0
FIXER: lineno: 1492:  (-(self.scrlim[2]*log(x)) + (self.scrlim[0] + self.scrlim[2])*log(10)*log10(self.plotlim[0])-self.scrlim[0]*log(10)*log10(self.plotlim[0] +self.plotlim[2])) /(log(10)*(log10(self.plotlim[0]) - log10(self.plotlim[0] + self.plotlim[2])))
FIXER: lineno: 1494:  (self.scrlim[3]*log(y) + self.height()*log(10.0)*log10(self.plotlim[1])-self.scrlim[1]*log(10.0)*log10(self.plotlim[1])-self.scrlim[3]*log(10.0)*log10(self.plotlim[1]) - self.height()*log(10.0)*log10(self.plotlim[1]+self.plotlim[3]) + self.scrlim[1]*log(10)*log10(self.plotlim[1]+self.plotlim[3])) / (log(10)*(log10(self.plotlim[1]) - log10(self.plotlim[1]+self.plotlim[3])))
FIXER: lineno: 1655:   (q3+q1)/2
FIXER: lineno: 1657:   (mad - q2) / mad
FIXER: lineno: 1830:   (x-mu)/sigma
FIXER: lineno: 1834:   (x-xmin)/(xmax-xmin)
FIXER: lineno: 1983:  i.copy()/std(i)
FILENAME:  ./libpyEM/qtgui/emplot3d.py
FIXER: lineno: 537:  self.width()/72.0
FIXER: lineno: 537:  self.height()/72.0
FIXER: lineno: 677:  (-(self.scrlim[2]*log(x)) + (self.scrlim[0] + self.scrlim[2])*log(10)*log10(self.plotlim[0])-self.scrlim[0]*log(10)*log10(self.plotlim[0] +self.plotlim[2])) /(log(10)*(log10(self.plotlim[0]) - log10(self.plotlim[0] + self.plotlim[2])))
FIXER: lineno: 679:  (self.scrlim[3]*log(y) + self.height()*log(10.0)*log10(self.plotlim[1])-self.scrlim[1]*log(10.0)*log10(self.plotlim[1])-self.scrlim[3]*log(10.0)*log10(self.plotlim[1]) - self.height()*log(10.0)*log10(self.plotlim[1]+self.plotlim[3]) + self.scrlim[1]*log(10)*log10(self.plotlim[1]+self.plotlim[3])) / (log(10)*(log10(self.plotlim[1]) - log10(self.plotlim[1]+self.plotlim[3])))
FIXER: lineno: 805:  len(cmts)/2
FIXER: lineno: 892:  1.0/lc[0]
FIXER: lineno: 958:  xmin/1.1
FIXER: lineno: 971:  ymin/1.1
FIXER: lineno: 984:  zmin/1.1
FIXER: lineno: 1011:  1.0/1.05
FIXER: lineno: 1014:  sum(self.xlimits)/2.0
FIXER: lineno: 1018:  sum(self.ylimits)/2.0
FIXER: lineno: 1022:  sum(self.zlimits)/2.0
FIXER: lineno: 1134:   (q3+q1)/2
FIXER: lineno: 1136:   (mad - q2) / mad
FIXER: lineno: 1320:   (x-mu)/sigma
FIXER: lineno: 1324:   (x-xmin)/(xmax-xmin)
FIXER: lineno: 1473:  i.copy()/std(i)
FILENAME:  ./libpyEM/qtgui/empmtabwidgets.py
FIXER: lineno: 524:  1.0/(200.0*ctf.dsbg)
FIXER: lineno: 525:  1.0/(20.0*ctf.dsbg)
FIXER: lineno: 526:  1.0/(10.0*ctf.dsbg)
FIXER: lineno: 527:  1.0/(4.0*ctf.dsbg)
FIXER: lineno: 528:  sum(ctf.snr[s0:s1])/(s1-s0)
FIXER: lineno: 529:  sum(ctf.snr[s2:s3])/(s3-s2)
FILENAME:  ./libpyEM/qtgui/empmwidgets.py
FIXER: lineno: 911:  (xyd.get_y(ii-2)+xyd.get_y(ii-1)+xyd.get_y(ii)+xyd.get_y(ii+1)+xyd.get_y(ii+2))/5.0
FIXER: lineno: 914:  1.0/xyd.get_x(ii-1)
FIXER: lineno: 923:  (xyd.get_y(ii-2)+xyd.get_y(ii-1)+xyd.get_y(ii)+xyd.get_y(ii+1)+xyd.get_y(ii+2))/5.0
FIXER: lineno: 926:  1.0/xyd.get_x(ii-1)
FIXER: lineno: 951:   offset/d
FIXER: lineno: 962:  1.0/xaxis(soln)
FIXER: lineno: 965:  1.0/(soln/len(yaxis)*xaxis[-1])
FILENAME:  ./libpyEM/qtgui/emrctboxergui.py
FILENAME:  ./libpyEM/qtgui/emrctstrategy.py
FIXER: lineno: 229:   (rotA[0,0] - rotA[1,1]*math.cos(math.radians(self.tiltangle)))/(rotA[1,0]*math.cos(math.radians(self.tiltangle)) + rotA[0,1])
FIXER: lineno: 237:   math.pi/2
FILENAME:  ./libpyEM/qtgui/emsave.py
FILENAME:  ./libpyEM/qtgui/emscene3d.py
FIXER: lineno: 843:   viewport[2]/2
FIXER: lineno: 844:  viewport[3]/2
FIXER: lineno: 849:   dx/2
FIXER: lineno: 849:   dy/2
FIXER: lineno: 875:   self.camera.getWidth()/2
FIXER: lineno: 876:   self.camera.getWidth()/2
FIXER: lineno: 877:   self.camera.getHeight()/2
FIXER: lineno: 878:   self.camera.getHeight()/2
FIXER: lineno: 1093:   self.camera.getWidth()/2
FIXER: lineno: 1094:   self.camera.getHeight()/2
FIXER: lineno: 1129:  dx/self.camera.getViewPortWidthScaling()
FIXER: lineno: 1131:  magnitude/self.camera.getViewPortWidthScaling()
FIXER: lineno: 1131:  -dy/magnitude
FIXER: lineno: 1131:  -dx/magnitude
FIXER: lineno: 1172:  (self.camera.getPseudoFovyWidth()+self.camera.getWidth())/25
FIXER: lineno: 1177:  (self.camera.getPseudoFovyWidth()+self.camera.getWidth())/25
FIXER: lineno: 1838:   (self.near-self.far)/2.0
FIXER: lineno: 1852:   float(self.height)/float(self.width)
FIXER: lineno: 1876:  (self.width*self.width)/(2*dims)
FIXER: lineno: 1876:  self.width/2
FIXER: lineno: 1902:  -self.width/2
FIXER: lineno: 1902:   self.width/2
FIXER: lineno: 1902:   -self.height/2
FIXER: lineno: 1902:   self.height/2
FIXER: lineno: 1908:  float(self.width)/float(self.height)
FIXER: lineno: 1917:  self.fovy/2
FIXER: lineno: 1917:   -(boundingbox*2/screenfraction)/(2*math.tan(math.radians(self.fovy/2)))
FIXER: lineno: 1978:   (self.maxviewport[0] - self.width)/2
FIXER: lineno: 1996:   float(self.getWidth())/float(self.getWidth() + 2*self.getPseudoFovyWidth())
FIXER: lineno: 2002:   float(self.getHeight())/float(self.getHeight() + 2*self.getPseudoFovyHeight())
FIXER: lineno: 2550:  float(rgb[0])/255.0
FIXER: lineno: 2550:   float(rgb[1])/255.0
FIXER: lineno: 2550:   float(rgb[2])/255.0
FIXER: lineno: 2707:  float(rgb[0])/255.0
FIXER: lineno: 2707:   float(rgb[1])/255.0
FIXER: lineno: 2707:   float(rgb[2])/255.0
FIXER: lineno: 2746:   (al[0] + al[1] + al[2])/3
FIXER: lineno: 2895:  length/5
FIXER: lineno: 2899:  length/5
FIXER: lineno: 2903:  length/5
FILENAME:  ./libpyEM/qtgui/emselector.py
FILENAME:  ./libpyEM/qtgui/emshape.py
FIXER: lineno: 49:  pi/180.0
FIXER: lineno: 198:  w_vect[0]/mag
FIXER: lineno: 198:   w_vect[1]/mag
FIXER: lineno: 240:  (p1[0]+p2[0])/2
FIXER: lineno: 240:  (p1[1]+p2[1])/2
FIXER: lineno: 253:  (p1[0]+p2[0])/2
FIXER: lineno: 253:  (p1[1]+p2[1])/2
FIXER: lineno: 260:  (v[0]+v2[0])/2.0
FIXER: lineno: 260:  (v[1]+v2[1])/2.0
FIXER: lineno: 261:  (v2[0]-v[0])/2.0
FIXER: lineno: 261:  (v2[1]-v[1])/2.0
FIXER: lineno: 273:  (v[0]+v2[0])/2.0
FIXER: lineno: 273:  (v[1]+v2[1])/2.0
FIXER: lineno: 274:  (v2[0]-v[0])/2.0
FIXER: lineno: 274:  (v2[1]-v[1])/2.0
FIXER: lineno: 542:   (s[4]+s[6])/2.0
FIXER: lineno: 542:   (s[5]+s[7])/2.0
FIXER: lineno: 545:  l_vect[0]/length
FIXER: lineno: 545:   l_vect[1]/length
FIXER: lineno: 552:   width/2.0
FIXER: lineno: 555:   length/2.0
FIXER: lineno: 593:  (s[4]+s[6])/2.0
FIXER: lineno: 593:   (s[5]+s[7])/2.0
FILENAME:  ./libpyEM/qtgui/emshapeitem3d.py
FIXER: lineno: 217:  (x2-x1)/self.getLength()
FIXER: lineno: 217:   (y2-y1)/self.getLength()
FIXER: lineno: 217:   (z2-z1)/self.getLength()
FIXER: lineno: 245:  self.rsinO/2.0
FIXER: lineno: 245:  self.rcosO/2.0
FIXER: lineno: 246:  self.rsinO/2.0
FIXER: lineno: 246:  self.rcosO/2.0
FIXER: lineno: 287:   -size/2
FIXER: lineno: 288:   -size/2
FIXER: lineno: 289:   -size/2
FIXER: lineno: 290:   size/2
FIXER: lineno: 291:   size/2
FIXER: lineno: 292:   size/2
FIXER: lineno: 545:  -self.height/2
FIXER: lineno: 619:  width/2
FIXER: lineno: 620:  width/2
FIXER: lineno: 629:   self.length/10.0
FIXER: lineno: 631:   self.length/10.0
FIXER: lineno: 645:  self.width/2
FIXER: lineno: 654:  self.width/2
FIXER: lineno: 708:   180.0/math.pi
FIXER: lineno: 726:  vz/self.length
FIXER: lineno: 747:  self.width/2
FIXER: lineno: 747:  self.width/2
FIXER: lineno: 829:  -self.height/2
FIXER: lineno: 954:  (tvar[0]-tvar[3])/2
FIXER: lineno: 954:  (tvar[1]-tvar[4])/2
FIXER: lineno: 954:  -(tvar[2]-tvar[5])/2
FIXER: lineno: 1046:  float(rgb[0])/255.0
FIXER: lineno: 1046:  float(rgb[1])/255.0
FIXER: lineno: 1046:  float(rgb[2])/255.0
FIXER: lineno: 1052:  float(rgb[0])/255.0
FIXER: lineno: 1052:  float(rgb[1])/255.0
FIXER: lineno: 1052:  float(rgb[2])/255.0
FIXER: lineno: 1058:  float(rgb[0])/255.0
FIXER: lineno: 1058:  float(rgb[1])/255.0
FIXER: lineno: 1058:  float(rgb[2])/255.0
FILENAME:  ./libpyEM/qtgui/emsprworkflow.py
FIXER: lineno: 237:   float(len(options.filenames))/float(ncpu)
FIXER: lineno: 1282:    nx/2
FIXER: lineno: 1283:    ny/2
FIXER: lineno: 1465:   sum(ctf.snr)/len(ctf.snr)
FIXER: lineno: 1851:  int(l[2])/2
FIXER: lineno: 1851:  int(l[3])/2
FIXER: lineno: 2368:  box.xsize/2
FIXER: lineno: 2369:  box.ysize/2
FIXER: lineno: 3755:  (i+1.0)/len(filenames)
FIXER: lineno: 5133:  nx/8.0
FIXER: lineno: 5134:  nx/20.0
FIXER: lineno: 5220:   float(nx)/x
FIXER: lineno: 5225:   (x-nx)/2
FIXER: lineno: 5659:  nx/8.0
FIXER: lineno: 5660:  nx/20.0
FIXER: lineno: 6140:   offset/d
FIXER: lineno: 6151:  1.0/xaxis(soln)
FIXER: lineno: 6154:  1.0/(soln/len(yaxis)*xaxis[-1])
FILENAME:  ./libpyEM/qtgui/emtprworkflow.py
FILENAME:  ./libpyEM/qtgui/expand_string.py
FILENAME:  ./libpyEM/qtgui/matching.py
FILENAME:  ./libpyEM/qtgui/pmicons.py
FILENAME:  ./libpyEM/qtgui/valslider.py
FIXER: lineno: 253:  self.slider.value()/4095.0
FIXER: lineno: 670:  self.size().width()/2
FIXER: lineno: 670:  self.size().width()/2
FIXER: lineno: 1031:  float(width)/float(height)
FIXER: lineno: 1127:  -width/2
FIXER: lineno: 1127:   width/2
FIXER: lineno: 1127:   -height/2
FIXER: lineno: 1127:   height/2
FIXER: lineno: 1137:   self.width/2
FIXER: lineno: 1137:   self.width/2
FIXER: lineno: 1154:   (self.scenegraph().camera.getClipNear() + self.scenegraph().camera.getZclip())/self.scale
FIXER: lineno: 1155:   (self.scenegraph().camera.getClipFar() + self.scenegraph().camera.getZclip())/self.scale
FIXER: lineno: 1157:   -self.height/2.2
FIXER: lineno: 1158:   self.height/2.2
FIXER: lineno: 1159:   -self.height/2.2
FIXER: lineno: 1160:   self.height/2.2
FIXER: lineno: 1182:   float(self.scenegraph().camera.getHeight())/float(self.scenegraph().camera.getWidth())
FIXER: lineno: 1187:  -size/2
FIXER: lineno: 1189:  size/2
FIXER: lineno: 1191:  size/2
FIXER: lineno: 1193:  -size/2
FILENAME:  ./libpyEM/Simplex.py
FIXER: lineno: 134:   S / (self.numvars + 1)
FIXER: lineno: 141:  S1 / self.numvars
FIXER: lineno: 168:   S / self.numvars
FILENAME:  ./programs/e2.py
FILENAME:  ./programs/e22.py
FILENAME:  ./programs/e2_real.py
FILENAME:  ./programs/e2a2d_align.py
FIXER: lineno: 31:  n/float(len(il))
FILENAME:  ./programs/e2a2d_average.py
FIXER: lineno: 98:  i/float(N)
FIXER: lineno: 100:  (time.time()-t0)/frac
FILENAME:  ./programs/e2a2d_stat.py
FIXER: lineno: 79:  n/float(N)
FIXER: lineno: 81:  (time.time()-t0)/frac
FIXER: lineno: 118:  n/float(N)
FIXER: lineno: 120:  (time.time()-t0)/frac
FIXER: lineno: 135:  1.0/80
FIXER: lineno: 135:  1.0/20
FIXER: lineno: 137:  1.0/20
FIXER: lineno: 137:  1.0/12
FIXER: lineno: 175:  float(lz)/(lz+gz)
FIXER: lineno: 176:  float(gz)/(lz+gz)
FILENAME:  ./programs/e2ali2img.py
FILENAME:  ./programs/e2align2d.py
FILENAME:  ./programs/e2align3d.py
FIXER: lineno: 141:   options.search/options.shrink
FILENAME:  ./programs/e2avg_ffts.py
FIXER: lineno: 75:  sumrst/num
FIXER: lineno: 76:  sumist/num
FIXER: lineno: 80:  sumrth/numth
FIXER: lineno: 81:  sumith/numth
FIXER: lineno: 85:  sumr2/suma
FIXER: lineno: 86:  sumi2/suma
FILENAME:  ./programs/e2basis.py
FILENAME:  ./programs/e2bdb.py
FIXER: lineno: 459:  80.0/(maxname+3)
FIXER: lineno: 460:  80/cols
FIXER: lineno: 461:  float(len(dbs))/cols
FIXER: lineno: 571:  size/1000000000
FIXER: lineno: 572:  size/1000000
FIXER: lineno: 573:  size/1000
FILENAME:  ./programs/e2boxadjust.py
FILENAME:  ./programs/e2boxer.py
FIXER: lineno: 85:  1.0/n
FIXER: lineno: 176:  boxsize/2
FIXER: lineno: 228:  boxsize/float(options.ptclsize)
FIXER: lineno: 304:  boxsize/2
FIXER: lineno: 324:  boxsize/2
FIXER: lineno: 376:  10.0/apix
FIXER: lineno: 445:  micrograph["nx"]/downsample
FIXER: lineno: 445:  micrograph["ny"]/downsample
FIXER: lineno: 446:  micrograph["nx"]/downsample
FIXER: lineno: 446:  micrograph["ny"]/downsample
FIXER: lineno: 454:  goodrefs[0]["nx"]/(2.0*downsample)
FIXER: lineno: 487:  ref["nx"]/2
FIXER: lineno: 487:  ref["ny"]/2
FIXER: lineno: 505:  ref["nx"]/2
FIXER: lineno: 513:  (gs-dsref["nx"])/2
FIXER: lineno: 518:  ang/360.0
FIXER: lineno: 545:  8.0/apix
FIXER: lineno: 546:  nx/downsample
FIXER: lineno: 547:  float(nx)/float(nxdown)
FIXER: lineno: 602:  goodrefs[0]["nx"]/(2.0*downsample)
FIXER: lineno: 606:  1.0/final["sigma_nonzero"]
FIXER: lineno: 638:  ref["nx"]/2
FIXER: lineno: 638:  ref["ny"]/2
FIXER: lineno: 656:  ref["nx"]/2
FIXER: lineno: 680:  nxdown/2
FIXER: lineno: 681:  nxdown/2
FIXER: lineno: 762:  float(bxsz)/float(sz)
FIXER: lineno: 793:  nref_target/nref
FIXER: lineno: 824:  sz/2
FIXER: lineno: 824:  sz/2
FIXER: lineno: 839:   len(data) / batch_size
FIXER: lineno: 864:  float(bxsz)/float(sz)
FIXER: lineno: 901:  nref_target/nref
FIXER: lineno: 939:   len(data) / batch_size
FIXER: lineno: 1016:  -nx/2
FIXER: lineno: 1016:  -nx/2
FIXER: lineno: 1030:  float(bxsz)/float(sz)
FIXER: lineno: 1037:  micrograph["nx"]/shrinkfac
FIXER: lineno: 1038:  micrograph["ny"]/shrinkfac
FIXER: lineno: 1088:  (sw-nx)/2
FIXER: lineno: 1088:  (sw-ny)/2
FIXER: lineno: 1166:  sz/4
FIXER: lineno: 1169:  len(pks)/3
FIXER: lineno: 1178:  sz/2
FIXER: lineno: 1178:  sz/2
FIXER: lineno: 1207:  i/3
FIXER: lineno: 1225:  float(bxsz)/float(sz)
FIXER: lineno: 1230:  hdr["nx"]/shrinkfac
FIXER: lineno: 1231:  hdr["ny"]/shrinkfac
FIXER: lineno: 1623:  apix1/apix3
FIXER: lineno: 1626:  apix3/apix1
FIXER: lineno: 1630:  float(xsize)/xsize3d
FIXER: lineno: 1664:  apix1/apix2
FIXER: lineno: 1667:  apix2/apix1
FIXER: lineno: 1671:  float(xsize)/xsize2
FIXER: lineno: 2001:  ptclsize/2
FILENAME:  ./programs/e2boxer_old.py
FIXER: lineno: 276:  float(i+1)/len(args)
FIXER: lineno: 288:  float(i+1)/len(args)
FIXER: lineno: 364:  progress/total_progress
FIXER: lineno: 376:  progress/total_progress
FIXER: lineno: 381:  box_size/(2*shrink)
FIXER: lineno: 383:   box_size/shrink
FIXER: lineno: 388:   box.x/shrink
FIXER: lineno: 388:  real_box_size/2
FIXER: lineno: 389:   box.y/shrink
FIXER: lineno: 389:  real_box_size/2
FIXER: lineno: 410:  ave.get_xsize()/2
FIXER: lineno: 428:  ave.get_xsize()/2
FIXER: lineno: 482:  self.x/shrink
FIXER: lineno: 483:  self.y/shrink
FIXER: lineno: 1460:  float(self.particle_diameter)/float(SWARM_TEMPLATE_MIN)
FIXER: lineno: 1505:  self.particle_diameter/(shrink*2)
FIXER: lineno: 1516:   float(exclusion_shrink)/shrink
FIXER: lineno: 1521:  (oldx-newx)/2
FIXER: lineno: 1521:  (oldy-newy)/2
FIXER: lineno: 1547:   self.templates[-1].get_xsize()/2
FIXER: lineno: 1585:   box[0]/exclusion_shrink
FIXER: lineno: 1586:   box[1]/exclusion_shrink
FIXER: lineno: 1728:  box_size/2
FIXER: lineno: 1729:  box_size/2
FIXER: lineno: 1733:  particle.get_xsize()/2
FIXER: lineno: 1733:  particle.get_ysize()/2
FIXER: lineno: 1916:   (fmax - fmin)/(nbin-2*presize)
FIXER: lineno: 1925:   (d-start)/binsize
FIXER: lineno: 2455:  defocus/10000.0
FIXER: lineno: 2746:   self.gauss_width/boxsize
FIXER: lineno: 2748:   boxsize/2
FIXER: lineno: 2750:   len(peaks)/3
FIXER: lineno: 2917:   self.pixel_input/self.pixel_output
FIXER: lineno: 2926:   self.pixel_input/self.pixel_output
FIXER: lineno: 2928:   ratio/boxsize
FIXER: lineno: 2929:   ratio/self.target().get_box_size()
FIXER: lineno: 3005:   self.gauss_width/boxsize
FIXER: lineno: 3007:   boxsize/2
FIXER: lineno: 3009:   len(peaks)/3
FIXER: lineno: 3236:  h / 15.0
FIXER: lineno: 3237:  w / 15.0
FIXER: lineno: 3276:   float(w-2*wborder) / float(sizew)
FIXER: lineno: 3287:   float(h-2*hborder) / float(sizeh)
FIXER: lineno: 3301:  sizew/30
FIXER: lineno: 3309:  fw/2
FIXER: lineno: 3347:  fw/2
FILENAME:  ./programs/e2buildsets.py
FIXER: lineno: 139:  1.0/(200.0*ctf.dsbg)
FIXER: lineno: 140:  1.0/(20.0*ctf.dsbg)
FIXER: lineno: 141:  1.0/(10.0*ctf.dsbg)
FIXER: lineno: 142:  1.0/(4.0*ctf.dsbg)
FIXER: lineno: 143:  sum(ctf.snr[r1:r2])/(r2-r1)
FIXER: lineno: 144:  sum(ctf.snr[r3:r4])/(r4-r3)
FILENAME:  ./programs/e2buildstacks.py
FILENAME:  ./programs/e2classaverage.py
FIXER: lineno: 195:  nx/2
FIXER: lineno: 195:  nx/15
FIXER: lineno: 196:  nx/2
FIXER: lineno: 196:  nx/15
FIXER: lineno: 196:  nx/20
FIXER: lineno: 243:  float(len(taskids))/len(alltaskids)
FIXER: lineno: 260:  nx/2
FIXER: lineno: 260:  nx/15
FIXER: lineno: 261:  nx/2
FIXER: lineno: 261:  nx/15
FIXER: lineno: 261:  nx/20
FIXER: lineno: 544:  ref["nx"]/16
FIXER: lineno: 555:  ref["nx"]/2
FIXER: lineno: 556:  ref["nx"]/2
FIXER: lineno: 556:  gmw/1.3
FIXER: lineno: 589:  sigma/len(ptcl_info)
FIXER: lineno: 628:  i/float(nimg)
FIXER: lineno: 653:  ref["nx"]/12
FIXER: lineno: 654:  ref["nx"]/2
FIXER: lineno: 658:  ref["nx"]/2
FIXER: lineno: 658:  gmw/1.3
FILENAME:  ./programs/e2classes_denovo.py
FILENAME:  ./programs/e2classesbyref.py
FIXER: lineno: 139:  N/(options.threads-2)
FIXER: lineno: 143:  N/npt
FIXER: lineno: 210:  avg["ny"]/2
FILENAME:  ./programs/e2classextract.py
FILENAME:  ./programs/e2classify.py
FILENAME:  ./programs/e2classifykmeans.py
FIXER: lineno: 118:  len(data)/(options.ncls*25)
FILENAME:  ./programs/e2classifyligand.py
FIXER: lineno: 119:  ref1["nx"]/2
FIXER: lineno: 146:  projm["nx"]/50
FIXER: lineno: 318:    sum([statall[i][2][0] for i in statall])/float(len(statall))
FIXER: lineno: 319:  sum([statall[i][2][0]**2 for i in statall])/float(len(statall))
FIXER: lineno: 320:  sum([statall[i][1]**2 for i in statall])/float(len(statall))
FILENAME:  ./programs/e2classifytree.py
FIXER: lineno: 150:   float(nfinished)/npt
FILENAME:  ./programs/e2classptcl.py
FILENAME:  ./programs/e2classvsproj.py
FILENAME:  ./programs/e2cmmtomrc.py
FILENAME:  ./programs/e2cmpxplor.py
FILENAME:  ./programs/e2ctf.py
FIXER: lineno: 239:  float(len(args))/nthreads
FIXER: lineno: 336:  i/200.0
FIXER: lineno: 455:  float(i+1)/len(options.filenames)
FIXER: lineno: 505:  last[1]/n
FIXER: lineno: 518:  j[1]/sfact(j[0])
FIXER: lineno: 519:  1/j[0]
FIXER: lineno: 537:  1.0/(25.0*ds)
FIXER: lineno: 542:  len(bg_1d)/2
FIXER: lineno: 543:   (im_1d[i]+im_1d[i+1]+im_1d[i-1])/(bg_1d[i]+bg_1d[i+1]+bg_1d[i-1])
FIXER: lineno: 544:  (im_1d[i]+im_1d[i+1]+im_1d[i-1])/(bg_1d[i]+bg_1d[i+1]+bg_1d[i-1])
FIXER: lineno: 578:  1.0/(apix*ps[0][2].get_ysize())
FIXER: lineno: 652:  float(i+1)/len(options.filenames)
FIXER: lineno: 706:  ddf/1000.0
FIXER: lineno: 711:  .08/ds
FIXER: lineno: 721:  float(i+1)/len(options.filenames)
FIXER: lineno: 724:  (sum([fabs(olddf[ii]-newdf[ii]) for ii in range(len(olddf))]))/len(olddf)
FIXER: lineno: 743:  total[i-2][1]/total[i][1]
FIXER: lineno: 743:  total[i-1][1]/total[i][1]
FIXER: lineno: 743:  total[i+1][1]/total[i][1]
FIXER: lineno: 743:  total[i+2][1]/total[i][1]
FIXER: lineno: 791:  trg/p1d[i]
FIXER: lineno: 795:  ys/2
FIXER: lineno: 799:  sum(hpfilt[i+1:i+1+oscor])/oscor
FIXER: lineno: 883:  -(pad-out2["nx"])/2
FIXER: lineno: 883:  -(pad-out2["ny"])/2
FIXER: lineno: 893:  -(pad-out2["nx"])/2
FIXER: lineno: 893:  -(pad-out2["ny"])/2
FIXER: lineno: 922:  5.0/ctf.apix
FIXER: lineno: 1029:  ys2/2.6
FIXER: lineno: 1032:  1.0/(apix*ys)
FIXER: lineno: 1050:  mask1.get_attr("square_sum")/(ys*ys)
FIXER: lineno: 1051:  mask2.get_attr("square_sum")/(ys*ys)
FIXER: lineno: 1124:  av1.get_ysize()/2
FIXER: lineno: 1125:  av2.get_ysize()/2
FIXER: lineno: 1141:  bs/2
FIXER: lineno: 1141:  bs/2
FIXER: lineno: 1142:  bs/2
FIXER: lineno: 1142:  bs/2
FIXER: lineno: 1156:  av3["ny"]/2
FIXER: lineno: 1168:  0.04/ds
FIXER: lineno: 1173:  (av1_1d[i]-av2_1d[i])/av2_1d[i]
FIXER: lineno: 1183:  av1_1d[i]/(avsnr+1)
FIXER: lineno: 1200:  ys2/2.6
FIXER: lineno: 1203:  1.0/(apix*ys)
FIXER: lineno: 1217:  mask1.get_attr("square_sum")/(ys*ys)
FIXER: lineno: 1218:  mask2.get_attr("square_sum")/(ys*ys)
FIXER: lineno: 1254:  av1.get_ysize()/2
FIXER: lineno: 1280:  av1.get_ysize()/2
FIXER: lineno: 1281:  av2.get_ysize()/2
FIXER: lineno: 1283:  0.05/ds
FIXER: lineno: 1297:  av_1d_n[j][i]/(av1["ny"]*av1["ny"]*ratio1)
FIXER: lineno: 1373:  (av1_1d[i]-av2_1d[i])/av2_1d[i]
FIXER: lineno: 1378:  av1_1d[i]/(avsnr+1)
FIXER: lineno: 1398:  xs/width
FIXER: lineno: 1398:  xs/ceil(xs/width)
FIXER: lineno: 1402:  xst/2
FIXER: lineno: 1428:  .02/ds
FIXER: lineno: 1484:  0.04/ds
FIXER: lineno: 1486:  0.04/ds
FIXER: lineno: 1493:  1.0/(i*ds)
FIXER: lineno: 1514:  (sum*sum_xy-sum_x*sum_y)/denom
FIXER: lineno: 1515:  (sum_xx*sum_y-sum_x*sum_xy)/denom
FIXER: lineno: 1521:   (s-n)/n
FIXER: lineno: 1571:   12.3/sqrt(1000*V+0.97845*V*V)
FIXER: lineno: 1604:  ctf.zero(0)/ds
FIXER: lineno: 1607:  ctf.zero(n-1)/ds
FIXER: lineno: 1649:  ctf.defocus/20.0
FIXER: lineno: 1656:  ctf.dfdiff/2.0
FIXER: lineno: 1656:  ctf.dfdiff/2.0
FIXER: lineno: 1664:  ctf.dfdiff/2.0
FIXER: lineno: 1664:  ctf.dfdiff/2.0
FIXER: lineno: 1667:  (dfmaj+dfmin)/2.0
FIXER: lineno: 1674:  (dfmaj+dfmin)/2.0
FIXER: lineno: 1677:  (dfmaj+dfmin)/2.0
FIXER: lineno: 1733:  (dfmaj+dfmin)/2.0
FIXER: lineno: 1748:  ctf.dfdiff/ctf.defocus
FIXER: lineno: 1764:  (dfhint[1]-dfhint[0])/5
FIXER: lineno: 1767:  1.0/(apix*ys)
FIXER: lineno: 1797:  dfhint[2]/2.0
FIXER: lineno: 1812:  ctf.zero(8)/ds
FIXER: lineno: 1813:  ctf.zero(0)/ds
FIXER: lineno: 1813:  ctf.zero(5)/ds
FIXER: lineno: 2104:  bgsub[i]/v
FIXER: lineno: 2106:  bgsub[i]/v
FIXER: lineno: 2112:  a/c
FIXER: lineno: 2113:  b/c
FIXER: lineno: 2115:  sig/fabs(mean)
FIXER: lineno: 2119:  (parms[1]-200)/20000.0
FIXER: lineno: 2119:  -(parms[1]-50.0)/30.0
FIXER: lineno: 2135:  s0/4
FIXER: lineno: 2201:  a/sqrt(b*c)
FIXER: lineno: 2210:  (parms[1]-200)/20000.0
FIXER: lineno: 2210:  -(parms[1]-50.0)/30.0
FIXER: lineno: 2229:  (im_1d[i]-bg_1d[i])/cc[i]**2
FIXER: lineno: 2635:  self.data[val][4]["sigma"]/self.flipim["sigma"]
FIXER: lineno: 2649:  ctf.dfdiff/2
FIXER: lineno: 2650:  ctf.zero(i-1)/ctf.dsbg
FIXER: lineno: 2651:  ctf.dfdiff/2
FIXER: lineno: 2652:  ctf.zero(i-1)/ctf.dsbg
FIXER: lineno: 2658:  ctf.zero(i-1)/ctf.dsbg
FIXER: lineno: 2695:  .04/ds
FIXER: lineno: 2695:  0.15/ds
FIXER: lineno: 2705:  fit[i]/rto
FIXER: lineno: 2784:  sum(d[1].snr)/len(d[1].snr)
FIXER: lineno: 2825:  .04/ds
FIXER: lineno: 2825:  0.15/ds
FIXER: lineno: 2831:  fit[i]/rto
FIXER: lineno: 2841:  .04/ds
FIXER: lineno: 2841:  .12/ds
FIXER: lineno: 2869:  self.data[val][1].get_phase()/pi
FIXER: lineno: 2881:  sum(ctf.snr)/float(len(ctf.snr))
FIXER: lineno: 2910:  4.0/len(self.ptcldata)
FIXER: lineno: 2935:  self.data[self.curset][1].get_phase()/pi
FILENAME:  ./programs/e2ctf2eman1.py
FIXER: lineno: 210:   ( ( empsf[j][0] - s ) * empsf[j-1][1] + ( s - empsf[j-1][0] ) * empsf[j][1] ) / ( empsf[j][0] - empsf[j-1][0] )
FIXER: lineno: 302:   1. / s_min
FIXER: lineno: 302:   ( 1. / s_min ) / ds
FIXER: lineno: 306:   1. / s_max
FIXER: lineno: 306:   ( 1. / s_max ) / ds
FIXER: lineno: 308:   0.20 / ds
FIXER: lineno: 314:   ( parm_max[0] + parm_min[0] ) / 2.
FIXER: lineno: 314:   ( parm_max[1] + parm_min[1] ) / 2.
FIXER: lineno: 314:   ( parm_max[2] + parm_min[2] ) / 2.
FIXER: lineno: 314:   ( parm_max[3] + parm_min[3] ) / 2.
FIXER: lineno: 340:   ( parm_max[0] - parm_min[0] ) / ( 1.5 * float( c ) )
FIXER: lineno: 343:   ( parm_max[1] - parm_min[1] ) / ( 1.5 * float( c ) )
FIXER: lineno: 346:   ( parm_max[2] - parm_min[2] ) / ( 1.5 * float( c ) )
FIXER: lineno: 349:   ( parm_max[3] - parm_min[3] ) / ( 1.5 * float( c ) )
FIXER: lineno: 393:   ft.get_xsize( ) / 2.
FIXER: lineno: 394:   0.5 / ( e1ctf.apix * len( ps ) )
FIXER: lineno: 396:   len( ps ) / 100.
FIXER: lineno: 398:   float( i ) / float( smksize )
FIXER: lineno: 400:   0.01 / ds
FIXER: lineno: 409:   len( ptclps ) / 100.
FIXER: lineno: 411:   float( i ) / float( smksize )
FIXER: lineno: 413:   0.01 / ds
FIXER: lineno: 437:   0.02 / ds
FIXER: lineno: 438:   0.2 / ds
FIXER: lineno: 458:   zerosum / zeronum
FIXER: lineno: 468:   drange / 2.
FIXER: lineno: 472:   ( max( smbetween[dstart:dstop] ) - max( smbetween[dstart], smbetween[dstop] ) ) / 4.
FIXER: lineno: 520:   ( ps[i] - e1bg ) / max( sf[i] * ctf[i] ** 2, 0.0001 )
FIXER: lineno: 525:   sum( amplist[1:-1] ) / len( amplist[1:-1] )
FIXER: lineno: 527:   sum( amplist[:] ) / len( amplist[:] )
FIXER: lineno: 542:   ( ps[i] - bg[i] ) / max( bg[i], 0.0001 )
FIXER: lineno: 621:   np.max( intsnr ) / 20.
FIXER: lineno: 621:   np.max( intsnr ) / 20.
FIXER: lineno: 639:   ( len( kernel ) - 1 ) / 2
FIXER: lineno: 651:   num / denom
FILENAME:  ./programs/e2ctf_auto.py
FIXER: lineno: 295:  6.0/options.apix
FIXER: lineno: 296:  boxsize/resample1
FIXER: lineno: 297:  boxsize/(newbox+0.1)
FIXER: lineno: 301:  20.0/options.apix
FIXER: lineno: 302:  boxsize/2
FIXER: lineno: 305:  2.6/options.apix
FIXER: lineno: 306:  boxsize/resample2
FIXER: lineno: 307:  boxsize/(newbox+0.1)
FIXER: lineno: 311:  12.0/options.apix
FIXER: lineno: 312:  boxsize/2
FIXER: lineno: 315:  4.0/options.apix
FIXER: lineno: 316:  boxsize/resample3
FIXER: lineno: 317:  boxsize/(newbox+0.1)
FIXER: lineno: 320:  18.0/options.apix
FIXER: lineno: 321:  boxsize/2
FIXER: lineno: 324:  6.0/options.apix
FIXER: lineno: 325:  boxsize/2
FIXER: lineno: 328:  1.8/options.apix
FIXER: lineno: 329:  boxsize/resample2
FIXER: lineno: 330:  boxsize/(newbox+0.1)
FIXER: lineno: 334:  6.0/options.apix
FIXER: lineno: 335:  boxsize/2
FILENAME:  ./programs/e2ctffind3util.py
FIXER: lineno: 100:  (dfu+dfv)/20000.0
FIXER: lineno: 100:  (dfu-dfv)/10000.0
FIXER: lineno: 166:    (defocusu + defocusv) / 20000.0
FIXER: lineno: 167:   abs(defocusu - defocusv) / 10000.0
FILENAME:  ./programs/e2ctfsim.py
FIXER: lineno: 326:  1.0/(ctf.apix*2.0*ctf.samples)
FIXER: lineno: 374:  self.data[val][1].get_phase()/pi
FIXER: lineno: 442:  self.data[self.curset][1].get_phase()/pi
FILENAME:  ./programs/e2ddd_movie.py
FIXER: lineno: 158:  sigd["sigma"]/10.0
FIXER: lineno: 186:  sigg["sigma"]/10.0
FIXER: lineno: 194:  1.0/gain["mean"]
FIXER: lineno: 483:   np.round(traj*2)/2
FIXER: lineno: 487:  options.optbox/2
FIXER: lineno: 490:  float(n-fabs(i-j))/n
FIXER: lineno: 671:  box/2
FIXER: lineno: 672:  box/2
FIXER: lineno: 691:  -(((x-xo)**2)+((y-yo)**2))/(2*sigma**2)
FIXER: lineno: 696:  len(x)/2
FIXER: lineno: 697:  len(y)/2
FIXER: lineno: 698:  -(((x-xo)**2)+((y-yo)**2))/(2*sigma**2)
FIXER: lineno: 704:  -(((x-x1)**2+(y-y1)**2))/(2*sig1**2)
FIXER: lineno: 706:  len(x)/2
FIXER: lineno: 706:  len(y)/2
FIXER: lineno: 706:  -(((x-float(len(x)/2))**2+(y-float(len(y)/2))**2))/(2*sig2**2)
FIXER: lineno: 716:   a.shape[0]/2
FIXER: lineno: 718:   r.shape[0]/2
FIXER: lineno: 729:   a.shape[0]/2
FIXER: lineno: 732:   r.shape[0]/2
FIXER: lineno: 740:   m / np.sum(m)
FIXER: lineno: 747:  ccf.shape[0]/2
FIXER: lineno: 747:  ccf.shape[1]/2
FIXER: lineno: 751:   nxx/2
FIXER: lineno: 757:  nxx/2
FIXER: lineno: 757:  bs/2
FIXER: lineno: 757:  nxx/2
FIXER: lineno: 757:  bs/2
FIXER: lineno: 762:   bs/2.
FIXER: lineno: 763:   bs/2.
FIXER: lineno: 776:  nxx/2
FIXER: lineno: 777:  nxx/2
FIXER: lineno: 787:  nxx/2
FIXER: lineno: 787:  nxx/2
FIXER: lineno: 799:   nxx/2
FIXER: lineno: 799:   bs/2
FIXER: lineno: 800:   nxx/2
FIXER: lineno: 800:   bs/2
FIXER: lineno: 813:  ccfs[(0,1)]["nx"]/2
FIXER: lineno: 814:  len(locs)/2
FIXER: lineno: 817:  float(n-fabs(i-j))/n
FILENAME:  ./programs/e2ddd_particles.py
FIXER: lineno: 196:  EMUtil.get_image_count(movie)/movienfr
FIXER: lineno: 233:  (nx-pnx)/2
FIXER: lineno: 233:  (nx-pnx)/2
FIXER: lineno: 244:  (pnx-nx)/2
FIXER: lineno: 244:  (pnx-nx)/2
FIXER: lineno: 259:  nx/8
FIXER: lineno: 259:  nx/8
FIXER: lineno: 262:  nx/4
FIXER: lineno: 290:  nx/2
FIXER: lineno: 291:  nx/2
FIXER: lineno: 293:  nx/2
FIXER: lineno: 293:  nx/2
FIXER: lineno: 306:  (nx-pnx)/2
FIXER: lineno: 306:  (nx-pnx)/2
FIXER: lineno: 316:  (atx[i-1]+2.0*atx[i]+atx[i+1])/4.0
FIXER: lineno: 317:  (aty[i-1]+2.0*aty[i]+aty[i+1])/4.0
FIXER: lineno: 336:  (nx-pnx)/2
FIXER: lineno: 336:  (nx-pnx)/2
FILENAME:  ./programs/e2display.py
FILENAME:  ./programs/e2emx.py
FIXER: lineno: 196:  float (defocus1) /1000.0
FIXER: lineno: 199:  float(defocus2) /1000.0
FIXER: lineno: 221:  (float(defocus1)+float(defocus2))/2000
FIXER: lineno: 221:  abs(float(defocus1)-float(defocus2))/1000
FIXER: lineno: 240:   float(item2.text) / 1000
FIXER: lineno: 243:   float(item2.text) /1000
FIXER: lineno: 319:  (float(defocus1)+float(defocus2))/2000
FIXER: lineno: 319:  abs(float(defocus1)-float(defocus2))/1000
FILENAME:  ./programs/e2eotest.py
FILENAME:  ./programs/e2erasefiducials.py
FIXER: lineno: 223:  dt/60.
FIXER: lineno: 273:   options.goldsize/2.
FIXER: lineno: 287:   img['nx']/2
FIXER: lineno: 288:   options.goldsize/2
FIXER: lineno: 293:   1.0/goldsizeinangstroms
FIXER: lineno: 322:  bs/2
FIXER: lineno: 322:  bs/2
FIXER: lineno: 326:   n["nx"]/2
FIXER: lineno: 327:   options.goldsize/2
FIXER: lineno: 336:  1.0/filtres
FIXER: lineno: 343:   r["sigma_nonzero"]/n["sigma_nonzero"]
FIXER: lineno: 349:  bs/2
FIXER: lineno: 349:  bs/2
FIXER: lineno: 358:  bs/2
FIXER: lineno: 358:  bs/2
FIXER: lineno: 363:   n['nx']/2
FIXER: lineno: 364:   options.goldsize/2
FIXER: lineno: 367:   r["sigma_nonzero"]/n["sigma_nonzero"]
FIXER: lineno: 372:  bs/2
FIXER: lineno: 372:  bs/2
FIXER: lineno: 380:  1.0/filtres
FILENAME:  ./programs/e2euler_refine.py
FIXER: lineno: 171:  1.0/(elem["weight"]+.00001)
FILENAME:  ./programs/e2eulerxplor.py
FILENAME:  ./programs/e2evalimage.py
FIXER: lineno: 459:  1.0/(apix*parms[0]*parms[5])
FIXER: lineno: 473:  1.0/nz
FIXER: lineno: 483:  1.0/(self.ringrad*ds)
FIXER: lineno: 490:  self.fft["nx"]/2
FIXER: lineno: 490:  self.fft["ny"]/2
FIXER: lineno: 494:  1.0/(hypot(*self.xpos1)*ds)
FIXER: lineno: 494:  1.0/(hypot(*self.xpos2)*ds)
FIXER: lineno: 515:  .04/ds
FIXER: lineno: 515:  0.15/ds
FIXER: lineno: 521:  fit[i]/rto
FIXER: lineno: 549:  .04/ds
FIXER: lineno: 549:  0.15/ds
FIXER: lineno: 590:  max(bg1d)/10000.0
FIXER: lineno: 591:  (self.fft1d-bg1d)/bg1d
FIXER: lineno: 633:  1.0/(apix*parms[0]*parms[5])
FIXER: lineno: 790:  1.0/(apix*parms[0]*parms[5])
FIXER: lineno: 803:  1.0/parms[0]
FIXER: lineno: 808:  self.data["nx"]/parms[0]
FIXER: lineno: 812:  self.data["ny"]/parms[0]
FIXER: lineno: 817:  parms[0]/2
FIXER: lineno: 817:  parms[0]/2
FIXER: lineno: 828:  1.0/(nbx*parms[0]**2)
FIXER: lineno: 834:  self.fft.get_ysize()/2
FIXER: lineno: 836:  self.fft.get_ysize()/2
FIXER: lineno: 837:  self.fft.get_ysize()/2
FIXER: lineno: 871:  1.0/(apix*parms[0]*parms[5])
FIXER: lineno: 898:  self.data["nx"]/parms[0]
FIXER: lineno: 901:  self.data["ny"]/parms[0]
FIXER: lineno: 965:  ctf.zero(0)/(ds*2)
FIXER: lineno: 974:  ctf.zero(i)/ds
FIXER: lineno: 1016:  parms[0]/2
FIXER: lineno: 1016:  parms[0]/2
FIXER: lineno: 1025:  parms[0]/2
FIXER: lineno: 1025:  parms[0]/2
FIXER: lineno: 1037:  self.data["nx"]/parms[0]
FIXER: lineno: 1038:  parms[0]/2
FIXER: lineno: 1038:  (m[0]-parms[0]/2)/parms[0]
FIXER: lineno: 1038:  parms[0]/2
FIXER: lineno: 1038:  (m[1]-parms[0]/2)/parms[0]
FIXER: lineno: 1049:  self.fft["nx"]/2
FIXER: lineno: 1049:  self.fft["ny"]/2
FIXER: lineno: 1052:  self.fft["nx"]/2
FIXER: lineno: 1052:  (m[0]-self.fft["nx"]/2)/3.0
FIXER: lineno: 1052:  self.fft["ny"]/2
FIXER: lineno: 1052:  (m[1]-self.fft["ny"]/2)/3.0
FIXER: lineno: 1053:  self.fft["nx"]/2
FIXER: lineno: 1053:  (m[0]-self.fft["nx"]/2)/3.0
FIXER: lineno: 1053:  self.fft["ny"]/2
FIXER: lineno: 1053:  (m[1]-self.fft["ny"]/2)/3.0
FIXER: lineno: 1063:  self.fft["nx"]/2
FIXER: lineno: 1063:  self.fft["ny"]/2
FIXER: lineno: 1066:  self.fft["nx"]/2
FIXER: lineno: 1066:  (m[0]-self.fft["nx"]/2)/3.0
FIXER: lineno: 1066:  self.fft["ny"]/2
FIXER: lineno: 1066:  (m[1]-self.fft["ny"]/2)/3.0
FIXER: lineno: 1067:  self.fft["nx"]/2
FIXER: lineno: 1067:  (m[0]-self.fft["nx"]/2)/3.0
FIXER: lineno: 1067:  self.fft["ny"]/2
FIXER: lineno: 1067:  (m[1]-self.fft["ny"]/2)/3.0
FILENAME:  ./programs/e2evalparticles.py
FILENAME:  ./programs/e2evalrefine.py
FIXER: lineno: 106:   len(fsc)/3
FIXER: lineno: 109:  sum(fsc[rings[k]:rings[k+1]])/(rings[k+1]-rings[k])
FIXER: lineno: 236:  1/1.01
FIXER: lineno: 265:   len(fsc)/3
FIXER: lineno: 282:  aniso/1000.0
FIXER: lineno: 284:  1/ai
FIXER: lineno: 313:   len(fsc)/3
FIXER: lineno: 436:  j/2
FIXER: lineno: 629:   len(fsc)/3
FIXER: lineno: 631:  sum(fsc[rings[k]:rings[k+1]])/(rings[k+1]-rings[k])
FIXER: lineno: 703:  (0.143-d[1][si])/(d[1][si-1]-d[1][si])
FIXER: lineno: 706:  1.0/lastres
FIXER: lineno: 707:  (lastres*4+d[0][-1])/5.0
FIXER: lineno: 818:  ttime/3600.0
FIXER: lineno: 823:  ttime/3600.0
FILENAME:  ./programs/e2extractsubparticles.py
FIXER: lineno: 219:  ptcl3["nx"]/2
FIXER: lineno: 219:  ptcl3["ny"]/2
FIXER: lineno: 221:  (ptcl3["nx"]-options.newbox)/2
FIXER: lineno: 221:  (ptcl3["ny"]-options.newbox)/2
FILENAME:  ./programs/e2fhstat.py
FILENAME:  ./programs/e2fileinfo.py
FILENAME:  ./programs/e2filtertool.py
FIXER: lineno: 599:  self.ny/2
FIXER: lineno: 670:  self.nimg/20
FIXER: lineno: 689:  self.ny/2
FIXER: lineno: 690:  1.0/(self.apix*self.ny)
FILENAME:  ./programs/e2findsubunit.py
FIXER: lineno: 97:  data.get_xsize()/2
FIXER: lineno: 97:  data.get_ysize()/2
FIXER: lineno: 97:  data.get_zsize()/2
FIXER: lineno: 100:  data.get_xsize()/2
FIXER: lineno: 100:  data.get_ysize()/2
FIXER: lineno: 100:  data.get_zsize()/2
FILENAME:  ./programs/e2flick.py
FILENAME:  ./programs/e2foldfitter.py
FIXER: lineno: 50:  pi/180.0
FIXER: lineno: 61:  tdim[0]/2
FIXER: lineno: 61:  tdim[1]/2
FIXER: lineno: 61:  tdim[2]/2
FIXER: lineno: 82:  vec[3]/float(sfac)
FIXER: lineno: 82:  tdim2[0]/2
FIXER: lineno: 82:  vec[4]/float(sfac)
FIXER: lineno: 82:  tdim2[1]/2
FIXER: lineno: 82:  vec[5]/float(sfac)
FIXER: lineno: 82:  tdim2[2]/2
FIXER: lineno: 170:  (t[0]+t[1])/2
FIXER: lineno: 191:  min(pdim)/12.0
FIXER: lineno: 200:  (pdim2[0]-tdim2[0])/2
FIXER: lineno: 200:  (pdim2[1]-tdim2[1])/2
FIXER: lineno: 200:  (pdim2[2]-tdim2[2])/2
FIXER: lineno: 211:  max(pdim2)/2
FIXER: lineno: 231:  tdim2[0]/2
FIXER: lineno: 231:  tdim2[1]/2
FIXER: lineno: 231:  tdim2[2]/2
FIXER: lineno: 241:  tdim2[0]/2
FIXER: lineno: 241:  tdim2[1]/2
FIXER: lineno: 241:  tdim2[2]/2
FIXER: lineno: 341:  tdim[0]/2
FIXER: lineno: 341:  tdim[1]/2
FIXER: lineno: 341:  tdim[2]/2
FIXER: lineno: 350:  (pdim[0]-tdim[0])/2
FIXER: lineno: 350:  (pdim[1]-tdim[1])/2
FIXER: lineno: 350:  (pdim[2]-tdim[2])/2
FIXER: lineno: 351:  (pdim[0]-tdim[0])/2
FIXER: lineno: 351:  (pdim[1]-tdim[1])/2
FIXER: lineno: 351:  (pdim[2]-tdim[2])/2
FILENAME:  ./programs/e2fsc.py
FIXER: lineno: 81:  len(fsc)/3
FIXER: lineno: 81:  array(fsc[1:len(fsc)/3])/apix
FIXER: lineno: 82:  len(fsc)/3
FIXER: lineno: 188:  32/apix
FIXER: lineno: 194:  32.0/apix
FIXER: lineno: 205:  len(fsc)/3
FIXER: lineno: 205:  array(fsc[0:len(fsc)/3])/apix
FIXER: lineno: 206:  len(fsc)/3
FIXER: lineno: 217:  lnx/6
FIXER: lineno: 217:  lnx/6
FIXER: lineno: 229:  (nx%(lnx//overlap))/2
FIXER: lineno: 303:  lnx/2
FIXER: lineno: 303:  lnx/2
FIXER: lineno: 303:  lnx/2
FIXER: lineno: 304:  lnx/2
FIXER: lineno: 304:  lnx/2
FIXER: lineno: 304:  lnx/2
FIXER: lineno: 306:  lnx/2
FIXER: lineno: 306:  lnx/2
FIXER: lineno: 306:  lnx/2
FIXER: lineno: 308:  lnx/2
FIXER: lineno: 308:  lnx/2
FIXER: lineno: 308:  lnx/2
FIXER: lineno: 310:  lnx/2
FIXER: lineno: 310:  lnx/2
FIXER: lineno: 310:  lnx/2
FIXER: lineno: 334:  len(fys)/100
FILENAME:  ./programs/e2helical_recons.py
FIXER: lineno: 123:  int (nx-dz)/2
FIXER: lineno: 123:   int (nx+dz)/2
FIXER: lineno: 128:  nx/2
FIXER: lineno: 128:  nx/2
FIXER: lineno: 128:  nx/2
FIXER: lineno: 128:  nx/2
FIXER: lineno: 129:  nx/2
FIXER: lineno: 129:  nx/2
FIXER: lineno: 129:  (j-nx/2-0.5)/(i-nx/2-0.5)
FIXER: lineno: 130:  nx/2
FIXER: lineno: 138:  nx/2
FIXER: lineno: 139:  nx/2
FIXER: lineno: 164:  -(nx-dz)/2
FIXER: lineno: 173:  1.0/4.0
FILENAME:  ./programs/e2helixboxer.py
FIXER: lineno: 181:   (x1+x2)/2.0
FIXER: lineno: 181:  (y1+y2)/2.0
FIXER: lineno: 197:  l_vect[0]/length
FIXER: lineno: 197:   l_vect[1]/length
FIXER: lineno: 219:  l_vect[0]/helix_length
FIXER: lineno: 219:   l_vect[1]/helix_length
FIXER: lineno: 224:   px_length/2.0
FIXER: lineno: 226:   px_length/2.0
FIXER: lineno: 249:  l_vect[0]/length
FIXER: lineno: 249:   l_vect[1]/length
FIXER: lineno: 276:   gr_M/2
FIXER: lineno: 302:   nx/2
FIXER: lineno: 302:   ny/2
FIXER: lineno: 354:  side/2.0
FIXER: lineno: 354:  side/2.0
FIXER: lineno: 381:   w / 2.0
FIXER: lineno: 390:   w / 2.0
FIXER: lineno: 418:   width / 2.0
FILENAME:  ./programs/e2help.py
FILENAME:  ./programs/e2history.py
FIXER: lineno: 187:  secs/60
FIXER: lineno: 188:  secs/3600
FIXER: lineno: 188:  (secs%3600)/60
FILENAME:  ./programs/e2iminfo.py
FILENAME:  ./programs/e2import.py
FIXER: lineno: 168:  float(fields[3])/2
FIXER: lineno: 168:  float(fields[3])/2
FIXER: lineno: 200:  float(fields[3])/2
FIXER: lineno: 200:  float(fields[3])/2
FIXER: lineno: 211:  float(fields[3])/2
FIXER: lineno: 211:  float(fields[3])/2
FIXER: lineno: 285:  float(i)/len(args)
FILENAME:  ./programs/e2initialmodel.py
FIXER: lineno: 220:  boxsize/5
FIXER: lineno: 252:  -(pad-boxsize)/2
FIXER: lineno: 252:  -(pad-boxsize)/2
FIXER: lineno: 284:  (pad-boxsize)/2
FIXER: lineno: 284:  (pad-boxsize)/2
FIXER: lineno: 284:  (pad-boxsize)/2
FIXER: lineno: 286:  boxsize/3.0
FIXER: lineno: 286:  boxsize/12.0
FIXER: lineno: 288:  boxsize/6
FIXER: lineno: 288:  boxsize/20
FIXER: lineno: 288:  boxsize/20
FIXER: lineno: 325:  boxsize/random.uniform(2.0,5.0)
FIXER: lineno: 325:  boxsize/random.uniform(2.0,5.0)
FIXER: lineno: 325:  boxsize/random.uniform(2.0,5.0)
FIXER: lineno: 341:  -(pad-boxsize)/2
FIXER: lineno: 341:  -(pad-boxsize)/2
FIXER: lineno: 347:  (pad-boxsize)/2
FIXER: lineno: 347:  (pad-boxsize)/2
FIXER: lineno: 347:  (pad-boxsize)/2
FIXER: lineno: 363:  1.0/nsym
FILENAME:  ./programs/e2initialmodel_hisym.py
FIXER: lineno: 96:  (boxsize-padsize)/2
FIXER: lineno: 96:  (boxsize-padsize)/2
FIXER: lineno: 140:  (padsize-boxsize)/2
FIXER: lineno: 140:  (padsize-boxsize)/2
FIXER: lineno: 140:  (padsize-boxsize)/2
FIXER: lineno: 197:  len(allbest)/3
FILENAME:  ./programs/e2make3d.py
FIXER: lineno: 216:  (start["nx"]-padvol[0])/2
FIXER: lineno: 216:  (start["ny"]-padvol[1])/2
FIXER: lineno: 216:  (start["nz"]-padvol[2])/2
FIXER: lineno: 227:  (output["nx"]-outsize[0])/2
FIXER: lineno: 227:  (output["ny"]-outsize[1])/2
FIXER: lineno: 227:  (output["nz"]-outsize[2])/2
FIXER: lineno: 383:  (ret.get_xsize()-pad[0])/2
FIXER: lineno: 383:  (ret.get_ysize()-pad[1])/2
FIXER: lineno: 506:  sum(sub)/len(sub)
FIXER: lineno: 508:  squal[i][1]/squal[i][2]
FIXER: lineno: 509:  squal[i][1]/squal[i][2]
FIXER: lineno: 532:  sum(qlist)/len(qlist)
FIXER: lineno: 533:  sum([i*i for i in qlist])/len(qlist)
FILENAME:  ./programs/e2make3dpar.py
FIXER: lineno: 239:  (nx-padvol[0])/2
FIXER: lineno: 239:  (ny-padvol[1])/2
FIXER: lineno: 239:  (nslice-padvol[2])/2
FIXER: lineno: 280:  (output["nx"]-outsize[0])/2
FIXER: lineno: 280:  (output["ny"]-outsize[1])/2
FIXER: lineno: 280:  (output["nz"]-outsize[2])/2
FIXER: lineno: 413:  1.0/(elem["weight"]+.00001)
FIXER: lineno: 449:  (ret.get_xsize()-pad[0])/2
FIXER: lineno: 449:  (ret.get_ysize()-pad[1])/2
FIXER: lineno: 463:  max(pad)/2.0
FIXER: lineno: 465:  fillangle/astep
FIXER: lineno: 473:  fillangle/(den-1)
FIXER: lineno: 507:  -fillangle/2.0
FIXER: lineno: 507:  fillangle/2.0
FIXER: lineno: 508:  -fillangle/2.0
FIXER: lineno: 508:  fillangle/2.0
FIXER: lineno: 509:  fillangle/4.0
FIXER: lineno: 509:  -(dalt**2+daz**2)/(fillangle/4.0)**2
FILENAME:  ./programs/e2markbadparticles.py
FILENAME:  ./programs/e2maskbyclass.py
FIXER: lineno: 103:  nx/16
FILENAME:  ./programs/e2match.py
FIXER: lineno: 277:   float( targetApix )/float(img2processApix)
FIXER: lineno: 346:   float( targetApix )/float(img2processApix)
FIXER: lineno: 383:   float( targetApix )/float(img2processApix)
FIXER: lineno: 392:   round(float( img2processApix ),4)/round(float( targetApix),4)
FIXER: lineno: 520:   1.0/float(options.sharpfiltres)
FIXER: lineno: 523:   float(ref_box * ref_apix) / npixels
FIXER: lineno: 527:   img2processBox/2
FIXER: lineno: 529:   img2processBox/2
FILENAME:  ./programs/e2modeleval.py
FIXER: lineno: 61:  (float(line[30:38].strip())-inputmrc["origin_x"])/apix
FIXER: lineno: 62:  (float(line[38:46].strip())-inputmrc["origin_y"])/apix
FIXER: lineno: 63:  (float(line[46:54].strip())-inputmrc["origin_z"])/apix
FIXER: lineno: 84:  max_length/resDefs[resID[index]]
FILENAME:  ./programs/e2montecarlorecon.py
FIXER: lineno: 207:  -de/temp
FIXER: lineno: 236:   (math.cos(currentalt) + 1)/2
FIXER: lineno: 237:    math.acos(math.cos(v*math.pi))/math.pi
FIXER: lineno: 265:  -de/temp
FILENAME:  ./programs/e2motion.py
FIXER: lineno: 485:  s/len(self.particles)
FIXER: lineno: 489:  len(self.particles)/10
FIXER: lineno: 504:  (self.particles[n2use-1][0]-self.ptclmean)/self.ptclsigma
FIXER: lineno: 523:  (self.particles[n2use][0]-self.ptclmean)/self.ptclsigma
FIXER: lineno: 776:  base/100.0
FIXER: lineno: 777:  0.5/(blur+.01)
FIXER: lineno: 893:  0.5/(blur+.01)
FIXER: lineno: 1031:  len(tosort)/nclasses
FILENAME:  ./programs/e2msa.py
FIXER: lineno: 105:  ny/2
FIXER: lineno: 141:  (EMUtil.get_image_count(images)-step[0])/step[1]
FIXER: lineno: 154:  1.0/float(n)
FIXER: lineno: 213:  (EMUtil.get_image_count(images)-step[0])/step[1]
FIXER: lineno: 224:  1.0/float(n)
FILENAME:  ./programs/e2parallel.py
FIXER: lineno: 361:  task.progtime[1]/5
FILENAME:  ./programs/e2pathwalker.py
FIXER: lineno: 89:  v1[0]/lengthV
FIXER: lineno: 89:  v1[1]/lengthV
FIXER: lineno: 89:  v1[2]/lengthV
FIXER: lineno: 672:   float(rmax) / float(len(r2))
FIXER: lineno: 675:   float(correctbonds) / len(path)
FIXER: lineno: 716:  (x[1]-x[0])/midp
FIXER: lineno: 733:  np[0]/self.apix_x
FIXER: lineno: 733:  SX/2
FIXER: lineno: 733:  np[1]/self.apix_y
FIXER: lineno: 733:  SY/2
FIXER: lineno: 733:  np[2]/self.apix_z
FIXER: lineno: 733:  SZ/2
FIXER: lineno: 740:  mpt/count
FIXER: lineno: 743:  self.mapthresh/(mpt+.0001)
FIXER: lineno: 745:  self.mapthresh/(mpt+.0001)
FIXER: lineno: 872:  180/math.pi
FIXER: lineno: 881:  xp1[0]/lengthxp1
FIXER: lineno: 881:   xp1[1]/lengthxp1
FIXER: lineno: 881:   xp1[2]/lengthxp1
FIXER: lineno: 887:  xp2[0]/lengthxp2
FIXER: lineno: 887:   xp2[1]/lengthxp2
FIXER: lineno: 887:   xp2[2]/lengthxp2
FIXER: lineno: 895:  180/math.pi
FIXER: lineno: 930:  sum((i**2 for i in list(distances.values()))) / len(distances)
FILENAME:  ./programs/e2pdb2mrc.py
FIXER: lineno: 245:  mass/1000
FIXER: lineno: 246:  aavg[0]/natm
FIXER: lineno: 246:  aavg[1]/natm
FIXER: lineno: 246:  aavg[2]/natm
FIXER: lineno: 267:  options.omit/100.
FIXER: lineno: 280:  p.shape[0]/3
FIXER: lineno: 295:  p.shape[0]/3
FIXER: lineno: 410:  mass/1000
FIXER: lineno: 411:  aavg[0]/natm
FIXER: lineno: 411:  aavg[1]/natm
FIXER: lineno: 411:  aavg[2]/natm
FIXER: lineno: 443:  (amax[0]-amin[0])/apix
FIXER: lineno: 444:  (amax[1]-amin[1])/apix
FIXER: lineno: 445:  (amax[2]-amin[2])/apix
FIXER: lineno: 456:   aavg[i]/float(natm)
FIXER: lineno: 458:   outbox[0]/2
FIXER: lineno: 458:   (amax[0]-amin[0])/(2*apix)
FIXER: lineno: 459:   outbox[1]/2
FIXER: lineno: 459:   (amax[1]-amin[1])/(2*apix)
FIXER: lineno: 460:   outbox[2]/2
FIXER: lineno: 460:   (amax[2]-amin[2])/(2*apix)
FIXER: lineno: 470:  (a[1]-aavg[0])/apix
FIXER: lineno: 470:  outbox[0]/2
FIXER: lineno: 470:  (a[2]-aavg[1])/apix
FIXER: lineno: 470:  outbox[1]/2
FIXER: lineno: 470:  (a[3]-aavg[2])/apix
FIXER: lineno: 470:  outbox[2]/2
FIXER: lineno: 470:  res/(pi*12.0*apix)
FIXER: lineno: 471:  a[1]/apix
FIXER: lineno: 471:  outbox[0]/2
FIXER: lineno: 471:  a[2]/apix
FIXER: lineno: 471:  outbox[1]/2
FIXER: lineno: 471:  a[3]/apix
FIXER: lineno: 471:  outbox[2]/2
FIXER: lineno: 471:  res/(pi*12.0*apix)
FILENAME:  ./programs/e2pdbviewer.py
FILENAME:  ./programs/e2plotEulers.py
FILENAME:  ./programs/e2plotFSC.py
FILENAME:  ./programs/e2preferences.py
FILENAME:  ./programs/e2proc2d.py
FIXER: lineno: 106:   1.0 / max(nx-1, 1)
FIXER: lineno: 107:   1.0 / max(ny-1, 1)
FIXER: lineno: 108:   1.0 / max(nz-1, 1)
FIXER: lineno: 704:  d["ny"]/2
FIXER: lineno: 704:  d["ny"]/2
FIXER: lineno: 706:  d["nx"]/5
FIXER: lineno: 708:  d["ny"]/2
FIXER: lineno: 709:   sum(r[lopix:hipix])/(hipix-lopix)
FIXER: lineno: 710:   sum(r[hipix+1:-1])/(len(r)-hipix-2)
FIXER: lineno: 713:   lo/hi
FIXER: lineno: 732:  sfcurve1[j] / sfcurve2[j]
FIXER: lineno: 758:  1/amount
FIXER: lineno: 790:   nx/2
FIXER: lineno: 791:   ny/2
FIXER: lineno: 799:  clipx/2
FIXER: lineno: 799:  clipy/2
FIXER: lineno: 859:   options.selfcl[0] / 2
FIXER: lineno: 908:  ny/2
FIXER: lineno: 909:  i/(dataf["nx"]*dataf["ny"]*dataf["nz"])
FIXER: lineno: 912:   1.0 / (d["apix_x"] * ny)
FIXER: lineno: 1140:  1.0 / sqrt(n1 - n0 + 1)
FIXER: lineno: 1146:   1.0 / (apix * 2.0 * ny)
FIXER: lineno: 1165:  boxsize/2
FIXER: lineno: 1165:  boxsize/2
FILENAME:  ./programs/e2proc2dmulti.py
FIXER: lineno: 126:  d["nx"]/2
FIXER: lineno: 213:  sfcurve1[j] / sfcurve2[j]
FIXER: lineno: 244:  nx/2
FIXER: lineno: 245:  ny/2
FIXER: lineno: 251:  clipx/2
FIXER: lineno: 251:  clipy/2
FIXER: lineno: 280:   options.selfcl[0] / 2
FILENAME:  ./programs/e2proc2dpar.py
FIXER: lineno: 116:  N/(options.threads-2)
FIXER: lineno: 120:  N/npt
FIXER: lineno: 236:  1/amount
FIXER: lineno: 268:   nx/2
FIXER: lineno: 269:   ny/2
FIXER: lineno: 277:  clipx/2
FIXER: lineno: 277:  clipy/2
FIXER: lineno: 323:   options.selfcl[0] / 2
FILENAME:  ./programs/e2proc3d.py
FIXER: lineno: 63:  ny/2
FIXER: lineno: 64:  i/(dataf["nx"]*dataf["ny"]*dataf["nz"])
FIXER: lineno: 65:   1.0/(apix*ny)
FIXER: lineno: 200:  nx/shrink
FIXER: lineno: 201:  ny/shrink
FIXER: lineno: 202:  nz/shrink
FIXER: lineno: 203:  (nnx*nny*nnz*4+shrink*4*ny*shrink*4)/1.0e9
FIXER: lineno: 216:  y/shrink
FIXER: lineno: 216:  z/shrink
FIXER: lineno: 294:  img["nx"]/2
FIXER: lineno: 315:   (n1-n0)/n2
FIXER: lineno: 369:   x/2
FIXER: lineno: 370:   y/2
FIXER: lineno: 371:   z/2
FIXER: lineno: 431:   len(fsc)/3
FIXER: lineno: 434:  x/apix
FIXER: lineno: 441:  ny/2
FIXER: lineno: 442:  i/(dataf["nx"]*dataf["ny"]*dataf["nz"])
FIXER: lineno: 443:   1.0/(apix*ny)
FIXER: lineno: 470:  i/(apix*ny)
FIXER: lineno: 500:  80.0/data["ny"]
FIXER: lineno: 501:  data["ny"]/20
FIXER: lineno: 542:  360.0/nsym
FIXER: lineno: 543:  2.0/data["nx"]
FIXER: lineno: 544:  angrange/astep
FIXER: lineno: 562:  best[1]/2.0
FIXER: lineno: 563:  best[1]/2.0
FIXER: lineno: 656:   x/2
FIXER: lineno: 657:   y/2
FIXER: lineno: 658:   z/2
FIXER: lineno: 663:   x/2
FIXER: lineno: 664:   y/2
FIXER: lineno: 665:   z/2
FIXER: lineno: 671:   x/2
FIXER: lineno: 672:   y/2
FIXER: lineno: 673:   z/2
FIXER: lineno: 676:  nx/2
FIXER: lineno: 676:  ny/2
FIXER: lineno: 676:  nz/2
FILENAME:  ./programs/e2proc3d_huge.py
FILENAME:  ./programs/e2procheader.py
FILENAME:  ./programs/e2procjson.py
FILENAME:  ./programs/e2proclst.py
FIXER: lineno: 289:  1.0/(200.0*ctf.dsbg)
FIXER: lineno: 290:  1.0/(20.0*ctf.dsbg)
FIXER: lineno: 291:  1.0/(10.0*ctf.dsbg)
FIXER: lineno: 292:  1.0/(4.0*ctf.dsbg)
FIXER: lineno: 293:  sum(ctf.snr[r1:r2])/(r2-r1)
FIXER: lineno: 294:  sum(ctf.snr[r3:r4])/(r4-r3)
FILENAME:  ./programs/e2procpdb.py
FIXER: lineno: 254:   mass / 1000.0
FIXER: lineno: 283:   m / (float(animorph[0]) - 1.0)
FIXER: lineno: 303:   1.0 / ((x - v[0]) ** 4 + (y - v[1]) ** 4 + (z - v[2]) ** 4)
FILENAME:  ./programs/e2proctxt.py
FILENAME:  ./programs/e2procxml.py
FILENAME:  ./programs/e2project3d.py
FIXER: lineno: 44:   math.pi / 180.0
FIXER: lineno: 45:   180.0 / math.pi
FIXER: lineno: 108:   len(self.eulers)/num_tasks
FIXER: lineno: 156:  len(tids)/float(num_tasks)
FIXER: lineno: 185:  snz/100.0
FIXER: lineno: 219:  5.0/projection["nx"]
FILENAME:  ./programs/e2projectmanager.py
FIXER: lineno: 1103:  (len(eman2item)-1)/3
FILENAME:  ./programs/e2projectupdate21.py
FILENAME:  ./programs/e2ptcltrace.py
FILENAME:  ./programs/e2ptclvsmap.py
FIXER: lineno: 101:  img3["apix_x"]/img1["apix_x"]
FIXER: lineno: 105:  float(xsize)/xsize3d
FIXER: lineno: 166:  ptcl["ny"]/2.5
FILENAME:  ./programs/e2rawdata.py
FIXER: lineno: 89:  i/float(len(args))
FIXER: lineno: 156:  1.0/(options.apix*box)
FIXER: lineno: 169:  1.0/(nbx*box**2)
FIXER: lineno: 174:  ffta.get_ysize()/2
FIXER: lineno: 190:  box/2
FIXER: lineno: 190:  box/2
FIXER: lineno: 207:  ctf.zero(0)/(ds*2)
FIXER: lineno: 215:  ctf.zero(i)/ds
FILENAME:  ./programs/e2rct.py
FIXER: lineno: 128:   tiltimgs[0].get_attr('nx')/4
FIXER: lineno: 187:  options.aligngran/2
FIXER: lineno: 223:   particles[0].get_attr("nx")/2
FILENAME:  ./programs/e2RCTboxer.py
FIXER: lineno: 171:   self.options.boxsize/2
FIXER: lineno: 171:   self.options.boxsize/2
FIXER: lineno: 338:  self.moving_box_data[2]/self.numlists
FIXER: lineno: 353:  lc[0]/self.numlists
FIXER: lineno: 503:   box_size/2
FIXER: lineno: 503:   box_size/2
FIXER: lineno: 684:  box_size/2
FIXER: lineno: 684:  box_size/2
FIXER: lineno: 704:  box_size/2
FIXER: lineno: 704:  box_size/2
FIXER: lineno: 704:  box_size/2
FIXER: lineno: 704:  box_size/2
FIXER: lineno: 710:  box_size/2
FIXER: lineno: 710:  box_size/2
FIXER: lineno: 714:  box_size/2
FIXER: lineno: 714:  box_size/2
FIXER: lineno: 714:  box_size/2
FIXER: lineno: 714:  box_size/2
FILENAME:  ./programs/e2refine.py
FILENAME:  ./programs/e2refine2d.py
FIXER: lineno: 133:  tmp.get_xsize()/3
FIXER: lineno: 196:  n/nmax
FIXER: lineno: 203:  proc_tally/total_procs
FIXER: lineno: 209:  proc_tally/total_procs
FIXER: lineno: 216:  proc_tally/total_procs
FIXER: lineno: 224:  proc_tally/total_procs
FIXER: lineno: 234:  proc_tally/total_procs
FIXER: lineno: 250:  proc_tally/total_procs
FIXER: lineno: 254:  proc_tally/total_procs
FIXER: lineno: 272:  options.ncls/3
FIXER: lineno: 281:  proc_tally/total_procs
FIXER: lineno: 291:  proc_tally/total_procs
FIXER: lineno: 300:  proc_tally/total_procs
FIXER: lineno: 309:  proc_tally/total_procs
FILENAME:  ./programs/e2refine2d_bispec.py
FIXER: lineno: 181:  proc_tally/total_procs
FIXER: lineno: 187:  proc_tally/total_procs
FIXER: lineno: 193:  proc_tally/total_procs
FIXER: lineno: 203:  proc_tally/total_procs
FIXER: lineno: 212:  proc_tally/total_procs
FIXER: lineno: 217:  proc_tally/total_procs
FIXER: lineno: 222:  proc_tally/total_procs
FIXER: lineno: 230:  proc_tally/total_procs
FILENAME:  ./programs/e2refine_easy.py
FIXER: lineno: 294:  apix1/apix3
FIXER: lineno: 297:  img3["apix_x"]/img1["apix_x"]
FIXER: lineno: 301:  float(xsize)/xsize3d
FIXER: lineno: 359:  1.0/(randomres)
FIXER: lineno: 360:  1.0/(randomres)
FIXER: lineno: 480:  4300/effbox
FIXER: lineno: 480:  89.99/ceil(90.0*9.0/((options.speed+3.0)*sqrt(4300/effbox)))
FIXER: lineno: 504:  4300/nx
FIXER: lineno: 504:  89.99/ceil(90.0*9.0/((options.speed+3.0)*sqrt(4300/nx)))
FIXER: lineno: 519:  4300/nx
FIXER: lineno: 519:  89.99/ceil(90.0*9.0/((options.speed+3.0)*sqrt(4300/nx)))
FIXER: lineno: 529:  90.0/astep
FIXER: lineno: 563:  nx/4
FIXER: lineno: 564:  nx/2
FIXER: lineno: 726:  1.0/(2.0*apix)
FIXER: lineno: 767:  progress/total_procs
FIXER: lineno: 794:  progress/total_procs
FIXER: lineno: 826:  progress/total_procs
FIXER: lineno: 837:  progress/total_procs
FIXER: lineno: 874:  progress/total_procs
FIXER: lineno: 1018:  (0.143-d[1][si])/(d[1][si-1]-d[1][si])
FIXER: lineno: 1021:  1.0/lastres
FIXER: lineno: 1022:  (lastres*4+d[0][-1])/5.0
FIXER: lineno: 1047:  1.0/lastres
FIXER: lineno: 1080:  (0.143-d[1][si])/(d[1][si-1]-d[1][si])
FIXER: lineno: 1083:  1.0/lastres[-1]
FIXER: lineno: 1084:  (lastres[-1]*4+d[0][-1])/5.0
FIXER: lineno: 1108:  1.0/lastres[0]
FIXER: lineno: 1108:  1.0/lastres[1]
FIXER: lineno: 1108:  1.0/lastres[2]
FIXER: lineno: 1111:  progress/total_procs
FIXER: lineno: 1120:   1.0/lastres[1]
FIXER: lineno: 1123:  1.0/lastres[1]
FIXER: lineno: 1124:   1.0/lastres[1]
FIXER: lineno: 1127:  1.0/lastres[1]
FIXER: lineno: 1127:  1.0/lastres[1]
FIXER: lineno: 1138:  1.0/lastres[1]
FIXER: lineno: 1143:  1.0/lastres[0]
FIXER: lineno: 1143:  1.0/lastres[1]
FILENAME:  ./programs/e2refine_evenodd.py
FIXER: lineno: 162:  1.0/options.randomres
FIXER: lineno: 163:  1.0/options.randomres
FILENAME:  ./programs/e2refine_postprocess.py
FIXER: lineno: 86:  1.15/max(10.0,options.restarget)
FIXER: lineno: 159:  1.0/noisecutoff
FIXER: lineno: 172:  1.0/options.restarget
FIXER: lineno: 216:  1.0/(options.restarget*1.5)
FIXER: lineno: 217:  nx/2
FIXER: lineno: 219:  nx/2.2
FIXER: lineno: 252:  1.0/(options.restarget*1.5)
FIXER: lineno: 264:  1.0/(options.restarget*1.5)
FIXER: lineno: 325:  1.0/options.restarget
FIXER: lineno: 331:  1.0/noisecutoff
FIXER: lineno: 338:  1.0/options.restarget
FIXER: lineno: 339:  1.0/options.restarget
FIXER: lineno: 344:  1.0/options.restarget
FIXER: lineno: 348:  1.0/options.restarget
FIXER: lineno: 362:  1.0/options.restarget
FIXER: lineno: 382:  1.0/options.restarget
FIXER: lineno: 383:  1.0/options.restarget
FIXER: lineno: 387:  1.0/options.restarget
FIXER: lineno: 391:  1.0/options.restarget
FIXER: lineno: 405:  1.0/options.restarget
FILENAME:  ./programs/e2refine_split.py
FIXER: lineno: 195:  float(len(taskids))/len(alltaskids)
FIXER: lineno: 211:  -(pad-boxsize)/2
FIXER: lineno: 211:  -(pad-boxsize)/2
FIXER: lineno: 215:  -(pad-boxsize)/2
FIXER: lineno: 215:  -(pad-boxsize)/2
FIXER: lineno: 236:  -(pad-boxsize)/2
FIXER: lineno: 236:  -(pad-boxsize)/2
FIXER: lineno: 241:  -(pad-boxsize)/2
FIXER: lineno: 241:  -(pad-boxsize)/2
FIXER: lineno: 338:  (pad-boxsize)/2
FIXER: lineno: 338:  (pad-boxsize)/2
FIXER: lineno: 338:  (pad-boxsize)/2
FIXER: lineno: 383:  1.0/targetres
FIXER: lineno: 386:  1.0/targetres
FIXER: lineno: 473:  sum(dots)/len(dots)
FILENAME:  ./programs/e2refinefromfrealign.py
FIXER: lineno: 156:  phi_sum/len(ptcl_dict_in)
FIXER: lineno: 156:   theta_sum/len(ptcl_dict_in)
FIXER: lineno: 156:   psi_sum/len(ptcl_dict_in)
FIXER: lineno: 156:   x_sum/len(ptcl_dict_in)
FIXER: lineno: 156:   y_sum/len(ptcl_dict_in)
FILENAME:  ./programs/e2refinemulti.py
FIXER: lineno: 338:  img3["apix_x"]/apix
FIXER: lineno: 341:  float(xsize)/xsize3d
FIXER: lineno: 391:  4300/effbox
FIXER: lineno: 391:  89.99/ceil(90.0*9.0/((options.speed+3.0)*sqrt(4300/effbox)))
FIXER: lineno: 415:  4300/nx
FIXER: lineno: 415:  89.99/ceil(90.0*9.0/((options.speed+3.0)*sqrt(4300/nx)))
FIXER: lineno: 430:  4300/nx
FIXER: lineno: 430:  89.99/ceil(90.0*9.0/((options.speed+3.0)*sqrt(4300/nx)))
FIXER: lineno: 568:  progress/total_procs
FIXER: lineno: 600:  progress/total_procs
FIXER: lineno: 607:  progress/total_procs
FIXER: lineno: 640:  progress/total_procs
FIXER: lineno: 704:   len(fm)/3
FIXER: lineno: 707:  x/apix
FIXER: lineno: 722:  progress/total_procs
FILENAME:  ./programs/e2refinemultinoali.py
FIXER: lineno: 378:  len(corr[i])/len(models)
FIXER: lineno: 392:  float(sum(cls==k))/float(npt)
FILENAME:  ./programs/e2refinetofrealign.py
FIXER: lineno: 197:   APERPIX / ctf_dict['apix']
FIXER: lineno: 251:  1/float(options.randomizemodel)
FIXER: lineno: 273:  ctf_dict['ampcont']/100
FILENAME:  ./programs/e2refinetorelion2d.py
FIXER: lineno: 190:   float(db_set['ctf'].to_dict()['ampcont']) / 10
FILENAME:  ./programs/e2refinetorelion3d.py
FIXER: lineno: 219:   float(db_set['ctf'].to_dict()['ampcont']) / 10
FIXER: lineno: 251:  temp['ctf'].to_dict()['ampcont']/100
FIXER: lineno: 280:  temp['ctf'].to_dict()['ampcont']/100
FIXER: lineno: 398:  1/float(options.randomizemodel)
FILENAME:  ./programs/e2refinevariance.py
FIXER: lineno: 161:  j/2
FIXER: lineno: 163:  (j-1)/2
FIXER: lineno: 190:  (mod*2.0+1)/nprogress
FIXER: lineno: 208:  (mod*2.0+2.0)/nprogress
FIXER: lineno: 245:  1.0/options.reslimit
FIXER: lineno: 261:  1.0/options.nmodels
FIXER: lineno: 265:  1.0/options.nmodels
FIXER: lineno: 278:  nx/2
FIXER: lineno: 278:  ny/2
FIXER: lineno: 292:  nx/2
FIXER: lineno: 292:  ny/2
FIXER: lineno: 292:  nz/4
FIXER: lineno: 298:  nx/2
FIXER: lineno: 298:  ny/2
FIXER: lineno: 298:  nz/4
FIXER: lineno: 298:  nx/2
FIXER: lineno: 298:  ny/2
FIXER: lineno: 298:  nz/4
FIXER: lineno: 298:  (tv-1.0)/(weight[nx/2,ny/2,nz/4]-1.0)
FIXER: lineno: 317:  nprogress/nprogress
FILENAME:  ./programs/e2refmerge.py
FILENAME:  ./programs/e2reliontoeman.py
FIXER: lineno: 132:  (dfu+dfv)/20000.0
FIXER: lineno: 132:  (dfu-dfv)/10000.0
FILENAME:  ./programs/e2remoted.py
FILENAME:  ./programs/e2resolution.py
FIXER: lineno: 101:  mask.get_xsize()/6
FIXER: lineno: 101:  mask.get_xsize()/3
FIXER: lineno: 114:  dataf.get_ysize()/2
FIXER: lineno: 116:  noisef.get_ysize()/2
FIXER: lineno: 120:  i/(len(datapow)*options.apix*2.0)
FIXER: lineno: 122:  i/(len(datapow)*data["apix_x"]*2.0)
FIXER: lineno: 129:  datapow[i]/noisepow[i]
FIXER: lineno: 133:  datapow[int(len(noisepow)*.9)]/noisepow[int(len(noisepow)*.9)]
FIXER: lineno: 145:  (datapow[i]-noisepow[i])/noisepow[i]
FIXER: lineno: 149:  i/(2.0+i)
FILENAME:  ./programs/e2runfrealign.py
FILENAME:  ./programs/e2runresmap.py
FILENAME:  ./programs/e2scannereval.py
FIXER: lineno: 48:  pi/180.0
FIXER: lineno: 92:  nx/int(options.box)
FIXER: lineno: 94:  ny/int(options.box)
FIXER: lineno: 97:  nx/int(1.5*options.box)
FIXER: lineno: 98:  (nx%(options.box*3/2))/nbx
FIXER: lineno: 99:  ny/int(1.5*options.box)
FIXER: lineno: 100:  (ny%int(1.5*options.box))/nby
FIXER: lineno: 104:  (sepx-options.box)/2
FIXER: lineno: 104:  (sepy-options.box)/2
FIXER: lineno: 112:  (sepx-options.box)/2
FIXER: lineno: 112:  (sepy-options.box)/2
FILENAME:  ./programs/e2scp.py
FILENAME:  ./programs/e2segment3d.py
FIXER: lineno: 158:  sz/2.0
FIXER: lineno: 165:  sz/2.0
FIXER: lineno: 197:  sx/2
FIXER: lineno: 197:  sy/2
FIXER: lineno: 197:  sz/2
FIXER: lineno: 217:  float(atline[30:38].strip())/ax
FIXER: lineno: 217:  sx/2
FIXER: lineno: 217:   float(atline[38:46].strip())/ay
FIXER: lineno: 217:  sy/2
FIXER: lineno: 217:   float(atline[46:54].strip())/az
FIXER: lineno: 217:  sz/2
FILENAME:  ./programs/e2seq2pdb.py
FILENAME:  ./programs/e2simmx.py
FIXER: lineno: 70:  n/xsub
FIXER: lineno: 74:  float(x)/xsub
FIXER: lineno: 74:  float(y)/ysub
FIXER: lineno: 81:  x/candidates[0][1][0]
FIXER: lineno: 81:  y/candidates[0][1][1]
FIXER: lineno: 179:   self.clen/col_div
FIXER: lineno: 180:   self.rlen/row_div
FIXER: lineno: 291:  len(self.tids)/float(len(blocks))
FIXER: lineno: 450:  cbli/float(len(refs))
FIXER: lineno: 770:  float(r-rrange[0])/(rrange[1]-rrange[0])
FIXER: lineno: 854:  ysize/options.shrink
FIXER: lineno: 856:  ysize/float(good_size(newsize)+.1)
FILENAME:  ./programs/e2simmx2stage.py
FIXER: lineno: 167:  1.0/len(i)
FILENAME:  ./programs/e2simmxxplor.py
FIXER: lineno: 166:  1.0/allcmp[i]
FIXER: lineno: 264:  len(frc)/3
FIXER: lineno: 265:  i/apix
FIXER: lineno: 266:  i/apix
FIXER: lineno: 270:  1.0/(ctf.apix*particle["ny"])
FIXER: lineno: 272:  particle["ny"]/2
FILENAME:  ./programs/e2skelpath.py
FIXER: lineno: 78:  len(mappoints)/2
FIXER: lineno: 79:  len(mappoints)/2
FIXER: lineno: 80:  len(mappoints)/2
FIXER: lineno: 105:  i[0]/pts
FIXER: lineno: 105:  i[1]/pts
FIXER: lineno: 124:  float(result.group('x1'))/apix
FIXER: lineno: 124:  float(result.group('y1'))/apix
FIXER: lineno: 124:  float(result.group('z1'))/apix
FIXER: lineno: 124:  float(result.group('x2'))/apix
FIXER: lineno: 124:  float(result.group('y2'))/apix
FIXER: lineno: 124:  float(result.group('z2'))/apix
FIXER: lineno: 228:  len(mappoints)/2
FILENAME:  ./programs/e2sparxtoeman.py
FILENAME:  ./programs/e2speedtest.py
FIXER: lineno: 92:  pat.get_xsize()/2.0
FIXER: lineno: 104:  data[i].get_xsize()/2
FIXER: lineno: 115:  NTT/2
FIXER: lineno: 116:   NTT / 2
FIXER: lineno: 124:  NTT/2
FIXER: lineno: 133:  NTT/2
FIXER: lineno: 142:  NTT/2
FIXER: lineno: 151:  NTT/2
FIXER: lineno: 160:  NTT/2
FIXER: lineno: 172:  NTT/2
FIXER: lineno: 179:  SIZE/8
FIXER: lineno: 181:  SIZE/8
FIXER: lineno: 208:  2.3/tms.mean()
FIXER: lineno: 208:  2.3/tms.mean()
FIXER: lineno: 208:  2.3/(tms.mean()+tms.std())
FIXER: lineno: 208:  tms.mean()/(NTT-5.0)
FIXER: lineno: 208:  tms.std()/(NTT-5.0)
FIXER: lineno: 218:  2.3/tms.mean()
FIXER: lineno: 220:  2.3/tms.mean()
FILENAME:  ./programs/e2spt_align.py
FIXER: lineno: 107:  1.0/options.goldstandard
FIXER: lineno: 108:  1.0/options.goldstandard
FILENAME:  ./programs/e2spt_autoboxer.py
FIXER: lineno: 1004:   int(boxsize)/4
FIXER: lineno: 1086:   int(box)/2
FIXER: lineno: 1090:   int(box)/2
FIXER: lineno: 1104:   height/2
FIXER: lineno: 1108:  radius/2
FIXER: lineno: 1137:   vol['nx']/2
FIXER: lineno: 1138:   vol['ny']/2
FIXER: lineno: 1139:   vol['nz']/2
FIXER: lineno: 1141:   (2*volxc - size)/2
FIXER: lineno: 1141:   (2*volyc - size)/2
FIXER: lineno: 1141:   (2*volzc - size)/2
FIXER: lineno: 1168:   tomovol / cubevol
FIXER: lineno: 1175:   cubesize/2
FIXER: lineno: 1205:   boxsize/2
FIXER: lineno: 1205:   tomox/(cubesize - boxsize/2)
FIXER: lineno: 1207:   cubesize/2
FIXER: lineno: 1207:   boxsize/2
FIXER: lineno: 1209:  cubesize/2
FIXER: lineno: 1212:   boxsize/2
FIXER: lineno: 1213:   cubesize/2
FIXER: lineno: 1219:   boxsize/2
FIXER: lineno: 1219:   tomoy/(cubesize - boxsize/2)
FIXER: lineno: 1221:   cubesize/2
FIXER: lineno: 1221:   boxsize/2
FIXER: lineno: 1223:  cubesize/2
FIXER: lineno: 1226:   boxsize/2
FIXER: lineno: 1227:   cubesize/2
FIXER: lineno: 1266:   templatesphavg['nx']/4
FIXER: lineno: 1270:   options.boxsize/4.0
FIXER: lineno: 1272:  4.0/3.0
FIXER: lineno: 1280:   cubevol/ptclvol
FIXER: lineno: 1282:   nptclsmax/options.dilutionfactor
FIXER: lineno: 1308:   tomohdr['nx']/2
FIXER: lineno: 1309:   tomohdr['ny']/2
FIXER: lineno: 1310:   tomohdr['nz']/2
FIXER: lineno: 1316:   tomoz/2
FIXER: lineno: 1435:   cubesize/2
FIXER: lineno: 1435:   cubesize/2
FIXER: lineno: 1435:   cubesize/2
FIXER: lineno: 1435:   cubesize/2
FIXER: lineno: 1536:   cubesize/2
FIXER: lineno: 1537:   cubesize/2
FIXER: lineno: 1538:   cubesize/2
FIXER: lineno: 1566:   (len(data)*(len(data)-1))/2
FIXER: lineno: 1588:   numpy.dot(dvector,evector) / ( numpy.dot(evector,evector) * numpy.dot(dvector,dvector) )
FIXER: lineno: 1646:  1.0/3.0
FIXER: lineno: 1648:   (3.5*std)/cuberoot
FIXER: lineno: 1651:   (max(scores) - min(scores)) / width
FIXER: lineno: 1914:   (2*x - size)/2
FIXER: lineno: 1914:  (2*y- size)/2
FIXER: lineno: 1914:   (2*z-size)/2
FIXER: lineno: 2094:  (2*x- options.boxsize)/2
FIXER: lineno: 2094:  (2*y-options.boxsize)/2
FIXER: lineno: 2094:   (2*z-options.boxsize)/2
FIXER: lineno: 2156:   bxf/2
FIXER: lineno: 2157:   bxf/2
FIXER: lineno: 2186:   bxf/2
FIXER: lineno: 2207:  (2*x- options.boxsize)/2
FIXER: lineno: 2207:  (2*y-options.boxsize)/2
FIXER: lineno: 2207:   (2*z-options.boxsize)/2
FIXER: lineno: 2271:  (2*x- options.boxsize)/2
FIXER: lineno: 2271:  (2*y-options.boxsize)/2
FIXER: lineno: 2271:   (2*z-options.boxsize)/2
FIXER: lineno: 2299:  eb/2.0
FIXER: lineno: 2299:  (eb/2.0 - maxccfpmxC[0])/2.0
FIXER: lineno: 2300:  eb/2.0
FIXER: lineno: 2300:  (eb/2.0 - maxccfpmyC[1])/2.0
FIXER: lineno: 2329:  eb/2.0
FIXER: lineno: 2329:  (eb/2.0 - maxccfpmzCside[1])/2.0
FIXER: lineno: 2337:   eb/8.0
FIXER: lineno: 2337:   eb/8.0
FIXER: lineno: 2352:  (2*newx- options.boxsize)/2
FIXER: lineno: 2352:  (2*newy-options.boxsize)/2
FIXER: lineno: 2352:   (2*newz-options.boxsize)/2
FILENAME:  ./programs/e2spt_average.py
FILENAME:  ./programs/e2spt_average_multi.py
FIXER: lineno: 26:  1.0/maxres
FIXER: lineno: 122:  1.0/options.maxres
FILENAME:  ./programs/e2spt_binarytree.py
FIXER: lineno: 495:  nseed/(2**i)
FIXER: lineno: 502:  j/2
FIXER: lineno: 502:  j/2
FIXER: lineno: 506:  j/2
FIXER: lineno: 506:  j/2
FILENAME:  ./programs/e2spt_boxer.py
FIXER: lineno: 421:  self.datasize[2]/2
FIXER: lineno: 445:  self.datasize[2]/2
FIXER: lineno: 465:  bs/2
FIXER: lineno: 465:  bz/2
FIXER: lineno: 465:  bs/2
FIXER: lineno: 471:  bs/2
FIXER: lineno: 471:  bz/2
FIXER: lineno: 471:  bs/2
FIXER: lineno: 480:  bs/2
FIXER: lineno: 480:  bs/2
FIXER: lineno: 480:  bz/2
FIXER: lineno: 482:  bs/2
FIXER: lineno: 482:  bs/2
FIXER: lineno: 482:  bz/2
FIXER: lineno: 647:  int(float(i))/self.shrink
FIXER: lineno: 715:  s/2
FIXER: lineno: 760:  self.datasize[0]/2
FIXER: lineno: 761:  self.datasize[1]/2
FIXER: lineno: 774:  bs/2
FIXER: lineno: 774:  bs/2
FIXER: lineno: 783:  bs/2
FIXER: lineno: 783:  bs/2
FIXER: lineno: 806:  self.nlayers()/2
FIXER: lineno: 806:  (self.nlayers()+1)/2
FIXER: lineno: 815:  1.0/self.wfilt.getValue()
FIXER: lineno: 822:  self.nlayers()/2
FIXER: lineno: 822:  (self.nlayers()+1)/2
FIXER: lineno: 828:  1.0/self.wfilt.getValue()
FIXER: lineno: 855:   bs/2
FIXER: lineno: 858:  bs/2
FIXER: lineno: 872:  self.nlayers()/2
FIXER: lineno: 872:  (self.nlayers()+1)/2
FIXER: lineno: 882:  1.0/self.wfilt.getValue()
FIXER: lineno: 911:  self.get_boxsize(box[5])/2
FIXER: lineno: 1005:  self.get_boxsize(box[5])/2
FIXER: lineno: 1135:  i/2
FIXER: lineno: 1232:  i/2
FIXER: lineno: 1265:  self.xzdown[0]/2
FIXER: lineno: 1272:  self.xzdown[0]/2
FIXER: lineno: 1313:  i/2
FIXER: lineno: 1574:  1.0/self.wfilt.getValue()
FIXER: lineno: 1840:  (2*x-options.boxsize)/2
FIXER: lineno: 1840:  (2*y-options.boxsize)/2
FIXER: lineno: 1840:   (2*z-options.boxsize)/2
FIXER: lineno: 1923:   options.boxsize/4.0
FILENAME:  ./programs/e2spt_classaverage.py
FIXER: lineno: 357:   options.subset / 2
FIXER: lineno: 364:   options.subset / 2
FIXER: lineno: 371:   options.subset / 2
FIXER: lineno: 1394:   ( sc - meanPeaksScoresCoarse ) / sigmaPeaksScoresCoarse
FIXER: lineno: 1468:   sum( classScoresList ) / len( classScoresList )
FIXER: lineno: 2100:   boxsize/2
FIXER: lineno: 2101:  halfbox/2.0
FIXER: lineno: 2102:  2.0/3.0
FIXER: lineno: 2103:  4.0/5.0
FIXER: lineno: 2169:   len( fsc )/3
FIXER: lineno: 2172:  x/apix
FIXER: lineno: 2238:    1.0/float( options.refrandphase )
FIXER: lineno: 3031:   options.radius / capix
FIXER: lineno: 3032:   options.radius / fapix
FIXER: lineno: 3034:    360.0/(2.0*math.pi*radPixC)
FIXER: lineno: 3040:   360.0/(2.0*math.pi*radPixF)
FIXER: lineno: 3044:   math.floor(fineStep*100.00)/100.00
FIXER: lineno: 3048:   math.ceil(rango*100.00)/100.00
FIXER: lineno: 3051:   math.floor(angularDistance*100.00)/100.00
FIXER: lineno: 3053:   angularDistanceRounded / 2.25
FIXER: lineno: 3062:   math.floor( coarseStep * 100.00 )/100.00
FIXER: lineno: 3074:   hdr['nx']/2.0
FIXER: lineno: 3101:   searchC / options.shrink
FIXER: lineno: 3272:  val/len(scores)
FIXER: lineno: 3273:  val2/len(scores)
FIXER: lineno: 3381:   W/X
FIXER: lineno: 3393:   score / maxscore
FIXER: lineno: 4210:   options.align[1]["transform"].get_trans()/float(options.shrinkfine)
FIXER: lineno: 4284:   options.shrink/float(options.shrinkfine)
FIXER: lineno: 4393:   options.falign[1]['delta']/2.0
FILENAME:  ./programs/e2spt_fftamp.py
FILENAME:  ./programs/e2spt_hac.py
FIXER: lineno: 321:   nptcl/options.groups
FIXER: lineno: 813:   float(nptcls)/float(options.clusters)
FIXER: lineno: 1530:   nptcls / int(classoptions['options'].groups)
FIXER: lineno: 1532:   ( nptcls * (nptcls - 1) )/ 2
FIXER: lineno: 1613:   len(xaxis)/10
FILENAME:  ./programs/e2spt_intrafsc.py
FIXER: lineno: 178:   len( fsc )/3
FIXER: lineno: 181:   x/apix
FIXER: lineno: 348:   vol['nx']/2
FIXER: lineno: 349:   vol['ny']/2
FIXER: lineno: 350:   vol['nz']/2
FIXER: lineno: 352:   (2*volxc - size)/2
FIXER: lineno: 352:   (2*volyc - size)/2
FIXER: lineno: 352:   (2*volzc - size)/2
FIXER: lineno: 361:   img['nx']/2
FIXER: lineno: 362:   img['ny']/2
FIXER: lineno: 365:   (2*imgxc - size)/2
FIXER: lineno: 365:   (2*imgyc - size)/2
FILENAME:  ./programs/e2spt_isr.py
FIXER: lineno: 351:   sum(fscores2d)/len(fscores2d)
FIXER: lineno: 355:    sum(ferrors)/len(ferrors)
FIXER: lineno: 418:   sum(iterscores2d)/len( iterscores2d )
FIXER: lineno: 444:   sum(itererrors)/len( itererrors )
FIXER: lineno: 473:   sum(iterfscs)/len( iterfscs )
FIXER: lineno: 500:   sum(iterscores3d)/len( iterscores3d )
FIXER: lineno: 526:   sum(iterfscs)/len( iterfscs )
FIXER: lineno: 556:   sum(iterscores3d)/len( iterscores3d )
FIXER: lineno: 682:   nx/2.0
FIXER: lineno: 683:   ny/2.0
FIXER: lineno: 701:   ( math.fabs(xerror) + math.fabs(yerror) )/2.0
FIXER: lineno: 727:   sum(txs)/len(txs)
FIXER: lineno: 728:   sum(tys)/len(tys)
FIXER: lineno: 729:   sum(drs)/len(drs)
FIXER: lineno: 820:   float(it)/float(options.iter)
FIXER: lineno: 823:  float(it)/float(options.iter)
FIXER: lineno: 878:   vol['nx']/2
FIXER: lineno: 879:   vol['ny']/2
FIXER: lineno: 880:   vol['nz']/2
FIXER: lineno: 882:   (2*volxc - sizex)/2
FIXER: lineno: 882:   (2*volyc - sizey)/2
FIXER: lineno: 882:   (2*volzc - sizez)/2
FIXER: lineno: 891:   img['nx']/2
FIXER: lineno: 892:   img['ny']/2
FIXER: lineno: 895:   (2*imgxc - size)/2
FIXER: lineno: 895:   (2*imgyc - size)/2
FIXER: lineno: 1118:   rec['nx']/2
FIXER: lineno: 1119:   rec['ny']/2
FIXER: lineno: 1120:   rec['nz']/2
FILENAME:  ./programs/e2spt_preproc.py
FIXER: lineno: 479:   vol['nx']/2
FIXER: lineno: 480:   vol['ny']/2
FIXER: lineno: 481:   vol['nz']/2
FIXER: lineno: 485:   (2*volxc - sizex)/2
FIXER: lineno: 485:   (2*volyc - sizey)/2
FIXER: lineno: 485:   (2*volzc - sizez)/2
FILENAME:  ./programs/e2spt_project.py
FILENAME:  ./programs/e2spt_recompute.py
FIXER: lineno: 192:  (2*x-box)/2
FIXER: lineno: 192:  (2*y-box)/2
FIXER: lineno: 192:   (2*z-box)/2
FILENAME:  ./programs/e2spt_refinemsa.py
FILENAME:  ./programs/e2spt_refinemulti.py
FIXER: lineno: 479:   float(options.nref) / float(len(reffiles) )
FIXER: lineno: 598:   nptcls / ncls
FIXER: lineno: 809:   nptcls / ncls
FIXER: lineno: 1459:   val/len( klass )
FIXER: lineno: 1460:   val2 /len(klass)
FIXER: lineno: 1545:   W/X
FIXER: lineno: 1560:   score / maxscore
FILENAME:  ./programs/e2spt_resolutionplot.py
FIXER: lineno: 494:  finalsum/len(arrays)
FIXER: lineno: 577:   len(fsc)/3
FIXER: lineno: 583:  x/apix
FIXER: lineno: 608:  1.0/nsym
FIXER: lineno: 621:   c / (1 + np.exp(-k*(x-x0)))
FIXER: lineno: 632:   (upper-lower)/arr.max()
FIXER: lineno: 686:   1.0/xaxis[i+1]
FIXER: lineno: 687:   ( val+ max(yaxis[i+1:]) )/ 2.0
FIXER: lineno: 690:   1.0/xaxis[i+1]
FIXER: lineno: 691:   val/ 2.0
FIXER: lineno: 788:   1.0/inverse
FIXER: lineno: 814:   1.0/inverse
FIXER: lineno: 829:  nele/10.0
FIXER: lineno: 927:   (fsc0p5minpixel1 + fsc0p5minpixel2)/2
FIXER: lineno: 933:   (fsc0p5minpixel1 + fsc0p143minpixel2)/2
FIXER: lineno: 937:   (fsc0p5freq1 + fsc0p5freq2)/2.0
FIXER: lineno: 939:   (fsc0p143freq1 + fsc0p143freq2)/2.0
FIXER: lineno: 948:   (float(apix) * float(boxsize)) / float(fsc0p5pixel)
FIXER: lineno: 955:   (float(apix) * float(boxsize)) / float(fsc0p143pixel)
FIXER: lineno: 965:   1/fsc0p5freqavg
FIXER: lineno: 975:   1/fsc0p143freqavg
FIXER: lineno: 981:   sum(values)/len(values)
FILENAME:  ./programs/e2spt_scramblestack.py
FILENAME:  ./programs/e2spt_simulation.py
FIXER: lineno: 348:   vol['nx']/2
FIXER: lineno: 349:   vol['ny']/2
FIXER: lineno: 350:   vol['nz']/2
FIXER: lineno: 352:   (2*volxc - size)/2
FIXER: lineno: 352:   (2*volyc - size)/2
FIXER: lineno: 352:   (2*volzc - size)/2
FIXER: lineno: 364:   img['nx']/2
FIXER: lineno: 365:   img['ny']/2
FIXER: lineno: 368:   (2*imgxc - size)/2
FIXER: lineno: 368:   (2*imgyc - size)/2
FIXER: lineno: 430:  options.nptcls/2.0
FIXER: lineno: 441:  options.nptcls/4.0
FIXER: lineno: 630:  1.0/3.0
FIXER: lineno: 631:   (3.5*sigmavals)/cuberoot
FIXER: lineno: 650:   (maxvals - minvals ) / width
FIXER: lineno: 851:  ( float(upper_bound) - float(lower_bound) )/ float(nslices - 1)
FIXER: lineno: 921:  ( float(upper_bound) - float(lower_bound) )/ float(nslices - 1)
FIXER: lineno: 942:   (apix*image['nx']/2.0)/10000
FIXER: lineno: 942:   options.gridholesize/2.0
FIXER: lineno: 942:   (apix*image['nx']/2.0)/10000
FIXER: lineno: 945:   image['nx']/2.0
FIXER: lineno: 949:   image['nx']/2
FIXER: lineno: 949:   image['nx']/2
FIXER: lineno: 957:   options.icethickness/2
FIXER: lineno: 965:   options.gridholesize/2
FIXER: lineno: 966:   image['nx']/2
FIXER: lineno: 966:   image['nx']/2
FIXER: lineno: 967:   image['nx']/2.0
FIXER: lineno: 1311:   float( options.snr )/ ctffactor
FIXER: lineno: 1320:   61.0/nslices
FILENAME:  ./programs/e2spt_stat.py
FIXER: lineno: 89:  float(lz)/(lz+gz)
FIXER: lineno: 90:  float(gz)/(lz+gz)
FILENAME:  ./programs/e2spt_subtilt_from_imod.py
FIXER: lineno: 86:  rawshp/2
FIXER: lineno: 132:  tomoshape/2
FIXER: lineno: 136:  eapix/aapix
FIXER: lineno: 150:  1./(wt+.1)
FIXER: lineno: 178:  a_nx/2
FIXER: lineno: 179:  a_ny/2
FIXER: lineno: 183:  sz/2
FIXER: lineno: 183:  sz/2
FIXER: lineno: 197:  a_nx/2
FILENAME:  ./programs/e2spt_tiltstacker.py
FIXER: lineno: 248:   nx/2.0
FIXER: lineno: 251:   ny/2.0
FILENAME:  ./programs/e2spt_translate.py
FILENAME:  ./programs/e2spt_wedge.py
FIXER: lineno: 91:   sum(means)/len(means)
FIXER: lineno: 92:   sum(sigmas)/len(sigmas)
FIXER: lineno: 244:  wedge.get_xsize()/2
FIXER: lineno: 244:  wedge.get_ysize()/2
FIXER: lineno: 244:  wedge.get_zsize()/2
FILENAME:  ./programs/e2spt_wedgefill.py
FIXER: lineno: 111:   min(inputhdr['nx'],inputhdr['ny'],inputhdr['nz'])/2
FILENAME:  ./programs/e2ssehunter.py
FIXER: lineno: 128:  rangemin/2
FIXER: lineno: 129:  rangemax/2
FIXER: lineno: 139:  distance/maxdistance
FIXER: lineno: 147:  res/apix
FIXER: lineno: 172:  (float(line[30:38].strip()))/apix
FIXER: lineno: 173:  (float(line[38:46].strip()))/apix
FIXER: lineno: 174:  (float(line[46:54].strip()))/apix
FIXER: lineno: 186:  v1[0]/lengthV1
FIXER: lineno: 186:  v1[1]/lengthV1
FIXER: lineno: 186:  v1[2]/lengthV1
FIXER: lineno: 189:  v2[0]/lengthV2
FIXER: lineno: 189:  v2[1]/lengthV2
FIXER: lineno: 189:  v2[2]/lengthV2
FIXER: lineno: 196:  180/pi
FIXER: lineno: 223:  5.0/apix
FIXER: lineno: 245:  numpy.sum(NumPoints1,axis=0)/len(NumPoints1)
FIXER: lineno: 254:  x1/max(x1)
FIXER: lineno: 259:  xmod[1]/xmod[2]
FIXER: lineno: 273:  length/1.54
FIXER: lineno: 274:  (100*j*pi)/180
FIXER: lineno: 275:  (100*j*pi)/180
FIXER: lineno: 277:  ((28+(100*j))*pi)/180
FIXER: lineno: 278:  ((28+(100*j))*pi)/180
FIXER: lineno: 280:  ((61+(100*j))*pi)/180
FIXER: lineno: 281:  ((61+(100*j))*pi)/180
FIXER: lineno: 283:  ((61+(100*j))*pi)/180
FIXER: lineno: 284:  ((61+(100*j))*pi)/180
FIXER: lineno: 376:  res/targetMRC.get_xsize()
FIXER: lineno: 376:  180.0/pi
FIXER: lineno: 394:  avghhvalue/atomCount
FIXER: lineno: 485:  pv1[0]/lengthPV1
FIXER: lineno: 485:  pv1[1]/lengthPV1
FIXER: lineno: 485:  pv1[2]/lengthPV1
FIXER: lineno: 492:  pv2[0]/lengthPV2
FIXER: lineno: 492:  pv2[1]/lengthPV2
FIXER: lineno: 492:  pv2[2]/lengthPV2
FIXER: lineno: 496:  xp[0]/lengthxp
FIXER: lineno: 496:   xp[1]/lengthxp
FIXER: lineno: 496:   xp[2]/lengthxp
FIXER: lineno: 513:  180/pi
FIXER: lineno: 522:  dpxpsum/dpxpcounter
FIXER: lineno: 550:  pascore/4.0
FIXER: lineno: 585:   (i2**2+j2**2+k2**2)/(3*MAX_DISTANCE**2)
FIXER: lineno: 588:   (i2**2+j2**2+k2**2)/(3*MAX_DISTANCE**2)
FIXER: lineno: 593:   float(curve_score - surface_score) / count
FIXER: lineno: 622:  coeffArray[index4]/maxValue
FIXER: lineno: 626:  (coeffArray[index4]-avghhvalue)/avghhvalue
FILENAME:  ./programs/e2ssematch.py
FIXER: lineno: 82:  i/1.5
FIXER: lineno: 97:  i[0]/1.5
FIXER: lineno: 108:  i/1.5
FIXER: lineno: 123:  i[0]/1.5
FIXER: lineno: 157:  sum(tot)/len(tot)
FILENAME:  ./programs/e2stackanim.py
FIXER: lineno: 88:  (olds[0]-news[0])/2.0
FIXER: lineno: 88:  (olds[1]-news[1])/2.0
FILENAME:  ./programs/e2stacksort.py
FILENAME:  ./programs/e2symbest.py
FIXER: lineno: 139:   score/(csym-1)
FIXER: lineno: 139:   scorem/(csym-1)
FIXER: lineno: 142:   score/(csym-1)
FILENAME:  ./programs/e2symsearch3d.py
FIXER: lineno: 433:   sum(scores)/len(scores)
FIXER: lineno: 499:   val/len( scores )
FIXER: lineno: 500:  val2/len( scores )
FILENAME:  ./programs/e2tilefile.py
FIXER: lineno: 127:  max(img.get_xsize(),img.get_ysize())/tilesize
FIXER: lineno: 127:  log(max(img.get_xsize(),img.get_ysize())/tilesize)/log(2.0)
FIXER: lineno: 144:  x/tilesize
FIXER: lineno: 144:  y/tilesize
FIXER: lineno: 147:  x/tilesize
FIXER: lineno: 147:  y/tilesize
FIXER: lineno: 154:  img.get_xsize()/512
FIXER: lineno: 154:  img.get_ysize()/512
FIXER: lineno: 185:  1.0/(2.0*apix*256.0)
FIXER: lineno: 211:  x/tilesize
FIXER: lineno: 211:  y/tilesize
FILENAME:  ./programs/e2tileimage.py
FILENAME:  ./programs/e2tiltvalidate.py
FIXER: lineno: 358:   (tiltxform.get_rotation("eman")['az'] + (-tiltxform.get_rotation("eman")['phi'] % 360))/2.0
FIXER: lineno: 501:   (value-minval)/(maxval-minval)
FIXER: lineno: 505:  math.pi/3
FIXER: lineno: 505:   math.cos(radval)/math.cos(math.pi/3 - radval)
FIXER: lineno: 511:  math.pi/3
FIXER: lineno: 511:   math.cos(hue)/math.cos(math.pi/3 - hue)
FIXER: lineno: 517:  math.pi/3
FIXER: lineno: 517:   math.cos(hue)/math.cos(math.pi/3 - hue)
FILENAME:  ./programs/e2tomoaverage.py
FIXER: lineno: 325:  float(image_1_weight)/total_weight
FIXER: lineno: 326:  float(image_2_weight)/total_weight
FIXER: lineno: 382:  len(alignment_jobs)/big_n
FIXER: lineno: 717:  progress/float(max_progress)
FIXER: lineno: 723:  progress/float(max_progress)
FIXER: lineno: 741:  progress/float(max_progress)
FILENAME:  ./programs/e2tomogram.py
FIXER: lineno: 85:  num/2
FIXER: lineno: 93:  imgs[0]["nx"]/2
FIXER: lineno: 94:  imgs[0]["ny"]/2
FIXER: lineno: 305:  options.bxsz/2
FIXER: lineno: 357:  imgs[nid]["nx"]/2
FIXER: lineno: 358:  imgs[nid]["ny"]/2
FIXER: lineno: 364:  e["nx"]/4
FIXER: lineno: 409:  e0["nx"]/2
FIXER: lineno: 409:  sz/2
FIXER: lineno: 409:   e0["ny"]/2
FIXER: lineno: 409:  sz/2
FIXER: lineno: 410:  sz/4
FIXER: lineno: 428:  e1["nx"]/2
FIXER: lineno: 428:  sz/2
FIXER: lineno: 428:   e1["ny"]/2
FIXER: lineno: 428:  sz/2
FIXER: lineno: 429:  sz/4
FIXER: lineno: 435:  e1["nx"]/2
FIXER: lineno: 435:  sz/2
FIXER: lineno: 435:   e1["ny"]/2
FIXER: lineno: 435:  sz/2
FIXER: lineno: 436:  sz/4
FIXER: lineno: 469:  sz/2
FIXER: lineno: 476:  sz/2
FIXER: lineno: 505:  pad/2
FIXER: lineno: 552:  int(zp[0]+zp[-1])/2
FIXER: lineno: 557:  (pad-outxy)/2
FIXER: lineno: 557:   (pad-outxy)/2
FIXER: lineno: 560:   zthick/2
FIXER: lineno: 564:  (pad-outxy)/2
FIXER: lineno: 564:   (pad-outxy)/2
FIXER: lineno: 580:  img["nx"]/2
FIXER: lineno: 580:  pad/2
FIXER: lineno: 580:  img["ny"]/2
FIXER: lineno: 580:  pad/2
FIXER: lineno: 591:  options.minsz/2
FIXER: lineno: 611:  options.minsz/4
FIXER: lineno: 629:  options.bxsz/4
FIXER: lineno: 648:  pad/2
FIXER: lineno: 648:   pad/2
FIXER: lineno: 648:   zthick/2
FIXER: lineno: 688:  options.bxsz/2
FIXER: lineno: 700:  imgs[nid]["nx"]/2
FIXER: lineno: 701:  imgs[nid]["ny"]/2
FIXER: lineno: 703:  pad/2
FIXER: lineno: 703:  pad/2
FIXER: lineno: 710:  (pad-bx*2)/2
FIXER: lineno: 710:  (pad-bx*2)/2
FIXER: lineno: 710:  (pad-bx*2)/2
FIXER: lineno: 894:  options.bxsz/4
FIXER: lineno: 930:  img["nx"]/2
FIXER: lineno: 931:  img["ny"]/2
FIXER: lineno: 936:  img["nx"]/2
FIXER: lineno: 936:  img["ny"]/2
FILENAME:  ./programs/e2tomopreproc.py
FIXER: lineno: 216:   nyquist/options.lowpassfrac
FIXER: lineno: 218:   1.0/(lowpassres)
FIXER: lineno: 223:   nyquist/options.lowpassfrac
FILENAME:  ./programs/e2tomoresolution.py
FIXER: lineno: 110:   len(tomo_db)/2
FIXER: lineno: 130:   len(fscdata)/3
FILENAME:  ./programs/e2tomoseg_buildtrainset.py
FIXER: lineno: 148:  ngood/2
FIXER: lineno: 148:  ngood/2
FIXER: lineno: 156:  ngood/2
FIXER: lineno: 156:   ngood/2
FIXER: lineno: 156:   n/2
FIXER: lineno: 169:  n/2
FIXER: lineno: 198:  sz/2
FIXER: lineno: 198:  sz/2
FIXER: lineno: 202:  sz/2
FIXER: lineno: 202:  sz/2
FIXER: lineno: 204:  sz/2
FIXER: lineno: 204:  sz/2
FILENAME:  ./programs/e2tomoseg_convnet.py
FIXER: lineno: 139:   train_set_x.get_value(borrow=True).shape[0] / batch_size
FIXER: lineno: 220:  shape[2]/2
FIXER: lineno: 227:  (convnet.outsize-shape[0])/2
FIXER: lineno: 227:  (convnet.outsize-shape[0])/2
FIXER: lineno: 228:  float(shape[0])/float(convnet.outsize)
FIXER: lineno: 235:  (convnet.outsize-shape[0])/2
FIXER: lineno: 235:  (convnet.outsize-shape[0])/2
FIXER: lineno: 237:  float(shape[0])/float(convnet.outsize)
FIXER: lineno: 455:  (sw-enx)/2
FIXER: lineno: 455:  (sw-eny)/2
FIXER: lineno: 508:  (cout["nx"]-enx)/2
FIXER: lineno: 508:  (cout["ny"]-eny)/2
FIXER: lineno: 695:  EMUtil.get_image_count(ptcls)/2
FIXER: lineno: 774:  1.0/abs(pz)
FIXER: lineno: 786:  input_shape[2]/pz
FIXER: lineno: 786:  input_shape[3]/pz
FIXER: lineno: 858:  1.0/abs(pz)
FIXER: lineno: 861:  input_shape[2]/pz
FIXER: lineno: 861:  input_shape[3]/pz
FIXER: lineno: 891:  6. / (fan_in + fan_out)
FIXER: lineno: 921:  (filter_shape[2]-1)/2
FIXER: lineno: 957:  (self.filter_shape[2]-1)/2
FILENAME:  ./programs/e2tvrecon.py
FIXER: lineno: 361:   1.0/options.subpix
FIXER: lineno: 362:   1.0/options.subpix
FIXER: lineno: 364:   (l_x - 2*offset) / float(l_det)
FIXER: lineno: 370:  Xlab / options.subpix
FIXER: lineno: 370:   Ylab / options.subpix
FIXER: lineno: 380:  (l_x - 2*offset)/float(l_det)
FIXER: lineno: 409:   l_x / 2.
FIXER: lineno: 422:  (x - orig) / dx
FIXER: lineno: 423:  (x - orig - floor_x * dx) / dx
FIXER: lineno: 521:   .9/ (l * n_angles)
FIXER: lineno: 538:   (1 + np.sqrt(1 + 4 * t_old**2))/2.
FIXER: lineno: 616:   1./ (8 * weight)
FIXER: lineno: 620:   (t - 1) / t_new
FIXER: lineno: 773:   0.5 / divisor
FILENAME:  ./programs/e2unwrap3d.py
FIXER: lineno: 50:  map3d.get_zsize()/2
FILENAME:  ./programs/e2version.py
FILENAME:  ./programs/e2workflow.py
FILENAME:  ./programs/eman2.py
FILENAME:  ./pyemtbx/__init__.py
FILENAME:  ./pyemtbx/box.py
FIXER: lineno: 57:  log(val)/log(2.0)
FIXER: lineno: 60:  log(val)/log(2.0)
FILENAME:  ./pyemtbx/boxertools.py
FIXER: lineno: 262:   1.0/(self.xsize)
FIXER: lineno: 298:   (box_size-self.xsize)/2
FIXER: lineno: 300:   (box_size-self.ysize)/2
FIXER: lineno: 323:  self.xcorner/shrink
FIXER: lineno: 323:  self.ycorner/shrink
FIXER: lineno: 323:  self.xsize/shrink
FIXER: lineno: 323:  self.ysize/shrink
FIXER: lineno: 362:  image.get_xsize()/2
FIXER: lineno: 363:  image.get_ysize()/2
FIXER: lineno: 367:  image.get_xsize()/2
FIXER: lineno: 368:  image.get_ysize()/2
FIXER: lineno: 382:   trans[0]/2
FIXER: lineno: 383:   trans[1]/2
FIXER: lineno: 395:  image.get_xsize()/2
FIXER: lineno: 395:  image.get_ysize()/2
FIXER: lineno: 395:  image.get_zsize()/2
FIXER: lineno: 418:   int(nx)/shrink
FIXER: lineno: 420:   int(ny)/shrink
FIXER: lineno: 422:  smallx/2.0
FIXER: lineno: 422:  nx/2.0
FIXER: lineno: 423:  smally/2.0
FIXER: lineno: 423:  ny/2.0
FIXER: lineno: 453:   1/shrink
FIXER: lineno: 467:  self.xsize/2.0
FIXER: lineno: 468:  self.ysize/2.0
FIXER: lineno: 497:  self.xsize/2.0
FIXER: lineno: 498:  self.ysize/2.0
FIXER: lineno: 528:   (box_size-self.xsize)/2
FIXER: lineno: 530:   (box_size-self.ysize)/2
FIXER: lineno: 718:   (oldxsize-xsize)/2
FIXER: lineno: 718:   (oldysize-ysize)/2
FIXER: lineno: 720:   float(xsize)/float(oldxsize)
FIXER: lineno: 727:  float(xsize)/float(oldxsize)
FIXER: lineno: 730:  float(xsize)/float(oldxsize)
FIXER: lineno: 1380:   (box_size-oldbox_size)/2
FIXER: lineno: 1767:   1.0/self.get_subsample_rate()
FIXER: lineno: 1772:  box.xsize/2.0
FIXER: lineno: 1773:  box.ysize/2.0
FIXER: lineno: 1859:   1.0/self.get_subsample_rate()
FIXER: lineno: 1863:  box.xsize/2.0
FIXER: lineno: 1864:  box.ysize/2.0
FIXER: lineno: 1883:  box.xsize/2
FIXER: lineno: 1883:  box.ysize/2
FIXER: lineno: 2038:   (box_size-box.xsize)/2
FIXER: lineno: 2042:   (box_size-box.ysize)/2
FIXER: lineno: 2056:   self.box_size/2
FIXER: lineno: 2117:   1.0/self.get_subsample_rate()
FIXER: lineno: 2122:  box.xsize/2.0
FIXER: lineno: 2123:  box.ysize/2.0
FIXER: lineno: 2161:   1.0/self.get_subsample_rate()
FIXER: lineno: 2166:  box.xsize/2.0
FIXER: lineno: 2167:  box.ysize/2.0
FIXER: lineno: 2195:  box.xsize/2
FIXER: lineno: 2196:  box.ysize/2
FIXER: lineno: 2198:  box.xsize/2
FIXER: lineno: 2206:  x/self.get_subsample_rate()
FIXER: lineno: 2207:  y/self.get_subsample_rate()
FIXER: lineno: 2209:  radius/self.get_subsample_rate()
FIXER: lineno: 2624:  1.0/len(images_copy)
FIXER: lineno: 2628:  ave.get_xsize()/2
FIXER: lineno: 2660:  box.xcorner/shrink
FIXER: lineno: 2660:  box.ycorner/shrink
FIXER: lineno: 2670:  1.0/len(t)
FIXER: lineno: 2676:  ave.get_xsize()/2
FIXER: lineno: 3012:   self.pixel_input/self.pixel_output
FIXER: lineno: 3028:   self.pixel_input/self.pixel_output
FIXER: lineno: 3029:   ratio/self.box_size
FIXER: lineno: 3214:   self.gauss_width/self.box_size
FIXER: lineno: 3215:   self.box_size/2
FIXER: lineno: 3216:   len(peaks)/3
FIXER: lineno: 3219:   self.box_size/2
FIXER: lineno: 3680:  self.box_size/(2*self.get_subsample_rate())
FIXER: lineno: 3789:  float(self.box_size)/float(self.templatedimmin)
FIXER: lineno: 3979:  self.box_size/2
FIXER: lineno: 3979:  self.box_size/2
FIXER: lineno: 4002:   float(newx)/float(oldx)
FIXER: lineno: 4003:  newx/2.0
FIXER: lineno: 4003:  newy/2.0
FIXER: lineno: 4006:  (oldx-newx)/2
FIXER: lineno: 4006:  (oldy-newy)/2
FIXER: lineno: 4161:   box.xsize/2
FIXER: lineno: 4162:   box.ysize/2
FILENAME:  ./pyemtbx/exceptions.py
FILENAME:  ./pyemtbx/imagetypes.py
FILENAME:  ./pyemtbx/options.py
FILENAME:  ./rt/demo/align.py
FILENAME:  ./rt/demo/averager.py
FILENAME:  ./rt/demo/cmp.py
FILENAME:  ./rt/demo/processor1.py
FILENAME:  ./rt/demo/processor2.py
FILENAME:  ./rt/demo/processor3.py
FILENAME:  ./rt/demo/project.py
FILENAME:  ./rt/demo/reconstruction.py
FILENAME:  ./rt/demo/reconstructor.py
FIXER: lineno: 48:   math.pi/2
FILENAME:  ./rt/demo/scene3d_test.py
FILENAME:  ./rt/demo/test_image.py
FILENAME:  ./rt/demo/tomrc.py
FILENAME:  ./rt/emdata/exception1.py
FILENAME:  ./rt/emdata/storage_order_test.py
FILENAME:  ./rt/pyem/rt.py
FILENAME:  ./rt/pyem/test_aligner.py
FILENAME:  ./rt/pyem/test_averager.py
FILENAME:  ./rt/pyem/test_cmp.py
FILENAME:  ./rt/pyem/test_emdata.py
FIXER: lineno: 1453:   nx2/2
FIXER: lineno: 1496:   nx2/2
FIXER: lineno: 2220:  pi/3
FIXER: lineno: 2220:  pi/5
FIXER: lineno: 2300:  nx/4
FIXER: lineno: 2300:   ny/4
FIXER: lineno: 2300:   nx/2
FIXER: lineno: 2300:   ny/2
FIXER: lineno: 2305:   nx/2
FIXER: lineno: 2306:   ny/2
FIXER: lineno: 2308:  -nx/4
FIXER: lineno: 2308:   -ny/4
FIXER: lineno: 2557:   e / 5.0
FIXER: lineno: 2562:  d[z][y][x]/5.0
FIXER: lineno: 2595:   0.005 / e
FIXER: lineno: 2600:  0.005/d[z][y][x]
FILENAME:  ./rt/pyem/test_emdata_cuda.py
FILENAME:  ./rt/pyem/test_imageio.py
FIXER: lineno: 1103:   nx/4
FIXER: lineno: 1104:   ny/4
FIXER: lineno: 1105:   nz/4
FIXER: lineno: 1107:   nx/2
FIXER: lineno: 1108:   ny/2
FIXER: lineno: 1109:   nz/2
FIXER: lineno: 1203:   e.get_zsize()/2
FIXER: lineno: 1208:  e.get_xsize()/2
FIXER: lineno: 1208:   e.get_ysize()/2
FIXER: lineno: 1213:   e.get_zsize()/2
FILENAME:  ./rt/pyem/test_misc.py
FILENAME:  ./rt/pyem/test_processor.py
FIXER: lineno: 442:   cmax/2.0
FIXER: lineno: 443:   cmin/2.0
FIXER: lineno: 689:  d[z][y][x]/2.56
FIXER: lineno: 1362:  nx/2
FIXER: lineno: 1379:  ny/2
FIXER: lineno: 1397:  nz/2
FIXER: lineno: 1714:  x/2
FIXER: lineno: 1714:  y/2
FIXER: lineno: 1714:  z/2
FIXER: lineno: 1716:  x/2
FIXER: lineno: 1716:  y/2
FIXER: lineno: 1724:   x/2
FIXER: lineno: 1725:   y/2
FIXER: lineno: 1728:   z/2
FILENAME:  ./rt/pyem/test_reconstructor.py
FILENAME:  ./rt/pyem/test_transform.py
FIXER: lineno: 155:  inv_params["ty"]/(-1*params["ty"])
FIXER: lineno: 849:  azsoln/(az%azmax)
FIXER: lineno: 853:  result["alt"]/alt
FIXER: lineno: 873:   360.0/n
FIXER: lineno: 900:   720.0/n
FILENAME:  ./rt/pyem/test_typeconverter.py
FIXER: lineno: 282:   ny/2
FILENAME:  ./rt/pyem/test_utils.py
FILENAME:  ./rt/pyem/test_vec.py
FILENAME:  ./rt/pyem/test_xydata.py
FILENAME:  ./rt/pyem/testlib.py
FILENAME:  ./rt/timetests/test_times.py
FIXER: lineno: 77:  -n/4
FIXER: lineno: 77:  n/4
FIXER: lineno: 78:  -n/4
FIXER: lineno: 78:  n/4
FIXER: lineno: 92:  n/2
FILENAME:  ./sparx/__init__.py
FILENAME:  ./sparx/bin/sx.py
FILENAME:  ./sparx/bin/sx3dvariability.py
FIXER: lineno: 72:  1./decimation
FIXER: lineno: 72:  1./decimation
FIXER: lineno: 285:  nima/i
FIXER: lineno: 287:   nima/i
FIXER: lineno: 313:   nx/2
FIXER: lineno: 421:   (time()-t2)/60
FIXER: lineno: 491:  nx/2
FIXER: lineno: 546:   1.0/(len(grp_imgdata)-1)
FIXER: lineno: 722:  (time()-t6)/60
FIXER: lineno: 727:  (time()-t0)/60
FILENAME:  ./sparx/bin/sx_real.py
FILENAME:  ./sparx/bin/sxali2d.py
FILENAME:  ./sparx/bin/sxali2d_mref.py
FILENAME:  ./sparx/bin/sxali3d.py
FILENAME:  ./sparx/bin/sxali_vol.py
FILENAME:  ./sparx/bin/sxave_ali.py
FILENAME:  ./sparx/bin/sxbmask.py
FILENAME:  ./sparx/bin/sxcenter_projections.py
FIXER: lineno: 65:   1.0/float(n)
FIXER: lineno: 188:   paramsdict["lowpass"]/paramsdict["shrink"]
FIXER: lineno: 189:   paramsdict["initialfl"]/paramsdict["shrink"]
FIXER: lineno: 200:  onx/2
FIXER: lineno: 275:   params[im][0]/shrinkage
FIXER: lineno: 276:   params[im][1]/shrinkage
FIXER: lineno: 382:   pixel_size/fq
FIXER: lineno: 386:   5.0/nxinit
FIXER: lineno: 438:  1.0/float(radi)
FILENAME:  ./sparx/bin/sxchains.py
FIXER: lineno: 65:   (1+ ((n[1]-n[0]) % nct))/2
FIXER: lineno: 103:   (1+sqrt(1+8*len(lccc)))/2
FIXER: lineno: 155:  -de/T
FIXER: lineno: 171:  -de/T
FILENAME:  ./sparx/bin/sxcompute_isac_avg.py
FIXER: lineno: 130:   1./5.
FIXER: lineno: 138:  x/c3
FIXER: lineno: 138:  c2/(x/c3+1)**2
FIXER: lineno: 138:  (x-c5)/c6**2
FIXER: lineno: 141:  pu[ifreq]/(rot1[ifreq]*s)
FIXER: lineno: 145:  roo[ifreq]/(rot1[ifreq]*s)
FIXER: lineno: 163:    1./(2.*pixel_size)
FIXER: lineno: 164:    1./B_start
FIXER: lineno: 169:  2./global_b
FIXER: lineno: 310:   float(get_im(os.path.join(Tracker["directory"], "aqfinal.hdf"), 0).get_xsize())/Tracker["constants"]["nnxo"]
FIXER: lineno: 315:  1./Tracker["ini_shrink"]
FIXER: lineno: 335:   parameters[abs_id][1]/Tracker["ini_shrink"]
FIXER: lineno: 335:   parameters[abs_id][2]/Tracker["ini_shrink"]
FILENAME:  ./sparx/bin/sxconsistency.py
FIXER: lineno: 95:  sum_cosa/sqrtP
FIXER: lineno: 95:   sum_sina/sqrtP
FIXER: lineno: 95:   -sum_sina/sqrtP
FIXER: lineno: 95:   sum_cosa/sqrtP
FIXER: lineno: 101:   sum(sqr_pixel_error)/N
FIXER: lineno: 302:  nas[2]/nom
FIXER: lineno: 399:   float(thesame)/nn
FIXER: lineno: 410:   360.0/sym
FIXER: lineno: 489:  nas[2]/nom
FIXER: lineno: 621:   360.0/sym
FIXER: lineno: 673:  nas[2]/nom
FIXER: lineno: 711:   360.0/sym
FIXER: lineno: 764:  nas[2]/nom
FILENAME:  ./sparx/bin/sxcopyfromtif.py
FILENAME:  ./sparx/bin/sxcpy.py
FILENAME:  ./sparx/bin/sxcter.py
FILENAME:  ./sparx/bin/sxctf.py
FIXER: lineno: 237:  float(i+1)/len(options.filenames)
FIXER: lineno: 256:  1.0/(apix*im_2d.get_ysize())
FIXER: lineno: 272:  float(i+1)/len(options.filenames)
FIXER: lineno: 434:  mask1.get_attr("square_sum")/(ys*ys)
FIXER: lineno: 435:  mask2.get_attr("square_sum")/(ys*ys)
FIXER: lineno: 444:   float(ys2*ys2)**2/4.0
FIXER: lineno: 493:  av1.get_ysize()/2
FIXER: lineno: 494:  av2.get_ysize()/2
FIXER: lineno: 521:  xs/width
FIXER: lineno: 521:  xs/ceil(xs/width)
FIXER: lineno: 525:  xst/2
FIXER: lineno: 549:  .02/ds
FIXER: lineno: 571:  (sum*sum_xy-sum_x*sum_y)/denom
FIXER: lineno: 572:  (sum_xx*sum_y-sum_x*sum_xy)/denom
FIXER: lineno: 578:   s/n
FIXER: lineno: 638:   1.0/(apix*ys)
FIXER: lineno: 650:  dfi/20.0
FIXER: lineno: 654:  .04/ds
FIXER: lineno: 660:  ys/2
FIXER: lineno: 681:  dfi/100.0
FIXER: lineno: 684:  .04/ds
FIXER: lineno: 691:  ys/2
FIXER: lineno: 711:  im_1d[x]/bg_1d[x]
FIXER: lineno: 711:  im_1d[x-1]/bg_1d[x-1]
FIXER: lineno: 711:  im_1d[x+1]/bg_1d[x+1]
FIXER: lineno: 714:  (xx-last[0])/float(cur[0]-last[0])
FIXER: lineno: 732:  len(snr)/2
FIXER: lineno: 749:  .05/ds
FIXER: lineno: 750:  0.14/ds
FIXER: lineno: 765:  i/a0
FIXER: lineno: 778:  b/20.0
FIXER: lineno: 778:  b/20.0
FIXER: lineno: 789:  i/a0
FIXER: lineno: 1056:  .04/ds
FIXER: lineno: 1056:  0.15/ds
FIXER: lineno: 1066:  fit[i]/rto
FILENAME:  ./sparx/bin/sxfactcoords.py
FILENAME:  ./sparx/bin/sxfilrecons3d.py
FILENAME:  ./sparx/bin/sxfilterlocal.py
FILENAME:  ./sparx/bin/sxfind_struct.py
FILENAME:  ./sparx/bin/sxfit_error.py
FIXER: lineno: 66:  sum1/nsize
FIXER: lineno: 67:  sum2/nsize
FIXER: lineno: 68:  sum3/nsize
FIXER: lineno: 70:   (ave3-3*ave1*var-ave1**3)/var**1.5
FIXER: lineno: 77:   0.5/(L-1)
FIXER: lineno: 81:   sp/ds
FIXER: lineno: 92:   0.5/sg**2
FIXER: lineno: 97:   exp(-i**2*csg)/sqrt(pwp[i]*pwu[i])
FIXER: lineno: 134:   len(pw)/10
FIXER: lineno: 142:  s1/s2
FIXER: lineno: 143:   1.0/oofactor
FIXER: lineno: 236:   0.5/float(np)
FIXER: lineno: 252:  (1.0+R)/(1.0+R*exp(B*y**2/4))
FIXER: lineno: 270:   (nu2-nu1)/float(np)
FIXER: lineno: 286:   (nu1+nu2)/2.0
FIXER: lineno: 296:   0.5/float(np-1)
FIXER: lineno: 351:   (f[j]-f[i])/float(j-i)
FIXER: lineno: 495:   0.5/float(lf-1)
FIXER: lineno: 517:  fcrf[i]/(fcrf[i]-fcrf[i+1])
FIXER: lineno: 520:   fcrf[i+1]/float(i+1-k0)
FIXER: lineno: 535:  (angle+180)/360
FIXER: lineno: 591:   pix/resol
FIXER: lineno: 592:  (2*u0*(1+R)-1)/R
FIXER: lineno: 594:  (2*u0*(1+R))/R
FIXER: lineno: 595:  pix/aau
FIXER: lineno: 658:   20/ncpu
FIXER: lineno: 715:  mask_rad/nover
FIXER: lineno: 718:   (nx-nbox)/2
FIXER: lineno: 720:   (ny-nbox)/2
FIXER: lineno: 722:   (nz-nbox)/2
FIXER: lineno: 747:   0.5/float(sf0)
FIXER: lineno: 764:  1.0/(j2-j)
FIXER: lineno: 764:  1.0/(j-j1)
FIXER: lineno: 765:   1.0/(1.0+exp(x))
FIXER: lineno: 956:  nt1/2
FIXER: lineno: 958:  nt1/2
FIXER: lineno: 986:  ncpu/2
FIXER: lineno: 988:  ncpu/2
FIXER: lineno: 1162:   bp_mean[j]/N
FIXER: lineno: 1163:  (bp_sigma[j]- N*bp_mean[j]**2)/(N-1)
FIXER: lineno: 1172:   abs(sigmas[cycle][j]-sigmas[cycle-rave-1][j])/ss
FIXER: lineno: 1174:   ss/float(rave+1)
FIXER: lineno: 1217:  N/2
FIXER: lineno: 1228:   (ap+bp)/2.0
FIXER: lineno: 1229:   (bp-ap)/2.0
FIXER: lineno: 1302:  (params[0]-cp[0])/wp[0]
FIXER: lineno: 1302:  (params[1]-cp[1])/wp[1]
FIXER: lineno: 1302:  (params[2]-cp[2])/wp[2]
FIXER: lineno: 1303:  (params[3]-cp[3])/wp[3]
FIXER: lineno: 1303:  (params[4]-cp[4])/wp[4]
FIXER: lineno: 1303:  (params[5]-cp[5])/wp[5]
FIXER: lineno: 1304:   (params[0]-cp[0])/krot
FIXER: lineno: 1304:   (params[1]-cp[1])/krot
FIXER: lineno: 1305:   (params[2]-cp[2])/krot
FIXER: lineno: 1305:   (params[3]-cp[3])/kshift
FIXER: lineno: 1306:   (params[4]-cp[4])/kshift
FIXER: lineno: 1306:   (params[5]-cp[5])/kshift
FILENAME:  ./sparx/bin/sxgenbuf.py
FILENAME:  ./sparx/bin/sxgui.py
FIXER: lineno: 289:   SXLookFeelConst.screen_height / 2
FIXER: lineno: 303:   SXLookFeelConst.sxmenu_item_btn_width / 10
FIXER: lineno: 397:   pictogram_width / 6
FIXER: lineno: 401:   pictogram_width / 6
FILENAME:  ./sparx/bin/sxgui_cter.py
FIXER: lineno: 1275:   len(self.cter_entry_list)/ self.curentryperbin
FIXER: lineno: 1452:  1.0/error_freq
FIXER: lineno: 1456:  1.0/error_freq
FIXER: lineno: 1466:  1.0/error_freq
FIXER: lineno: 1470:  1.0/error_freq
FIXER: lineno: 1480:  1.0/error_freq
FIXER: lineno: 1484:  1.0/error_freq
FIXER: lineno: 1664:  float(uncheck_counts)/n_entry
FILENAME:  ./sparx/bin/sxgui_meridien.py
FIXER: lineno: 160:   float(fsc_value) / float(pixelsizes[i] * boxsizes[i])
FIXER: lineno: 308:   float(pixelsize * boxsize) / float(res0143)
FIXER: lineno: 309:   float(pixelsize * boxsize) / float(res05)
FIXER: lineno: 335:  resolution.width() / 2
FIXER: lineno: 335:  self.frameSize().width() / 2
FIXER: lineno: 336:  resolution.height() / 2
FIXER: lineno: 336:  self.frameSize().height() / 2
FILENAME:  ./sparx/bin/sxgui_unblur.py
FIXER: lineno: 2192:   fltPointProduct / fltAbsProduct
FIXER: lineno: 2234:  
                varOverallDrift / (self.idxLastFrame - self.idxFirstFrame)
FIXER: lineno: 2559:  self.lsFiles.count() / 3
FIXER: lineno: 2616:  self.lsFiles.count() / 3
FIXER: lineno: 3339:   \
                    numpy.sum(self.arrData['frame{:d}'.format(int(number))]) / \
                    int(self.lsFiles.count())
FIXER: lineno: 3474:   \
                    numpy.sum(arrChecked[self.dOverall]) / \
                    len(self.listChecked)
FIXER: lineno: 3477:   \
                    numpy.sum(arrChecked[self.dFrame]) / \
                    len(self.listChecked)
FIXER: lineno: 3480:   \
                    numpy.sum(arrChecked[self.dEnd]) / \
                    len(self.listChecked)
FIXER: lineno: 3483:   \
                    numpy.sum(arrChecked[self.dMax]) / \
                    len(self.listChecked)
FIXER: lineno: 3486:   \
                    numpy.sum(arrChecked[self.dMaxFirst]) / \
                    len(self.listChecked)
FILENAME:  ./sparx/bin/sxhac_averages.py
FILENAME:  ./sparx/bin/sxhac_clustering.py
FILENAME:  ./sparx/bin/sxheader.py
FILENAME:  ./sparx/bin/sxhelical_demo.py
FIXER: lineno: 166:   (prj-stat[0])/stat[1]
FILENAME:  ./sparx/bin/sxhelicon.py
FIXER: lineno: 102:  float(options.rmin)/options.apix
FIXER: lineno: 103:  float(options.rmax)/options.apix
FIXER: lineno: 107:  options.searchxshift/options.apix
FIXER: lineno: 108:  options.xwobble/options.apix
FIXER: lineno: 109:   options.ywobble/options.apix
FIXER: lineno: 111:   options.ystep/options.apix
FIXER: lineno: 112:   dp/2.0
FILENAME:  ./sparx/bin/sxhelicon_utils.py
FIXER: lineno: 200:  float(options.dp)/options.apix
FIXER: lineno: 223:  float(options.rmin)/options.apix
FIXER: lineno: 224:  float(options.rmax)/options.apix
FIXER: lineno: 233:  options.ou/options.apix
FIXER: lineno: 238:  float(xr[i])/options.apix
FIXER: lineno: 240:  float(txs[i])/options.apix
FIXER: lineno: 242:  options.searchxshift/options.apix
FIXER: lineno: 243:  options.nearby/options.apix
FIXER: lineno: 244:  options.zstep/options.apix
FILENAME:  ./sparx/bin/sxheliconlocal.py
FIXER: lineno: 103:  float(options.rmin)/options.apix
FIXER: lineno: 104:  float(options.rmax)/options.apix
FIXER: lineno: 114:  options.ou/options.apix
FIXER: lineno: 119:  float(xr[i])/options.apix
FIXER: lineno: 121:  float(txs[i])/options.apix
FIXER: lineno: 124:  float(y_restrict[i])/options.apix
FILENAME:  ./sparx/bin/sxhelixboxer.py
FIXER: lineno: 133:  options.defocuserror/100.0
FIXER: lineno: 222:   (x1+x2)/2.0
FIXER: lineno: 222:  (y1+y2)/2.0
FIXER: lineno: 240:  l_vect[0]/length
FIXER: lineno: 240:   l_vect[1]/length
FIXER: lineno: 262:  l_vect[0]/helix_length
FIXER: lineno: 262:   l_vect[1]/helix_length
FIXER: lineno: 267:   px_length/2.0
FIXER: lineno: 269:   px_length/2.0
FIXER: lineno: 298:  l_vect[0]/length
FIXER: lineno: 298:   l_vect[1]/length
FIXER: lineno: 387:  side/2.0
FIXER: lineno: 387:  side/2.0
FIXER: lineno: 414:   w / 2.0
FIXER: lineno: 423:   w / 2.0
FIXER: lineno: 451:   width / 2.0
FIXER: lineno: 713:   1.0/px_length
FIXER: lineno: 1979:   1.0/boxsize
FIXER: lineno: 1985:  boxsize/2
FIXER: lineno: 1986:  rmax/new_pixel_size
FIXER: lineno: 2132:  ctfs[8]/ctfs[0]
FIXER: lineno: 2133:  ctfs[8]/ctfs[0]
FIXER: lineno: 2150:  ctfs[3] / new_pixel_size
FIXER: lineno: 2160:   pixel_size/new_pixel_size
FIXER: lineno: 2222:   len(a)/2
FILENAME:  ./sparx/bin/sxihrsr.py
FIXER: lineno: 98:  float(options.rmin)/options.apix
FIXER: lineno: 99:  float(options.rmax)/options.apix
FIXER: lineno: 109:  options.ou/options.apix
FIXER: lineno: 115:  float(xr[i])/options.apix
FIXER: lineno: 117:  float(txs[i])/options.apix
FIXER: lineno: 120:  float(y_restrict[i])/options.apix
FILENAME:  ./sparx/bin/sximgstat.py
FILENAME:  ./sparx/bin/sxisac2.py
FIXER: lineno: 251:   ndata/img_per_grp
FIXER: lineno: 416:   nx/2
FIXER: lineno: 514:   nima/numref
FIXER: lineno: 515:  i/maxasi
FIXER: lineno: 587:   1.0/float(members[j])
FIXER: lineno: 772:   common/float(totprevious + totcurrent - common)
FIXER: lineno: 809:   numref/2
FIXER: lineno: 1246:  Blockdata["total_nima"]/q
FIXER: lineno: 1262:   float(target_radius)/float(radi)
FIXER: lineno: 1273:  txrm/nxrsteps
FIXER: lineno: 1276:  txrm/nxrsteps
FIXER: lineno: 1277:  txrm/nxrsteps
FIXER: lineno: 1318:   float(target_radius)/float(radi)
FILENAME:  ./sparx/bin/sxk_means.py
FILENAME:  ./sparx/bin/sxk_means_groups.py
FILENAME:  ./sparx/bin/sxk_means_stable.py
FILENAME:  ./sparx/bin/sxlocal_ali2d.py
FILENAME:  ./sparx/bin/sxlocal_ali3d.py
FILENAME:  ./sparx/bin/sxlocal_ali3dm.py
FILENAME:  ./sparx/bin/sxlocres.py
FIXER: lineno: 55:   pxSize / freqvol[x,y,z]
FIXER: lineno: 206:   0.5/lp
FIXER: lineno: 224:  (fl+fh)/2.0
FIXER: lineno: 224:   dp/do
FIXER: lineno: 243:  (fl+fh)/2.0
FILENAME:  ./sparx/bin/sxmeridien.py
FIXER: lineno: 248:   3.75/2.0
FIXER: lineno: 250:  0.25/Tracker["constants"]["radius"]
FIXER: lineno: 296:  anger/n
FIXER: lineno: 305:   range/8.0
FIXER: lineno: 688:   1.0/float(sum(Tracker["nima_per_chunk"]))
FIXER: lineno: 695:   tsd.get_value_at(k,i)/tocp[i]
FIXER: lineno: 696:   2.0/qt
FIXER: lineno: 701:   (tmp1[k-1]+tmp1[k]+tmp1[k+1])/3.0
FIXER: lineno: 811:   nxinit/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 827:   1.0/sqrt(Blockdata["bckgnoise"][i].get_value_at(k))
FIXER: lineno: 894:   Tracker["avgvaradj"][procid]/wnorm
FIXER: lineno: 905:   ctf_params.apix/shrinkage
FIXER: lineno: 916:   ctf_params.apix/shrinkage
FIXER: lineno: 921:   apix/shrinkage
FIXER: lineno: 950:   axes_dis/3.0
FIXER: lineno: 994:  Tracker["xr"]/Tracker["ts"]
FIXER: lineno: 998:   Tracker["ts"]/2
FIXER: lineno: 1000:   Tracker["ts"]/2
FIXER: lineno: 1005:  Tracker["xr"]/ts_coarse
FIXER: lineno: 1020:  Tracker["xr"]/Tracker["ts"]
FIXER: lineno: 1139:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 1474:   float(target_radius)/float(radi)
FIXER: lineno: 1485:  txrm/nxrsteps
FIXER: lineno: 1488:  txrm/nxrsteps
FIXER: lineno: 1489:  txrm/nxrsteps
FIXER: lineno: 1648:  360./Tracker["delta"]
FIXER: lineno: 1748:  nang/5
FIXER: lineno: 1749:  (time()-at)/60.
FIXER: lineno: 1762:   1.0/nrmref
FIXER: lineno: 1839:  360./Tracker["delta"]
FIXER: lineno: 1846:  360./Tracker["delta"]
FIXER: lineno: 1853:  360./coarse_delta
FIXER: lineno: 1928:  float(orgsize)/1.e9
FIXER: lineno: 1955:  n_coarse_ang/5
FIXER: lineno: 1956:  (time()-at)/60.
FIXER: lineno: 1969:   1.0/nrmref
FIXER: lineno: 1996:  (time()-at)/60.
FIXER: lineno: 2006:   1.0/nrmref
FIXER: lineno: 2010:  (time()-at)/60.
FIXER: lineno: 2020:   hashparams/1000
FIXER: lineno: 2021:   ipsiandiang/100000
FIXER: lineno: 2030:  (coarse_angles[oldiang][2] + ipsi*coarse_delta - refang[iang][2]+360.0)/Tracker["delta"]
FIXER: lineno: 2052:  (time()-at)/60.
FIXER: lineno: 2115:   float(Tracker["nxpolar"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 2116:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 2127:  360./Tracker["delta"]
FIXER: lineno: 2140:  360./coarse_delta
FIXER: lineno: 2275:  (time()-at)/60.
FIXER: lineno: 2378:  float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 2378:   ctf_params.apix/(float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"]))
FIXER: lineno: 2394:  nima/5
FIXER: lineno: 2395:  (time()-at)/60.
FIXER: lineno: 2399:   (n_coarse_ang *  n_coarse_psi)/10
FIXER: lineno: 2412:  m/n_coarse_psi
FIXER: lineno: 2413:   m/(n_coarse_ang*n_coarse_psi)
FIXER: lineno: 2420:   hashparams/1000
FIXER: lineno: 2424:   ipsiandiang/100000
FIXER: lineno: 2430:   Util.innerproduct(data[ishift], temp, None)/nrmref
FIXER: lineno: 2478:  m/n_coarse_psi
FIXER: lineno: 2479:   m/(n_coarse_ang*n_coarse_psi)
FIXER: lineno: 2482:   xod2/1000
FIXER: lineno: 2489:   hashparams/1000
FIXER: lineno: 2493:   ipsiandiang/100000
FIXER: lineno: 2497:   Util.innerproduct(data[ishift], temp, None)/nrmref
FIXER: lineno: 2531:   hashparams/1000
FIXER: lineno: 2533:   ipsiandiang/100000
FIXER: lineno: 2559:   hashparams/1000
FIXER: lineno: 2560:   ipsiandiang/100000
FIXER: lineno: 2567:  (coarse_angles[oldiang][2] + ipsi*coarse_delta - refang[iang][2]+360.0)/Tracker["delta"]
FIXER: lineno: 2577:  q/1000
FIXER: lineno: 2600:   hashparams/1000
FIXER: lineno: 2604:   ipsiandiang/100000
FIXER: lineno: 2609:   cod2[iln]/1000
FIXER: lineno: 2618:   Util.innerproduct(data[ishift], temp, None)/nrmref
FIXER: lineno: 2656:  (time()-at)/60.
FIXER: lineno: 2783:   float(Tracker["nxpolar"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 2784:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 2795:  360./Tracker["delta"]
FIXER: lineno: 2808:  360./coarse_delta
FIXER: lineno: 2817:   ny/2
FIXER: lineno: 2818:   (Tracker["nxinit"]+2)/2
FIXER: lineno: 2965:  (time()-at)/60.
FIXER: lineno: 2992:   1.0/sqrt(Blockdata["bckgnoise"][i].get_value_at(k))
FIXER: lineno: 3058:   Tracker["avgvaradj"][procid]/wnorm
FIXER: lineno: 3077:  float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 3077:   ctf_params.apix/(float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"]))
FIXER: lineno: 3092:  nima/5
FIXER: lineno: 3093:  (time()-at)/60.
FIXER: lineno: 3097:   (n_coarse_ang *  n_coarse_psi)/10
FIXER: lineno: 3110:  m/n_coarse_psi
FIXER: lineno: 3111:   m/(n_coarse_ang*n_coarse_psi)
FIXER: lineno: 3118:   hashparams/1000
FIXER: lineno: 3122:   ipsiandiang/100000
FIXER: lineno: 3175:  m/n_coarse_psi
FIXER: lineno: 3176:   m/(n_coarse_ang*n_coarse_psi)
FIXER: lineno: 3179:   xod2/1000
FIXER: lineno: 3186:   hashparams/1000
FIXER: lineno: 3190:   ipsiandiang/100000
FIXER: lineno: 3230:   hashparams/1000
FIXER: lineno: 3232:   ipsiandiang/100000
FIXER: lineno: 3253:   hashparams/1000
FIXER: lineno: 3254:   ipsiandiang/100000
FIXER: lineno: 3261:  (coarse_angles[oldiang][2] + ipsi*coarse_delta - refang[iang][2]+360.0)/Tracker["delta"]
FIXER: lineno: 3270:  q/1000
FIXER: lineno: 3294:   hashparams/1000
FIXER: lineno: 3298:   ipsiandiang/100000
FIXER: lineno: 3302:   cod2[iln]/1000
FIXER: lineno: 3365:  (time()-at)/60.
FIXER: lineno: 3384:   float(Tracker["avgvaradj"][procid])/Tracker["nima_per_chunk"][procid]
FIXER: lineno: 3409:   float(sava)/snum
FIXER: lineno: 3410:  (float(svar) - snum*sava**2)/(snum -1)
FIXER: lineno: 3451:  (time()-at)/60.
FIXER: lineno: 3508:   float(Tracker["nxpolar"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 3509:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 3520:  360./Tracker["delta"]
FIXER: lineno: 3533:  360./coarse_delta
FIXER: lineno: 3667:  (time()-at)/60.
FIXER: lineno: 3688:   1.0/sqrt(Blockdata["bckgnoise"][i].get_value_at(k))
FIXER: lineno: 3751:   Tracker["avgvaradj"][procid]/wnorm
FIXER: lineno: 3770:  float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 3770:   ctf_params.apix/(float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"]))
FIXER: lineno: 3785:  nima/5
FIXER: lineno: 3786:  (time()-at)/60.
FIXER: lineno: 3790:   (n_coarse_ang *  n_coarse_psi)/10
FIXER: lineno: 3803:  m/n_coarse_psi
FIXER: lineno: 3804:   m/(n_coarse_ang*n_coarse_psi)
FIXER: lineno: 3811:   hashparams/1000
FIXER: lineno: 3815:   ipsiandiang/100000
FIXER: lineno: 3869:  m/n_coarse_psi
FIXER: lineno: 3870:   m/(n_coarse_ang*n_coarse_psi)
FIXER: lineno: 3873:   xod2/1000
FIXER: lineno: 3880:   hashparams/1000
FIXER: lineno: 3884:   ipsiandiang/100000
FIXER: lineno: 3920:   hashparams/1000
FIXER: lineno: 3922:   ipsiandiang/100000
FIXER: lineno: 3948:   hashparams/1000
FIXER: lineno: 3949:   ipsiandiang/100000
FIXER: lineno: 3956:  (coarse_angles[oldiang][2] + ipsi*coarse_delta - refang[iang][2]+360.0)/Tracker["delta"]
FIXER: lineno: 3966:  q/1000
FIXER: lineno: 3989:   hashparams/1000
FIXER: lineno: 3993:   ipsiandiang/100000
FIXER: lineno: 3997:   cod2[iln]/1000
FIXER: lineno: 4046:  (time()-at)/60.
FIXER: lineno: 4064:   float(Tracker["avgvaradj"][procid])/Tracker["nima_per_chunk"][procid]
FIXER: lineno: 4089:   float(sava)/snum
FIXER: lineno: 4090:  (float(svar) - snum*sava**2)/(snum -1)
FIXER: lineno: 4116:  (time()-at)/60.
FIXER: lineno: 4160:   float(Tracker["nxpolar"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 4161:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 4172:  360./Tracker["delta"]
FIXER: lineno: 4187:  360./coarse_delta
FIXER: lineno: 4189:  Tracker["an"]/Tracker["delta"]
FIXER: lineno: 4306:  (size_of_one_image*disp_unit)/1.0e9
FIXER: lineno: 4368:   len(conedirs)/len(cone_angles)
FIXER: lineno: 4462:  orgsize/1.0e9
FIXER: lineno: 4474:   1.0/sqrt(Blockdata["bckgnoise"][i].get_value_at(k))
FIXER: lineno: 4585:   Tracker["avgvaradj"][procid]/wnorm
FIXER: lineno: 4604:  float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 4604:   ctf_params.apix/(float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"]))
FIXER: lineno: 4626:  nima/5
FIXER: lineno: 4627:  (time()-at)/60.
FIXER: lineno: 4648:  len(lxod1)/3
FIXER: lineno: 4669:   hashparams/1000
FIXER: lineno: 4673:   ipsiandiang/100000
FIXER: lineno: 4760:   xod2/1000
FIXER: lineno: 4768:   hashparams/1000
FIXER: lineno: 4772:   ipsiandiang/100000
FIXER: lineno: 4827:   hashparams/1000
FIXER: lineno: 4829:   ipsiandiang/100000
FIXER: lineno: 4880:   hashparams/1000
FIXER: lineno: 4881:   ipsiandiang/100000
FIXER: lineno: 4889:  (coarse_angles[oldiang][2] + ipsi*coarse_delta - refang[iang][2]+360.0)/Tracker["delta"]
FIXER: lineno: 4901:  q/1000
FIXER: lineno: 4925:   hashparams/1000
FIXER: lineno: 4929:   ipsiandiang/100000
FIXER: lineno: 4935:   cod2[iln]/1000
FIXER: lineno: 5021:  (time()-at)/60.
FIXER: lineno: 5042:   float(Tracker["avgvaradj"][procid])/Tracker["nima_per_chunk"][procid]
FIXER: lineno: 5067:   float(sava)/snum
FIXER: lineno: 5068:  (float(svar) - snum*sava**2)/(snum -1)
FIXER: lineno: 5103:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 5137:   ctfs[itry].apix/shrinkage
FIXER: lineno: 5390:   (1.5*4*(2.0*Tracker["constants"]["nnxo"]+3.0)**3)/1.e9
FIXER: lineno: 5393:  (memory_per_node - data_size*1.2) / volume_size
FIXER: lineno: 5477:   float(Tracker["nxpolar"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 5478:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 5491:  360./Tracker["delta"]
FIXER: lineno: 5506:  360./coarse_delta
FIXER: lineno: 5508:  Tracker["an"]/Tracker["delta"]
FIXER: lineno: 5541:   ny/2
FIXER: lineno: 5542:   (Tracker["nxinit"]+2)/2
FIXER: lineno: 5688:  (time()-at)/60.
FIXER: lineno: 5708:  (size_of_one_image*disp_unit)/1.0e9
FIXER: lineno: 5770:   len(conedirs)/len(cone_angles)
FIXER: lineno: 5864:  orgsize/1.0e9
FIXER: lineno: 5876:   1.0/sqrt(Blockdata["bckgnoise"][i].get_value_at(k))
FIXER: lineno: 5987:   Tracker["avgvaradj"][procid]/wnorm
FIXER: lineno: 6006:  float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 6006:   ctf_params.apix/(float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"]))
FIXER: lineno: 6028:  nima/5
FIXER: lineno: 6029:  (time()-at)/60.
FIXER: lineno: 6050:  len(lxod1)/3
FIXER: lineno: 6071:   hashparams/1000
FIXER: lineno: 6075:   ipsiandiang/100000
FIXER: lineno: 6163:   xod2/1000
FIXER: lineno: 6171:   hashparams/1000
FIXER: lineno: 6175:   ipsiandiang/100000
FIXER: lineno: 6230:   hashparams/1000
FIXER: lineno: 6232:   ipsiandiang/100000
FIXER: lineno: 6283:   hashparams/1000
FIXER: lineno: 6284:   ipsiandiang/100000
FIXER: lineno: 6292:  (coarse_angles[oldiang][2] + ipsi*coarse_delta - refang[iang][2]+360.0)/Tracker["delta"]
FIXER: lineno: 6304:  q/1000
FIXER: lineno: 6328:   hashparams/1000
FIXER: lineno: 6332:   ipsiandiang/100000
FIXER: lineno: 6338:   cod2[iln]/1000
FIXER: lineno: 6424:  (time()-at)/60.
FIXER: lineno: 6445:   float(Tracker["avgvaradj"][procid])/Tracker["nima_per_chunk"][procid]
FIXER: lineno: 6470:   float(sava)/snum
FIXER: lineno: 6471:  (float(svar) - snum*sava**2)/(snum -1)
FIXER: lineno: 6540:   float(Tracker["nxpolar"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 6541:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 6552:  360./Tracker["delta"]
FIXER: lineno: 6567:  360./coarse_delta
FIXER: lineno: 6569:  Tracker["an"]/Tracker["delta"]
FIXER: lineno: 6686:  (size_of_one_image*disp_unit)/1.0e9
FIXER: lineno: 6748:   len(conedirs)/len(cone_angles)
FIXER: lineno: 6847:  orgsize/1.0e9
FIXER: lineno: 6859:   1.0/sqrt(Blockdata["bckgnoise"][i].get_value_at(k))
FIXER: lineno: 6971:   Tracker["avgvaradj"][procid]/wnorm
FIXER: lineno: 6990:  float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 6990:   ctf_params.apix/(float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"]))
FIXER: lineno: 7012:  nima/5
FIXER: lineno: 7013:  (time()-at)/60.
FIXER: lineno: 7034:  len(lxod1)/3
FIXER: lineno: 7056:   hashparams/1000
FIXER: lineno: 7060:   ipsiandiang/100000
FIXER: lineno: 7069:   Util.innerproduct(data[ishift], temp, None)/nrmref
FIXER: lineno: 7152:   xod2/1000
FIXER: lineno: 7160:   hashparams/1000
FIXER: lineno: 7164:   ipsiandiang/100000
FIXER: lineno: 7219:   hashparams/1000
FIXER: lineno: 7221:   ipsiandiang/100000
FIXER: lineno: 7272:   hashparams/1000
FIXER: lineno: 7273:   ipsiandiang/100000
FIXER: lineno: 7281:  (coarse_angles[oldiang][2] + ipsi*coarse_delta - refang[iang][2]+360.0)/Tracker["delta"]
FIXER: lineno: 7293:  q/1000
FIXER: lineno: 7317:   hashparams/1000
FIXER: lineno: 7321:   ipsiandiang/100000
FIXER: lineno: 7327:   cod2[iln]/1000
FIXER: lineno: 7415:  (time()-at)/60.
FIXER: lineno: 7436:   float(Tracker["avgvaradj"][procid])/Tracker["nima_per_chunk"][procid]
FIXER: lineno: 7487:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 7525:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 8345:   (1.5*4*(2.0*image_size+3.0)**3)/1.e9
FIXER: lineno: 8348:  (Tracker["constants"]["memory_per_node"] - data_size*1.2)/volume_size
FIXER: lineno: 8439:   options_no_default_value.ccfpercentage/100.0
FIXER: lineno: 8478:   ccsum/float(ny)
FIXER: lineno: 8639:   options.ccfpercentage/100.
FIXER: lineno: 8745:   options.xr/options.ts
FIXER: lineno: 8988:   options.ccfpercentage/100.
FIXER: lineno: 9013:   15./4.
FIXER: lineno: 9125:  hash/1000
FIXER: lineno: 9126:   hash/100000000
FIXER: lineno: 9398:  hash/1000
FIXER: lineno: 9399:   hash/100000000
FIXER: lineno: 9645:   500/Blockdata["nproc"]
FIXER: lineno: 9660:   len(params)/Blockdata["nproc"]
FILENAME:  ./sparx/bin/sxmontage.py
FIXER: lineno: 72:   (K-1)/N
FIXER: lineno: 100:  i/N
FILENAME:  ./sparx/bin/sxmref_ali2d.py
FILENAME:  ./sparx/bin/sxmref_ali3d.py
FILENAME:  ./sparx/bin/sxmref_alignment.py
FILENAME:  ./sparx/bin/sxmulti_ali2d.py
FILENAME:  ./sparx/bin/sxmulti_assign.py
FILENAME:  ./sparx/bin/sxparams_2D_to_3D.py
FILENAME:  ./sparx/bin/sxparams_3D_to_2D.py
FILENAME:  ./sparx/bin/sxpca.py
FILENAME:  ./sparx/bin/sxpdb2em.py
FIXER: lineno: 156:  (asig[0]+asig[1]+asig[2])/mass
FIXER: lineno: 156:  aavg[0]/mass
FIXER: lineno: 156:  aavg[1]/mass
FIXER: lineno: 156:  aavg[2]/mass
FIXER: lineno: 158:  (asig[0]+asig[1]+asig[2])/natm
FIXER: lineno: 158:  aavg[0]/natm
FIXER: lineno: 158:  aavg[1]/natm
FIXER: lineno: 158:  aavg[2]/natm
FIXER: lineno: 161:  mass/1000.0
FIXER: lineno: 166:  aavg[0]/mass
FIXER: lineno: 166:  aavg[1]/mass
FIXER: lineno: 166:  aavg[2]/mass
FIXER: lineno: 168:   aavg[0]/mass
FIXER: lineno: 169:   aavg[1]/mass
FIXER: lineno: 170:   aavg[2]/mass
FIXER: lineno: 173:  aavg[0]/natm
FIXER: lineno: 173:  aavg[1]/natm
FIXER: lineno: 173:  aavg[2]/natm
FIXER: lineno: 175:   aavg[0]/natm
FIXER: lineno: 176:   aavg[1]/natm
FIXER: lineno: 177:   aavg[2]/natm
FIXER: lineno: 248:   options.apix/fcbig
FIXER: lineno: 266:   atoms[i][3]/pixelbig
FIXER: lineno: 270:   atoms[i][2]/pixelbig
FIXER: lineno: 274:   atoms[i][1]/pixelbig
FILENAME:  ./sparx/bin/sxpipe.py
FILENAME:  ./sparx/bin/sxplot_projs_distrib.py
FILENAME:  ./sparx/bin/sxprepare_2d_forPCA.py
FILENAME:  ./sparx/bin/sxprocess.py
FIXER: lineno: 72:   (1+ ((n[1]-n[0]) % nct))/2
FIXER: lineno: 110:   (1+sqrt(1+8*len(lccc)))/2
FIXER: lineno: 162:  -de/T
FIXER: lineno: 178:  -de/T
FIXER: lineno: 577:   rops_dst[j]/rops_src[j]
FIXER: lineno: 742:   4096/2
FIXER: lineno: 746:   boxsize/2
FIXER: lineno: 747:   boxsize/2
FIXER: lineno: 826:  options.defocuserror/100.0
FIXER: lineno: 857:  ctfs[ll][8]/ctfs[ll][0]
FIXER: lineno: 1008:    1./(2.*options.pixel_size)
FIXER: lineno: 1010:  1./options.B_stop
FIXER: lineno: 1011:    1./options.B_start
FIXER: lineno: 1019:  2./global_b
FIXER: lineno: 1025:  options.fl/option.pixel_size
FIXER: lineno: 1120:   options.pixel_size/fsc_true[0][ifreq]
FIXER: lineno: 1176:   (fsc_true[1][nfreq143-2] + fsc_true[1][nfreq143-1])/5.
FIXER: lineno: 1177:   (fsc_true[1][nfreq143-1])/5.
FIXER: lineno: 1223:   1./options.B_start
FIXER: lineno: 1224:   1./options.B_stop
FIXER: lineno: 1233:  global_b/options.pixel_size**2
FIXER: lineno: 1233:  2./(global_b/options.pixel_size**2)
FIXER: lineno: 1238:  (abs(options.B_enhance))/options.pixel_size**2
FIXER: lineno: 1238:  2./((abs(options.B_enhance))/options.pixel_size**2)
FIXER: lineno: 1254:  options.pixel_size/options.fl
FIXER: lineno: 1259:   options.pixel_size/options.fl
FIXER: lineno: 1263:   options.pixel_size/resolution_FSC143
FIXER: lineno: 1275:  options.pixel_size/resolution_FSChalf
FIXER: lineno: 1275:  options.pixel_size/resolution_FSC143
FILENAME:  ./sparx/bin/sxproj_stability.py
FIXER: lineno: 145:   nx/2
FIXER: lineno: 177:   nima/img_per_grp
FIXER: lineno: 370:   (vphi - l*aphi*aphi)/l
FIXER: lineno: 371:   (vtht - l*atht*atht)/l
FIXER: lineno: 373:   (sqrt(max(vphi,0.0))+sqrt(max(vtht,0.0)))/2.0
FILENAME:  ./sparx/bin/sxproject3d.py
FILENAME:  ./sparx/bin/sxrealignment.py
FILENAME:  ./sparx/bin/sxrecons3d_f.py
FILENAME:  ./sparx/bin/sxrecons3d_n.py
FILENAME:  ./sparx/bin/sxrelion2sparx.py
FIXER: lineno: 307:   (relion_defocusU + relion_defocusV) / 20000
FIXER: lineno: 308:   (-relion_defocusU + relion_defocusV) / 10000
FILENAME:  ./sparx/bin/sxreproducibility.py
FILENAME:  ./sparx/bin/sxresample.py
FIXER: lineno: 51:   (nprj-1)/blocksize
FIXER: lineno: 203:   1.0/am
FIXER: lineno: 207:   1.0/ti
FILENAME:  ./sparx/bin/sxrot_sym.py
FILENAME:  ./sparx/bin/sxrsort3d.py
FIXER: lineno: 225:   pixel_size/Tracker["fuse_freq"]
FIXER: lineno: 229:   5.0/nnxo
FIXER: lineno: 319:   float(Tracker["nxinit"])/Tracker["constants"]["nnxo"]
FIXER: lineno: 394:   len(chunk_one)/float(Tracker["constants"]["total_stack"])
FIXER: lineno: 395:   len(chunk_two)/float(Tracker["constants"]["total_stack"])
FIXER: lineno: 429:   Tracker["constants"]["low_pass_filter"]/Tracker["shrinkage"]
FIXER: lineno: 459:  (Tracker["constants"]["total_stack"]-len(Tracker["this_unaccounted_list"]))/float(Tracker["constants"]["total_stack"])
FIXER: lineno: 498:   Tracker["constants"]["pixel_size"]/lowpass
FIXER: lineno: 786:   Tracker["constants"]["pixel_size"]/lowpass
FILENAME:  ./sparx/bin/sxrviper.py
FIXER: lineno: 213:  outlier_percentile/100.0
FIXER: lineno: 308:   avg_diff_per_image[int(x1*PERCENT_THRESHOLD_X)]/y1
FIXER: lineno: 314:   max(avg_diff_per_image_diff)/y1
FIXER: lineno: 499:   nx/2
FILENAME:  ./sparx/bin/sxshiftali.py
FIXER: lineno: 239:   1.0/float(nima)
FIXER: lineno: 311:  float(sx_sum_total)/nima
FIXER: lineno: 312:  float(sy_sum_total)/nima
FIXER: lineno: 499:   1./snr
FIXER: lineno: 525:   1.0/float(nima)
FIXER: lineno: 643:   float(sx_sum[0])/total_nfils
FIXER: lineno: 715:  -(x-mu)**2/(2.0*sigma**2)
FILENAME:  ./sparx/bin/sxsort3d.py
FIXER: lineno: 213:   pixel_size/Tracker["fuse_freq"]
FIXER: lineno: 217:   5.0/nnxo
FIXER: lineno: 311:   float(Tracker["nxinit"])/Tracker["constants"]["nnxo"]
FIXER: lineno: 345:   len(chunk_one)/float(total_stack)
FIXER: lineno: 346:   len(chunk_two)/float(total_stack)
FIXER: lineno: 372:  low_pass/Tracker["shrinkage"]
FIXER: lineno: 374:  Tracker["constants"]["low_pass_filter"]/Tracker["shrinkage"]
FILENAME:  ./sparx/bin/sxsort3d_depth.py
FIXER: lineno: 102:   float(Tracker["constants"]["img_per_grp"])/float(Tracker["constants"]["total_stack"])
FIXER: lineno: 123:   float(nxinit)/float(image_org_size)
FIXER: lineno: 132:   mem_bytes/(1024.**3)
FIXER: lineno: 173:   float(Tracker["constants"]["total_stack"])/float(Blockdata["nproc"])
FIXER: lineno: 547:   mean_vec[0]/max_value
FIXER: lineno: 547:   mean_vec[1]/max_value
FIXER: lineno: 547:   mean_vec[2]/max_value
FIXER: lineno: 661:  sum(replicas[ir])/float(len(replicas[ir]))
FIXER: lineno: 677:  std_per_group/float(len(replicas[i]))
FIXER: lineno: 678:   ssa_per_group**2/float(len(replicas[i]))
FIXER: lineno: 680:  global_mean**2/nsamples
FIXER: lineno: 681:   global_mean**2/nsamples
FIXER: lineno: 685:   ssa/(K-1.0)
FIXER: lineno: 686:   sse/float(n1)
FIXER: lineno: 687:   sst/float(n1)
FIXER: lineno: 688:   msa/mse
FIXER: lineno: 697:   global_mean/(float(nsamples))
FIXER: lineno: 837:   (score_list[i][0]+score_list[i][1])/2.
FIXER: lineno: 875:   (score_list[i][0]+score_list[i][1])/2.
FIXER: lineno: 1047:   float(Tracker["constants"]["fsc05"])/float(Tracker["nxinit"])
FIXER: lineno: 1050:   float(Tracker["nxinit"])/Tracker["constants"]["nnxo"]
FIXER: lineno: 1108:   float(Tracker["nxinit"])/Tracker["constants"]["nnxo"]
FIXER: lineno: 1236:  (minimum_group_size*Tracker["number_of_groups"])/float(Tracker["total_stack"])
FIXER: lineno: 1294:   1.0/stat[1]
FIXER: lineno: 1317:  im/iproc_nima
FIXER: lineno: 1421:  (minimum_group_size*Tracker["number_of_groups"])/float(Tracker["total_stack"])
FIXER: lineno: 1483:   1.0/stat[1]
FIXER: lineno: 1506:  im/iproc_nima
FIXER: lineno: 1628:   1./float(Tracker["number_of_groups"])
FIXER: lineno: 1629:  (minimum_group_size*Tracker["number_of_groups"])/float(Tracker["total_stack"])
FIXER: lineno: 1673:   changed_nptls/10.
FIXER: lineno: 1679:  (minimum_group_size*Tracker["number_of_groups"])/float(Tracker["total_stack"])
FIXER: lineno: 1700:   1.0/stat[1]
FIXER: lineno: 1724:  im/iproc_nima
FIXER: lineno: 1743:  assign_shake/200.
FIXER: lineno: 1858:   Tracker["nxinit"]/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 1904:   ctf_params.apix/shrinkage
FIXER: lineno: 1911:   ctf_params.apix/shrinkage
FIXER: lineno: 1916:   apix/shrinkage
FIXER: lineno: 1944:   Tracker["nxinit"]/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 1992:   ctf_params.apix/shrinkage
FIXER: lineno: 1999:   ctf_params.apix/shrinkage
FIXER: lineno: 2004:   apix/shrinkage
FIXER: lineno: 2038:   Tracker["nxinit"]/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 2046:   1.0/sqrt(Blockdata["bckgnoise"][i][k])
FIXER: lineno: 2077:   float(Tracker["constants"]["nnxo"])/float(focus3d_nx)
FIXER: lineno: 2122:   ctf_params.apix/shrinkage
FIXER: lineno: 2131:   ctf_params.apix/shrinkage
FIXER: lineno: 2139:   apix/shrinkage
FIXER: lineno: 2140:   apix/shrinkage
FIXER: lineno: 2195:   nxinit/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 2209:   1.0/sqrt(Blockdata["bckgnoise"][i].get_value_at(k))
FIXER: lineno: 2249:   Tracker["avgvaradj"][procid]/wnorm
FIXER: lineno: 2257:   ctf_params.apix/shrinkage
FIXER: lineno: 2264:   ctf_params.apix/shrinkage
FIXER: lineno: 2269:   apix/shrinkage
FIXER: lineno: 2503:  sum(all_smearing)/float(len(all_smearing))
FIXER: lineno: 2536:   float(nxinit)/float(nnxo)
FIXER: lineno: 2537:   float(nxinit)/float(nnxo)
FIXER: lineno: 2555:   paramstructure[im][2][i][0]/1000
FIXER: lineno: 2572:   probs[lshifts[ki]]/toprab
FIXER: lineno: 2577:   tdir[ii]/100000
FIXER: lineno: 2605:   Tracker["nxinit"]/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 2613:   1.0/sqrt(Blockdata["bckgnoise"][i][k])
FIXER: lineno: 2621:   float(Tracker["nxinit"])/float(focus3d_nx)
FIXER: lineno: 2648:   Tracker["avgnorm"][chunk_id]/norms[im]
FIXER: lineno: 2673:   ctf_params.apix/shrinkage
FIXER: lineno: 2682:   ctf_params.apix/shrinkage
FIXER: lineno: 2691:   apix/shrinkage
FIXER: lineno: 2692:   apix/shrinkage
FIXER: lineno: 2743:   particle_size/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 2761:   ctf_params.apix/shrinkage
FIXER: lineno: 2767:   ctf_params.apix/shrinkage
FIXER: lineno: 2772:   apix/shrinkage
FIXER: lineno: 2803:   -Util.sqed(data[im], rtemp, ctfs[im], Blockdata["unrolldata"][data[im].get_attr("particle_group")])/qt
FIXER: lineno: 2805:   -Util.sqed(data[im], rtemp, ctfs[im], Blockdata["unrolldata"])/qt
FIXER: lineno: 2824:   Util.innerproduct(ref, data[im], None)/nrmref
FIXER: lineno: 2826:   Util.innerproduct(ref, data[im], Blockdata["unrolldata"][data[im].get_attr("particle_group")])/nrmref
FIXER: lineno: 2827:   Util.innerproduct(ref, data[im], None)/nrmref
FIXER: lineno: 2960:  float(total_stack)/number_of_groups
FIXER: lineno: 3254:   float(n1)/float(n)
FIXER: lineno: 3258:   y/(y*(1.-q)+q)
FIXER: lineno: 3521:   float(nb_tot_objs)/len(assignment1)
FIXER: lineno: 4362:   len(chunk_one)/float(total_stack)
FIXER: lineno: 4363:   len(chunk_two)/float(total_stack)
FIXER: lineno: 4383:   float(Tracker["constants"]["fsc05"])/float(Tracker["constants"]["nxinit"])
FIXER: lineno: 4463:   len(chunk_one)/float(total_stack)
FIXER: lineno: 4464:   len(chunk_two)/float(total_stack)
FIXER: lineno: 4468:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 4937:  anger/n
FIXER: lineno: 4937:  shifter/n
FIXER: lineno: 5042:   1.0/float(sum(Tracker["nima_per_chunk"]))
FIXER: lineno: 5049:   tsd.get_value_at(k,i)/tocp[i]
FIXER: lineno: 5050:   2.0/qt
FIXER: lineno: 5055:   (tmp1[k-1]+tmp1[k]+tmp1[k+1])/3.0
FIXER: lineno: 5079:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 5628:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 5629:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 5648:   paramstructure[im][2][i][0]/1000
FIXER: lineno: 5669:   probs[lshifts[ki]]/toprab
FIXER: lineno: 5674:   tdir[ii]/100000
FIXER: lineno: 5690:   paramstructure[im][2][i][0]/1000
FIXER: lineno: 5711:   probs[lshifts[ki]]/toprab
FIXER: lineno: 5716:   tdir[ii]/100000
FIXER: lineno: 5907:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 5908:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 5927:  paramstructure[im][2][i][0]/1000
FIXER: lineno: 5948:   probs[lshifts[ki]]/toprab
FIXER: lineno: 5953:   tdir[ii]/100000
FIXER: lineno: 6144:    memory()/1.e9
FIXER: lineno: 6145:   resident()/1.e9
FIXER: lineno: 6146:   stacksize()/1.e9
FIXER: lineno: 6166:  (Tracker["constants"]["memory_per_node"] - total_data_in_mem -1.0)/(basic_memory_per_cpu + one_volume_in_mem)
FIXER: lineno: 6275:   Tracker["constants"]["pixel_size"]/fsc_true[0][ifreq]
FIXER: lineno: 6386:   (fsc_true[1][nfreq143-2] + fsc_true[1][nfreq143-1])/5.
FIXER: lineno: 6387:   (fsc_true[1][nfreq143-1])/5.
FIXER: lineno: 6407:   1./Tracker["constants"]["B_start"]
FIXER: lineno: 6409:   1./Tracker["constants"]["B_stop"]
FIXER: lineno: 6411:  float(nfreq143)/Tracker["constants"]["nnxo"]
FIXER: lineno: 6411:   Tracker["constants"]["pixel_size"]/(float(nfreq143)/Tracker["constants"]["nnxo"])
FIXER: lineno: 6414:   1./(B_stop + 8.)
FIXER: lineno: 6418:  global_b/Tracker["constants"]["pixel_size"]**2
FIXER: lineno: 6418:  2./(global_b/Tracker["constants"]["pixel_size"]**2)
FIXER: lineno: 6420:  (abs(Tracker["constants"]["B_enhance"]))/Tracker["constants"]["pixel_size"]**2
FIXER: lineno: 6420:  2./((abs(Tracker["constants"]["B_enhance"]))/Tracker["constants"]["pixel_size"]**2)
FIXER: lineno: 6433:  Tracker["constants"]["pixel_size"]/Tracker["constants"]["postlowpassfilter"]
FIXER: lineno: 6434:   Tracker["constants"]["pixel_size"]/Tracker["constants"]["postlowpassfilter"]
FIXER: lineno: 6441:    Tracker["constants"]["pixel_size"]/lowpassfilter
FILENAME:  ./sparx/bin/sxsort3d_new.py
FIXER: lineno: 102:   float(Tracker["constants"]["img_per_grp"])/float(Tracker["constants"]["total_stack"])
FIXER: lineno: 123:   float(nxinit)/float(image_org_size)
FIXER: lineno: 132:   mem_bytes/(1024.**3)
FIXER: lineno: 173:   float(Tracker["constants"]["total_stack"])/float(Blockdata["nproc"])
FIXER: lineno: 387:   len(Tracker["accounted_list"])/float(Tracker["total_stack"])
FIXER: lineno: 387:   1./float(Tracker["number_of_groups"])
FIXER: lineno: 551:   1.0/stat[1]
FIXER: lineno: 565:  im/nima
FIXER: lineno: 573:  im/iproc_nima
FIXER: lineno: 602:   changed_nptls/2.
FIXER: lineno: 658:   Tracker["nxinit"]/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 704:   ctf_params.apix/shrinkage
FIXER: lineno: 711:   ctf_params.apix/shrinkage
FIXER: lineno: 716:   apix/shrinkage
FIXER: lineno: 744:   Tracker["nxinit"]/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 791:   ctf_params.apix/shrinkage
FIXER: lineno: 798:   ctf_params.apix/shrinkage
FIXER: lineno: 803:   apix/shrinkage
FIXER: lineno: 837:   Tracker["nxinit"]/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 845:   1.0/sqrt(Blockdata["bckgnoise"][i][k])
FIXER: lineno: 876:   float(Tracker["constants"]["nnxo"])/float(focus3d_nx)
FIXER: lineno: 921:   ctf_params.apix/shrinkage
FIXER: lineno: 930:   ctf_params.apix/shrinkage
FIXER: lineno: 938:   apix/shrinkage
FIXER: lineno: 939:   apix/shrinkage
FIXER: lineno: 994:   nxinit/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 1008:   1.0/sqrt(Blockdata["bckgnoise"][i].get_value_at(k))
FIXER: lineno: 1053:   Tracker["avgvaradj"][procid]/wnorm
FIXER: lineno: 1061:   ctf_params.apix/shrinkage
FIXER: lineno: 1068:   ctf_params.apix/shrinkage
FIXER: lineno: 1073:   apix/shrinkage
FIXER: lineno: 1286:   float(nxinit)/float(nnxo)
FIXER: lineno: 1287:   float(nxinit)/float(nnxo)
FIXER: lineno: 1304:   paramstructure[im][2][i][0]/1000
FIXER: lineno: 1321:   probs[lshifts[ki]]/toprab
FIXER: lineno: 1326:   tdir[ii]/100000
FIXER: lineno: 1354:   Tracker["nxinit"]/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 1362:   1.0/sqrt(Blockdata["bckgnoise"][i][k])
FIXER: lineno: 1370:   float(Tracker["nxinit"])/float(focus3d_nx)
FIXER: lineno: 1418:   ctf_params.apix/shrinkage
FIXER: lineno: 1427:   ctf_params.apix/shrinkage
FIXER: lineno: 1436:   apix/shrinkage
FIXER: lineno: 1437:   apix/shrinkage
FIXER: lineno: 1487:   particle_size/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 1505:   ctf_params.apix/shrinkage
FIXER: lineno: 1511:   ctf_params.apix/shrinkage
FIXER: lineno: 1516:   apix/shrinkage
FIXER: lineno: 1544:   -Util.sqed(data[im], rtemp, ctfs[im], Blockdata["unrolldata"][data[im].get_attr("particle_group")])/qt
FIXER: lineno: 1545:   -Util.sqed(data[im], rtemp, ctfs[im], Blockdata["unrolldata"])/qt
FIXER: lineno: 1569:   peak/nrmref
FIXER: lineno: 1570:   Util.innerproduct(ref, data[im], None)/nrmref
FIXER: lineno: 1676:  float(total_stack)/number_of_groups
FIXER: lineno: 1786:   avg_scores/(len(ptp)-1.0)
FIXER: lineno: 2200:   nima/number_of_groups
FIXER: lineno: 2210:    l/nima
FIXER: lineno: 2235:   nima/number_of_groups
FIXER: lineno: 2237:  iref/maxasi
FIXER: lineno: 2366:   float(nb_tot_objs)/len(assignment1)
FIXER: lineno: 3204:   len(chunk_one)/float(total_stack)
FIXER: lineno: 3205:   len(chunk_two)/float(total_stack)
FIXER: lineno: 3225:   float(Tracker["constants"]["fsc05"])/float(Tracker["constants"]["nxinit"])
FIXER: lineno: 3305:   len(chunk_one)/float(total_stack)
FIXER: lineno: 3306:   len(chunk_two)/float(total_stack)
FIXER: lineno: 3310:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 3779:  anger/n
FIXER: lineno: 3779:  shifter/n
FIXER: lineno: 3884:   1.0/float(sum(Tracker["nima_per_chunk"]))
FIXER: lineno: 3891:   tsd.get_value_at(k,i)/tocp[i]
FIXER: lineno: 3892:   2.0/qt
FIXER: lineno: 3897:   (tmp1[k-1]+tmp1[k]+tmp1[k+1])/3.0
FIXER: lineno: 3921:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 4470:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 4471:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 4489:   paramstructure[im][2][i][0]/1000
FIXER: lineno: 4510:   probs[lshifts[ki]]/toprab
FIXER: lineno: 4515:   tdir[ii]/100000
FIXER: lineno: 4530:   paramstructure[im][2][i][0]/1000
FIXER: lineno: 4551:   probs[lshifts[ki]]/toprab
FIXER: lineno: 4556:   tdir[ii]/100000
FIXER: lineno: 4747:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 4748:   float(Tracker["nxinit"])/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 4766:  paramstructure[im][2][i][0]/1000
FIXER: lineno: 4787:   probs[lshifts[ki]]/toprab
FIXER: lineno: 4792:   tdir[ii]/100000
FIXER: lineno: 4983:    memory()/1.e9
FIXER: lineno: 4984:   resident()/1.e9
FIXER: lineno: 4985:   stacksize()/1.e9
FIXER: lineno: 5005:  (Tracker["constants"]["memory_per_node"] - total_data_in_mem -1.0)/(basic_memory_per_cpu + one_volume_in_mem)
FIXER: lineno: 5111:   Tracker["constants"]["pixel_size"]/fsc_true[0][ifreq]
FIXER: lineno: 5156:   (fsc_true[1][nfreq143-2] + fsc_true[1][nfreq143-1])/5.
FIXER: lineno: 5157:   (fsc_true[1][nfreq143-1])/5.
FIXER: lineno: 5198:   1./Tracker["constants"]["B_start"]
FIXER: lineno: 5200:   1./Tracker["constants"]["B_stop"]
FIXER: lineno: 5202:  float(nfreq143)/Tracker["constants"]["nnxo"]
FIXER: lineno: 5202:   Tracker["constants"]["pixel_size"]/(float(nfreq143)/Tracker["constants"]["nnxo"])
FIXER: lineno: 5205:   1./(B_stop + 8.)
FIXER: lineno: 5209:  global_b/Tracker["constants"]["pixel_size"]**2
FIXER: lineno: 5209:  2./(global_b/Tracker["constants"]["pixel_size"]**2)
FIXER: lineno: 5211:  (abs(Tracker["constants"]["B_enhance"]))/Tracker["constants"]["pixel_size"]**2
FIXER: lineno: 5211:  2./((abs(Tracker["constants"]["B_enhance"]))/Tracker["constants"]["pixel_size"]**2)
FIXER: lineno: 5224:  Tracker["constants"]["pixel_size"]/Tracker["constants"]["postlowpassfilter"]
FIXER: lineno: 5225:   Tracker["constants"]["pixel_size"]/Tracker["constants"]["postlowpassfilter"]
FIXER: lineno: 5232:    Tracker["constants"]["pixel_size"]/lowpassfilter
FIXER: lineno: 5503:   float(Tracker["constants"]["fsc05"])/float(Tracker["nxinit"])
FIXER: lineno: 5506:   float(Tracker["nxinit"])/Tracker["constants"]["nnxo"]
FIXER: lineno: 5539:   float(Tracker["nxinit"])/Tracker["constants"]["nnxo"]
FIXER: lineno: 5683:   \
				float(res05)/float(Tracker["nxinit"])
FIXER: lineno: 5683:   float(res143)/float(Tracker["nxinit"])
FILENAME:  ./sparx/bin/sxspliteigen.py
FILENAME:  ./sparx/bin/sxssnr3d.py
FILENAME:  ./sparx/bin/sxstability.py
FIXER: lineno: 85:   nx/2
FILENAME:  ./sparx/bin/sxsummovie.py
FILENAME:  ./sparx/bin/sxtransform2d.py
FILENAME:  ./sparx/bin/sxunblur.py
FILENAME:  ./sparx/bin/sxvar.py
FILENAME:  ./sparx/bin/sxvarimax.py
FILENAME:  ./sparx/bin/sxviper.py
FILENAME:  ./sparx/bin/sxwindow.py
FIXER: lineno: 593:   0.5/dummy_cter_entry[idx_cter_apix]
FIXER: lineno: 594:   0.5/dummy_cter_entry[idx_cter_apix]
FIXER: lineno: 595:   0.5/dummy_cter_entry[idx_cter_apix]
FIXER: lineno: 766:   len(valid_mic_id_substr_list)/100.0
FIXER: lineno: 779:   mic_id_substr_idx / progress_percent_step
FIXER: lineno: 805:   src_pixel_size / resample_ratio
FIXER: lineno: 862:   abs_ctf_limit / float(box_size)
FIXER: lineno: 874:   resample_ratio / box_size
FILENAME:  ./sparx/libpy/alignment.py
FIXER: lineno: 269:  (tot-1.0) / maxrin
FIXER: lineno: 270:  (tot-1.0) / maxrin
FIXER: lineno: 301:   1.0/data[2]
FIXER: lineno: 368:   (sx-ps[0][0])/2
FIXER: lineno: 369:   (sy-ps[0][1])/2
FIXER: lineno: 429:    Util.innerproduct(prj, reference_projection, None) / norm_of_reference_projection
FIXER: lineno: 455:    -Util.innerproduct(data[2], reference_projection, None) / norm_of_reference_projection
FIXER: lineno: 481:    -Util.innerproduct(data[2], reference_projection, None) / norm_of_reference_projection
FIXER: lineno: 542:    -reference_projection.cmp("dot", prj, dict(negative = 0, mask = mask2D))/ norm_of_reference_projection
FIXER: lineno: 602:   -reference_projection.cmp("dot", prj, dict(negative = 0, mask = mask2D))/ norm_of_reference_projection
FIXER: lineno: 755:   (sx-ps[0][0])/2
FIXER: lineno: 756:   (sy-ps[0][1])/2
FIXER: lineno: 845:  nx/2
FIXER: lineno: 847:   K/(2.*N)
FIXER: lineno: 937:   len(numr)/3
FIXER: lineno: 955:  xrng[0]/step
FIXER: lineno: 956:  xrng[-1]/step
FIXER: lineno: 958:  yrng[0]/step
FIXER: lineno: 959:  yrng[-1]/step
FIXER: lineno: 994:  xrng[0]/step
FIXER: lineno: 995:  xrng[-1]/step
FIXER: lineno: 997:  yrng[0]/step
FIXER: lineno: 998:  yrng[-1]/step
FIXER: lineno: 1098:  1.0/step
FIXER: lineno: 1345:   1.0/T
FIXER: lineno: 1381:   peaks[select][0]/peaks[0][0]
FIXER: lineno: 1395:   peaks[select][0]/peaks[0][0]
FIXER: lineno: 1400:   1.0/T
FIXER: lineno: 1401:  peaks[k][0]/qt
FIXER: lineno: 1448:   peaks[select][0]/peaks[0][0]
FIXER: lineno: 1462:   peaks[select][0]/peaks[0][0]
FIXER: lineno: 1494:   peaks[k][0]/peaks[0][0]
FIXER: lineno: 1501:   dJe[k] / T
FIXER: lineno: 1512:   q[k] / sumq
FIXER: lineno: 1526:   pi/180.0
FIXER: lineno: 1582:  ps/pm
FIXER: lineno: 1582:   pm/ps
FIXER: lineno: 2401:  sxs/shrink
FIXER: lineno: 2401:  sys/shrink
FIXER: lineno: 2467:  360./delta_psi
FIXER: lineno: 2555:  360./delta_psi
FIXER: lineno: 2648:  360./delta_psi
FIXER: lineno: 3313:   len(numr)/3
FIXER: lineno: 3327:  j/2
FIXER: lineno: 3338:  j/2
FIXER: lineno: 3352:   len(numr)/3
FIXER: lineno: 3366:  j/2
FIXER: lineno: 3377:  j/2
FIXER: lineno: 3390:  nx/2
FIXER: lineno: 3423:   -1.0/float(nima)
FIXER: lineno: 3438:   1.0/float(nima)
FIXER: lineno: 3454:   nx/2
FIXER: lineno: 3746:   (26.*Z[0,0] - Z[0,1] + 2*Z[0,2] - Z[1,0] - 19.*Z[1,1] - 7.*Z[1,2] + 2.*Z[2,0] - 7.*Z[2,1] + 14.*Z[2,2])/9.
FIXER: lineno: 3748:   (8.* Z[0,0] - 8.*Z[0,1] + 5.*Z[1,0] - 8.*Z[1,1] + 3.*Z[1,2] +2.*Z[2,0] - 8.*Z[2,1] + 6.*Z[2,2])/(-6.)
FIXER: lineno: 3750:   (Z[0,0] - 2.*Z[0,1] + Z[0,2] + Z[1,0] -2.*Z[1,1] + Z[1,2] + Z[2,0] - 2.*Z[2,1] + Z[2,2])/6.
FIXER: lineno: 3752:   (8.*Z[0,0] + 5.*Z[0,1] + 2.*Z[0,2] -8.*Z[1,0] -8.*Z[1,1] - 8.*Z[1,2] + 3.*Z[2,1] + 6.*Z[2,2])/(-6.)
FIXER: lineno: 3754:   (Z[0,0] - Z[0,2] - Z[2,0] + Z[2,2])/4.
FIXER: lineno: 3756:   (Z[0,0] + Z[0,1] + Z[0,2] - 2.*Z[1,0] - 2.*Z[1,1] -2.*Z[1,2] + Z[2,0] + Z[2,1] + Z[2,2])/6.
FIXER: lineno: 3762:   (C4*C5 - 2.*C2*C6) / DENOM
FIXER: lineno: 3763:   (C2*C5 - 2.*C4*C3) / DENOM
FIXER: lineno: 3766:   PEAKV / DENOM
FIXER: lineno: 3814:  psimax/psistep
FIXER: lineno: 3866:  psimax/psistep
FIXER: lineno: 3925:  psimax/psistep
FIXER: lineno: 4003:   nx/2
FIXER: lineno: 4004:  ny/2
FIXER: lineno: 4009:   nx/2
FIXER: lineno: 4031:   nx/2
FIXER: lineno: 4057:   nx/2
FIXER: lineno: 4059:  nx/2
FIXER: lineno: 4060:  ny/2
FIXER: lineno: 4068:   nx/2
FIXER: lineno: 4222:   M/2
FIXER: lineno: 4250:   M/2
FIXER: lineno: 4299:   M/2
FIXER: lineno: 4341:  xrng/stepx
FIXER: lineno: 4342:  yrng/stepy
FIXER: lineno: 4518:  xrng/stepx
FIXER: lineno: 4519:  yrng/stepy
FIXER: lineno: 4715:  reduced_psiref/psistep
FIXER: lineno: 4716:  reduced_psiref/psistep
FIXER: lineno: 4723:  xrng/stepx
FIXER: lineno: 4724:  yrng/stepy
FIXER: lineno: 4932:  reduced_psiref/psistep
FIXER: lineno: 4933:  reduced_psiref/psistep
FIXER: lineno: 4941:  xrng/stepx
FIXER: lineno: 4942:  yrng/stepy
FIXER: lineno: 5764:   newsx/shrinkage
FIXER: lineno: 5764:   newsy/shrinkage
FIXER: lineno: 5845:  x/len(all_refs_angles)
FILENAME:  ./sparx/libpy/applications.py
FIXER: lineno: 174:   nx/2
FIXER: lineno: 223:   nx/2
FIXER: lineno: 269:   float(Ng-1)/(nima-1)
FIXER: lineno: 270:   float(nima-Ng)/(nima-1)
FIXER: lineno: 286:  log(2*pi*last_ring)/log(2)
FIXER: lineno: 287:  log(last_ring)/log(2)
FIXER: lineno: 292:  xrng[N_step]/step[N_step]
FIXER: lineno: 292:  yrng[N_step]/step[N_step]
FIXER: lineno: 323:   (ave1+ave2)/nima
FIXER: lineno: 348:   sx_sum/float(nima)
FIXER: lineno: 349:   sy_sum/float(nima)
FIXER: lineno: 409:  float(pixel_error)/float(mirror_consistent)
FIXER: lineno: 526:   nx/2
FIXER: lineno: 582:   nx/2
FIXER: lineno: 634:   float(Ng-1)/(nima-1)
FIXER: lineno: 635:   float(nima-Ng)/(nima-1)
FIXER: lineno: 664:  log(2*pi*last_ring)/log(2)
FIXER: lineno: 665:  log(last_ring)/log(2)
FIXER: lineno: 670:  xrng[N_step]/step[N_step]
FIXER: lineno: 670:  yrng[N_step]/step[N_step]
FIXER: lineno: 698:   (ave1+ave2)/nima
FIXER: lineno: 738:   float(sx_sum)/nima
FIXER: lineno: 739:   float(sy_sum)/nima
FIXER: lineno: 819:  float(pixel_error)/float(mirror_consistent)
FIXER: lineno: 942:   nx/2
FIXER: lineno: 988:   nx/2
FIXER: lineno: 1020:   float(Ng-1)/(nima-1)
FIXER: lineno: 1021:   float(nima-Ng)/(nima-1)
FIXER: lineno: 1065:   (ave1+ave2)/total_nima
FIXER: lineno: 1106:   float(sx_sum)/total_nima
FIXER: lineno: 1107:   float(sy_sum)/total_nima
FIXER: lineno: 1175:  float(pixel_error)/float(mirror_consistent)
FIXER: lineno: 1894:   1.0/snr
FIXER: lineno: 1894:   1.0/(ctf2[0][i] + ctf2[1][i] + 1.0/snr)
FIXER: lineno: 1896:   1.0/snr
FIXER: lineno: 1896:   1.0/(ctf2[k][i] + 1.0/snr)
FIXER: lineno: 1923:   (av1 + av2)/nima
FIXER: lineno: 2023:   nx/2
FIXER: lineno: 2058:   nx/2
FIXER: lineno: 2169:   1.0/snr
FIXER: lineno: 2169:   1.0 / (ctf2[j][0][i] + 1.0/snr)
FIXER: lineno: 2172:   1.0/snr
FIXER: lineno: 2172:   1.0 / (ctf2[j][1][i] + 1.0/snr)
FIXER: lineno: 2176:   1.0/snr
FIXER: lineno: 2176:   1.0 / (ctf2[j][0][i] + ctf2[j][1][i] + 1.0/snr)
FIXER: lineno: 2181:   1.0/float(refi[j][2])
FIXER: lineno: 2187:   sx_sum[j]/len(assign[j])
FIXER: lineno: 2188:   sy_sum[j]/len(assign[j])
FIXER: lineno: 2298:  nx/2
FIXER: lineno: 2331:   nx/2
FIXER: lineno: 2457:   1.0/snr
FIXER: lineno: 2457:   1.0 / (ctf2[j][0][i] + 1.0/snr)
FIXER: lineno: 2460:   1.0/snr
FIXER: lineno: 2460:   1.0 / (ctf2[j][1][i] + 1.0/snr)
FIXER: lineno: 2466:   1.0/snr
FIXER: lineno: 2466:   1.0 / (ctf2[j][0][i] + ctf2[j][1][i] + 1.0/snr)
FIXER: lineno: 2473:   1.0/float(refi[j][2])
FIXER: lineno: 2604:  nx/2
FIXER: lineno: 2605:  ny/2
FIXER: lineno: 2644:   len(numr)/3
FIXER: lineno: 2677:   len(numr)/3
FIXER: lineno: 2771:  nx/2
FIXER: lineno: 2772:  ny/2
FIXER: lineno: 2965:   (temp - mean)/sigma
FIXER: lineno: 2968:   len(numr)/3
FIXER: lineno: 3068:   dmin / float(norm_rsd)
FIXER: lineno: 3190:  nx/2
FIXER: lineno: 3191:  ny/2
FIXER: lineno: 3209:   len(numr)/3
FIXER: lineno: 3272:   nx/2
FIXER: lineno: 3305:  nx/2
FIXER: lineno: 3306:  ny/2
FIXER: lineno: 3330:  i/2.0
FIXER: lineno: 3334:   i/2.0
FIXER: lineno: 3345:   1.0/float(nima)
FIXER: lineno: 3432:  nx/2
FIXER: lineno: 3472:   1.0/snr
FIXER: lineno: 3472:   1.0/(ctf_tot[i] + 1.0/snr)
FIXER: lineno: 3475:   1.0/snr
FIXER: lineno: 3475:   1.0/(ctf2[k][0][i] + ctf2[k][1][i] + 1.0/snr)
FIXER: lineno: 3477:   1.0/snr
FIXER: lineno: 3477:   1.0/(ctf2[k][kl][i] + 1.0/snr)
FIXER: lineno: 3486:   av1/len(data[k])
FIXER: lineno: 3517:   (av1+av2)/len(data[k])
FIXER: lineno: 3542:   (av1+av2)/len(data[k])
FIXER: lineno: 3545:   fscross[1][i]/(2.0-fscross[1][i])
FIXER: lineno: 4204:   nx/2
FIXER: lineno: 4407:  nx/2
FIXER: lineno: 4633:   1.0/varf
FIXER: lineno: 4776:  nx/2
FIXER: lineno: 4961:   par_r[0]/float(total_nima)
FIXER: lineno: 4991:   float(lhx)/float(total_nima)
FIXER: lineno: 5731:  nx/2
FIXER: lineno: 5745:  1.0/chunk
FIXER: lineno: 5780:  float(nx)/float(nxm)
FIXER: lineno: 5797:  float(nx)/float(nxm)
FIXER: lineno: 5807:  float(nx)/float(nxm)
FIXER: lineno: 5862:   M/2
FIXER: lineno: 5922:   1.0/varf
FIXER: lineno: 6023:   im/float(total_nima)
FIXER: lineno: 6513:  nx/2
FIXER: lineno: 7192:  nx/2
FIXER: lineno: 7489:   1.0/varf
FIXER: lineno: 7635:   (Iter%(lstp*(nassign+nrefine)))/(nassign+nrefine)
FIXER: lineno: 7953:   1.0/varf
FIXER: lineno: 8005:   (Iter%(lstp*(nassign+nrefine)))/(nassign+nrefine)
FIXER: lineno: 8227:  d[iref][ima]/T
FIXER: lineno: 8435:   1.0/varf
FIXER: lineno: 8629:   1.0/varf
FIXER: lineno: 8663:   (Iter%(lstp*(nassign+nrefine)))/(nassign+nrefine)
FIXER: lineno: 8858:   1.0/varf
FIXER: lineno: 8920:   M/2
FIXER: lineno: 9069:   1.0/varf
FIXER: lineno: 9272:   1.0/varf
FIXER: lineno: 9476:   1.0/varf
FIXER: lineno: 9668:   1.0/varf
FIXER: lineno: 9824:  1.0/chunk
FIXER: lineno: 9843:   M/2
FIXER: lineno: 10047:  nx/2
FIXER: lineno: 10050:  1.0/chunk
FIXER: lineno: 10114:   M/2
FIXER: lineno: 10180:   1.0/varf
FIXER: lineno: 10303:  im/float(total_nima)
FIXER: lineno: 10407:  nx/2
FIXER: lineno: 10410:  1.0/chunk
FIXER: lineno: 10480:   M/2
FIXER: lineno: 10546:   1.0/varf
FIXER: lineno: 10681:  im/float(total_nima)
FIXER: lineno: 10827:  onx/2
FIXER: lineno: 10861:  1.0/chunk
FIXER: lineno: 10965:   M/2
FIXER: lineno: 11023:   1.0/varf
FIXER: lineno: 11122:   im/float(total_nima)
FIXER: lineno: 11142:   t[3]/shrinkage
FIXER: lineno: 11142:   t[4]/shrinkage
FIXER: lineno: 11195:  nx/2
FIXER: lineno: 11204:  p_size/2
FIXER: lineno: 11205:  p_size/2
FIXER: lineno: 11226:  float(sigma)/float(p_size)
FIXER: lineno: 11227:  nx/deci
FIXER: lineno: 11228:  ny/deci
FIXER: lineno: 11238:   0.5/deci
FIXER: lineno: 11242:   0.5/deci
FIXER: lineno: 11253:  p_size/2
FIXER: lineno: 11260:  len(peak)/3
FIXER: lineno: 11268:  p_size/2
FIXER: lineno: 11269:  p_size/2
FIXER: lineno: 11343:  nx/2
FIXER: lineno: 11352:  p_size/2
FIXER: lineno: 11353:  p_size/2
FIXER: lineno: 11373:  float(sigma)/float(p_size)
FIXER: lineno: 11374:  nx/deci
FIXER: lineno: 11375:  ny/deci
FIXER: lineno: 11385:   0.5/deci
FIXER: lineno: 11389:   0.5/deci
FIXER: lineno: 11400:  p_size/2
FIXER: lineno: 11407:  len(peak)/3
FIXER: lineno: 11415:  p_size/2
FIXER: lineno: 11416:  p_size/2
FIXER: lineno: 11516:  dp/2
FIXER: lineno: 11548:  nx/2
FIXER: lineno: 11650:  dp/(2*pixel_size)
FIXER: lineno: 11652:   nmax/2.0
FIXER: lineno: 11682:  float(dp)/(2*pixel_size)
FIXER: lineno: 11728:  float(dp)/pixel_size
FIXER: lineno: 11730:   dpp/2.0
FIXER: lineno: 11863:  360.0/sn
FIXER: lineno: 11869:  360.0/sn
FIXER: lineno: 12016:  max(phi_value_0)/delta[N_step]
FIXER: lineno: 12023:  lhist/15.0
FIXER: lineno: 12023:     lhist/ceil((lhist/15.0))
FIXER: lineno: 12026:  lhist/30.0
FIXER: lineno: 12026:     lhist/ceil((lhist/30.0))
FIXER: lineno: 12980:   scan_step/magnification
FIXER: lineno: 12986:   Pixel_size/Pixel_size_raw
FIXER: lineno: 13052:   scan_step/magnification
FIXER: lineno: 13058:   Pixel_size/Pixel_size_raw
FIXER: lineno: 13437:    1.0/0.0
FIXER: lineno: 14068:   e.get_xsize()/2.0
FIXER: lineno: 14639:   384./54.
FIXER: lineno: 14647:  sx/scale
FIXER: lineno: 14647:  sy/scale
FIXER: lineno: 14915:  nx/2
FIXER: lineno: 15265:   nvol/size
FIXER: lineno: 16181:   float(i)/nx
FIXER: lineno: 16298:   exp_prj.dot( ref_prj ) / exp_prj.dot(exp_prj)
FIXER: lineno: 16315:   sum_scale/img_number
FIXER: lineno: 16320:   scales[i] / avg_scale
FIXER: lineno: 16550:  refstat[1]/pc[1]
FIXER: lineno: 16556:   1.0/float(total_img)
FIXER: lineno: 16581:  refstat[1]/pc[1]
FIXER: lineno: 16589:   1.0/float(total_img-1)
FIXER: lineno: 16712:  refstat[1]/pc[1]
FIXER: lineno: 16722:   1.0/float(total_img)
FIXER: lineno: 16747:  refstat[1]/pc[1]
FIXER: lineno: 16758:   1.0/float(total_img-1)
FIXER: lineno: 16844:   len(d)/neigvol
FIXER: lineno: 16934:   len(d)/neigvol
FIXER: lineno: 17220:  val / 1000.0
FIXER: lineno: 17221:   val / 1000.0
FIXER: lineno: 17291:   1 / float(len(part[k]))
FIXER: lineno: 17425:   nx/2
FIXER: lineno: 17447:   nx/2
FIXER: lineno: 17474:   sx_sum/float(nima)
FIXER: lineno: 17475:   sy_sum/float(nima)
FIXER: lineno: 17647:   nx/2
FIXER: lineno: 17660:   nx/2
FIXER: lineno: 17687:   sx_sum/float(nima)
FIXER: lineno: 17688:   sy_sum/float(nima)
FIXER: lineno: 18105:   sump1[0][0]/(indcs[ifil][1] - start)
FIXER: lineno: 18228:  float(dp)/pixel_size
FIXER: lineno: 18300:   dc/(1.0+(1.0-drin)*ctf2[rin] + drin*ctf2[rin+1])
FIXER: lineno: 18432:   rise/2.0
FIXER: lineno: 18610:  (refc-rsc)/rise
FIXER: lineno: 18613:   (ref_nz-refc-rsc)/rise
FIXER: lineno: 18669:  dnz/dz
FIXER: lineno: 18713:   float(dp)/pixel_size
FIXER: lineno: 18720:  float(maxerror)/nsteps
FIXER: lineno: 18737:  float(dp)/new_pixel_size
FIXER: lineno: 18739:   pixel_size/new_pixel_size
FIXER: lineno: 19078:   dp/pixel_size
FIXER: lineno: 19137:  float(phiwobble)/delta
FIXER: lineno: 19141:  rise/2
FIXER: lineno: 19144:  360.0/delta
FIXER: lineno: 19361:  dp/2
FIXER: lineno: 19374:  an[i]/dphi
FIXER: lineno: 19374:  dp/pixel_size
FIXER: lineno: 19375:  dp/pixel_size
FIXER: lineno: 19375:  (2.0*y_restrict[i])/(dp/pixel_size)
FIXER: lineno: 19517:   360./maxrin
FIXER: lineno: 19537:   M/2
FIXER: lineno: 19551:  dp/(2*pixel_size)
FIXER: lineno: 19589:  float(dp)/(2*pixel_size)
FIXER: lineno: 19632:  float(dp)/pixel_size
FIXER: lineno: 19634:   dpp/2.0
FIXER: lineno: 19881:  dp/2
FIXER: lineno: 19894:  an[i]/dphi
FIXER: lineno: 19894:  dp/pixel_size
FIXER: lineno: 19895:  dp/pixel_size
FIXER: lineno: 19895:  (2.0*y_restrict[i])/(dp/pixel_size)
FIXER: lineno: 20049:   M/2
FIXER: lineno: 20063:  dp/(2*pixel_size)
FIXER: lineno: 20100:  float(dp)/(2*pixel_size)
FIXER: lineno: 20147:  float(dp)/pixel_size
FIXER: lineno: 20149:   dpp/2.0
FIXER: lineno: 20230:  xrng[N_step]/stepx[N_step]
FIXER: lineno: 20231:  yrng[N_step]/stepy
FIXER: lineno: 20390:  dp/2
FIXER: lineno: 20404:  an[i]/dphi
FIXER: lineno: 20404:  dp/pixel_size
FIXER: lineno: 20405:  dp/pixel_size
FIXER: lineno: 20405:  (2.0*y_restrict[i])/(dp/pixel_size)
FIXER: lineno: 20559:  dp/(2*pixel_size)
FIXER: lineno: 20595:  float(dp)/(2*pixel_size)
FIXER: lineno: 20627:  float(dp)/pixel_size
FIXER: lineno: 20629:   dpp/2.0
FIXER: lineno: 20797:  dp/2
FIXER: lineno: 20811:  an[i]/dphi
FIXER: lineno: 20811:  dp/pixel_size
FIXER: lineno: 20812:  dp/pixel_size
FIXER: lineno: 20812:  (2.0*y_restrict[i])/(dp/pixel_size)
FIXER: lineno: 20967:  dp/(2*pixel_size)
FIXER: lineno: 20999:  float(dp)/(2*pixel_size)
FIXER: lineno: 21027:  float(dp)/pixel_size
FIXER: lineno: 21029:   dpp/2.0
FIXER: lineno: 21126:   dp/pixel_size
FIXER: lineno: 21139:  (s2y[0] + dist)/rise
FIXER: lineno: 21286:   dp/pixel_size
FIXER: lineno: 21289:   pi/180.0
FIXER: lineno: 21323:   -rise/2
FIXER: lineno: 21326:   rise/2
FIXER: lineno: 21332:  (s2y[0] + dist[i])/rise
FIXER: lineno: 21335:  (s2y[0] + dist[i])/rise
FIXER: lineno: 21819:  nx/2
FIXER: lineno: 21973:   par_r[0]/float(total_nima)
FIXER: lineno: 22003:   float(lhx)/float(total_nima)
FIXER: lineno: 22270:  nx/2
FIXER: lineno: 22284:  1.0/chunk
FIXER: lineno: 22319:  float(nx)/float(nxm)
FIXER: lineno: 22336:  float(nx)/float(nxm)
FIXER: lineno: 22346:  float(nx)/float(nxm)
FIXER: lineno: 22401:   M/2
FIXER: lineno: 22462:   1.0/varf
FIXER: lineno: 22561:   im/float(total_nima)
FIXER: lineno: 22838:   1.0/stat[1]
FIXER: lineno: 22846:   1.0/stat[1]
FIXER: lineno: 22851:  rt[i]/ro[i]
FIXER: lineno: 22855:  Tracker["constants"]["low_pass_filter"]/Tracker["shrinkage"]
FIXER: lineno: 22895:   (Iter%(lstp*(nassign+nrefine)))/(nassign+nrefine)
FIXER: lineno: 22972:   float(highres[iref])/(ref.get_ysize())
FIXER: lineno: 23183:   1.0/stat[1]
FIXER: lineno: 23189:  rt[i]/ro[i]
FIXER: lineno: 23193:  Tracker["constants"]["low_pass_filter"]/Tracker["shrinkage"]
FIXER: lineno: 23203:   1.0/varf
FIXER: lineno: 23516:   1.0/stat[1]
FIXER: lineno: 23524:   1.0/stat[1]
FIXER: lineno: 23529:  rt[i]/ro[i]
FIXER: lineno: 23533:  Tracker["constants"]["low_pass_filter"]/Tracker["shrinkage"]
FIXER: lineno: 23571:   (Iter%(lstp*(nassign+nrefine)))/(nassign+nrefine)
FIXER: lineno: 23647:   float(highres[iref])/(ref.get_ysize())
FIXER: lineno: 23818:  d[iref][ima]/T
FIXER: lineno: 24074:   1.0/stat[1]
FIXER: lineno: 24080:  rt[i]/ro[i]
FIXER: lineno: 24084:  Tracker["constants"]["low_pass_filter"]/Tracker["shrinkage"]
FIXER: lineno: 24396:   1.0/stat[1]
FIXER: lineno: 24401:  rt[i]/ro[i]
FIXER: lineno: 24405:  Tracker["constants"]["low_pass_filter"]/Tracker["shrinkage"]
FIXER: lineno: 24443:   (Iter%(lstp*(nassign+nrefine)))/(nassign+nrefine)
FIXER: lineno: 24519:   float(highres[iref])/(ref.get_ysize())
FIXER: lineno: 24697:  d[iref][ima]/T
FIXER: lineno: 24940:   1.0/stat[1]
FIXER: lineno: 24946:  rt[i]/ro[i]
FIXER: lineno: 24950:  Tracker["constants"]["low_pass_filter"]/Tracker["shrinkage"]
FILENAME:  ./sparx/libpy/development.py
FILENAME:  ./sparx/libpy/filter.py
FIXER: lineno: 367:  M/2
FIXER: lineno: 379:  M/2
FIXER: lineno: 391:  M/2
FIXER: lineno: 403:  M/2
FIXER: lineno: 564:  dres[1][i-1]/(1.0+dres[1][i-1])
FIXER: lineno: 564:   dres[1][i]/(1.0+dres[1][i])
FIXER: lineno: 564:   dres[1][i+1]/(1.0+dres[1][i+1])
FIXER: lineno: 594:  dres[1][i-1]/(1.0+dres[1][i-1])
FIXER: lineno: 594:   dres[1][i]/(1.0+dres[1][i])
FIXER: lineno: 594:   dres[1][i+1]/(1.0+dres[1][i+1])
FIXER: lineno: 594:   (dres[1][i-1]/(1.0+dres[1][i-1]) + dres[1][i]/(1.0+dres[1][i]) + dres[1][i+1]/(1.0+dres[1][i+1]))/3.0
FIXER: lineno: 634:  eps/sqrt(a**2-1)
FIXER: lineno: 634:  lowf/highf
FIXER: lineno: 635:  2./order
FIXER: lineno: 635:  lowf/eps**(2./order)
FIXER: lineno: 638:  dres[0][i]/rad
FIXER: lineno: 638:   1./sqrt(1.+(dres[0][i]/rad)**order)
FIXER: lineno: 763:   float(i)/nx
FIXER: lineno: 765:  float(i)/nx
FIXER: lineno: 793:  hm/deno
FIXER: lineno: 834:   pmax[j]/ptab[j]
FILENAME:  ./sparx/libpy/fundamentals.py
FIXER: lineno: 507:   0.5/decimation
FIXER: lineno: 509:  0.5/decimation
FIXER: lineno: 698:   M/2
FIXER: lineno: 746:   M/2
FIXER: lineno: 778:   M/2
FIXER: lineno: 926:   M/2
FIXER: lineno: 956:   nx/2
FIXER: lineno: 1133:  x62/primelist[j]
FIXER: lineno: 1135:   x62/primelist[j]
FIXER: lineno: 1155:   1./win_size
FIXER: lineno: 1158:   100/(100-overlp_x)
FIXER: lineno: 1159:   100/(100-overlp_y)
FIXER: lineno: 1160:  (nx-2*edge_x)/win_size
FIXER: lineno: 1161:  (ny-2*edge_y)/win_size
FIXER: lineno: 1165:  win_size/x39
FIXER: lineno: 1167:  win_size/x38
FIXER: lineno: 1172:    pw2/float(iz)
FIXER: lineno: 1189:  nx_fft/win_s
FIXER: lineno: 1192:  nx_fft/num_bnd
FIXER: lineno: 1195:   1./win_x
FIXER: lineno: 1204:   100/(100-overlp_y)
FIXER: lineno: 1205:  (ny)/win_y
FIXER: lineno: 1212:  win_y/x39
FIXER: lineno: 1233:   1./win_size
FIXER: lineno: 1236:   100/(100-overlp_x)
FIXER: lineno: 1237:   100/(100-overlp_y)
FIXER: lineno: 1238:  (nx-2*edge_x)/win_size
FIXER: lineno: 1239:  (ny-2*edge_y)/win_size
FIXER: lineno: 1242:  win_size/x39
FIXER: lineno: 1244:  win_size/x38
FIXER: lineno: 1297:  tol/abs(b-a)
FIXER: lineno: 1572:  360./self.nsym
FIXER: lineno: 1572:  360./self.nsym
FIXER: lineno: 1572:  360./self.nsym
FIXER: lineno: 1572:  360./self.nsym
FIXER: lineno: 1579:  360./self.nsym
FIXER: lineno: 1579:  360./self.nsym
FIXER: lineno: 1581:  self.nsym/2
FIXER: lineno: 1583:  self.nsym/2
FIXER: lineno: 1589:   360.0/ncap
FIXER: lineno: 1590:  1.0/(sqrt(3.0)*tan(2*pi/ncap/2.0))
FIXER: lineno: 1591:   cos(radians(cap_sig))/(1.0-cos(radians(cap_sig)))
FIXER: lineno: 1592:  180./ncap
FIXER: lineno: 1592:  360./ncap
FIXER: lineno: 1602:   360.0/ncap
FIXER: lineno: 1603:  1.0/(sqrt(3.0)*tan(2*pi/ncap/2.0))
FIXER: lineno: 1604:   cos(radians(cap_sig))/(1.0-cos(radians(cap_sig)))
FIXER: lineno: 1605:  360.0/ncap
FIXER: lineno: 1605:  360.0/ncap
FIXER: lineno: 1606:  -1.0/3.0
FIXER: lineno: 1615:   360.0/ncap
FIXER: lineno: 1616:  1.0/(sqrt(3.0)*tan(2*pi/ncap/2.0))
FIXER: lineno: 1617:   cos(radians(cap_sig))/(1.0-cos(radians(cap_sig)))
FIXER: lineno: 1645:  self.brackets[inc_mirror][2]/2.0
FIXER: lineno: 1645:  sin(radians(self.brackets[inc_mirror][2]/2.0-tmphi))/tan(radians(self.brackets[inc_mirror][1]))
FIXER: lineno: 1646:   \
					sin(radians(tmphi))/tan(radians(self.brackets[inc_mirror][3]))
FIXER: lineno: 1646:  self.brackets[inc_mirror][2]/2.0
FIXER: lineno: 1645:   \
				(sin(radians(self.brackets[inc_mirror][2]/2.0-tmphi))/tan(radians(self.brackets[inc_mirror][1])) + \
					sin(radians(tmphi))/tan(radians(self.brackets[inc_mirror][3])))/sin(radians(self.brackets[inc_mirror][2]/2.0))
FIXER: lineno: 1647:  1.0/baldwin_lower_alt_bound
FIXER: lineno: 1658:  self.brackets[inc_mirror][2]/2.0
FIXER: lineno: 1658:  sin(radians(self.brackets[inc_mirror][2]/2.0-tmphi))/tan(radians(self.brackets[inc_mirror][1]))
FIXER: lineno: 1659:   \
					sin(radians(tmphi))/tan(radians(self.brackets[inc_mirror][3]))
FIXER: lineno: 1659:  self.brackets[inc_mirror][2]/2.0
FIXER: lineno: 1658:   \
				(sin(radians(self.brackets[inc_mirror][2]/2.0-tmphi))/tan(radians(self.brackets[inc_mirror][1])) + \
					sin(radians(tmphi))/tan(radians(self.brackets[inc_mirror][3])))/sin(radians(self.brackets[inc_mirror][2]/2.0))
FIXER: lineno: 1660:  1.0/baldwin_lower_alt_bound
FIXER: lineno: 1667:  self.brackets[inc_mirror][2]/2.0
FIXER: lineno: 1667:  sin(radians(self.brackets[inc_mirror][2]/2.0-tmphi))/tan(radians(self.brackets[inc_mirror][1]))
FIXER: lineno: 1668:  self.brackets[inc_mirror][3]/2.0
FIXER: lineno: 1668:   \
							sin(radians(tmphi))/tan(radians(self.brackets[inc_mirror][3]/2.0))
FIXER: lineno: 1668:  self.brackets[inc_mirror][2]/2.0
FIXER: lineno: 1667:   \
						(sin(radians(self.brackets[inc_mirror][2]/2.0-tmphi))/tan(radians(self.brackets[inc_mirror][1])) + \
							sin(radians(tmphi))/tan(radians(self.brackets[inc_mirror][3]/2.0)))/sin(radians(self.brackets[inc_mirror][2]/2.0))
FIXER: lineno: 1669:  1.0/baldwin_upper_alt_bound
FIXER: lineno: 1681:   360.0/self.nsym
FIXER: lineno: 1685:   self.nsym/2
FIXER: lineno: 1686:   360.0/nsm
FIXER: lineno: 1707:   len(temp)/3
FIXER: lineno: 1730:   360.0/self.nsym
FIXER: lineno: 1731:   720.0/self.nsym
FIXER: lineno: 1765:  360.0/self.nsym
FIXER: lineno: 1767:  720.0/self.nsym
FIXER: lineno: 1821:   delta/sin(radians(theta))
FIXER: lineno: 1831:   3.6/s
FIXER: lineno: 1842:   delta/r
FILENAME:  ./sparx/libpy/global_def.py
FILENAME:  ./sparx/libpy/isac.py
FIXER: lineno: 103:   myid/indep_run
FIXER: lineno: 191:   ndata/img_per_grp
FIXER: lineno: 346:   ndata/img_per_grp
FIXER: lineno: 405:   match_second/2
FIXER: lineno: 407:   ndata/img_per_grp
FIXER: lineno: 452:   nleft/img_per_grp
FIXER: lineno: 677:   nx/2
FIXER: lineno: 795:   nx/2
FIXER: lineno: 948:   nima/numref
FIXER: lineno: 950:  i/maxasi
FIXER: lineno: 1023:   1.0/float(members[j])
FIXER: lineno: 1368:   len(refi)/n_group
FIXER: lineno: 1419:   len(refi)/indep_run
FIXER: lineno: 1543:   size_all/indep_run
FIXER: lineno: 1556:  i/size
FILENAME:  ./sparx/libpy/logger.py
FILENAME:  ./sparx/libpy/morphology.py
FIXER: lineno: 145:   1.0/a
FIXER: lineno: 267:   i/fctf
FIXER: lineno: 281:   12.398/sqrt(voltage*(1022.0+voltage))
FIXER: lineno: 297:   dfa/defc
FIXER: lineno: 313:   sqrt(r2)/(nc*2*Pixel_size)
FIXER: lineno: 354:  nx/2
FIXER: lineno: 381:  nx/2
FIXER: lineno: 519:   1./(2*fwpix)
FIXER: lineno: 521:   1.0/fcycle
FIXER: lineno: 526:   12.398/np.sqrt(voltage*(1022.0+voltage))
FIXER: lineno: 528:   1./(2*pix)
FIXER: lineno: 537:  xr/fwpix
FIXER: lineno: 538:  1.0/(2*pix)
FIXER: lineno: 738:   (dz_high-dz_low)/nloop
FIXER: lineno: 782:   defocus/round_off
FIXER: lineno: 804:   (dz_high-dz_low)/nloop
FIXER: lineno: 848:   defocus/round_off
FIXER: lineno: 870:   1./f_l
FIXER: lineno: 871:   1./f_h
FIXER: lineno: 978:   nima/number_of_proc
FIXER: lineno: 990:   1./f_l
FIXER: lineno: 991:   1./f_h
FIXER: lineno: 1078:   1./f_l
FIXER: lineno: 1079:   1./f_h
FIXER: lineno: 1143:   (t-mean_t)/sigma_t
FIXER: lineno: 1146:   ccf(e, m_pad)/n_pixele
FIXER: lineno: 1149:   ccf(tmp,m_pad)/n_pixelt
FIXER: lineno: 1278:  data[1][i]/args[2]
FIXER: lineno: 1278:  args[1]/(data[1][i]/args[2]+1.0)**2
FIXER: lineno: 1285:  c2/(x[i]+c3)**2
FIXER: lineno: 1294:  -(x[i] - d2)**2/d3
FIXER: lineno: 1295:  c2/(x[i] + c3)**2
FIXER: lineno: 1311:  i/(2*Pixel_size*len(list_1dpw2))
FIXER: lineno: 1314:  i/(2*Pixel_size*len(list_1dpw2))
FIXER: lineno: 1341:   (threshold - s1[0])/s1[1]
FIXER: lineno: 1450:   float(nx2)/nx1
FIXER: lineno: 2139:   len(namics)/100.0
FIXER: lineno: 2229:  aroo**2 / nimi
FIXER: lineno: 2229:   (sroo-aroo**2 / nimi) / nimi
FIXER: lineno: 2252:   istart / (pixel_size * wn)
FIXER: lineno: 2526:  supe[l] / niter
FIXER: lineno: 2533:   ibec / (pixel_size * wn)
FIXER: lineno: 2534:   ib1 / (pixel_size * wn)
FIXER: lineno: 2651:   512.0/nx
FIXER: lineno: 3210:   len(namics)/100.0
FIXER: lineno: 3297:  aroo**2 / nimi
FIXER: lineno: 3297:   (sroo-aroo**2 / nimi) / nimi
FIXER: lineno: 3320:   istart / (pixel_size * wn)
FIXER: lineno: 3586:  supe[l] / niter
FIXER: lineno: 3593:   ibec / (pixel_size * wn)
FIXER: lineno: 3594:   ib1 / (pixel_size * wn)
FIXER: lineno: 3710:   512.0/nx
FIXER: lineno: 3768:  A/sqrt(1.0e4-A**2)
FIXER: lineno: 3769:  A/sqrt(1.0e4-A**2)
FIXER: lineno: 3842:  tol/abs(b-a)
FIXER: lineno: 3901:    -sum(data[0]*ct)/np.linalg.norm(ct,2)
FIXER: lineno: 3916:    -sum(data[0]*ct/data[1])/np.linalg.norm(ct,2)
FIXER: lineno: 3930:  data[0][i]/data[1][i]
FIXER: lineno: 3931:    -sum(data[0]*ct/data[1])/np.linalg.norm(ct,2)
FIXER: lineno: 3955:    -q1/q2
FIXER: lineno: 3968:  sum(data[0]*ct)/np.linalg.norm(ct,2)
FIXER: lineno: 3991:  q1/q2
FIXER: lineno: 3996:   sum(data[skip:skip+4])/3.0
FIXER: lineno: 4003:  1.0/window_size
FIXER: lineno: 4008:   sum(data[skip:skip+4])/3.0
FIXER: lineno: 4014:  1.0/window_size
FIXER: lineno: 4018:   (qt[i] - sav)/np.sqrt(sdv*qnorm - sav*sav)
FIXER: lineno: 4122:   float(i)/10000.0
FIXER: lineno: 4238:   float(i)/10000.0
FIXER: lineno: 4280:   d/10000.
FIXER: lineno: 4282:   sum(ct)/nn
FIXER: lineno: 4283:   sum(ct[istart:]*sub[istart:])/sum(ct[istart:])
FIXER: lineno: 4293:   sum(ct)/nn
FIXER: lineno: 4551:  (normpw-s[0])/s[1]
FIXER: lineno: 4583:  sum(data[0]*ct)/np.linalg.norm(ct,2)
FIXER: lineno: 4684:   float(i)/10000.0
FIXER: lineno: 4851:   1.0/(float(nx)**4)
FIXER: lineno: 4908:   istart/(Pixel_size*nx)
FIXER: lineno: 5607:   len(namics)/100.0
FIXER: lineno: 5695:  aroo**2 / nimi
FIXER: lineno: 5695:   (sroo-aroo**2 / nimi) / nimi
FIXER: lineno: 5716:   istart / (pixel_size * wn)
FIXER: lineno: 5767:   threshold((qa - bckg))/envl
FIXER: lineno: 5906:  supe[l] / niter
FIXER: lineno: 5913:   ibec / (pixel_size * wn)
FIXER: lineno: 5914:   ib1 / (pixel_size * wn)
FIXER: lineno: 6028:   512.0/nx
FIXER: lineno: 6120:   qm/1000.
FIXER: lineno: 6313:  xrng[0]/step
FIXER: lineno: 6314:  xrng[-1]/step
FIXER: lineno: 6316:  yrng[0]/step
FIXER: lineno: 6317:  yrng[-1]/step
FIXER: lineno: 6446:   float(i-1000)/10000.0
FIXER: lineno: 6600:   float(i)/10000.0
FIXER: lineno: 6608:   dama[-2]/42.
FILENAME:  ./sparx/libpy/multi_shc.py
FIXER: lineno: 66:   360.0/symmetry_class.nsym
FIXER: lineno: 136:   360.0/symmetry_class.nsym
FIXER: lineno: 330:  nx/2
FIXER: lineno: 528:   (temp * 1.0) / (total_nima * number_of_runs)
FIXER: lineno: 587:   len(params)/3
FIXER: lineno: 677:   sqrt(max(q2,0.0))/q1
FIXER: lineno: 702:  len(ipl)/2
FIXER: lineno: 706:   total_nima/2
FIXER: lineno: 958:  nx/2
FIXER: lineno: 1030:   pi/180.
FIXER: lineno: 1171:  sum(all_pixer)/total_nima
FIXER: lineno: 1523:   360.0/symmetry_class.nsym
FIXER: lineno: 1593:   len(peaks) / 5
FIXER: lineno: 1613:   params[i][0]/ws
FIXER: lineno: 1713:   len(peaks) / 7
FIXER: lineno: 1772:   params[i][0]/ws
FIXER: lineno: 1775:   params[i][0]/ws
FIXER: lineno: 1821:   360.0/int(sym[1:])
FIXER: lineno: 1900:   params[i][0]/ws
FIXER: lineno: 1903:   params[i][0]/ws
FIXER: lineno: 2000:  nx/2
FIXER: lineno: 2140:  sum(all_pixer)/total_nima
FIXER: lineno: 2273:  float(nx)/float(nxm)
FIXER: lineno: 2279:   1.0/stat[1]
FIXER: lineno: 2289:  rt[i]/ro[i]
FIXER: lineno: 2301:   1.0/stat[1]
FILENAME:  ./sparx/libpy/pixel_error.py
FIXER: lineno: 70:  radians(ali_params1[0]-ali_params2[0])/2
FIXER: lineno: 70:   (sin(radians(ali_params1[0]-ali_params2[0])/2)*(2*r+1))**2 / 2
FIXER: lineno: 120:  stdv/nima
FIXER: lineno: 173:  atan2(sini, cosi)/simi
FIXER: lineno: 173:  360.0/simi
FIXER: lineno: 220:   nima/2
FIXER: lineno: 358:   float(mirror_same)/nima
FIXER: lineno: 358:   err/mirror_same
FIXER: lineno: 374:   len(ali_params1)/4
FIXER: lineno: 386:   float(mirror_same)/nima
FIXER: lineno: 386:   err/mirror_same
FIXER: lineno: 421:   len(ali_params1)/4
FIXER: lineno: 433:   float(mirror_same)/nima
FIXER: lineno: 433:   err/mirror_same
FIXER: lineno: 512:   len(ali_params1)/4
FIXER: lineno: 534:   (sq-avg*avg/n)/n
FIXER: lineno: 544:   len(ali_params[0])/4
FIXER: lineno: 573:  sqrtP/L
FIXER: lineno: 576:  sum_cosa/sqrtP
FIXER: lineno: 576:   sum_sina/sqrtP
FIXER: lineno: 576:   sum(sx)/L
FIXER: lineno: 576:   -sum_sina/sqrtP
FIXER: lineno: 576:   sum_cosa/sqrtP
FIXER: lineno: 576:   sum(sy)/L
FIXER: lineno: 585:   sum(sqr_pixel_error)/N
FIXER: lineno: 669:   len(ali_params[0])/4
FIXER: lineno: 682:   len(mir_stab_part)/float(nima)
FIXER: lineno: 725:  sum(pixel_error_before)/nima2
FIXER: lineno: 781:   len(ali_params[0])/4
FIXER: lineno: 810:  sqrtP/L
FIXER: lineno: 813:  sum_cosa/sqrtP
FIXER: lineno: 813:   sum_sina/sqrtP
FIXER: lineno: 813:   sum(sx)/L
FIXER: lineno: 813:   -sum_sina/sqrtP
FIXER: lineno: 813:   sum_cosa/sqrtP
FIXER: lineno: 813:   sum(sy)/L
FIXER: lineno: 822:   sum(sqr_pixel_error)/N
FIXER: lineno: 860:   sum(xxp)/nq
FIXER: lineno: 861:   sum(yyp)/nq
FIXER: lineno: 869:   pi/4
FIXER: lineno: 954:  1.0/r
FIXER: lineno: 968:  xn/r
FIXER: lineno: 978:  yn/r
FIXER: lineno: 990:  xnew/r
FIXER: lineno: 991:  ynew/r
FIXER: lineno: 1088:   terr/ns
FIXER: lineno: 1127:   w/2
FIXER: lineno: 1128:   w/2
FIXER: lineno: 1130:  new_w/2
FIXER: lineno: 1130:  new_w/2
FIXER: lineno: 1240:   sum_phierr/(iend-ibeg+1)
FILENAME:  ./sparx/libpy/projection.py
FIXER: lineno: 262:   line.get_xsize()/2
FIXER: lineno: 317:   M/2
FIXER: lineno: 317:   K/(2.*N)
FIXER: lineno: 330:   Mx/2
FIXER: lineno: 330:   K/(2.*Nx)
FIXER: lineno: 331:   My/2
FIXER: lineno: 331:   K/(2.*Ny)
FIXER: lineno: 332:   Mz/2
FIXER: lineno: 332:   K/(2.*Nz)
FIXER: lineno: 368:   pi/180.0
FIXER: lineno: 432:   pi/180.0
FIXER: lineno: 516:  val_rnd / float(val_f)
FIXER: lineno: 533:  6.28 / float(g_n_lines)
FIXER: lineno: 582:   180.0 / float(dpsi)
FIXER: lineno: 590:  360 / dpsi
FIXER: lineno: 655:   1.0/sigma
FIXER: lineno: 680:   (line - mean_l) / sigma_l
FIXER: lineno: 706:   M / 2
FIXER: lineno: 708:   K / (2. * N)
FIXER: lineno: 717:  180.0 / d_psi
FIXER: lineno: 718:   M_PI / float(nangle)
FIXER: lineno: 746:   M / 2
FIXER: lineno: 748:   K / (2. * N)
FIXER: lineno: 762:  180.0 / d_psi
FIXER: lineno: 763:   M_PI / float(nangle)
FIXER: lineno: 874:  6.28 / float(g_n_lines)
FIXER: lineno: 1036:  6.28 / float(g_n_lines)
FIXER: lineno: 1128:   180.0 / pi
FIXER: lineno: 1129:   1.0 / rad2deg
FILENAME:  ./sparx/libpy/reconstruction.py
FIXER: lineno: 143:   float(xysize)/size
FIXER: lineno: 144:   float(xysize)/size
FIXER: lineno: 145:   float(zsize)/size
FIXER: lineno: 147:   float(xysize)/size
FIXER: lineno: 148:   float(xysize)/size
FIXER: lineno: 153:   float(zsize)/size
FIXER: lineno: 222:   float(xysize)/imgsize
FIXER: lineno: 223:   float(xysize)/imgsize
FIXER: lineno: 224:   float(zsize)/imgsize
FIXER: lineno: 226:   float(xysize)/imgsize
FIXER: lineno: 227:   float(xysize)/imgsize
FIXER: lineno: 232:   float(zsize)/imgsize
FIXER: lineno: 593:   float(xysize)/imgsize
FIXER: lineno: 594:   float(xysize)/imgsize
FIXER: lineno: 595:   float(zsize)/imgsize
FIXER: lineno: 597:   float(xysize)/imgsize
FIXER: lineno: 598:   float(xysize)/imgsize
FIXER: lineno: 603:   float(zsize)/imgsize
FIXER: lineno: 626:   nnx/0
FIXER: lineno: 1386:   paramstructure[im][2][i][0]/1000
FIXER: lineno: 1398:   probs[lshifts[0]]/toprab
FIXER: lineno: 1401:   probs[lshifts[ki]]/toprab
FIXER: lineno: 1406:   tdir[ii]/100000
FIXER: lineno: 1463:   paramstructure[im][2][i][0]/1000
FIXER: lineno: 1484:   probs[lshifts[ki]]/toprab
FIXER: lineno: 1489:   tdir[ii]/100000
FIXER: lineno: 1645:   float(xysize)/size
FIXER: lineno: 1646:   float(xysize)/size
FIXER: lineno: 1647:   float(zsize)/size
FIXER: lineno: 1649:   float(xysize)/size
FIXER: lineno: 1650:   float(xysize)/size
FIXER: lineno: 1655:   float(zsize)/size
FIXER: lineno: 1735:   float(xysize)/imgsize
FIXER: lineno: 1736:   float(xysize)/imgsize
FIXER: lineno: 1737:   float(zsize)/imgsize
FIXER: lineno: 1739:   float(xysize)/imgsize
FIXER: lineno: 1740:   float(xysize)/imgsize
FIXER: lineno: 1745:   float(zsize)/imgsize
FIXER: lineno: 1885:  (float(i)-0.5)/(float(nn-1)*2)
FIXER: lineno: 1888:  SSNR(i,0,0)/SSNR(i,1,0)
FIXER: lineno: 1891:  SSNR(i,1,0)/SSNR(i,2,0)
FIXER: lineno: 1967:  (float(i)-0.5)/(float(nn-1)*2)
FIXER: lineno: 1970:  SSNR(i,0,0)/SSNR(i,1,0)
FIXER: lineno: 1975:  SSNR(i,1,0)/SSNR(i,2,0)
FIXER: lineno: 2153:   1.0 / Util.infomask(proj3Dsphere, None, True)[3]
FIXER: lineno: 2175:   projections_data[i][j] / threshold_to_minval(w, min_allowed_divisor)
FIXER: lineno: 2181:   q.cmp("lod",solution,{"mask":sphere3D,"negative":0,"normalize":0}) / sphere3D_volume
FIXER: lineno: 2269:   1.0 / Util.infomask(proj3Dsphere, None, True)[3]
FIXER: lineno: 2298:   projections_data[i][j] / threshold_to_minval(w, min_allowed_divisor)
FIXER: lineno: 2308:   q.cmp("lod",solution,{"mask":sphere3D,"negative":0,"normalize":0}) / q.cmp("lod",model_blank(nx,nx,nx),{"mask":sphere3D,"negative":0,"normalize":0})
FIXER: lineno: 2309:   q.cmp("sqEuclidean",solution,{"mask":sphere3D}) / q.cmp("sqEuclidean",model_blank(nx,nx,nx),{"mask":sphere3D})
FIXER: lineno: 2423:  rnorm/bnorm
FILENAME:  ./sparx/libpy/sparx.py
FILENAME:  ./sparx/libpy/statistics.py
FIXER: lineno: 113:   1.0 /float(nima)
FIXER: lineno: 114:   (var - ave*ave*nima)/(nima-1)
FIXER: lineno: 210:   1.0/snr
FIXER: lineno: 321:   1.0/float(n)
FIXER: lineno: 323:   1.0/float(n)
FIXER: lineno: 326:   1.0/float(n-1)
FIXER: lineno: 407:   1.0/float(nima)
FIXER: lineno: 409:   1.0/float(nima)
FIXER: lineno: 411:   1.0/float(nima-1)
FIXER: lineno: 509:   1.0 /float(nlistID)
FIXER: lineno: 511:   (var - ave*ave*nlistID)/(nlistID-1)
FIXER: lineno: 545:   1.0/float(n)
FIXER: lineno: 654:   ave1/(n//2+(n%2))
FIXER: lineno: 654:   ave2/(n//2)
FIXER: lineno: 677:   ave1/(n//2+(n%2))
FIXER: lineno: 677:   ave2/(n//2)
FIXER: lineno: 705:  n/2
FIXER: lineno: 705:   ave1/(n/2+n%2)
FIXER: lineno: 705:  n/2
FIXER: lineno: 705:   ave2/(n/2)
FIXER: lineno: 732:  ntot/2
FIXER: lineno: 732:   ave1/(ntot/2+(ntot%2))
FIXER: lineno: 732:  ntot/2
FIXER: lineno: 732:   ave2/(ntot/2)
FIXER: lineno: 758:   (var - ave*ave*(n-1))/(n-2)
FIXER: lineno: 787:   1.0/float(ii)
FIXER: lineno: 791:   1.0/float(ii-1)
FIXER: lineno: 833:   1.0/float(ii)
FIXER: lineno: 839:   1.0/float(ii-1)
FIXER: lineno: 881:   1.0/float(ii)
FIXER: lineno: 887:   1.0/float(ii-1)
FIXER: lineno: 938:   1.0/snr
FIXER: lineno: 938:   1.0/(tcft2[i] + 1.0/snr)
FIXER: lineno: 942:   1.0/snr
FIXER: lineno: 942:   1.0/(ctf_2[k][i] + 1.0/snr)
FIXER: lineno: 962:   1.0/float(len(images)-1)
FIXER: lineno: 966:   1.0/float(nclass[k]-1)
FIXER: lineno: 1008:   1.0/float(nima)
FIXER: lineno: 1012:   1.0/float(nima-1)
FIXER: lineno: 1043:   1.0/float(nima)
FIXER: lineno: 1101:   1./(ctf_2_sum[i]+1.)
FIXER: lineno: 1155:   1.0/(n-1)
FIXER: lineno: 1202:   float(Ng-1)/(n-1)
FIXER: lineno: 1203:   float(n-Ng)/(n-1)
FIXER: lineno: 1222:   1.0/(n-1)
FIXER: lineno: 1276:   sumsq/n
FIXER: lineno: 1276:   (var - sumsq/n)/(n-1)
FIXER: lineno: 1409:   sumsq/var
FIXER: lineno: 1415:   rave[i]/rvar[i]
FIXER: lineno: 1471:   1.0/float(n-1)
FIXER: lineno: 1477:   sumsq/var
FIXER: lineno: 1482:   rsumsq[i]/rvar[i]
FIXER: lineno: 1526:   -1.0/float(n)
FIXER: lineno: 1527:   1.0/float(n-1)
FIXER: lineno: 1596:   1.0/float(n-1)
FIXER: lineno: 1648:   1.0/float(n-1)
FIXER: lineno: 1710:   1.0/float(nima-1)
FIXER: lineno: 1735:  nx/2
FIXER: lineno: 1819:  nx/2
FIXER: lineno: 1916:   len(result)/3
FIXER: lineno: 1988:   0.5/lp
FIXER: lineno: 1995:  (fl+fh)/2.0
FIXER: lineno: 2008:   dp/do
FIXER: lineno: 2049:  (fl+fh)/2.0
FIXER: lineno: 2120:  ncnt/2
FIXER: lineno: 2120:  ncnt/2
FIXER: lineno: 2120:   (refimgo*(int(ncnt/2)+(ncnt%2)) + refimge*int(ncnt/2))/ncnt
FIXER: lineno: 2129:  ncnt/2
FIXER: lineno: 2129:  ncnt/2
FIXER: lineno: 2129:   (refimgo*(int(ncnt/2)+(ncnt%2)) + refimge*int(ncnt/2))/ncnt
FIXER: lineno: 2240:   d / float(SD2)
FIXER: lineno: 2534:   Cls['Ji'][k] / float(Cls['n'][k]-1)
FIXER: lineno: 2619:   1.0/float(nob)
FIXER: lineno: 2633:  Tr / (Cls['k'] - 1)
FIXER: lineno: 2633:  Je / (N - Cls['k'])
FIXER: lineno: 2633:   (Tr / (Cls['k'] - 1)) / (Je / (N - Cls['k']))
FIXER: lineno: 2646:   Cls['Ji'][i] / Cls['n'][i]
FIXER: lineno: 2648:   Cls['Ji'][j] / Cls['n'][j]
FIXER: lineno: 2650:   (ji + jj) / err
FIXER: lineno: 2655:   DB / Cls['k']
FIXER: lineno: 2670:   1.0 / T
FIXER: lineno: 2800:   1.0 / float(Cls_ctf2[k][i])
FIXER: lineno: 2806:   CTFxAve.cmp("SqEuclidean", im_M[n]) / norm
FIXER: lineno: 2813:   1.0 / float(Cls['n'][k])
FIXER: lineno: 2817:   im_M[n].cmp("SqEuclidean",Cls['ave'][assign[n]])/norm
FIXER: lineno: 2855:  ni/(ni-1)
FIXER: lineno: 2855:  di/norm
FIXER: lineno: 2855:  nj/(nj+1)
FIXER: lineno: 2855:  dj/norm
FIXER: lineno: 2862:   (dJe[k] - mindJe) / scale
FIXER: lineno: 2904:   1.0 / float(Cls_ctf2[k][i])
FIXER: lineno: 2910:   CTFxAve.cmp("SqEuclidean", im_M[n]) / norm
FIXER: lineno: 2916:   1.0/float(Cls['n'][k])
FIXER: lineno: 2920:   im_M[n].cmp("SqEuclidean",Cls['ave'][assign[n]]) / norm
FIXER: lineno: 2924:   abs(Je - old_Je) / Je
FIXER: lineno: 2995:   CTFxAve.cmp("SqEuclidean", im_M[n]) / norm
FIXER: lineno: 3003:   im_M[n].cmp("SqEuclidean",Cls['ave'][assign[n]]) / norm
FIXER: lineno: 3011:   1.0/float(Cls['n'][k])
FIXER: lineno: 3153:   1.0 / float(Cls_ctf2[k][i])
FIXER: lineno: 3159:   CTFxAve.cmp("SqEuclidean", im_M[n]) / norm
FIXER: lineno: 3165:   1.0/float(Cls['n'][k])
FIXER: lineno: 3169:   im_M[n].cmp("SqEuclidean",Cls['ave'][assign[n]])/norm
FIXER: lineno: 3216:  ni/(ni-1)
FIXER: lineno: 3216:  di/norm
FIXER: lineno: 3216:  nj/(nj+1)
FIXER: lineno: 3216:  dj/norm
FIXER: lineno: 3226:   (dJe[k] - mindJe) / scale
FIXER: lineno: 3251:   ctf[im][i] / valCTF[i]
FIXER: lineno: 3265:   ctf[im][i] / (Cls_ctf2[assign_to][i] + ctf2[im][i])
FIXER: lineno: 3280:   1.0/float(Cls['n'][assign_from]-1)
FIXER: lineno: 3285:   1.0/float(Cls['n'][assign_to]+1)
FIXER: lineno: 3316:   CTFxAve.cmp("SqEuclidean", im_M[n]) / norm
FIXER: lineno: 3323:   im_M[n].cmp("SqEuclidean",Cls['ave'][assign[n]]) / norm
FIXER: lineno: 3327:   abs(Je - old_Je) / Je
FIXER: lineno: 3358:   1.0 / float(Cls_ctf2[k][i])
FIXER: lineno: 3364:   CTFxAve.cmp("SqEuclidean", im_M[n]) / norm
FIXER: lineno: 3372:   1.0/float(Cls['n'][k])
FIXER: lineno: 3377:   im_M[n].cmp("SqEuclidean",Cls['ave'][assign[n]]) / norm
FIXER: lineno: 3445:   1.0/float(Cls['n'][k])
FIXER: lineno: 3807:   1.0 / float(Cls_ctf2[k][i])
FIXER: lineno: 3813:   CTFxAve.cmp("SqEuclidean", im_M[n]) / norm
FIXER: lineno: 3819:   1.0/float(Cls['n'][k])
FIXER: lineno: 3823:   im_M[n].cmp("SqEuclidean",Cls['ave'][assign[n]])/norm
FIXER: lineno: 3870:  ni/(ni-1)
FIXER: lineno: 3870:  di/norm
FIXER: lineno: 3870:  nj/(nj+1)
FIXER: lineno: 3870:  dj/norm
FIXER: lineno: 3880:   (dJe[k] - mindJe) / scale
FIXER: lineno: 3905:   ctf[im][i] / valCTF[i]
FIXER: lineno: 3919:   ctf[im][i] / (Cls_ctf2[assign_to][i] + ctf2[im][i])
FIXER: lineno: 3934:   1.0/float(Cls['n'][assign_from]-1)
FIXER: lineno: 3939:   1.0/float(Cls['n'][assign_to]+1)
FIXER: lineno: 3969:   CTFxAve.cmp("SqEuclidean", im_M[n]) / norm
FIXER: lineno: 3976:   im_M[n].cmp("SqEuclidean",Cls['ave'][assign[n]]) / norm
FIXER: lineno: 3980:   abs(Je - old_Je) / Je
FIXER: lineno: 4011:   1.0 / float(Cls_ctf2[k][i])
FIXER: lineno: 4017:   CTFxAve.cmp("SqEuclidean", im_M[n]) / norm
FIXER: lineno: 4025:   1.0/float(Cls['n'][k])
FIXER: lineno: 4030:   im_M[n].cmp("SqEuclidean",Cls['ave'][assign[n]]) / norm
FIXER: lineno: 4097:   1.0/float(Cls['n'][k])
FIXER: lineno: 4301:   1.0 / Cls_ctf2[k][i]
FIXER: lineno: 4307:   CTFxAve.cmp("SqEuclidean", im_M[im]) / norm
FIXER: lineno: 4320:   1.0/float(Cls['n'][k])
FIXER: lineno: 4323:   im_M[im].cmp("SqEuclidean", Cls['ave'][int(assign[im])])/norm
FIXER: lineno: 4376:  ni/(ni-1)
FIXER: lineno: 4376:  di/norm
FIXER: lineno: 4376:  nj/(nj+1)
FIXER: lineno: 4376:  dj/norm
FIXER: lineno: 4383:   (dJe[k] - mindJe) / scale
FIXER: lineno: 4448:   1.0 / float(Cls_ctf2[k][i])
FIXER: lineno: 4454:   CTFxAve.cmp("SqEuclidean", im_M[im]) / norm
FIXER: lineno: 4467:   1.0/float(Cls['n'][k])
FIXER: lineno: 4470:   im_M[im].cmp("SqEuclidean", Cls['ave'][int(assign[im])])/norm
FIXER: lineno: 4485:   abs(Je - old_Je) / Je
FIXER: lineno: 4562:   CTFxAve.cmp("SqEuclidean", im_M[im]) / norm
FIXER: lineno: 4581:   im_M[im].cmp("SqEuclidean", Cls['ave'][int(assign[im])])/norm
FIXER: lineno: 4600:   1.0/float(Cls['n'][k])
FIXER: lineno: 5157:   1 / d
FIXER: lineno: 5634:   time_run / 3600
FIXER: lineno: 5635:   (time_run % 3600) / 60
FIXER: lineno: 5803:   1.0 / float(Cls_ctf2[k][i])
FIXER: lineno: 5809:   CTFxAve.cmp("SqEuclidean", im_M[n]) / norm
FIXER: lineno: 5816:   1.0 / float(Cls['n'][k])
FIXER: lineno: 5820:   im_M[n].cmp("SqEuclidean",Cls['ave'][assign[n]])/norm
FIXER: lineno: 5828:  i/10.
FIXER: lineno: 5850:  ni/(ni-1)
FIXER: lineno: 5850:  di/norm
FIXER: lineno: 5850:  nj/(nj+1)
FIXER: lineno: 5850:  dj/norm
FIXER: lineno: 5857:   (dJe[k] - mindJe) / scale
FIXER: lineno: 6008:   1.0 / float(Cls_ctf2[k][i])
FIXER: lineno: 6022:   1.0/float(Cls['n'][k])
FIXER: lineno: 6029:  i/10.
FIXER: lineno: 6051:  ni/(ni-1)
FIXER: lineno: 6051:  di/norm
FIXER: lineno: 6051:  nj/(nj+1)
FIXER: lineno: 6051:  dj/norm
FIXER: lineno: 6058:   (dJe[k] - mindJe) / scale
FIXER: lineno: 6587:  sum(ST) / float(len(ST))
FIXER: lineno: 6742:  sum(ST) / float(len(ST))
FIXER: lineno: 6862:  float(nb_stb) / float(tot_gbl)
FIXER: lineno: 6954:   Nmax / 2
FIXER: lineno: 7090:   1.0 / float(nobjs)
FIXER: lineno: 7223:   (im - ret[0]) / ret[1]
FIXER: lineno: 7274:   sum(list_pix_err) / float(len(list_pix_err))
FIXER: lineno: 7399:   1.0 / float(len(asg))
FIXER: lineno: 7447:   (copy[n // 2 - 1] + copy[n // 2]) / 2.0
FIXER: lineno: 7454:   float(sum(numbers)) / float(len(numbers))
FIXER: lineno: 8190:  M/2
FIXER: lineno: 8192:   K/(2.*N)
FIXER: lineno: 8208:  ps[2]/2
FIXER: lineno: 8221:  ps[2]/2
FIXER: lineno: 8244:  ps[2]/2
FIXER: lineno: 8291:  ps[2]/2
FIXER: lineno: 8304:  ps[2]/2
FIXER: lineno: 8327:  ps[2]/2
FIXER: lineno: 8743:   1.0/snr
FIXER: lineno: 8743:   1.0/(ctf_2[k][i] + 1.0/snr)
FIXER: lineno: 8780:   1.0/snr
FIXER: lineno: 8780:   1.0/(ctf_2[k][i] + 1.0/snr)
FIXER: lineno: 8947:   vars/(len(vol_list)-1)
FIXER: lineno: 8955:   (fmaxi-fmini)/nbini
FIXER: lineno: 8956:   (fmaxj-fminj)/nbinj
FIXER: lineno: 8972:  (datai[k]-start_i)/binsize_i
FIXER: lineno: 8973:  (dataj[k]-start_j)/binsize_j
FIXER: lineno: 8985:   len(data)/10
FIXER: lineno: 8998:   (fmaxi-fmini)/float(nbin)
FIXER: lineno: 9008:  (d-start_i)/binsize_i
FIXER: lineno: 9026:   (Sxy * N - Sy * Sx)/det
FIXER: lineno: 9026:   (Sxx * Sy - Sx * Sxy)/det
FIXER: lineno: 9058:   (Sxy - Sx * Sy / N) / sqrt((Sxx - Sx*Sx/N)*(Syy - Sy*Sy/N))
FIXER: lineno: 9074:    av/N
FIXER: lineno: 9074:  (va - av*av/N)/float(N-1)
FIXER: lineno: 9246:   cpy1/nimg
FIXER: lineno: 9251:   self.sum1/self.nimg
FIXER: lineno: 9257:  float(self.nimg)/float(self.nimg-1)
FIXER: lineno: 9262:   self.sum1/self.nimg
FIXER: lineno: 9307:   sum1[i]/nimg
FIXER: lineno: 9308:   sum2[i]/nimg
FIXER: lineno: 9353:   self.sum1/self.nimg
FIXER: lineno: 9354:   self.sum2/self.nimg
FIXER: lineno: 9360:  float(self.nimg)/float(self.nimg-1)
FIXER: lineno: 9366:   self.sum1/self.nimg
FIXER: lineno: 9387:  (sqrt(1.0 + 8.0*len(d))-1.0)/2.0
FIXER: lineno: 9457:  (sqrt(1.0 + 8.0*nd)-1.0)/2.0
FIXER: lineno: 9461:   N/m
FIXER: lineno: 9643:   size/(self.ncov*4)
FIXER: lineno: 9692:   sumdata[:]/float(sumnimg)
FIXER: lineno: 9758:   float(eigval[j])/(self.nimg - 1)
FIXER: lineno: 9783:   v0[i]/beta
FIXER: lineno: 9813:   Av[i]/beta
FIXER: lineno: 10067:   v0[i]/beta
FIXER: lineno: 10099:   Av[i]/beta
FIXER: lineno: 10463:   len_match/np
FIXER: lineno: 10552:  (sgncrs[k] - copysign(1.0, ctf[k]))/crossresolution[2][k]
FILENAME:  ./sparx/libpy/user_functions.py
FIXER: lineno: 332:   1.0/stat[1]
FIXER: lineno: 419:   1.0/stat[1]
FIXER: lineno: 454:   1.0/stat[1]
FIXER: lineno: 490:   1.0/stat[1]
FIXER: lineno: 499:  ref_data[1][idum]/pwem[idum]
FIXER: lineno: 511:   1.0/stat[1]
FIXER: lineno: 539:   1.0/stat[1]
FIXER: lineno: 573:   1.0/stat[1]
FIXER: lineno: 578:   1.0/sqrt(2.*14.0)
FIXER: lineno: 629:   1.0/stat[1]
FIXER: lineno: 703:   reftab[j]/vtab[j]
FIXER: lineno: 747:   1.0/stat[1]
FIXER: lineno: 848:   1.0/stat[1]
FIXER: lineno: 869:  rt[i]/ro[i]
FIXER: lineno: 878:   1.0/stat[1]
FIXER: lineno: 915:   1.0/stat[1]
FIXER: lineno: 936:  rt[i]/ro[i]
FIXER: lineno: 945:   1.0/stat[1]
FIXER: lineno: 1036:  float(nx)/float(nxm)
FIXER: lineno: 1042:   1.0/stat[1]
FIXER: lineno: 1051:  rt[i]/ro[i]
FIXER: lineno: 1058:  ((i/y/Tracker["constants"]["pixel_size"])-0.10)/0.025
FIXER: lineno: 1058:  ((i/y/Tracker["constants"]["pixel_size"])-0.215)/0.025
FIXER: lineno: 1076:  ((i/y/Tracker["constants"]["pixel_size"])-0.10)/0.025
FIXER: lineno: 1076:  ((i/y/Tracker["constants"]["pixel_size"])-0.215)/0.025
FIXER: lineno: 1100:  float(lx)/float(nx)
FIXER: lineno: 1105:   1.0/stat[1]
FIXER: lineno: 1133:   1.0/stat[1]
FIXER: lineno: 1200:  float(nx)/float(nxm)
FIXER: lineno: 1223:  float(lx)/float(nx)
FIXER: lineno: 1228:   1.0/stat[1]
FIXER: lineno: 1256:   1.0/stat[1]
FIXER: lineno: 1324:  float(nx)/float(nxm)
FIXER: lineno: 1330:   1.0/stat[1]
FIXER: lineno: 1347:  float(lx)/float(nx)
FIXER: lineno: 1352:   1.0/stat[1]
FIXER: lineno: 1428:  float(nx)/float(nxm)
FIXER: lineno: 1434:   1.0/stat[1]
FILENAME:  ./sparx/libpy/utilities.py
FIXER: lineno: 166:   pavg[j]/nvar
FIXER: lineno: 169:   abs(pavg[i]-simplex[ssworst][i])/scale[i]
FIXER: lineno: 170:   simscale/nvar
FIXER: lineno: 173:   (abs(fvalue[ssbest])+abs(fvalue[ssworst]))/2.0
FIXER: lineno: 175:   abs(fvalue[ssbest]-fvalue[ssworst])/fscale
FIXER: lineno: 267:   pavg[j]/nvar
FIXER: lineno: 270:   abs(pavg[i]-simplex[ssworst][i])/scale[i]
FIXER: lineno: 271:   simscale/nvar
FIXER: lineno: 274:   (abs(fvalue[ssbest][0])+abs(fvalue[ssworst][0]))/2.0
FIXER: lineno: 276:   abs(fvalue[ssbest][0]-fvalue[ssworst][0])/fscale
FIXER: lineno: 495:  1.0/(5.0*5.0)
FIXER: lineno: 511:   x/n
FIXER: lineno: 512:   y/n
FIXER: lineno: 580:  pi/180.0
FIXER: lineno: 604:  nz/sqrt(norm)
FIXER: lineno: 802:   phi2/int(symmetry_string[1:])
FIXER: lineno: 807:   360.0/int(symmetry_string[1:])
FIXER: lineno: 809:   180.0/int(symmetry_string[1:])
FIXER: lineno: 817:   360.0/int(symmetry_string[1:])
FIXER: lineno: 846:  (90.0 - theta1)/theta2
FIXER: lineno: 1005:  len(temp)/3
FIXER: lineno: 1009:   3.6/s
FIXER: lineno: 1017:   delta/r
FIXER: lineno: 1046:   s/nima
FIXER: lineno: 1272:   .5/decimation
FIXER: lineno: 1274:   .5/decimation
FIXER: lineno: 1276:   (img.get_xsize())/int(decimation)
FIXER: lineno: 1277:   (img.get_ysize())/int(decimation)
FIXER: lineno: 1453:  (len(peaks)-1)/((ndim+1)*2)
FIXER: lineno: 1478:  nx/2
FIXER: lineno: 1482:  nx/2
FIXER: lineno: 1482:  ny/2
FIXER: lineno: 1487:  nx/2
FIXER: lineno: 1487:  ny/2
FIXER: lineno: 1487:  nz/2
FIXER: lineno: 1711:  len(m)/num
FIXER: lineno: 1712:  len(m)/num
FIXER: lineno: 1715:  len(m)/num
FIXER: lineno: 1716:  len(m)/num
FIXER: lineno: 1759:   (len(line)-end)/12
FIXER: lineno: 2052:  Pixel_size_interpolated/Pixel_size_current
FIXER: lineno: 2128:   len(ali_params_series)/5
FIXER: lineno: 2214:   time_run / 3600
FIXER: lineno: 2215:   (time_run % 3600) / 60
FIXER: lineno: 2222:   time_run / 3600
FIXER: lineno: 2223:   (time_run % 3600) / 60
FIXER: lineno: 2262:   (ntot-1) /count
FIXER: lineno: 2893:  int(img_head[8])/10000.0
FIXER: lineno: 2893:  int(img_head[9])/10000.0
FIXER: lineno: 2893:  int(img_head[10])/10000.0
FIXER: lineno: 3206:   (t-len(string))/2
FIXER: lineno: 3222:   (t-len(string))/2
FIXER: lineno: 3660:   360.0/int(sym[1:])
FIXER: lineno: 3861:  len(refdirs)/neighbors
FIXER: lineno: 3884:   360.0/nsym
FIXER: lineno: 3898:   360.0/nsym
FIXER: lineno: 3935:   360.0/nsym
FIXER: lineno: 3949:   360.0/nsym
FIXER: lineno: 4059:   len(temp)/3
FIXER: lineno: 4085:   len(temp)/3
FIXER: lineno: 4350:  N/img_per_grp
FIXER: lineno: 4535:   N/img_per_grp
FIXER: lineno: 4604:   (begin+end)/2
FIXER: lineno: 4624:   (begin+end)/2
FIXER: lineno: 4644:   (begin+end)/2
FIXER: lineno: 5070:   mpi_size/local_size
FIXER: lineno: 5129:   len(group_infos)/2
FIXER: lineno: 5175:   mpi_size/local_size
FIXER: lineno: 5183:   my_rank / no_of_processes_per_group
FIXER: lineno: 5204:   nproc / no_of_groups
FIXER: lineno: 5205:   myid / no_of_proc_per_group
FIXER: lineno: 5384:   nxinit/float(Tracker["constants"]["nnxo"])
FIXER: lineno: 6027:  float(nnxo)/float(nxinit)
FIXER: lineno: 6031:  index/shrinkage
FIXER: lineno: 6032:   index/shrinkage
FIXER: lineno: 6280:  avg_scores/(len(ptp)-1)
FIXER: lineno: 6323:   avg_two_ways/total_pop
FIXER: lineno: 6324:  avg_two_ways_square/total_pop
FIXER: lineno: 6471:  float(total_particles)/number_of_images_per_group
FIXER: lineno: 6538:  float(total_particles)/number_of_images_per_group
FIXER: lineno: 6579:    float(N_chunk0)/n
FIXER: lineno: 6579:   float(N_chunk1)/n
FIXER: lineno: 6599:  float(n2)/float(n1)
FIXER: lineno: 6599:  float(n2)/float(n1)
FIXER: lineno: 6604:   1.0/3.0
FIXER: lineno: 6658:    float(total_particles)/number_of_images_per_group
FIXER: lineno: 7067:  
			transZ / numpy.sqrt(transX**2 + transY**2 + transZ**2)
FIXER: lineno: 7099:   arrayRadius / float(particleNumber)
FIXER: lineno: 7151:  
					options.particle_radius / options.pixel_size
FIXER: lineno: 7179:   Util.bessel0(rr, radius, alpha)/normk
FILENAME:  ./sparx/templates/3dg.py
FILENAME:  ./sparx/templates/import_SPIDER_320.py
FILENAME:  ./sparx/templates/import_SPIDER_refi.py
FILENAME:  ./sparx/templates/install_sxpatch.py
FILENAME:  ./sparx/templates/randomize2d.py
FILENAME:  ./sparx/templates/search_ali3d.py
FILENAME:  ./sparx/templates/sxgui_template.py
FIXER: lineno: 289:   SXLookFeelConst.screen_height / 2
FIXER: lineno: 303:   SXLookFeelConst.sxmenu_item_btn_width / 10
FIXER: lineno: 397:   pictogram_width / 6
FIXER: lineno: 401:   pictogram_width / 6
FILENAME:  ./sparx/templates/wikiparser.py
FILENAME:  ./sparx/test/2DA/2da.py
FILENAME:  ./sparx/test/2DA/2db.py
FIXER: lineno: 114:  nx/2
FIXER: lineno: 139:   temp/nima
FIXER: lineno: 152:   temp/nima
FILENAME:  ./sparx/test/2DA/2de.py
FIXER: lineno: 99:   temp/nima
FIXER: lineno: 113:   temp/nima
FILENAME:  ./sparx/test/3DA/3da.py
FIXER: lineno: 64:   720/nangles
FILENAME:  ./sparx/test/3DA/3db.py
FILENAME:  ./sparx/test/3DA/3de.py
FILENAME:  ./sparx/test/3DA/3dg.py
FILENAME:  ./sparx/test/3DA/rec2d_test.py
FIXER: lineno: 22:   180.0/nangle
FILENAME:  ./sparx/test/3dg.py
FIXER: lineno: 49:   i/2
FIXER: lineno: 119:  (cp1+cp2)/2
FIXER: lineno: 144:  (cp1+cp3)/2
FILENAME:  ./sparx/test/aaa.py
FIXER: lineno: 134:   inorm/snorm
FIXER: lineno: 134:   inorm/tnorm
FIXER: lineno: 134:   inorm/gnorm
FILENAME:  ./sparx/test/aab.py
FIXER: lineno: 90:   fc/0.5
FILENAME:  ./sparx/test/aac.py
FILENAME:  ./sparx/test/aad.py
FIXER: lineno: 60:   N/Kt
FILENAME:  ./sparx/test/aae.py
FIXER: lineno: 58:  i/100.0
FILENAME:  ./sparx/test/aaf.py
FIXER: lineno: 52:  (e-stat[0])/stat[1]
FIXER: lineno: 62:  ix/20.0
FIXER: lineno: 63:  iy/10.0
FIXER: lineno: 64:  i/10.0
FILENAME:  ./sparx/test/aag.py
FIXER: lineno: 26:  sums**2/n
FIXER: lineno: 26:  (sums2-sums**2/n)/(n-1.0)
FIXER: lineno: 27:  sums/n
FIXER: lineno: 27:   (am-sums/n)/a
FIXER: lineno: 34:  aiq/1000.
FIXER: lineno: 34:  aiq**2/1000.
FIXER: lineno: 34:  (viq-aiq**2/1000.)/(1000.-1.0)
FILENAME:  ./sparx/test/aah.py
FIXER: lineno: 19:   M/2
FIXER: lineno: 21:   K/(2.*N)
FIXER: lineno: 125:  i/float(ns)
FIXER: lineno: 125:  j/float(ns)
FIXER: lineno: 129:  i/float(ns)
FIXER: lineno: 130:  j/float(ns)
FIXER: lineno: 198:  i/float(ns)
FIXER: lineno: 198:  j/float(ns)
FIXER: lineno: 202:  i/float(ns)
FIXER: lineno: 203:  j/float(ns)
FIXER: lineno: 284:  i/float(ns)
FIXER: lineno: 284:  j/float(ns)
FIXER: lineno: 289:  i/float(ns)
FIXER: lineno: 290:  j/float(ns)
FILENAME:  ./sparx/test/aat.py
FILENAME:  ./sparx/test/apmq.py
FILENAME:  ./sparx/test/fourp.py
FILENAME:  ./sparx/test/kbplot2.py
FIXER: lineno: 47:  M/2
FIXER: lineno: 56:   K/2
FIXER: lineno: 57:  x/N
FIXER: lineno: 63:  M/2
FIXER: lineno: 74:   N/2
FIXER: lineno: 82:   1./N
FIXER: lineno: 84:  N/2
FIXER: lineno: 89:   val/efft.get_value_at(0,0,0)
FIXER: lineno: 97:   edeconv.get_value_at(ix, 0, 0)/edeconv.get_value_at(0,0,0)
FIXER: lineno: 111:   1./N
FIXER: lineno: 128:   val/backft.get_value_at(0,0,0)
FILENAME:  ./sparx/test/main_example.py
FILENAME:  ./sparx/test/ormq.py
FILENAME:  ./sparx/test/pdb_1.py
FILENAME:  ./sparx/test/phasing.py
FILENAME:  ./sparx/test/polar.py
FIXER: lineno: 108:  M/2
FIXER: lineno: 110:   K/(2.*N)
FILENAME:  ./sparx/test/sinh.py
FIXER: lineno: 45:  M/2
FILENAME:  ./sparx/test/test_ft.py
FILENAME:  ./sparx/test/test_pw.py
FILENAME:  ./sparx/test/test_scripts/test_rot.py
FILENAME:  ./sparx/tests/test_fundamentals.py
FIXER: lineno: 80:   anx/2
FIXER: lineno: 80:   any/2
FIXER: lineno: 80:   anz/2
FIXER: lineno: 92:   anx/2
FIXER: lineno: 93:   any/2
FIXER: lineno: 94:   anz/2
FIXER: lineno: 97:   (x_center * 1.0) / (anx - x_center)
FIXER: lineno: 100:   (y_center * 1.0) / (any - y_center)
FIXER: lineno: 103:   (z_center * 1.0) / (anz - z_center)
FIXER: lineno: 118:   abs(A.get_value_at(x,y,z)) / 100.0
FIXER: lineno: 158:   nx/2
FIXER: lineno: 158:   ny/3
FIXER: lineno: 158:   nz/5
FILENAME:  ./sparx/tests/test_pixel_error.py
FIXER: lineno: 54:   len(a1) / 4
FIXER: lineno: 83:   (GT1_alpha + GT2_alpha) / 2
FIXER: lineno: 84:   (GT1_tx    + GT2_tx   ) / 2
FIXER: lineno: 85:   (GT1_ty    + GT2_ty   ) / 2
FIXER: lineno: 92:   (GT1_tx - GT2_tx)**2 / 2
FIXER: lineno: 93:   (GT1_ty - GT2_ty)**2 / 2
FIXER: lineno: 94:  d/2
FIXER: lineno: 94:   sqrt(sum_sin**2 + sum_cos**2) / 2
FIXER: lineno: 128:   len(T1) / 3
FIXER: lineno: 145:   len(T1) / 3
FILENAME:  ./sparx/tests/test_Util.py
FILENAME:  ./tests/test_EMAN2DIR.py
FILENAME:  ./tests/test_imports.py
FILENAME:  ./tests/test_imports_inner.py
